
nrf24l10p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd00  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800bfac  0800bfac  0001bfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c050  0800c050  0001c050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c058  0800c058  0001c058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c05c  0800c05c  0001c05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  0800c060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000458  24000018  0800c078  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000470  0800c078  00020470  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002cd96  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003acc  00000000  00000000  0004cddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019c8  00000000  00000000  000508a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018c0  00000000  00000000  00052270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003466c  00000000  00000000  00053b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e431  00000000  00000000  0008819c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162285  00000000  00000000  000a65cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00208852  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000071d4  00000000  00000000  002088a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000018 	.word	0x24000018
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800bf94 	.word	0x0800bf94

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400001c 	.word	0x2400001c
 80002e8:	0800bf94 	.word	0x0800bf94

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <CS_Select>:
#define NRF24_CSN_PORT   GPIOD
#define NRF24_CSN_PIN    GPIO_PIN_15


void CS_Select (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <CS_Select+0x14>)
 80005f0:	f004 ff1e 	bl	8005430 <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	58020c00 	.word	0x58020c00

080005fc <CS_UnSelect>:

void CS_UnSelect (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <CS_UnSelect+0x14>)
 8000608:	f004 ff12 	bl	8005430 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	58020c00 	.word	0x58020c00

08000614 <CE_Enable>:


void CE_Enable (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <CE_Enable+0x14>)
 8000620:	f004 ff06 	bl	8005430 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58020c00 	.word	0x58020c00

0800062c <CE_Disable>:

void CE_Disable (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <CE_Disable+0x14>)
 8000638:	f004 fefa 	bl	8005430 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58020c00 	.word	0x58020c00

08000644 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	b2db      	uxtb	r3, r3
 800065c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000662:	f7ff ffbf 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	2202      	movs	r2, #2
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <nrf24_WriteReg+0x40>)
 8000672:	f008 f891 	bl	8008798 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000676:	f7ff ffc1 	bl	80005fc <CS_UnSelect>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000324 	.word	0x24000324

08000688 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	b2db      	uxtb	r3, r3
 800069e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006a0:	f7ff ffa0 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80006a4:	f107 0114 	add.w	r1, r7, #20
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006ae:	f008 f873 	bl	8008798 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006be:	f008 f86b 	bl	8008798 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006c2:	f7ff ff9b 	bl	80005fc <CS_UnSelect>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	24000324 	.word	0x24000324

080006d4 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006e2:	f7ff ff7f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80006e6:	1df9      	adds	r1, r7, #7
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4808      	ldr	r0, [pc, #32]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006ee:	f008 f853 	bl	8008798 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80006f2:	f107 010f 	add.w	r1, r7, #15
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2201      	movs	r2, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006fc:	f008 fa3e 	bl	8008b7c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000700:	f7ff ff7c 	bl	80005fc <CS_UnSelect>

	return data;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	24000324 	.word	0x24000324

08000714 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000722:	f7ff ff5f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000726:	f107 010f 	add.w	r1, r7, #15
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	2201      	movs	r2, #1
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000730:	f008 f832 	bl	8008798 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b29a      	uxth	r2, r3
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000740:	f008 fa1c 	bl	8008b7c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000744:	f7ff ff5a 	bl	80005fc <CS_UnSelect>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	24000324 	.word	0x24000324

08000754 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800075e:	f7ff ff41 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <nrfsendCmd+0x28>)
 800076a:	f008 f815 	bl	8008798 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800076e:	f7ff ff45 	bl	80005fc <CS_UnSelect>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	24000324 	.word	0x24000324

08000780 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b07      	cmp	r3, #7
 800078e:	d104      	bne.n	800079a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000790:	2100      	movs	r1, #0
 8000792:	2007      	movs	r0, #7
 8000794:	f7ff ff56 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000798:	e090      	b.n	80008bc <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b17      	cmp	r3, #23
 800079e:	d104      	bne.n	80007aa <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80007a0:	2111      	movs	r1, #17
 80007a2:	2017      	movs	r0, #23
 80007a4:	f7ff ff4e 	bl	8000644 <nrf24_WriteReg>
}
 80007a8:	e088      	b.n	80008bc <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80007aa:	2108      	movs	r1, #8
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff49 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80007b2:	213f      	movs	r1, #63	; 0x3f
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff45 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80007ba:	2103      	movs	r1, #3
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ff41 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80007c2:	2103      	movs	r1, #3
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff ff3d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80007ca:	2103      	movs	r1, #3
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff ff39 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80007d2:	2102      	movs	r1, #2
 80007d4:	2005      	movs	r0, #5
 80007d6:	f7ff ff35 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80007da:	210e      	movs	r1, #14
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff ff31 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2007      	movs	r0, #7
 80007e6:	f7ff ff2d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff29 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2009      	movs	r0, #9
 80007f6:	f7ff ff25 	bl	8000644 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007fa:	4a32      	ldr	r2, [pc, #200]	; (80008c4 <nrf24_reset+0x144>)
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	3304      	adds	r3, #4
 8000808:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2205      	movs	r2, #5
 8000810:	4619      	mov	r1, r3
 8000812:	200a      	movs	r0, #10
 8000814:	f7ff ff38 	bl	8000688 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000818:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <nrf24_reset+0x148>)
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000822:	6018      	str	r0, [r3, #0]
 8000824:	3304      	adds	r3, #4
 8000826:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2205      	movs	r2, #5
 800082e:	4619      	mov	r1, r3
 8000830:	200b      	movs	r0, #11
 8000832:	f7ff ff29 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000836:	21c3      	movs	r1, #195	; 0xc3
 8000838:	200c      	movs	r0, #12
 800083a:	f7ff ff03 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800083e:	21c4      	movs	r1, #196	; 0xc4
 8000840:	200d      	movs	r0, #13
 8000842:	f7ff feff 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000846:	21c5      	movs	r1, #197	; 0xc5
 8000848:	200e      	movs	r0, #14
 800084a:	f7ff fefb 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800084e:	21c6      	movs	r1, #198	; 0xc6
 8000850:	200f      	movs	r0, #15
 8000852:	f7ff fef7 	bl	8000644 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000856:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <nrf24_reset+0x144>)
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000860:	6018      	str	r0, [r3, #0]
 8000862:	3304      	adds	r3, #4
 8000864:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2205      	movs	r2, #5
 800086c:	4619      	mov	r1, r3
 800086e:	2010      	movs	r0, #16
 8000870:	f7ff ff0a 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	2011      	movs	r0, #17
 8000878:	f7ff fee4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2012      	movs	r0, #18
 8000880:	f7ff fee0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2013      	movs	r0, #19
 8000888:	f7ff fedc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	2014      	movs	r0, #20
 8000890:	f7ff fed8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000894:	2100      	movs	r1, #0
 8000896:	2015      	movs	r0, #21
 8000898:	f7ff fed4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2016      	movs	r0, #22
 80008a0:	f7ff fed0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80008a4:	2111      	movs	r1, #17
 80008a6:	2017      	movs	r0, #23
 80008a8:	f7ff fecc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f7ff fec8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	201d      	movs	r0, #29
 80008b8:	f7ff fec4 	bl	8000644 <nrf24_WriteReg>
}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	0800bfac 	.word	0x0800bfac
 80008c8:	0800bfb4 	.word	0x0800bfb4

080008cc <NRF24_Init>:




void NRF24_Init (void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80008d0:	f7ff feac 	bl	800062c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff53 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80008da:	2100      	movs	r1, #0
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff feb1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80008e2:	2100      	movs	r1, #0
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fead 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80008ea:	2100      	movs	r1, #0
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff fea9 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80008f2:	2103      	movs	r1, #3
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff fea5 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80008fa:	2100      	movs	r1, #0
 80008fc:	2004      	movs	r0, #4
 80008fe:	f7ff fea1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000902:	2100      	movs	r1, #0
 8000904:	2005      	movs	r0, #5
 8000906:	f7ff fe9d 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800090a:	210e      	movs	r1, #14
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff fe99 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000912:	f7ff fe7f 	bl	8000614 <CE_Enable>

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000926:	f7ff fe81 	bl	800062c <CE_Disable>

	nrf24_reset (STATUS);
 800092a:	2007      	movs	r0, #7
 800092c:	f7ff ff28 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	4619      	mov	r1, r3
 8000934:	2005      	movs	r0, #5
 8000936:	f7ff fe85 	bl	8000644 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff feca 	bl	80006d4 <nrf24_ReadReg>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4619      	mov	r1, r3
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fe77 	bl	8000644 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000956:	2205      	movs	r2, #5
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	200b      	movs	r0, #11
 800095c:	f7ff fe94 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000960:	21ee      	movs	r1, #238	; 0xee
 8000962:	200c      	movs	r0, #12
 8000964:	f7ff fe6e 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000968:	2120      	movs	r1, #32
 800096a:	2013      	movs	r0, #19
 800096c:	f7ff fe6a 	bl	8000644 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff feaf 	bl	80006d4 <nrf24_ReadReg>
 8000976:	4603      	mov	r3, r0
 8000978:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	f043 0303 	orr.w	r3, r3, #3
 8000980:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	4619      	mov	r1, r3
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fe5c 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800098c:	f7ff fe42 	bl	8000614 <CE_Enable>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80009a0:	2007      	movs	r0, #7
 80009a2:	f7ff fe97 	bl	80006d4 <nrf24_ReadReg>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00b      	beq.n	80009cc <isDataAvailable+0x34>
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	2007      	movs	r0, #7
 80009c4:	f7ff fe3e 	bl	8000644 <nrf24_WriteReg>

		return 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <isDataAvailable+0x36>
	}

	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80009e4:	f7ff fdfe 	bl	80005e4 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80009e8:	2361      	movs	r3, #97	; 0x61
 80009ea:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80009ec:	f107 010f 	add.w	r1, r7, #15
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2201      	movs	r2, #1
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <NRF24_Receive+0x50>)
 80009f6:	f007 fecf 	bl	8008798 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	2220      	movs	r2, #32
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <NRF24_Receive+0x50>)
 8000a04:	f008 f8ba 	bl	8008b7c <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000a08:	f7ff fdf8 	bl	80005fc <CS_UnSelect>

	HAL_Delay(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f002 f9eb 	bl	8002de8 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000a12:	23e2      	movs	r3, #226	; 0xe2
 8000a14:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe9b 	bl	8000754 <nrfsendCmd>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000324 	.word	0x24000324

08000a2c <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e00c      	b.n	8000a54 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	b2d9      	uxtb	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	18d4      	adds	r4, r2, r3
 8000a44:	4608      	mov	r0, r1
 8000a46:	f7ff fe45 	bl	80006d4 <nrf24_ReadReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b09      	cmp	r3, #9
 8000a58:	ddef      	ble.n	8000a3a <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	330a      	adds	r3, #10
 8000a5e:	2205      	movs	r2, #5
 8000a60:	4619      	mov	r1, r3
 8000a62:	200a      	movs	r0, #10
 8000a64:	f7ff fe56 	bl	8000714 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	330f      	adds	r3, #15
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	4619      	mov	r1, r3
 8000a70:	200b      	movs	r0, #11
 8000a72:	f7ff fe4f 	bl	8000714 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0414 	add.w	r4, r3, #20
 8000a7c:	200c      	movs	r0, #12
 8000a7e:	f7ff fe29 	bl	80006d4 <nrf24_ReadReg>
 8000a82:	4603      	mov	r3, r0
 8000a84:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f103 0415 	add.w	r4, r3, #21
 8000a8c:	200d      	movs	r0, #13
 8000a8e:	f7ff fe21 	bl	80006d4 <nrf24_ReadReg>
 8000a92:	4603      	mov	r3, r0
 8000a94:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f103 0416 	add.w	r4, r3, #22
 8000a9c:	200e      	movs	r0, #14
 8000a9e:	f7ff fe19 	bl	80006d4 <nrf24_ReadReg>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f103 0417 	add.w	r4, r3, #23
 8000aac:	200f      	movs	r0, #15
 8000aae:	f7ff fe11 	bl	80006d4 <nrf24_ReadReg>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	2205      	movs	r2, #5
 8000abc:	4619      	mov	r1, r3
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f7ff fe28 	bl	8000714 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000ac4:	231d      	movs	r3, #29
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	e00e      	b.n	8000ae8 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	3b0c      	subs	r3, #12
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	18d4      	adds	r4, r2, r3
 8000ad8:	4608      	mov	r0, r1
 8000ada:	f7ff fdfb 	bl	80006d4 <nrf24_ReadReg>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b25      	cmp	r3, #37	; 0x25
 8000aec:	dded      	ble.n	8000aca <NRF24_ReadAll+0x9e>
	}

}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <HAL_FDCAN_RxFifo0Callback>:
uint8_t RxData_From_Node3[16];
uint8_t RxData_From_Node1[16];
uint8_t RxData_From_Node4[8];

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d10f      	bne.n	8000b2c <HAL_FDCAN_RxFifo0Callback+0x34>
   {
	  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00a      	beq.n	8000b2c <HAL_FDCAN_RxFifo0Callback+0x34>
	  {

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node3) != HAL_OK)
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000b18:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f003 fc75 	bl	800440c <HAL_FDCAN_GetRxMessage>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_FDCAN_RxFifo0Callback+0x34>
		{
		Error_Handler();
 8000b28:	f001 fd32 	bl	8002590 <Error_Handler>
		}

	  }
   }

 }//choumpa jodo
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	4000a000 	.word	0x4000a000
 8000b38:	24000314 	.word	0x24000314
 8000b3c:	24000424 	.word	0x24000424

08000b40 <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <HAL_FDCAN_RxFifo1Callback+0x3c>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d10f      	bne.n	8000b74 <HAL_FDCAN_RxFifo1Callback+0x34>
   {
	  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00a      	beq.n	8000b74 <HAL_FDCAN_RxFifo1Callback+0x34>
	  {
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData_From_Node1) != HAL_OK)
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_FDCAN_RxFifo1Callback+0x40>)
 8000b60:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_FDCAN_RxFifo1Callback+0x44>)
 8000b62:	2141      	movs	r1, #65	; 0x41
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f003 fc51 	bl	800440c <HAL_FDCAN_GetRxMessage>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_FDCAN_RxFifo1Callback+0x34>
		{
		Error_Handler();
 8000b70:	f001 fd0e 	bl	8002590 <Error_Handler>
		}

	  }
   }
 }//rider
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	4000a000 	.word	0x4000a000
 8000b80:	2400012c 	.word	0x2400012c
 8000b84:	24000424 	.word	0x24000424

08000b88 <HAL_FDCAN_RxBufferNewMessageCallback>:
void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

    if (FDCAN1 == hfdcan->Instance)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_FDCAN_RxBufferNewMessageCallback+0x30>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10a      	bne.n	8000bb0 <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
    {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_BUFFER0, &RxHeader, RxData_From_Node4) != HAL_OK)
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_FDCAN_RxBufferNewMessageCallback+0x34>)
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_FDCAN_RxBufferNewMessageCallback+0x38>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f003 fc33 	bl	800440c <HAL_FDCAN_GetRxMessage>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
        {
            Error_Handler();
 8000bac:	f001 fcf0 	bl	8002590 <Error_Handler>
        }
    }

}//raspi
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	4000a000 	.word	0x4000a000
 8000bbc:	24000054 	.word	0x24000054
 8000bc0:	24000424 	.word	0x24000424

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ce      	sub	sp, #312	; 0x138
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bca:	f002 f87b 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bce:	f000 ff7f 	bl	8001ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd2:	f001 fbcb 	bl	800236c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bd6:	f001 f977 	bl	8001ec8 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000bda:	f001 fb7b 	bl	80022d4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000bde:	f001 f9c9 	bl	8001f74 <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000be2:	f001 f863 	bl	8001cac <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000be6:	f001 fa89 	bl	80020fc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000bea:	f000 ffe7 	bl	8001bbc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000bee:	f001 fafb 	bl	80021e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//////////////nrf///////////
  NRF24_Init();
 8000bf2:	f7ff fe6b 	bl	80008cc <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);//nrf rx
 8000bf6:	210a      	movs	r1, #10
 8000bf8:	48b5      	ldr	r0, [pc, #724]	; (8000ed0 <main+0x30c>)
 8000bfa:	f7ff fe8e 	bl	800091a <NRF24_RxMode>
  NRF24_ReadAll(data);//nrf rx
 8000bfe:	48b5      	ldr	r0, [pc, #724]	; (8000ed4 <main+0x310>)
 8000c00:	f7ff ff14 	bl	8000a2c <NRF24_ReadAll>
////////////////////////////

////////////motor///////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//motor back1
 8000c04:	2100      	movs	r1, #0
 8000c06:	48b4      	ldr	r0, [pc, #720]	; (8000ed8 <main+0x314>)
 8000c08:	f008 fe38 	bl	800987c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//motor back2
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	48b2      	ldr	r0, [pc, #712]	; (8000ed8 <main+0x314>)
 8000c10:	f008 fe34 	bl	800987c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//motor front
 8000c14:	2108      	movs	r1, #8
 8000c16:	48b0      	ldr	r0, [pc, #704]	; (8000ed8 <main+0x314>)
 8000c18:	f008 fe30 	bl	800987c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,1);//motor enable1
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c22:	48ae      	ldr	r0, [pc, #696]	; (8000edc <main+0x318>)
 8000c24:	f004 fc04 	bl	8005430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//motor enable2
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2e:	48ac      	ldr	r0, [pc, #688]	; (8000ee0 <main+0x31c>)
 8000c30:	f004 fbfe 	bl	8005430 <HAL_GPIO_WritePin>
////////////////////////////

///////////jodo///////////
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//led jodo
 8000c34:	2100      	movs	r1, #0
 8000c36:	48ab      	ldr	r0, [pc, #684]	; (8000ee4 <main+0x320>)
 8000c38:	f008 fe20 	bl	800987c <HAL_TIM_PWM_Start>
//////////jodo////////////



//////////////buzzer/////////
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	48aa      	ldr	r0, [pc, #680]	; (8000ee8 <main+0x324>)
 8000c40:	f008 fe1c 	bl	800987c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isDataAvailable(2) == 1)
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fea7 	bl	8000998 <isDataAvailable>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d102      	bne.n	8000c56 <main+0x92>
	  {
		  NRF24_Receive(RxData);
 8000c50:	48a6      	ldr	r0, [pc, #664]	; (8000eec <main+0x328>)
 8000c52:	f7ff fec1 	bl	80009d8 <NRF24_Receive>
	  }




	  for(int i=0;i<11;i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000c5c:	e013      	b.n	8000c86 <main+0xc2>
	  {a[i]=RxData_From_Node3[i]-'0';}
 8000c5e:	4aa4      	ldr	r2, [pc, #656]	; (8000ef0 <main+0x32c>)
 8000c60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000c6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8000c76:	440b      	add	r3, r1
 8000c78:	f843 2cd8 	str.w	r2, [r3, #-216]
	  for(int i=0;i<11;i++)
 8000c7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c80:	3301      	adds	r3, #1
 8000c82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000c86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000c8a:	2b0a      	cmp	r3, #10
 8000c8c:	dde7      	ble.n	8000c5e <main+0x9a>

	  for(int j=0;j<3;j++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000c94:	e013      	b.n	8000cbe <main+0xfa>
	  {b[j]=RxData_From_Node1[j]-'0';}
 8000c96:	4a97      	ldr	r2, [pc, #604]	; (8000ef4 <main+0x330>)
 8000c98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000ca4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8000cae:	440b      	add	r3, r1
 8000cb0:	f843 2ce0 	str.w	r2, [r3, #-224]
	  for(int j=0;j<3;j++)
 8000cb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000cbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	dde7      	ble.n	8000c96 <main+0xd2>

	  int Distance1 = 100* a[1]  +10*a[2] +a[3];
 8000cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cc8:	2264      	movs	r2, #100	; 0x64
 8000cca:	fb02 f103 	mul.w	r1, r2, r3
 8000cce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	18ca      	adds	r2, r1, r3
 8000cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cdc:	4413      	add	r3, r2
 8000cde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  int Distance2 = 100* a[4]  +10*a[5] +a[6];
 8000ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ce4:	2264      	movs	r2, #100	; 0x64
 8000ce6:	fb02 f103 	mul.w	r1, r2, r3
 8000cea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	18ca      	adds	r2, r1, r3
 8000cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000cf8:	4413      	add	r3, r2
 8000cfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  int Distance3 = 100* a[8]  +10*a[9] +a[10];
 8000cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d02:	2264      	movs	r2, #100	; 0x64
 8000d04:	fb02 f103 	mul.w	r1, r2, r3
 8000d08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	18ca      	adds	r2, r1, r3
 8000d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d1a:	4413      	add	r3, r2
 8000d1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  int Distance4 = 100* b[0]  +10*b[1] +b[2];//rider
 8000d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d22:	2264      	movs	r2, #100	; 0x64
 8000d24:	fb02 f103 	mul.w	r1, r2, r3
 8000d28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	18ca      	adds	r2, r1, r3
 8000d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d36:	4413      	add	r3, r2
 8000d38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
//	  HAL_Delay(500);
//	  TIM2->CCR1 = 0;
//	  HAL_Delay(100);
//	  }

      if (Distance1 <= 15 || Distance2 <= 15 || Distance3 <= 15)
 8000d3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	dd07      	ble.n	8000d54 <main+0x190>
 8000d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	dd03      	ble.n	8000d54 <main+0x190>
 8000d4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	dc15      	bgt.n	8000d80 <main+0x1bc>
      {
	 	  TIM2->ARR = C;
 8000d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d58:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
	 	  TIM2->CCR1 = TIM2->ARR / 2;
 8000d5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d68:	085b      	lsrs	r3, r3, #1
 8000d6a:	6353      	str	r3, [r2, #52]	; 0x34
	 	  HAL_Delay(50);
 8000d6c:	2032      	movs	r0, #50	; 0x32
 8000d6e:	f002 f83b 	bl	8002de8 <HAL_Delay>
	 	  TIM2->CCR1 = 0;
 8000d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(50);
 8000d7a:	2032      	movs	r0, #50	; 0x32
 8000d7c:	f002 f834 	bl	8002de8 <HAL_Delay>
	 	  }


 /////////////jodo///////////////

 for(int l=12;l<=14;l++)
 8000d80:	230c      	movs	r3, #12
 8000d82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000d86:	e013      	b.n	8000db0 <main+0x1ec>
 {a[l]=RxData_From_Node3[l]-'0';}
 8000d88:	4a59      	ldr	r2, [pc, #356]	; (8000ef0 <main+0x32c>)
 8000d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d8e:	4413      	add	r3, r2
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8000da0:	440b      	add	r3, r1
 8000da2:	f843 2cd8 	str.w	r2, [r3, #-216]
 for(int l=12;l<=14;l++)
 8000da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000daa:	3301      	adds	r3, #1
 8000dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000db4:	2b0e      	cmp	r3, #14
 8000db6:	dde7      	ble.n	8000d88 <main+0x1c4>
 int jodo = 100* a[12]  +10*a[13] +a[14];
 8000db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dbc:	2264      	movs	r2, #100	; 0x64
 8000dbe:	fb02 f103 	mul.w	r1, r2, r3
 8000dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	18ca      	adds	r2, r1, r3
 8000dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000dd4:	4413      	add	r3, r2
 8000dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      htim3.Instance->CCR1=jodo;
 8000dda:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <main+0x320>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34
      if (jodo<45)
 8000de4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000de8:	2b2c      	cmp	r3, #44	; 0x2c
 8000dea:	dc03      	bgt.n	8000df4 <main+0x230>
      {
    	  htim3.Instance->CCR1=0;
 8000dec:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <main+0x320>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34


/////////////////////////////////////////////////////
      ///////////////go and back /////////////////

      						if(RxData[2]==0)
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <main+0x328>)
 8000df6:	789b      	ldrb	r3, [r3, #2]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d12c      	bne.n	8000e56 <main+0x292>
      							  {
      							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e02:	483d      	ldr	r0, [pc, #244]	; (8000ef8 <main+0x334>)
 8000e04:	f004 fb14 	bl	8005430 <HAL_GPIO_WritePin>
      							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	4834      	ldr	r0, [pc, #208]	; (8000ee0 <main+0x31c>)
 8000e0e:	f004 fb0f 	bl	8005430 <HAL_GPIO_WritePin>
      							  htim1.Instance->CCR1=RxData[0];
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <main+0x328>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <main+0x314>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
      							  htim1.Instance->CCR2=RxData[0];
 8000e1c:	4b33      	ldr	r3, [pc, #204]	; (8000eec <main+0x328>)
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <main+0x314>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38
      							  if(RxData[0]>=100)
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <main+0x328>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b63      	cmp	r3, #99	; 0x63
 8000e2c:	d907      	bls.n	8000e3e <main+0x27a>
      								  {
      									  htim1.Instance->CCR1=99;
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <main+0x314>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2263      	movs	r2, #99	; 0x63
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
      									  htim1.Instance->CCR2=99;
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <main+0x314>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2263      	movs	r2, #99	; 0x63
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38
      								  }
      							  //////////////ridar///////////////
      							  	  if(Distance4<=20)
 8000e3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e42:	2b14      	cmp	r3, #20
 8000e44:	dc07      	bgt.n	8000e56 <main+0x292>
      							  	  {
      							  		  htim1.Instance->CCR1=0;
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <main+0x314>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	635a      	str	r2, [r3, #52]	; 0x34
      							  		  htim1.Instance->CCR2=0;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <main+0x314>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2200      	movs	r2, #0
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
      							  	  }

      							  }
      						  if(RxData[2]==1)
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <main+0x328>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d12c      	bne.n	8000eb8 <main+0x2f4>
      							  {
      							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e64:	4824      	ldr	r0, [pc, #144]	; (8000ef8 <main+0x334>)
 8000e66:	f004 fae3 	bl	8005430 <HAL_GPIO_WritePin>
      							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <main+0x31c>)
 8000e70:	f004 fade 	bl	8005430 <HAL_GPIO_WritePin>
      							  htim1.Instance->CCR1=RxData[0];
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <main+0x328>)
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <main+0x314>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
      							  htim1.Instance->CCR2=RxData[0];
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <main+0x328>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <main+0x314>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	639a      	str	r2, [r3, #56]	; 0x38
      							  if(RxData[0]>=100)
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <main+0x328>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b63      	cmp	r3, #99	; 0x63
 8000e8e:	d907      	bls.n	8000ea0 <main+0x2dc>
      								  {
      									  htim1.Instance->CCR1=99;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <main+0x314>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2263      	movs	r2, #99	; 0x63
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
      									  htim1.Instance->CCR2=99;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <main+0x314>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2263      	movs	r2, #99	; 0x63
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
      								  }
      							  //////////////ridar///////////////
      							  	  if(Distance4<=20)
 8000ea0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ea4:	2b14      	cmp	r3, #20
 8000ea6:	dc07      	bgt.n	8000eb8 <main+0x2f4>
      							  	  {
      							  		  htim1.Instance->CCR1=0;
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <main+0x314>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
      							  		  htim1.Instance->CCR2=0;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <main+0x314>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	639a      	str	r2, [r3, #56]	; 0x38
      ////////////////////////////////////////////////////
///////////////////////nrf networking and direction//////////////////



	if(RxData[3]==0)
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <main+0x328>)
 8000eba:	78db      	ldrb	r3, [r3, #3]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f040 82f8 	bne.w	80014b2 <main+0x8ee>
	{
			  if (RxData[1]  <=40)
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <main+0x328>)
 8000ec4:	785b      	ldrb	r3, [r3, #1]
 8000ec6:	2b28      	cmp	r3, #40	; 0x28
 8000ec8:	f200 817a 	bhi.w	80011c0 <main+0x5fc>
				  {
					  while (RxData[1]  <= 40)
 8000ecc:	e173      	b.n	80011b6 <main+0x5f2>
 8000ece:	bf00      	nop
 8000ed0:	24000000 	.word	0x24000000
 8000ed4:	24000290 	.word	0x24000290
 8000ed8:	240002c4 	.word	0x240002c4
 8000edc:	58021400 	.word	0x58021400
 8000ee0:	58020000 	.word	0x58020000
 8000ee4:	2400013c 	.word	0x2400013c
 8000ee8:	240003b4 	.word	0x240003b4
 8000eec:	240003ac 	.word	0x240003ac
 8000ef0:	24000314 	.word	0x24000314
 8000ef4:	2400012c 	.word	0x2400012c
 8000ef8:	58021000 	.word	0x58021000
					  {
						  int a[14];
						  int b[2];

						  int Distance1 = 100* a[1]  +10*a[2] +a[3];
 8000efc:	463b      	mov	r3, r7
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2264      	movs	r2, #100	; 0x64
 8000f02:	fb02 f103 	mul.w	r1, r2, r3
 8000f06:	463b      	mov	r3, r7
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	18ca      	adds	r2, r1, r3
 8000f14:	463b      	mov	r3, r7
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	4413      	add	r3, r2
 8000f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
						  int Distance2 = 100* a[4]  +10*a[5] +a[6];
 8000f1e:	463b      	mov	r3, r7
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	2264      	movs	r2, #100	; 0x64
 8000f24:	fb02 f103 	mul.w	r1, r2, r3
 8000f28:	463b      	mov	r3, r7
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	18ca      	adds	r2, r1, r3
 8000f36:	463b      	mov	r3, r7
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
						  int Distance3 = 100* a[8]  +10*a[9] +a[10];
 8000f40:	463b      	mov	r3, r7
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	2264      	movs	r2, #100	; 0x64
 8000f46:	fb02 f103 	mul.w	r1, r2, r3
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	18ca      	adds	r2, r1, r3
 8000f58:	463b      	mov	r3, r7
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
						  int Distance4 = 100* b[0]  +10*b[1] +b[2];//rider
 8000f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f64:	2264      	movs	r2, #100	; 0x64
 8000f66:	fb02 f103 	mul.w	r1, r2, r3
 8000f6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	18ca      	adds	r2, r1, r3
 8000f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f78:	4413      	add	r3, r2
 8000f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

						  for(int i=0;i<11;i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000f84:	e010      	b.n	8000fa8 <main+0x3e4>
						  {a[i]=RxData_From_Node3[i]-'0';}
 8000f86:	4ab4      	ldr	r2, [pc, #720]	; (8001258 <main+0x694>)
 8000f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000f94:	463b      	mov	r3, r7
 8000f96:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						  for(int i=0;i<11;i++)
 8000f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000fa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fac:	2b0a      	cmp	r3, #10
 8000fae:	ddea      	ble.n	8000f86 <main+0x3c2>
						  for(int l=12;l<=14;l++)
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000fb6:	e010      	b.n	8000fda <main+0x416>
						  {a[l]=RxData_From_Node3[l]-'0';}
 8000fb8:	4aa7      	ldr	r2, [pc, #668]	; (8001258 <main+0x694>)
 8000fba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						  for(int l=12;l<=14;l++)
 8000fd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000fda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000fde:	2b0e      	cmp	r3, #14
 8000fe0:	ddea      	ble.n	8000fb8 <main+0x3f4>
						  for(int j=0;j<3;j++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000fe8:	e013      	b.n	8001012 <main+0x44e>
						  {b[j]=RxData_From_Node1[j]-'0';}
 8000fea:	4a9c      	ldr	r2, [pc, #624]	; (800125c <main+0x698>)
 8000fec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000ff8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001002:	440b      	add	r3, r1
 8001004:	f843 2ce8 	str.w	r2, [r3, #-232]
						  for(int j=0;j<3;j++)
 8001008:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800100c:	3301      	adds	r3, #1
 800100e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001012:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001016:	2b02      	cmp	r3, #2
 8001018:	dde7      	ble.n	8000fea <main+0x426>

						  int jodo = 100* a[12]  +10*a[13] +a[14];
 800101a:	463b      	mov	r3, r7
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	2264      	movs	r2, #100	; 0x64
 8001020:	fb02 f103 	mul.w	r1, r2, r3
 8001024:	463b      	mov	r3, r7
 8001026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	18ca      	adds	r2, r1, r3
 8001032:	463b      	mov	r3, r7
 8001034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001036:	4413      	add	r3, r2
 8001038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						       htim3.Instance->CCR1=jodo;
 800103c:	4b88      	ldr	r3, [pc, #544]	; (8001260 <main+0x69c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
						       if (jodo<45)
 8001046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800104a:	2b2c      	cmp	r3, #44	; 0x2c
 800104c:	dc03      	bgt.n	8001056 <main+0x492>
						       {
						     	  htim3.Instance->CCR1=0;
 800104e:	4b84      	ldr	r3, [pc, #528]	; (8001260 <main+0x69c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
						       }
				            if (Distance1 <= 15 || Distance2 <= 15 || Distance3 <= 15)
 8001056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800105a:	2b0f      	cmp	r3, #15
 800105c:	dd07      	ble.n	800106e <main+0x4aa>
 800105e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001062:	2b0f      	cmp	r3, #15
 8001064:	dd03      	ble.n	800106e <main+0x4aa>
 8001066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800106a:	2b0f      	cmp	r3, #15
 800106c:	dc12      	bgt.n	8001094 <main+0x4d0>
				            {
						 	  TIM2->ARR = C;
 800106e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001072:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
						 	  TIM2->CCR1 = TIM2->ARR / 2;
 8001078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001082:	085b      	lsrs	r3, r3, #1
 8001084:	6353      	str	r3, [r2, #52]	; 0x34
						 	  HAL_Delay(25);
 8001086:	2019      	movs	r0, #25
 8001088:	f001 feae 	bl	8002de8 <HAL_Delay>
						 	  TIM2->CCR1 = 0;
 800108c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001090:	2200      	movs	r2, #0
 8001092:	635a      	str	r2, [r3, #52]	; 0x34

						 	  }
						  if (isDataAvailable(2) == 1)
 8001094:	2002      	movs	r0, #2
 8001096:	f7ff fc7f 	bl	8000998 <isDataAvailable>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d102      	bne.n	80010a6 <main+0x4e2>
						  {
							  NRF24_Receive(RxData);
 80010a0:	4870      	ldr	r0, [pc, #448]	; (8001264 <main+0x6a0>)
 80010a2:	f7ff fc99 	bl	80009d8 <NRF24_Receive>
						  }
						  htim1.Instance->CCR3 = 80;
 80010a6:	4b70      	ldr	r3, [pc, #448]	; (8001268 <main+0x6a4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2250      	movs	r2, #80	; 0x50
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
						  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b4:	486d      	ldr	r0, [pc, #436]	; (800126c <main+0x6a8>)
 80010b6:	f004 f9bb 	bl	8005430 <HAL_GPIO_WritePin>
						  HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f001 fe94 	bl	8002de8 <HAL_Delay>
						  if(RxData[2]==0)
 80010c0:	4b68      	ldr	r3, [pc, #416]	; (8001264 <main+0x6a0>)
 80010c2:	789b      	ldrb	r3, [r3, #2]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d12c      	bne.n	8001122 <main+0x55e>
							  {
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ce:	4868      	ldr	r0, [pc, #416]	; (8001270 <main+0x6ac>)
 80010d0:	f004 f9ae 	bl	8005430 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2108      	movs	r1, #8
 80010d8:	4866      	ldr	r0, [pc, #408]	; (8001274 <main+0x6b0>)
 80010da:	f004 f9a9 	bl	8005430 <HAL_GPIO_WritePin>
							  htim1.Instance->CCR1=RxData[0];
 80010de:	4b61      	ldr	r3, [pc, #388]	; (8001264 <main+0x6a0>)
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	4b61      	ldr	r3, [pc, #388]	; (8001268 <main+0x6a4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
							  htim1.Instance->CCR2=RxData[0];
 80010e8:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <main+0x6a0>)
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <main+0x6a4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	639a      	str	r2, [r3, #56]	; 0x38
							  if(RxData[0]>=100)
 80010f2:	4b5c      	ldr	r3, [pc, #368]	; (8001264 <main+0x6a0>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b63      	cmp	r3, #99	; 0x63
 80010f8:	d907      	bls.n	800110a <main+0x546>
								  {
									  htim1.Instance->CCR1=99;
 80010fa:	4b5b      	ldr	r3, [pc, #364]	; (8001268 <main+0x6a4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2263      	movs	r2, #99	; 0x63
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
									  htim1.Instance->CCR2=99;
 8001102:	4b59      	ldr	r3, [pc, #356]	; (8001268 <main+0x6a4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2263      	movs	r2, #99	; 0x63
 8001108:	639a      	str	r2, [r3, #56]	; 0x38
								  }
							  	  if(Distance4<=20)
 800110a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800110e:	2b14      	cmp	r3, #20
 8001110:	dc07      	bgt.n	8001122 <main+0x55e>
							  	  {
							  		  htim1.Instance->CCR1=0;
 8001112:	4b55      	ldr	r3, [pc, #340]	; (8001268 <main+0x6a4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
							  		  htim1.Instance->CCR2=0;
 800111a:	4b53      	ldr	r3, [pc, #332]	; (8001268 <main+0x6a4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
							  	  }
							  }
						  if(RxData[2]==1)
 8001122:	4b50      	ldr	r3, [pc, #320]	; (8001264 <main+0x6a0>)
 8001124:	789b      	ldrb	r3, [r3, #2]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d12c      	bne.n	8001184 <main+0x5c0>
							  {
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001130:	484f      	ldr	r0, [pc, #316]	; (8001270 <main+0x6ac>)
 8001132:	f004 f97d 	bl	8005430 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8001136:	2201      	movs	r2, #1
 8001138:	2108      	movs	r1, #8
 800113a:	484e      	ldr	r0, [pc, #312]	; (8001274 <main+0x6b0>)
 800113c:	f004 f978 	bl	8005430 <HAL_GPIO_WritePin>
							  htim1.Instance->CCR1=RxData[0];
 8001140:	4b48      	ldr	r3, [pc, #288]	; (8001264 <main+0x6a0>)
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	4b48      	ldr	r3, [pc, #288]	; (8001268 <main+0x6a4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
							  htim1.Instance->CCR2=RxData[0];
 800114a:	4b46      	ldr	r3, [pc, #280]	; (8001264 <main+0x6a0>)
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <main+0x6a4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	639a      	str	r2, [r3, #56]	; 0x38
							  if(RxData[0]>=100)
 8001154:	4b43      	ldr	r3, [pc, #268]	; (8001264 <main+0x6a0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b63      	cmp	r3, #99	; 0x63
 800115a:	d907      	bls.n	800116c <main+0x5a8>
								  {
									  htim1.Instance->CCR1=99;
 800115c:	4b42      	ldr	r3, [pc, #264]	; (8001268 <main+0x6a4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2263      	movs	r2, #99	; 0x63
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
									  htim1.Instance->CCR2=99;
 8001164:	4b40      	ldr	r3, [pc, #256]	; (8001268 <main+0x6a4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2263      	movs	r2, #99	; 0x63
 800116a:	639a      	str	r2, [r3, #56]	; 0x38
								  }
							  	  if(Distance4<=20)
 800116c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001170:	2b14      	cmp	r3, #20
 8001172:	dc07      	bgt.n	8001184 <main+0x5c0>
							  	  {
							  		  htim1.Instance->CCR1=0;
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <main+0x6a4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2200      	movs	r2, #0
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
							  		  htim1.Instance->CCR2=0;
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <main+0x6a4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2200      	movs	r2, #0
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
							  	  }
							  }

						  if(41<=RxData[1]&&RxData[1]<=80)
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <main+0x6a0>)
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	2b28      	cmp	r3, #40	; 0x28
 800118a:	d914      	bls.n	80011b6 <main+0x5f2>
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <main+0x6a0>)
 800118e:	785b      	ldrb	r3, [r3, #1]
 8001190:	2b50      	cmp	r3, #80	; 0x50
 8001192:	d810      	bhi.n	80011b6 <main+0x5f2>
						  {
							  htim1.Instance->CCR3 = 90;
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <main+0x6a4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	225a      	movs	r2, #90	; 0x5a
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	4832      	ldr	r0, [pc, #200]	; (800126c <main+0x6a8>)
 80011a4:	f004 f944 	bl	8005430 <HAL_GPIO_WritePin>
							  HAL_Delay(200);
 80011a8:	20c8      	movs	r0, #200	; 0xc8
 80011aa:	f001 fe1d 	bl	8002de8 <HAL_Delay>
							  htim1.Instance->CCR3 = 0;
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <main+0x6a4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	63da      	str	r2, [r3, #60]	; 0x3c
					  while (RxData[1]  <= 40)
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <main+0x6a0>)
 80011b8:	785b      	ldrb	r3, [r3, #1]
 80011ba:	2b28      	cmp	r3, #40	; 0x28
 80011bc:	f67f ae9e 	bls.w	8000efc <main+0x338>
						  }
					  }
				  }
			  if (RxData[1] > 85)
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <main+0x6a0>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	2b55      	cmp	r3, #85	; 0x55
 80011c6:	f240 8174 	bls.w	80014b2 <main+0x8ee>
					  {
						  while (RxData[1] > 85)
 80011ca:	e16d      	b.n	80014a8 <main+0x8e4>
						  {
							  int a[14];
							  int b[2];

							  int Distance1 = 100* a[1]  +10*a[2] +a[3];
 80011cc:	463b      	mov	r3, r7
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2264      	movs	r2, #100	; 0x64
 80011d2:	fb02 f103 	mul.w	r1, r2, r3
 80011d6:	463b      	mov	r3, r7
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	18ca      	adds	r2, r1, r3
 80011e4:	463b      	mov	r3, r7
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
							  int Distance2 = 100* a[4]  +10*a[5] +a[6];
 80011ee:	463b      	mov	r3, r7
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2264      	movs	r2, #100	; 0x64
 80011f4:	fb02 f103 	mul.w	r1, r2, r3
 80011f8:	463b      	mov	r3, r7
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	18ca      	adds	r2, r1, r3
 8001206:	463b      	mov	r3, r7
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4413      	add	r3, r2
 800120c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
							  int Distance3 = 100* a[8]  +10*a[9] +a[10];
 8001210:	463b      	mov	r3, r7
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	2264      	movs	r2, #100	; 0x64
 8001216:	fb02 f103 	mul.w	r1, r2, r3
 800121a:	463b      	mov	r3, r7
 800121c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	18ca      	adds	r2, r1, r3
 8001228:	463b      	mov	r3, r7
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	4413      	add	r3, r2
 800122e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
							  int Distance4 = 100* b[0]  +10*b[1] +b[2];//rider
 8001232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001234:	2264      	movs	r2, #100	; 0x64
 8001236:	fb02 f103 	mul.w	r1, r2, r3
 800123a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	18ca      	adds	r2, r1, r3
 8001246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001248:	4413      	add	r3, r2
 800124a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

							  for(int i=0;i<11;i++)
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001254:	e021      	b.n	800129a <main+0x6d6>
 8001256:	bf00      	nop
 8001258:	24000314 	.word	0x24000314
 800125c:	2400012c 	.word	0x2400012c
 8001260:	2400013c 	.word	0x2400013c
 8001264:	240003ac 	.word	0x240003ac
 8001268:	240002c4 	.word	0x240002c4
 800126c:	58021800 	.word	0x58021800
 8001270:	58021000 	.word	0x58021000
 8001274:	58020000 	.word	0x58020000
							  {a[i]=RxData_From_Node3[i]-'0';}
 8001278:	4ab6      	ldr	r2, [pc, #728]	; (8001554 <main+0x990>)
 800127a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001286:	463b      	mov	r3, r7
 8001288:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							  for(int i=0;i<11;i++)
 8001290:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001294:	3301      	adds	r3, #1
 8001296:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800129a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800129e:	2b0a      	cmp	r3, #10
 80012a0:	ddea      	ble.n	8001278 <main+0x6b4>
							  for(int l=12;l<=14;l++)
 80012a2:	230c      	movs	r3, #12
 80012a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80012a8:	e010      	b.n	80012cc <main+0x708>
							  {a[l]=RxData_From_Node3[l]-'0';}
 80012aa:	4aaa      	ldr	r2, [pc, #680]	; (8001554 <main+0x990>)
 80012ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80012b8:	463b      	mov	r3, r7
 80012ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							  for(int l=12;l<=14;l++)
 80012c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012c6:	3301      	adds	r3, #1
 80012c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80012cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012d0:	2b0e      	cmp	r3, #14
 80012d2:	ddea      	ble.n	80012aa <main+0x6e6>
							  for(int j=0;j<3;j++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012da:	e013      	b.n	8001304 <main+0x740>
							  {b[j]=RxData_From_Node1[j]-'0';}
 80012dc:	4a9e      	ldr	r2, [pc, #632]	; (8001558 <main+0x994>)
 80012de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80012ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80012f4:	440b      	add	r3, r1
 80012f6:	f843 2cf0 	str.w	r2, [r3, #-240]
							  for(int j=0;j<3;j++)
 80012fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012fe:	3301      	adds	r3, #1
 8001300:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001308:	2b02      	cmp	r3, #2
 800130a:	dde7      	ble.n	80012dc <main+0x718>

							  int jodo = 100* a[12]  +10*a[13] +a[14];
 800130c:	463b      	mov	r3, r7
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	2264      	movs	r2, #100	; 0x64
 8001312:	fb02 f103 	mul.w	r1, r2, r3
 8001316:	463b      	mov	r3, r7
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	18ca      	adds	r2, r1, r3
 8001324:	463b      	mov	r3, r7
 8001326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001328:	4413      	add	r3, r2
 800132a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
							       htim3.Instance->CCR1=jodo;
 800132e:	4b8b      	ldr	r3, [pc, #556]	; (800155c <main+0x998>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
							       if (jodo<45)
 8001338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800133c:	2b2c      	cmp	r3, #44	; 0x2c
 800133e:	dc03      	bgt.n	8001348 <main+0x784>
							       {
							     	  htim3.Instance->CCR1=0;
 8001340:	4b86      	ldr	r3, [pc, #536]	; (800155c <main+0x998>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2200      	movs	r2, #0
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
							       }
					            if (Distance1 <= 15 || Distance2 <= 15 || Distance3 <= 15)
 8001348:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800134c:	2b0f      	cmp	r3, #15
 800134e:	dd07      	ble.n	8001360 <main+0x79c>
 8001350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001354:	2b0f      	cmp	r3, #15
 8001356:	dd03      	ble.n	8001360 <main+0x79c>
 8001358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800135c:	2b0f      	cmp	r3, #15
 800135e:	dc12      	bgt.n	8001386 <main+0x7c2>
							 	  {
							 	  TIM2->ARR = C;
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
							 	  TIM2->CCR1 = TIM2->ARR / 2;
 800136a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	6353      	str	r3, [r2, #52]	; 0x34
							 	  HAL_Delay(25);
 8001378:	2019      	movs	r0, #25
 800137a:	f001 fd35 	bl	8002de8 <HAL_Delay>
							 	  TIM2->CCR1 = 0;
 800137e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001382:	2200      	movs	r2, #0
 8001384:	635a      	str	r2, [r3, #52]	; 0x34

							 	  }
							  if (isDataAvailable(2) == 1)
 8001386:	2002      	movs	r0, #2
 8001388:	f7ff fb06 	bl	8000998 <isDataAvailable>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d102      	bne.n	8001398 <main+0x7d4>
							  {
								  NRF24_Receive(RxData);
 8001392:	4873      	ldr	r0, [pc, #460]	; (8001560 <main+0x99c>)
 8001394:	f7ff fb20 	bl	80009d8 <NRF24_Receive>
							  }
							  htim1.Instance->CCR3 = 80;
 8001398:	4b72      	ldr	r3, [pc, #456]	; (8001564 <main+0x9a0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2250      	movs	r2, #80	; 0x50
 800139e:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a6:	4870      	ldr	r0, [pc, #448]	; (8001568 <main+0x9a4>)
 80013a8:	f004 f842 	bl	8005430 <HAL_GPIO_WritePin>
							  HAL_Delay(100);
 80013ac:	2064      	movs	r0, #100	; 0x64
 80013ae:	f001 fd1b 	bl	8002de8 <HAL_Delay>
							  if(RxData[2]==0)
 80013b2:	4b6b      	ldr	r3, [pc, #428]	; (8001560 <main+0x99c>)
 80013b4:	789b      	ldrb	r3, [r3, #2]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d12c      	bne.n	8001414 <main+0x850>
								  {
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c0:	486a      	ldr	r0, [pc, #424]	; (800156c <main+0x9a8>)
 80013c2:	f004 f835 	bl	8005430 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	4869      	ldr	r0, [pc, #420]	; (8001570 <main+0x9ac>)
 80013cc:	f004 f830 	bl	8005430 <HAL_GPIO_WritePin>
								  htim1.Instance->CCR1=RxData[0];
 80013d0:	4b63      	ldr	r3, [pc, #396]	; (8001560 <main+0x99c>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	4b63      	ldr	r3, [pc, #396]	; (8001564 <main+0x9a0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
								  htim1.Instance->CCR2=RxData[0];
 80013da:	4b61      	ldr	r3, [pc, #388]	; (8001560 <main+0x99c>)
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	4b61      	ldr	r3, [pc, #388]	; (8001564 <main+0x9a0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	639a      	str	r2, [r3, #56]	; 0x38
								  if(RxData[0]>=100)
 80013e4:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <main+0x99c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b63      	cmp	r3, #99	; 0x63
 80013ea:	d907      	bls.n	80013fc <main+0x838>
									  {
										  htim1.Instance->CCR1=99;
 80013ec:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <main+0x9a0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2263      	movs	r2, #99	; 0x63
 80013f2:	635a      	str	r2, [r3, #52]	; 0x34
										  htim1.Instance->CCR2=99;
 80013f4:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <main+0x9a0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2263      	movs	r2, #99	; 0x63
 80013fa:	639a      	str	r2, [r3, #56]	; 0x38
									  }
  							  	  if(Distance4<=20)
 80013fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001400:	2b14      	cmp	r3, #20
 8001402:	dc07      	bgt.n	8001414 <main+0x850>
  							  	  {
  							  		  htim1.Instance->CCR1=0;
 8001404:	4b57      	ldr	r3, [pc, #348]	; (8001564 <main+0x9a0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	635a      	str	r2, [r3, #52]	; 0x34
  							  		  htim1.Instance->CCR2=0;
 800140c:	4b55      	ldr	r3, [pc, #340]	; (8001564 <main+0x9a0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
  							  	  }
								  }
							  if(RxData[2]==1)
 8001414:	4b52      	ldr	r3, [pc, #328]	; (8001560 <main+0x99c>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d12c      	bne.n	8001476 <main+0x8b2>
								  {
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	4852      	ldr	r0, [pc, #328]	; (800156c <main+0x9a8>)
 8001424:	f004 f804 	bl	8005430 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8001428:	2201      	movs	r2, #1
 800142a:	2108      	movs	r1, #8
 800142c:	4850      	ldr	r0, [pc, #320]	; (8001570 <main+0x9ac>)
 800142e:	f003 ffff 	bl	8005430 <HAL_GPIO_WritePin>
								  htim1.Instance->CCR1=RxData[0];
 8001432:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <main+0x99c>)
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <main+0x9a0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	635a      	str	r2, [r3, #52]	; 0x34
								  htim1.Instance->CCR2=RxData[0];
 800143c:	4b48      	ldr	r3, [pc, #288]	; (8001560 <main+0x99c>)
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b48      	ldr	r3, [pc, #288]	; (8001564 <main+0x9a0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
								  if(RxData[0]>=100)
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <main+0x99c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b63      	cmp	r3, #99	; 0x63
 800144c:	d907      	bls.n	800145e <main+0x89a>
									  {
										  htim1.Instance->CCR1=99;
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <main+0x9a0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2263      	movs	r2, #99	; 0x63
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
										  htim1.Instance->CCR2=99;
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <main+0x9a0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2263      	movs	r2, #99	; 0x63
 800145c:	639a      	str	r2, [r3, #56]	; 0x38
									  }
  							  	  if(Distance4<=20)
 800145e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001462:	2b14      	cmp	r3, #20
 8001464:	dc07      	bgt.n	8001476 <main+0x8b2>
  							  	  {
  							  		  htim1.Instance->CCR1=0;
 8001466:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <main+0x9a0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2200      	movs	r2, #0
 800146c:	635a      	str	r2, [r3, #52]	; 0x34
  							  		  htim1.Instance->CCR2=0;
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <main+0x9a0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2200      	movs	r2, #0
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
  							  	  }
								  }

							  if(41<=RxData[1]&&RxData[1]<=85)
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <main+0x99c>)
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	2b28      	cmp	r3, #40	; 0x28
 800147c:	d914      	bls.n	80014a8 <main+0x8e4>
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <main+0x99c>)
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	2b55      	cmp	r3, #85	; 0x55
 8001484:	d810      	bhi.n	80014a8 <main+0x8e4>
							  {
								  htim1.Instance->CCR3 = 90;
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <main+0x9a0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	225a      	movs	r2, #90	; 0x5a
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c
								  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001494:	4834      	ldr	r0, [pc, #208]	; (8001568 <main+0x9a4>)
 8001496:	f003 ffcb 	bl	8005430 <HAL_GPIO_WritePin>
								  HAL_Delay(200);
 800149a:	20c8      	movs	r0, #200	; 0xc8
 800149c:	f001 fca4 	bl	8002de8 <HAL_Delay>
								  htim1.Instance->CCR3 = 0;
 80014a0:	4b30      	ldr	r3, [pc, #192]	; (8001564 <main+0x9a0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	63da      	str	r2, [r3, #60]	; 0x3c
						  while (RxData[1] > 85)
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <main+0x99c>)
 80014aa:	785b      	ldrb	r3, [r3, #1]
 80014ac:	2b55      	cmp	r3, #85	; 0x55
 80014ae:	f63f ae8d 	bhi.w	80011cc <main+0x608>




/////////////////can fd raspi and direction ////////////////////
		  	  if(RxData[3]==1)
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <main+0x99c>)
 80014b4:	78db      	ldrb	r3, [r3, #3]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	f47f abc4 	bne.w	8000c44 <main+0x80>
		  	  {
		  		  if (RxData_From_Node4[0]=='L')
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <main+0x9b0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b4c      	cmp	r3, #76	; 0x4c
 80014c2:	f040 8173 	bne.w	80017ac <main+0xbe8>
		  				  {
		  					  while (RxData_From_Node4[0]=='L')
 80014c6:	e16c      	b.n	80017a2 <main+0xbde>
		  					  {
								  int a[14];
								  int b[2];

								  int Distance1 = 100* a[1]  +10*a[2] +a[3];
 80014c8:	463b      	mov	r3, r7
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2264      	movs	r2, #100	; 0x64
 80014ce:	fb02 f103 	mul.w	r1, r2, r3
 80014d2:	463b      	mov	r3, r7
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	18ca      	adds	r2, r1, r3
 80014e0:	463b      	mov	r3, r7
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
								  int Distance2 = 100* a[4]  +10*a[5] +a[6];
 80014ea:	463b      	mov	r3, r7
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2264      	movs	r2, #100	; 0x64
 80014f0:	fb02 f103 	mul.w	r1, r2, r3
 80014f4:	463b      	mov	r3, r7
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	18ca      	adds	r2, r1, r3
 8001502:	463b      	mov	r3, r7
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4413      	add	r3, r2
 8001508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
								  int Distance3 = 100* a[8]  +10*a[9] +a[10];
 800150c:	463b      	mov	r3, r7
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	2264      	movs	r2, #100	; 0x64
 8001512:	fb02 f103 	mul.w	r1, r2, r3
 8001516:	463b      	mov	r3, r7
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	18ca      	adds	r2, r1, r3
 8001524:	463b      	mov	r3, r7
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	4413      	add	r3, r2
 800152a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
								  int Distance4 = 100* b[0]  +10*b[1] +b[2];//rider
 800152e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001530:	2264      	movs	r2, #100	; 0x64
 8001532:	fb02 f103 	mul.w	r1, r2, r3
 8001536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	18ca      	adds	r2, r1, r3
 8001542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001544:	4413      	add	r3, r2
 8001546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

								  for(int i=0;i<11;i++)
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001550:	e023      	b.n	800159a <main+0x9d6>
 8001552:	bf00      	nop
 8001554:	24000314 	.word	0x24000314
 8001558:	2400012c 	.word	0x2400012c
 800155c:	2400013c 	.word	0x2400013c
 8001560:	240003ac 	.word	0x240003ac
 8001564:	240002c4 	.word	0x240002c4
 8001568:	58021800 	.word	0x58021800
 800156c:	58021000 	.word	0x58021000
 8001570:	58020000 	.word	0x58020000
 8001574:	24000054 	.word	0x24000054
								  {a[i]=RxData_From_Node3[i]-'0';}
 8001578:	4ab5      	ldr	r2, [pc, #724]	; (8001850 <main+0xc8c>)
 800157a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001586:	463b      	mov	r3, r7
 8001588:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
								  for(int i=0;i<11;i++)
 8001590:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001594:	3301      	adds	r3, #1
 8001596:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800159a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	ddea      	ble.n	8001578 <main+0x9b4>
								  for(int l=12;l<=14;l++)
 80015a2:	230c      	movs	r3, #12
 80015a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80015a8:	e010      	b.n	80015cc <main+0xa08>
								  {a[l]=RxData_From_Node3[l]-'0';}
 80015aa:	4aa9      	ldr	r2, [pc, #676]	; (8001850 <main+0xc8c>)
 80015ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80015b8:	463b      	mov	r3, r7
 80015ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80015be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
								  for(int l=12;l<=14;l++)
 80015c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015c6:	3301      	adds	r3, #1
 80015c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80015cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015d0:	2b0e      	cmp	r3, #14
 80015d2:	ddea      	ble.n	80015aa <main+0x9e6>
								  for(int j=0;j<3;j++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80015da:	e013      	b.n	8001604 <main+0xa40>
								  {b[j]=RxData_From_Node1[j]-'0';}
 80015dc:	4a9d      	ldr	r2, [pc, #628]	; (8001854 <main+0xc90>)
 80015de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015e2:	4413      	add	r3, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80015ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80015f4:	440b      	add	r3, r1
 80015f6:	f843 2cf8 	str.w	r2, [r3, #-248]
								  for(int j=0;j<3;j++)
 80015fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015fe:	3301      	adds	r3, #1
 8001600:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001604:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001608:	2b02      	cmp	r3, #2
 800160a:	dde7      	ble.n	80015dc <main+0xa18>

								  int jodo = 100* a[12]  +10*a[13] +a[14];
 800160c:	463b      	mov	r3, r7
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	2264      	movs	r2, #100	; 0x64
 8001612:	fb02 f103 	mul.w	r1, r2, r3
 8001616:	463b      	mov	r3, r7
 8001618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	18ca      	adds	r2, r1, r3
 8001624:	463b      	mov	r3, r7
 8001626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001628:	4413      	add	r3, r2
 800162a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
								       htim3.Instance->CCR1=jodo;
 800162e:	4b8a      	ldr	r3, [pc, #552]	; (8001858 <main+0xc94>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001636:	635a      	str	r2, [r3, #52]	; 0x34
								       if (jodo<45)
 8001638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800163c:	2b2c      	cmp	r3, #44	; 0x2c
 800163e:	dc03      	bgt.n	8001648 <main+0xa84>
								       {
								     	  htim3.Instance->CCR1=0;
 8001640:	4b85      	ldr	r3, [pc, #532]	; (8001858 <main+0xc94>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	635a      	str	r2, [r3, #52]	; 0x34
								       }
						            if (Distance1 <= 15 || Distance2 <= 15 || Distance3 <= 15)
 8001648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800164c:	2b0f      	cmp	r3, #15
 800164e:	dd07      	ble.n	8001660 <main+0xa9c>
 8001650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001654:	2b0f      	cmp	r3, #15
 8001656:	dd03      	ble.n	8001660 <main+0xa9c>
 8001658:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800165c:	2b0f      	cmp	r3, #15
 800165e:	dc12      	bgt.n	8001686 <main+0xac2>
						            {
								 	  TIM2->ARR = C;
 8001660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001664:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c
								 	  TIM2->CCR1 = TIM2->ARR / 2;
 800166a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	6353      	str	r3, [r2, #52]	; 0x34
								 	  HAL_Delay(25);
 8001678:	2019      	movs	r0, #25
 800167a:	f001 fbb5 	bl	8002de8 <HAL_Delay>
								 	  TIM2->CCR1 = 0;
 800167e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001682:	2200      	movs	r2, #0
 8001684:	635a      	str	r2, [r3, #52]	; 0x34

								 	  }
								  if (isDataAvailable(2) == 1)
 8001686:	2002      	movs	r0, #2
 8001688:	f7ff f986 	bl	8000998 <isDataAvailable>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <main+0xad4>
								  {
									  NRF24_Receive(RxData);
 8001692:	4872      	ldr	r0, [pc, #456]	; (800185c <main+0xc98>)
 8001694:	f7ff f9a0 	bl	80009d8 <NRF24_Receive>
								  }
								  htim1.Instance->CCR3 = 80;
 8001698:	4b71      	ldr	r3, [pc, #452]	; (8001860 <main+0xc9c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2250      	movs	r2, #80	; 0x50
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c
								  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a6:	486f      	ldr	r0, [pc, #444]	; (8001864 <main+0xca0>)
 80016a8:	f003 fec2 	bl	8005430 <HAL_GPIO_WritePin>
								  HAL_Delay(100);
 80016ac:	2064      	movs	r0, #100	; 0x64
 80016ae:	f001 fb9b 	bl	8002de8 <HAL_Delay>
								  if(RxData[2]==0)
 80016b2:	4b6a      	ldr	r3, [pc, #424]	; (800185c <main+0xc98>)
 80016b4:	789b      	ldrb	r3, [r3, #2]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d12c      	bne.n	8001714 <main+0xb50>
									  {
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c0:	4869      	ldr	r0, [pc, #420]	; (8001868 <main+0xca4>)
 80016c2:	f003 feb5 	bl	8005430 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2108      	movs	r1, #8
 80016ca:	4868      	ldr	r0, [pc, #416]	; (800186c <main+0xca8>)
 80016cc:	f003 feb0 	bl	8005430 <HAL_GPIO_WritePin>
									  htim1.Instance->CCR1=RxData[0];
 80016d0:	4b62      	ldr	r3, [pc, #392]	; (800185c <main+0xc98>)
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	4b62      	ldr	r3, [pc, #392]	; (8001860 <main+0xc9c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
									  htim1.Instance->CCR2=RxData[0];
 80016da:	4b60      	ldr	r3, [pc, #384]	; (800185c <main+0xc98>)
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	4b60      	ldr	r3, [pc, #384]	; (8001860 <main+0xc9c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38
									  if(RxData[0]>=100)
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <main+0xc98>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b63      	cmp	r3, #99	; 0x63
 80016ea:	d907      	bls.n	80016fc <main+0xb38>
										  {
											  htim1.Instance->CCR1=99;
 80016ec:	4b5c      	ldr	r3, [pc, #368]	; (8001860 <main+0xc9c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2263      	movs	r2, #99	; 0x63
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34
											  htim1.Instance->CCR2=99;
 80016f4:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <main+0xc9c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2263      	movs	r2, #99	; 0x63
 80016fa:	639a      	str	r2, [r3, #56]	; 0x38
										  }
									  	  if(Distance4<=20)
 80016fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001700:	2b14      	cmp	r3, #20
 8001702:	dc07      	bgt.n	8001714 <main+0xb50>
									  	  {
									  		  htim1.Instance->CCR1=0;
 8001704:	4b56      	ldr	r3, [pc, #344]	; (8001860 <main+0xc9c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2200      	movs	r2, #0
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
									  		  htim1.Instance->CCR2=0;
 800170c:	4b54      	ldr	r3, [pc, #336]	; (8001860 <main+0xc9c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
									  	  }
									  }
								  if(RxData[2]==1)
 8001714:	4b51      	ldr	r3, [pc, #324]	; (800185c <main+0xc98>)
 8001716:	789b      	ldrb	r3, [r3, #2]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d12c      	bne.n	8001776 <main+0xbb2>
									  {
									  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001722:	4851      	ldr	r0, [pc, #324]	; (8001868 <main+0xca4>)
 8001724:	f003 fe84 	bl	8005430 <HAL_GPIO_WritePin>
									  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8001728:	2201      	movs	r2, #1
 800172a:	2108      	movs	r1, #8
 800172c:	484f      	ldr	r0, [pc, #316]	; (800186c <main+0xca8>)
 800172e:	f003 fe7f 	bl	8005430 <HAL_GPIO_WritePin>
									  htim1.Instance->CCR1=RxData[0];
 8001732:	4b4a      	ldr	r3, [pc, #296]	; (800185c <main+0xc98>)
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <main+0xc9c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	635a      	str	r2, [r3, #52]	; 0x34
									  htim1.Instance->CCR2=RxData[0];
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <main+0xc98>)
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	4b47      	ldr	r3, [pc, #284]	; (8001860 <main+0xc9c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
									  if(RxData[0]>=100)
 8001746:	4b45      	ldr	r3, [pc, #276]	; (800185c <main+0xc98>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b63      	cmp	r3, #99	; 0x63
 800174c:	d907      	bls.n	800175e <main+0xb9a>
										  {
											  htim1.Instance->CCR1=99;
 800174e:	4b44      	ldr	r3, [pc, #272]	; (8001860 <main+0xc9c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2263      	movs	r2, #99	; 0x63
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
											  htim1.Instance->CCR2=99;
 8001756:	4b42      	ldr	r3, [pc, #264]	; (8001860 <main+0xc9c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2263      	movs	r2, #99	; 0x63
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
										  }
									  	  if(Distance4<=20)
 800175e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001762:	2b14      	cmp	r3, #20
 8001764:	dc07      	bgt.n	8001776 <main+0xbb2>
									  	  {
									  		  htim1.Instance->CCR1=0;
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <main+0xc9c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	635a      	str	r2, [r3, #52]	; 0x34
									  		  htim1.Instance->CCR2=0;
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <main+0xc9c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2200      	movs	r2, #0
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
									  	  }
									  }

		  						  if(RxData_From_Node4[0]=='G')
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <main+0xcac>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b47      	cmp	r3, #71	; 0x47
 800177c:	d111      	bne.n	80017a2 <main+0xbde>
		  						  {
		  							  htim1.Instance->CCR3 = 90;
 800177e:	4b38      	ldr	r3, [pc, #224]	; (8001860 <main+0xc9c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	225a      	movs	r2, #90	; 0x5a
 8001784:	63da      	str	r2, [r3, #60]	; 0x3c
		  							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178c:	4835      	ldr	r0, [pc, #212]	; (8001864 <main+0xca0>)
 800178e:	f003 fe4f 	bl	8005430 <HAL_GPIO_WritePin>
		  							  HAL_Delay(200);
 8001792:	20c8      	movs	r0, #200	; 0xc8
 8001794:	f001 fb28 	bl	8002de8 <HAL_Delay>
		  							  htim1.Instance->CCR3 = 0;
 8001798:	4b31      	ldr	r3, [pc, #196]	; (8001860 <main+0xc9c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
 80017a0:	e004      	b.n	80017ac <main+0xbe8>
		  					  while (RxData_From_Node4[0]=='L')
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <main+0xcac>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b4c      	cmp	r3, #76	; 0x4c
 80017a8:	f43f ae8e 	beq.w	80014c8 <main+0x904>
		  						  }

		  					  }
		  				  }

		  			  if (RxData_From_Node4[0]=='R')
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <main+0xcac>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b52      	cmp	r3, #82	; 0x52
 80017b2:	f47f aa47 	bne.w	8000c44 <main+0x80>
		  					  {
		  						  while (RxData_From_Node4[0]=='R')
 80017b6:	e171      	b.n	8001a9c <main+0xed8>
		  						  {
		  							  // right motor
									  int a[14];
									  int b[2];

									  int Distance1 = 100* a[1]  +10*a[2] +a[3];
 80017b8:	463b      	mov	r3, r7
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2264      	movs	r2, #100	; 0x64
 80017be:	fb02 f103 	mul.w	r1, r2, r3
 80017c2:	463b      	mov	r3, r7
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	18ca      	adds	r2, r1, r3
 80017d0:	463b      	mov	r3, r7
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
									  int Distance2 = 100* a[4]  +10*a[5] +a[6];
 80017da:	463b      	mov	r3, r7
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	2264      	movs	r2, #100	; 0x64
 80017e0:	fb02 f103 	mul.w	r1, r2, r3
 80017e4:	463b      	mov	r3, r7
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	18ca      	adds	r2, r1, r3
 80017f2:	463b      	mov	r3, r7
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	4413      	add	r3, r2
 80017f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
									  int Distance3 = 100* a[8]  +10*a[9] +a[10];
 80017fc:	463b      	mov	r3, r7
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	2264      	movs	r2, #100	; 0x64
 8001802:	fb02 f103 	mul.w	r1, r2, r3
 8001806:	463b      	mov	r3, r7
 8001808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	18ca      	adds	r2, r1, r3
 8001814:	463b      	mov	r3, r7
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	4413      	add	r3, r2
 800181a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
									  int Distance4 = 100* b[0]  +10*b[1] +b[2];//rider
 800181e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	fb02 f103 	mul.w	r1, r2, r3
 800182a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	18ca      	adds	r2, r1, r3
 800183a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4413      	add	r3, r2
 8001842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

									  for(int i=0;i<11;i++)
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800184c:	e023      	b.n	8001896 <main+0xcd2>
 800184e:	bf00      	nop
 8001850:	24000314 	.word	0x24000314
 8001854:	2400012c 	.word	0x2400012c
 8001858:	2400013c 	.word	0x2400013c
 800185c:	240003ac 	.word	0x240003ac
 8001860:	240002c4 	.word	0x240002c4
 8001864:	58021800 	.word	0x58021800
 8001868:	58021000 	.word	0x58021000
 800186c:	58020000 	.word	0x58020000
 8001870:	24000054 	.word	0x24000054
									  {a[i]=RxData_From_Node3[i]-'0';}
 8001874:	4a8d      	ldr	r2, [pc, #564]	; (8001aac <main+0xee8>)
 8001876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800187a:	4413      	add	r3, r2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001882:	463b      	mov	r3, r7
 8001884:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
									  for(int i=0;i<11;i++)
 800188c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001890:	3301      	adds	r3, #1
 8001892:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800189a:	2b0a      	cmp	r3, #10
 800189c:	ddea      	ble.n	8001874 <main+0xcb0>
									  for(int l=12;l<=14;l++)
 800189e:	230c      	movs	r3, #12
 80018a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80018a4:	e010      	b.n	80018c8 <main+0xd04>
									  {a[l]=RxData_From_Node3[l]-'0';}
 80018a6:	4a81      	ldr	r2, [pc, #516]	; (8001aac <main+0xee8>)
 80018a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80018b4:	463b      	mov	r3, r7
 80018b6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80018ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
									  for(int l=12;l<=14;l++)
 80018be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80018c2:	3301      	adds	r3, #1
 80018c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80018c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80018cc:	2b0e      	cmp	r3, #14
 80018ce:	ddea      	ble.n	80018a6 <main+0xce2>
									  for(int j=0;j<3;j++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80018d6:	e011      	b.n	80018fc <main+0xd38>
									  {b[j]=RxData_From_Node1[j]-'0';}
 80018d8:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <main+0xeec>)
 80018da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80018e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ea:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80018ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
									  for(int j=0;j<3;j++)
 80018f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018f6:	3301      	adds	r3, #1
 80018f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80018fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001900:	2b02      	cmp	r3, #2
 8001902:	dde9      	ble.n	80018d8 <main+0xd14>

									  int jodo = 100* a[12]  +10*a[13] +a[14];
 8001904:	463b      	mov	r3, r7
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	2264      	movs	r2, #100	; 0x64
 800190a:	fb02 f103 	mul.w	r1, r2, r3
 800190e:	463b      	mov	r3, r7
 8001910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	18ca      	adds	r2, r1, r3
 800191c:	463b      	mov	r3, r7
 800191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001920:	4413      	add	r3, r2
 8001922:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
									       htim3.Instance->CCR1=jodo;
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <main+0xef0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
									       if (jodo<45)
 8001930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001934:	2b2c      	cmp	r3, #44	; 0x2c
 8001936:	dc03      	bgt.n	8001940 <main+0xd7c>
									       {
									     	  htim3.Instance->CCR1=0;
 8001938:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <main+0xef0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
									       }

								     if (Distance1 <= 15 || Distance2 <= 15 || Distance3 <= 15)
 8001940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001944:	2b0f      	cmp	r3, #15
 8001946:	dd07      	ble.n	8001958 <main+0xd94>
 8001948:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800194c:	2b0f      	cmp	r3, #15
 800194e:	dd03      	ble.n	8001958 <main+0xd94>
 8001950:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001954:	2b0f      	cmp	r3, #15
 8001956:	dc12      	bgt.n	800197e <main+0xdba>
										 	  {
										 	  TIM2->ARR = C;
 8001958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
										 	  TIM2->CCR1 = TIM2->ARR / 2;
 8001962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	6353      	str	r3, [r2, #52]	; 0x34
										 	  HAL_Delay(25);
 8001970:	2019      	movs	r0, #25
 8001972:	f001 fa39 	bl	8002de8 <HAL_Delay>
										 	  TIM2->CCR1 = 0;
 8001976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800197a:	2200      	movs	r2, #0
 800197c:	635a      	str	r2, [r3, #52]	; 0x34

										 	  }
									  if (isDataAvailable(2) == 1)
 800197e:	2002      	movs	r0, #2
 8001980:	f7ff f80a 	bl	8000998 <isDataAvailable>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d102      	bne.n	8001990 <main+0xdcc>
									  {
										  NRF24_Receive(RxData);
 800198a:	484b      	ldr	r0, [pc, #300]	; (8001ab8 <main+0xef4>)
 800198c:	f7ff f824 	bl	80009d8 <NRF24_Receive>
									  }
									  htim1.Instance->CCR3 = 80;
 8001990:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <main+0xef8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2250      	movs	r2, #80	; 0x50
 8001996:	63da      	str	r2, [r3, #60]	; 0x3c
									  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199e:	4848      	ldr	r0, [pc, #288]	; (8001ac0 <main+0xefc>)
 80019a0:	f003 fd46 	bl	8005430 <HAL_GPIO_WritePin>
									  HAL_Delay(100);
 80019a4:	2064      	movs	r0, #100	; 0x64
 80019a6:	f001 fa1f 	bl	8002de8 <HAL_Delay>
									  if(RxData[2]==0)
 80019aa:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <main+0xef4>)
 80019ac:	789b      	ldrb	r3, [r3, #2]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d12c      	bne.n	8001a0c <main+0xe48>
										  {
										  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b8:	4842      	ldr	r0, [pc, #264]	; (8001ac4 <main+0xf00>)
 80019ba:	f003 fd39 	bl	8005430 <HAL_GPIO_WritePin>
										  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2108      	movs	r1, #8
 80019c2:	4841      	ldr	r0, [pc, #260]	; (8001ac8 <main+0xf04>)
 80019c4:	f003 fd34 	bl	8005430 <HAL_GPIO_WritePin>
										  htim1.Instance->CCR1=RxData[0];
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <main+0xef4>)
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <main+0xef8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
										  htim1.Instance->CCR2=RxData[0];
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <main+0xef4>)
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <main+0xef8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	639a      	str	r2, [r3, #56]	; 0x38
										  if(RxData[0]>=100)
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <main+0xef4>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b63      	cmp	r3, #99	; 0x63
 80019e2:	d907      	bls.n	80019f4 <main+0xe30>
											  {
												  htim1.Instance->CCR1=99;
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <main+0xef8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2263      	movs	r2, #99	; 0x63
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34
												  htim1.Instance->CCR2=99;
 80019ec:	4b33      	ldr	r3, [pc, #204]	; (8001abc <main+0xef8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2263      	movs	r2, #99	; 0x63
 80019f2:	639a      	str	r2, [r3, #56]	; 0x38
											  }
		  							  	  if(Distance4<=20)
 80019f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f8:	2b14      	cmp	r3, #20
 80019fa:	dc07      	bgt.n	8001a0c <main+0xe48>
		  							  	  {
		  							  		  htim1.Instance->CCR1=0;
 80019fc:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <main+0xef8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34
		  							  		  htim1.Instance->CCR2=0;
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <main+0xef8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	639a      	str	r2, [r3, #56]	; 0x38
		  							  	  }
										  }
									  if(RxData[2]==1)
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <main+0xef4>)
 8001a0e:	789b      	ldrb	r3, [r3, #2]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d12c      	bne.n	8001a6e <main+0xeaa>
										  {
										  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1a:	482a      	ldr	r0, [pc, #168]	; (8001ac4 <main+0xf00>)
 8001a1c:	f003 fd08 	bl	8005430 <HAL_GPIO_WritePin>
										  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2108      	movs	r1, #8
 8001a24:	4828      	ldr	r0, [pc, #160]	; (8001ac8 <main+0xf04>)
 8001a26:	f003 fd03 	bl	8005430 <HAL_GPIO_WritePin>
										  htim1.Instance->CCR1=RxData[0];
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <main+0xef4>)
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <main+0xef8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34
										  htim1.Instance->CCR2=RxData[0];
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <main+0xef4>)
 8001a36:	781a      	ldrb	r2, [r3, #0]
 8001a38:	4b20      	ldr	r3, [pc, #128]	; (8001abc <main+0xef8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38
										  if(RxData[0]>=100)
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <main+0xef4>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b63      	cmp	r3, #99	; 0x63
 8001a44:	d907      	bls.n	8001a56 <main+0xe92>
											  {
												  htim1.Instance->CCR1=99;
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <main+0xef8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2263      	movs	r2, #99	; 0x63
 8001a4c:	635a      	str	r2, [r3, #52]	; 0x34
												  htim1.Instance->CCR2=99;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <main+0xef8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2263      	movs	r2, #99	; 0x63
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
											  }
											  if(Distance4<=20)
 8001a56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a5a:	2b14      	cmp	r3, #20
 8001a5c:	dc07      	bgt.n	8001a6e <main+0xeaa>
											  {
												  htim1.Instance->CCR1=0;
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <main+0xef8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2200      	movs	r2, #0
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34
												  htim1.Instance->CCR2=0;
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <main+0xef8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
											  }
										  }


		  							  if(RxData_From_Node4[0]=='G')
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <main+0xf08>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b47      	cmp	r3, #71	; 0x47
 8001a74:	d112      	bne.n	8001a9c <main+0xed8>
		  							  {
		  								  htim1.Instance->CCR3 = 90;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <main+0xef8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	225a      	movs	r2, #90	; 0x5a
 8001a7c:	63da      	str	r2, [r3, #60]	; 0x3c
		  								  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a84:	480e      	ldr	r0, [pc, #56]	; (8001ac0 <main+0xefc>)
 8001a86:	f003 fcd3 	bl	8005430 <HAL_GPIO_WritePin>
		  								  HAL_Delay(200);
 8001a8a:	20c8      	movs	r0, #200	; 0xc8
 8001a8c:	f001 f9ac 	bl	8002de8 <HAL_Delay>
		  								  htim1.Instance->CCR3 = 0;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <main+0xef8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a98:	f7ff b8d4 	b.w	8000c44 <main+0x80>
		  						  while (RxData_From_Node4[0]=='R')
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <main+0xf08>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b52      	cmp	r3, #82	; 0x52
 8001aa2:	f43f ae89 	beq.w	80017b8 <main+0xbf4>
  {
 8001aa6:	f7ff b8cd 	b.w	8000c44 <main+0x80>
 8001aaa:	bf00      	nop
 8001aac:	24000314 	.word	0x24000314
 8001ab0:	2400012c 	.word	0x2400012c
 8001ab4:	2400013c 	.word	0x2400013c
 8001ab8:	240003ac 	.word	0x240003ac
 8001abc:	240002c4 	.word	0x240002c4
 8001ac0:	58021800 	.word	0x58021800
 8001ac4:	58021000 	.word	0x58021000
 8001ac8:	58020000 	.word	0x58020000
 8001acc:	24000054 	.word	0x24000054

08001ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b09c      	sub	sp, #112	; 0x70
 8001ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	224c      	movs	r2, #76	; 0x4c
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00a fa50 	bl	800bf84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00a fa4a 	bl	800bf84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001af0:	2004      	movs	r0, #4
 8001af2:	f003 fcb7 	bl	8005464 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <SystemClock_Config+0xe4>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <SystemClock_Config+0xe4>)
 8001b00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b04:	6193      	str	r3, [r2, #24]
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <SystemClock_Config+0xe4>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b12:	bf00      	nop
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <SystemClock_Config+0xe4>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b20:	d1f8      	bne.n	8001b14 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <SystemClock_Config+0xe8>)
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <SystemClock_Config+0xe8>)
 8001b28:	f023 0303 	bic.w	r3, r3, #3
 8001b2c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b42:	2304      	movs	r3, #4
 8001b44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b46:	2308      	movs	r3, #8
 8001b48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b56:	230c      	movs	r3, #12
 8001b58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fcd6 	bl	8005518 <HAL_RCC_OscConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b72:	f000 fd0d 	bl	8002590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b76:	233f      	movs	r3, #63	; 0x3f
 8001b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b86:	2340      	movs	r3, #64	; 0x40
 8001b88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b8a:	2340      	movs	r3, #64	; 0x40
 8001b8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b94:	2340      	movs	r3, #64	; 0x40
 8001b96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f004 f8bf 	bl	8005d20 <HAL_RCC_ClockConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001ba8:	f000 fcf2 	bl	8002590 <Error_Handler>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3770      	adds	r7, #112	; 0x70
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	58024800 	.word	0x58024800
 8001bb8:	58024400 	.word	0x58024400

08001bbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
 8001bdc:	615a      	str	r2, [r3, #20]
 8001bde:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001be2:	4a30      	ldr	r2, [pc, #192]	; (8001ca4 <MX_ADC1_Init+0xe8>)
 8001be4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001be6:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001bec:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c3c:	4818      	ldr	r0, [pc, #96]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c3e:	f001 fa83 	bl	8003148 <HAL_ADC_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c48:	f000 fca2 	bl	8002590 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	4812      	ldr	r0, [pc, #72]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c58:	f001 ffa8 	bl	8003bac <HAL_ADCEx_MultiModeConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001c62:	f000 fc95 	bl	8002590 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <MX_ADC1_Init+0xec>)
 8001c68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c72:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c76:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_ADC1_Init+0xe4>)
 8001c8a:	f001 fbb7 	bl	80033fc <HAL_ADC_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c94:	f000 fc7c 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	24000188 	.word	0x24000188
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	08600004 	.word	0x08600004

08001cac <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001cb0:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cb2:	4a80      	ldr	r2, [pc, #512]	; (8001eb4 <MX_FDCAN1_Init+0x208>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001cb6:	4b7e      	ldr	r3, [pc, #504]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cbc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001cbe:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001cc4:	4b7a      	ldr	r3, [pc, #488]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001cca:	4b79      	ldr	r3, [pc, #484]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001cd0:	4b77      	ldr	r3, [pc, #476]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001cd6:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001cdc:	4b74      	ldr	r3, [pc, #464]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001ce2:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ce8:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cea:	2202      	movs	r2, #2
 8001cec:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001cee:	4b70      	ldr	r3, [pc, #448]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001cf4:	4b6e      	ldr	r3, [pc, #440]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8001cfa:	4b6d      	ldr	r3, [pc, #436]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001cfc:	2205      	movs	r2, #5
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001d00:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d02:	2204      	movs	r2, #4
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001d06:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 3;
 8001d0c:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d0e:	2203      	movs	r2, #3
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001d12:	4b67      	ldr	r3, [pc, #412]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001d18:	4b65      	ldr	r3, [pc, #404]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 8001d1e:	4b64      	ldr	r3, [pc, #400]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d20:	2206      	movs	r2, #6
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 8001d24:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_16;
 8001d2a:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d2c:	2206      	movs	r2, #6
 8001d2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001d30:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_16;
 8001d36:	4b5e      	ldr	r3, [pc, #376]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d38:	2206      	movs	r2, #6
 8001d3a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001d3c:	4b5c      	ldr	r3, [pc, #368]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001d42:	4b5b      	ldr	r3, [pc, #364]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d4e:	4b58      	ldr	r3, [pc, #352]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 8001d54:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d56:	2206      	movs	r2, #6
 8001d58:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001d5a:	4855      	ldr	r0, [pc, #340]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d5c:	f002 f8d2 	bl	8003f04 <HAL_FDCAN_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8001d66:	f000 fc13 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  	  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001d6a:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <MX_FDCAN1_Init+0x20c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
        sFilterConfig.FilterIndex = 1;
 8001d70:	4b51      	ldr	r3, [pc, #324]	; (8001eb8 <MX_FDCAN1_Init+0x20c>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	605a      	str	r2, [r3, #4]
        sFilterConfig.RxBufferIndex = 1;
 8001d76:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <MX_FDCAN1_Init+0x20c>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	619a      	str	r2, [r3, #24]
        sFilterConfig.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8001d7c:	4b4e      	ldr	r3, [pc, #312]	; (8001eb8 <MX_FDCAN1_Init+0x20c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	609a      	str	r2, [r3, #8]
        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001d82:	4b4d      	ldr	r3, [pc, #308]	; (8001eb8 <MX_FDCAN1_Init+0x20c>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	60da      	str	r2, [r3, #12]
        sFilterConfig.FilterID1 = 0x33; // ID Node2
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <MX_FDCAN1_Init+0x20c>)
 8001d8a:	2233      	movs	r2, #51	; 0x33
 8001d8c:	611a      	str	r2, [r3, #16]
        sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8001d8e:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <MX_FDCAN1_Init+0x20c>)
 8001d90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d94:	615a      	str	r2, [r3, #20]
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001d96:	4948      	ldr	r1, [pc, #288]	; (8001eb8 <MX_FDCAN1_Init+0x20c>)
 8001d98:	4845      	ldr	r0, [pc, #276]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001d9a:	f002 fa95 	bl	80042c8 <HAL_FDCAN_ConfigFilter>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_FDCAN1_Init+0xfc>
               {
                  Error_Handler();
 8001da4:	f000 fbf4 	bl	8002590 <Error_Handler>
               }
//
  	  	sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 8001da8:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <MX_FDCAN1_Init+0x210>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
        sFilterConfig1.FilterIndex = 2;
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <MX_FDCAN1_Init+0x210>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	605a      	str	r2, [r3, #4]
        sFilterConfig1.RxBufferIndex = 2;
 8001db4:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <MX_FDCAN1_Init+0x210>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	619a      	str	r2, [r3, #24]
        sFilterConfig1.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8001dba:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <MX_FDCAN1_Init+0x210>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	609a      	str	r2, [r3, #8]
        sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001dc0:	4b3e      	ldr	r3, [pc, #248]	; (8001ebc <MX_FDCAN1_Init+0x210>)
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	60da      	str	r2, [r3, #12]
        sFilterConfig1.FilterID1 = 0x11; // ID Node2
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <MX_FDCAN1_Init+0x210>)
 8001dc8:	2211      	movs	r2, #17
 8001dca:	611a      	str	r2, [r3, #16]
        sFilterConfig1.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <MX_FDCAN1_Init+0x210>)
 8001dce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001dd2:	615a      	str	r2, [r3, #20]
//
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig1) != HAL_OK)
 8001dd4:	4939      	ldr	r1, [pc, #228]	; (8001ebc <MX_FDCAN1_Init+0x210>)
 8001dd6:	4836      	ldr	r0, [pc, #216]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001dd8:	f002 fa76 	bl	80042c8 <HAL_FDCAN_ConfigFilter>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_FDCAN1_Init+0x13a>
        {
           Error_Handler();
 8001de2:	f000 fbd5 	bl	8002590 <Error_Handler>
        }
  	  	sFilterConfig2.IdType = FDCAN_STANDARD_ID;
 8001de6:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <MX_FDCAN1_Init+0x214>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
        sFilterConfig2.FilterIndex = 0;
 8001dec:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <MX_FDCAN1_Init+0x214>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	605a      	str	r2, [r3, #4]
        sFilterConfig2.RxBufferIndex = 0;
 8001df2:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <MX_FDCAN1_Init+0x214>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
        sFilterConfig2.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <MX_FDCAN1_Init+0x214>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	609a      	str	r2, [r3, #8]
        sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 8001dfe:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <MX_FDCAN1_Init+0x214>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	60da      	str	r2, [r3, #12]
        sFilterConfig2.FilterID1 = 0x44; // ID Node2
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <MX_FDCAN1_Init+0x214>)
 8001e06:	2244      	movs	r2, #68	; 0x44
 8001e08:	611a      	str	r2, [r3, #16]
        sFilterConfig2.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <MX_FDCAN1_Init+0x214>)
 8001e0c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e10:	615a      	str	r2, [r3, #20]

        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig2) != HAL_OK)
 8001e12:	492b      	ldr	r1, [pc, #172]	; (8001ec0 <MX_FDCAN1_Init+0x214>)
 8001e14:	4826      	ldr	r0, [pc, #152]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001e16:	f002 fa57 	bl	80042c8 <HAL_FDCAN_ConfigFilter>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_FDCAN1_Init+0x178>
               {
                  Error_Handler();
 8001e20:	f000 fbb6 	bl	8002590 <Error_Handler>
               }

        if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001e24:	4822      	ldr	r0, [pc, #136]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001e26:	f002 fac5 	bl	80043b4 <HAL_FDCAN_Start>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_FDCAN1_Init+0x188>
              {
                Error_Handler();
 8001e30:	f000 fbae 	bl	8002590 <Error_Handler>





        if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_BUFFER_NEW_MESSAGE, 0) != HAL_OK)
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e3a:	481d      	ldr	r0, [pc, #116]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001e3c:	f002 fc54 	bl	80046e8 <HAL_FDCAN_ActivateNotification>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_FDCAN1_Init+0x19e>
          {
            /* Notification Error */
            Error_Handler();
 8001e46:	f000 fba3 	bl	8002590 <Error_Handler>
          }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001e50:	f002 fc4a 	bl	80046e8 <HAL_FDCAN_ActivateNotification>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_FDCAN1_Init+0x1b2>
              {
                Error_Handler();
 8001e5a:	f000 fb99 	bl	8002590 <Error_Handler>
              }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2110      	movs	r1, #16
 8001e62:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <MX_FDCAN1_Init+0x204>)
 8001e64:	f002 fc40 	bl	80046e8 <HAL_FDCAN_ActivateNotification>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_FDCAN1_Init+0x1c6>
              {
                Error_Handler();
 8001e6e:	f000 fb8f 	bl	8002590 <Error_Handler>
              }

            TxHeader.Identifier = 0x22;
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <MX_FDCAN1_Init+0x218>)
 8001e74:	2222      	movs	r2, #34	; 0x22
 8001e76:	601a      	str	r2, [r3, #0]
            TxHeader.IdType = FDCAN_STANDARD_ID;
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <MX_FDCAN1_Init+0x218>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
            TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_FDCAN1_Init+0x218>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
            TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <MX_FDCAN1_Init+0x218>)
 8001e86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e8a:	60da      	str	r2, [r3, #12]
            TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <MX_FDCAN1_Init+0x218>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
            TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_FDCAN1_Init+0x218>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	615a      	str	r2, [r3, #20]
            TxHeader.FDFormat = FDCAN_FD_CAN;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <MX_FDCAN1_Init+0x218>)
 8001e9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e9e:	619a      	str	r2, [r3, #24]
            TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_FDCAN1_Init+0x218>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
            TxHeader.MessageMarker = 0x0;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <MX_FDCAN1_Init+0x218>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]



  /* USER CODE END FDCAN1_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	240001f0 	.word	0x240001f0
 8001eb4:	4000a000 	.word	0x4000a000
 8001eb8:	24000034 	.word	0x24000034
 8001ebc:	2400010c 	.word	0x2400010c
 8001ec0:	2400044c 	.word	0x2400044c
 8001ec4:	24000400 	.word	0x24000400

08001ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001ece:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <MX_SPI1_Init+0xa8>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001ed4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001ef4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ef8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001efc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <MX_SPI1_Init+0xa4>)
 8001f5a:	f006 fb17 	bl	800858c <HAL_SPI_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001f64:	f000 fb14 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	24000324 	.word	0x24000324
 8001f70:	40013000 	.word	0x40013000

08001f74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b09c      	sub	sp, #112	; 0x70
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
 8001fa4:	615a      	str	r2, [r3, #20]
 8001fa6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2234      	movs	r2, #52	; 0x34
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f009 ffe8 	bl	800bf84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <MX_TIM1_Init+0x180>)
 8001fb6:	4a50      	ldr	r2, [pc, #320]	; (80020f8 <MX_TIM1_Init+0x184>)
 8001fb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65;
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <MX_TIM1_Init+0x180>)
 8001fbc:	2241      	movs	r2, #65	; 0x41
 8001fbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <MX_TIM1_Init+0x180>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001fc6:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <MX_TIM1_Init+0x180>)
 8001fc8:	2264      	movs	r2, #100	; 0x64
 8001fca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <MX_TIM1_Init+0x180>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fd2:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <MX_TIM1_Init+0x180>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd8:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <MX_TIM1_Init+0x180>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fde:	4845      	ldr	r0, [pc, #276]	; (80020f4 <MX_TIM1_Init+0x180>)
 8001fe0:	f007 fb93 	bl	800970a <HAL_TIM_Base_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001fea:	f000 fad1 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ff4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	483e      	ldr	r0, [pc, #248]	; (80020f4 <MX_TIM1_Init+0x180>)
 8001ffc:	f007 ff80 	bl	8009f00 <HAL_TIM_ConfigClockSource>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002006:	f000 fac3 	bl	8002590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800200a:	483a      	ldr	r0, [pc, #232]	; (80020f4 <MX_TIM1_Init+0x180>)
 800200c:	f007 fbd4 	bl	80097b8 <HAL_TIM_PWM_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002016:	f000 fabb 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002026:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800202a:	4619      	mov	r1, r3
 800202c:	4831      	ldr	r0, [pc, #196]	; (80020f4 <MX_TIM1_Init+0x180>)
 800202e:	f008 fcc5 	bl	800a9bc <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002038:	f000 faaa 	bl	8002590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203c:	2360      	movs	r3, #96	; 0x60
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8002040:	2332      	movs	r3, #50	; 0x32
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002044:	2300      	movs	r3, #0
 8002046:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002048:	2300      	movs	r3, #0
 800204a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002058:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800205c:	2200      	movs	r2, #0
 800205e:	4619      	mov	r1, r3
 8002060:	4824      	ldr	r0, [pc, #144]	; (80020f4 <MX_TIM1_Init+0x180>)
 8002062:	f007 fe39 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800206c:	f000 fa90 	bl	8002590 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002070:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002074:	2204      	movs	r2, #4
 8002076:	4619      	mov	r1, r3
 8002078:	481e      	ldr	r0, [pc, #120]	; (80020f4 <MX_TIM1_Init+0x180>)
 800207a:	f007 fe2d 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002084:	f000 fa84 	bl	8002590 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002088:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800208c:	2208      	movs	r2, #8
 800208e:	4619      	mov	r1, r3
 8002090:	4818      	ldr	r0, [pc, #96]	; (80020f4 <MX_TIM1_Init+0x180>)
 8002092:	f007 fe21 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800209c:	f000 fa78 	bl	8002590 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <MX_TIM1_Init+0x180>)
 80020d6:	f008 fcff 	bl	800aad8 <HAL_TIMEx_ConfigBreakDeadTime>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80020e0:	f000 fa56 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <MX_TIM1_Init+0x180>)
 80020e6:	f000 fc11 	bl	800290c <HAL_TIM_MspPostInit>

}
 80020ea:	bf00      	nop
 80020ec:	3770      	adds	r7, #112	; 0x70
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	240002c4 	.word	0x240002c4
 80020f8:	40010000 	.word	0x40010000

080020fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	; 0x38
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]
 800212a:	615a      	str	r2, [r3, #20]
 800212c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002134:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128-1;
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002138:	227f      	movs	r2, #127	; 0x7f
 800213a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800213c:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <MX_TIM2_Init+0xe8>)
 800213e:	2210      	movs	r2, #16
 8002140:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002148:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <MX_TIM2_Init+0xe8>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002156:	4823      	ldr	r0, [pc, #140]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002158:	f007 fad7 	bl	800970a <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002162:	f000 fa15 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800216c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002170:	4619      	mov	r1, r3
 8002172:	481c      	ldr	r0, [pc, #112]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002174:	f007 fec4 	bl	8009f00 <HAL_TIM_ConfigClockSource>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800217e:	f000 fa07 	bl	8002590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002182:	4818      	ldr	r0, [pc, #96]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002184:	f007 fb18 	bl	80097b8 <HAL_TIM_PWM_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800218e:	f000 f9ff 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	4810      	ldr	r0, [pc, #64]	; (80021e4 <MX_TIM2_Init+0xe8>)
 80021a2:	f008 fc0b 	bl	800a9bc <HAL_TIMEx_MasterConfigSynchronization>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021ac:	f000 f9f0 	bl	8002590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b0:	2360      	movs	r3, #96	; 0x60
 80021b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c0:	463b      	mov	r3, r7
 80021c2:	2200      	movs	r2, #0
 80021c4:	4619      	mov	r1, r3
 80021c6:	4807      	ldr	r0, [pc, #28]	; (80021e4 <MX_TIM2_Init+0xe8>)
 80021c8:	f007 fd86 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80021d2:	f000 f9dd 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021d6:	4803      	ldr	r0, [pc, #12]	; (80021e4 <MX_TIM2_Init+0xe8>)
 80021d8:	f000 fb98 	bl	800290c <HAL_TIM_MspPostInit>

}
 80021dc:	bf00      	nop
 80021de:	3738      	adds	r7, #56	; 0x38
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	240003b4 	.word	0x240003b4

080021e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002208:	463b      	mov	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
 8002216:	615a      	str	r2, [r3, #20]
 8002218:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800221a:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <MX_TIM3_Init+0xe4>)
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <MX_TIM3_Init+0xe8>)
 800221e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <MX_TIM3_Init+0xe4>)
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <MX_TIM3_Init+0xe4>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <MX_TIM3_Init+0xe4>)
 800222e:	2264      	movs	r2, #100	; 0x64
 8002230:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <MX_TIM3_Init+0xe4>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <MX_TIM3_Init+0xe4>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800223e:	4823      	ldr	r0, [pc, #140]	; (80022cc <MX_TIM3_Init+0xe4>)
 8002240:	f007 fa63 	bl	800970a <HAL_TIM_Base_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800224a:	f000 f9a1 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002258:	4619      	mov	r1, r3
 800225a:	481c      	ldr	r0, [pc, #112]	; (80022cc <MX_TIM3_Init+0xe4>)
 800225c:	f007 fe50 	bl	8009f00 <HAL_TIM_ConfigClockSource>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002266:	f000 f993 	bl	8002590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800226a:	4818      	ldr	r0, [pc, #96]	; (80022cc <MX_TIM3_Init+0xe4>)
 800226c:	f007 faa4 	bl	80097b8 <HAL_TIM_PWM_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002276:	f000 f98b 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	4810      	ldr	r0, [pc, #64]	; (80022cc <MX_TIM3_Init+0xe4>)
 800228a:	f008 fb97 	bl	800a9bc <HAL_TIMEx_MasterConfigSynchronization>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002294:	f000 f97c 	bl	8002590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002298:	2360      	movs	r3, #96	; 0x60
 800229a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 800229c:	2332      	movs	r3, #50	; 0x32
 800229e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a8:	463b      	mov	r3, r7
 80022aa:	2200      	movs	r2, #0
 80022ac:	4619      	mov	r1, r3
 80022ae:	4807      	ldr	r0, [pc, #28]	; (80022cc <MX_TIM3_Init+0xe4>)
 80022b0:	f007 fd12 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80022ba:	f000 f969 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022be:	4803      	ldr	r0, [pc, #12]	; (80022cc <MX_TIM3_Init+0xe4>)
 80022c0:	f000 fb24 	bl	800290c <HAL_TIM_MspPostInit>

}
 80022c4:	bf00      	nop
 80022c6:	3738      	adds	r7, #56	; 0x38
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2400013c 	.word	0x2400013c
 80022d0:	40000400 	.word	0x40000400

080022d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <MX_USART3_UART_Init+0x90>)
 80022da:	4a23      	ldr	r2, [pc, #140]	; (8002368 <MX_USART3_UART_Init+0x94>)
 80022dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <MX_USART3_UART_Init+0x90>)
 80022e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022e6:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <MX_USART3_UART_Init+0x90>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <MX_USART3_UART_Init+0x90>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <MX_USART3_UART_Init+0x90>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <MX_USART3_UART_Init+0x90>)
 80022fa:	220c      	movs	r2, #12
 80022fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fe:	4b19      	ldr	r3, [pc, #100]	; (8002364 <MX_USART3_UART_Init+0x90>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <MX_USART3_UART_Init+0x90>)
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <MX_USART3_UART_Init+0x90>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <MX_USART3_UART_Init+0x90>)
 8002312:	2200      	movs	r2, #0
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <MX_USART3_UART_Init+0x90>)
 8002318:	2200      	movs	r2, #0
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800231c:	4811      	ldr	r0, [pc, #68]	; (8002364 <MX_USART3_UART_Init+0x90>)
 800231e:	f008 fc99 	bl	800ac54 <HAL_UART_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002328:	f000 f932 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800232c:	2100      	movs	r1, #0
 800232e:	480d      	ldr	r0, [pc, #52]	; (8002364 <MX_USART3_UART_Init+0x90>)
 8002330:	f009 fd2c 	bl	800bd8c <HAL_UARTEx_SetTxFifoThreshold>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800233a:	f000 f929 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800233e:	2100      	movs	r1, #0
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <MX_USART3_UART_Init+0x90>)
 8002342:	f009 fd61 	bl	800be08 <HAL_UARTEx_SetRxFifoThreshold>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800234c:	f000 f920 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002350:	4804      	ldr	r0, [pc, #16]	; (8002364 <MX_USART3_UART_Init+0x90>)
 8002352:	f009 fce2 	bl	800bd1a <HAL_UARTEx_DisableFifoMode>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800235c:	f000 f918 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	2400006c 	.word	0x2400006c
 8002368:	40004800 	.word	0x40004800

0800236c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	; 0x38
 8002370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002382:	4b7c      	ldr	r3, [pc, #496]	; (8002574 <MX_GPIO_Init+0x208>)
 8002384:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002388:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <MX_GPIO_Init+0x208>)
 800238a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002392:	4b78      	ldr	r3, [pc, #480]	; (8002574 <MX_GPIO_Init+0x208>)
 8002394:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a0:	4b74      	ldr	r3, [pc, #464]	; (8002574 <MX_GPIO_Init+0x208>)
 80023a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023a6:	4a73      	ldr	r2, [pc, #460]	; (8002574 <MX_GPIO_Init+0x208>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80023b0:	4b70      	ldr	r3, [pc, #448]	; (8002574 <MX_GPIO_Init+0x208>)
 80023b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023be:	4b6d      	ldr	r3, [pc, #436]	; (8002574 <MX_GPIO_Init+0x208>)
 80023c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023c4:	4a6b      	ldr	r2, [pc, #428]	; (8002574 <MX_GPIO_Init+0x208>)
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80023ce:	4b69      	ldr	r3, [pc, #420]	; (8002574 <MX_GPIO_Init+0x208>)
 80023d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023dc:	4b65      	ldr	r3, [pc, #404]	; (8002574 <MX_GPIO_Init+0x208>)
 80023de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023e2:	4a64      	ldr	r2, [pc, #400]	; (8002574 <MX_GPIO_Init+0x208>)
 80023e4:	f043 0320 	orr.w	r3, r3, #32
 80023e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80023ec:	4b61      	ldr	r3, [pc, #388]	; (8002574 <MX_GPIO_Init+0x208>)
 80023ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023fa:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <MX_GPIO_Init+0x208>)
 80023fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002400:	4a5c      	ldr	r2, [pc, #368]	; (8002574 <MX_GPIO_Init+0x208>)
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800240a:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <MX_GPIO_Init+0x208>)
 800240c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002418:	4b56      	ldr	r3, [pc, #344]	; (8002574 <MX_GPIO_Init+0x208>)
 800241a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800241e:	4a55      	ldr	r2, [pc, #340]	; (8002574 <MX_GPIO_Init+0x208>)
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002428:	4b52      	ldr	r3, [pc, #328]	; (8002574 <MX_GPIO_Init+0x208>)
 800242a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <MX_GPIO_Init+0x208>)
 8002438:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800243c:	4a4d      	ldr	r2, [pc, #308]	; (8002574 <MX_GPIO_Init+0x208>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002446:	4b4b      	ldr	r3, [pc, #300]	; (8002574 <MX_GPIO_Init+0x208>)
 8002448:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002454:	4b47      	ldr	r3, [pc, #284]	; (8002574 <MX_GPIO_Init+0x208>)
 8002456:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800245a:	4a46      	ldr	r2, [pc, #280]	; (8002574 <MX_GPIO_Init+0x208>)
 800245c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002460:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002464:	4b43      	ldr	r3, [pc, #268]	; (8002574 <MX_GPIO_Init+0x208>)
 8002466:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 7184 	mov.w	r1, #264	; 0x108
 8002478:	483f      	ldr	r0, [pc, #252]	; (8002578 <MX_GPIO_Init+0x20c>)
 800247a:	f002 ffd9 	bl	8005430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	2164      	movs	r1, #100	; 0x64
 8002482:	483e      	ldr	r0, [pc, #248]	; (800257c <MX_GPIO_Init+0x210>)
 8002484:	f002 ffd4 	bl	8005430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800248e:	483c      	ldr	r0, [pc, #240]	; (8002580 <MX_GPIO_Init+0x214>)
 8002490:	f002 ffce 	bl	8005430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 8002494:	2200      	movs	r2, #0
 8002496:	f24c 0101 	movw	r1, #49153	; 0xc001
 800249a:	483a      	ldr	r0, [pc, #232]	; (8002584 <MX_GPIO_Init+0x218>)
 800249c:	f002 ffc8 	bl	8005430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ce_Pin|csn_Pin, GPIO_PIN_RESET);
 80024a0:	2200      	movs	r2, #0
 80024a2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80024a6:	4838      	ldr	r0, [pc, #224]	; (8002588 <MX_GPIO_Init+0x21c>)
 80024a8:	f002 ffc2 	bl	8005430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IRQ_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80024b2:	4836      	ldr	r0, [pc, #216]	; (800258c <MX_GPIO_Init+0x220>)
 80024b4:	f002 ffbc 	bl	8005430 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 80024b8:	f44f 7384 	mov.w	r3, #264	; 0x108
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ce:	4619      	mov	r1, r3
 80024d0:	4829      	ldr	r0, [pc, #164]	; (8002578 <MX_GPIO_Init+0x20c>)
 80024d2:	f002 fdfd 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80024d6:	2364      	movs	r3, #100	; 0x64
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024da:	2301      	movs	r3, #1
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ea:	4619      	mov	r1, r3
 80024ec:	4823      	ldr	r0, [pc, #140]	; (800257c <MX_GPIO_Init+0x210>)
 80024ee:	f002 fdef 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80024f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	481d      	ldr	r0, [pc, #116]	; (8002580 <MX_GPIO_Init+0x214>)
 800250c:	f002 fde0 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8002510:	f24c 0301 	movw	r3, #49153	; 0xc001
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002516:	2301      	movs	r3, #1
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002526:	4619      	mov	r1, r3
 8002528:	4816      	ldr	r0, [pc, #88]	; (8002584 <MX_GPIO_Init+0x218>)
 800252a:	f002 fdd1 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ce_Pin csn_Pin */
  GPIO_InitStruct.Pin = ce_Pin|csn_Pin;
 800252e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	4810      	ldr	r0, [pc, #64]	; (8002588 <MX_GPIO_Init+0x21c>)
 8002548:	f002 fdc2 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin PG14 */
  GPIO_InitStruct.Pin = IRQ_Pin|GPIO_PIN_14;
 800254c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002552:	2301      	movs	r3, #1
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800255e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002562:	4619      	mov	r1, r3
 8002564:	4809      	ldr	r0, [pc, #36]	; (800258c <MX_GPIO_Init+0x220>)
 8002566:	f002 fdb3 	bl	80050d0 <HAL_GPIO_Init>

}
 800256a:	bf00      	nop
 800256c:	3738      	adds	r7, #56	; 0x38
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	58024400 	.word	0x58024400
 8002578:	58020000 	.word	0x58020000
 800257c:	58020400 	.word	0x58020400
 8002580:	58021400 	.word	0x58021400
 8002584:	58021000 	.word	0x58021000
 8002588:	58020c00 	.word	0x58020c00
 800258c:	58021800 	.word	0x58021800

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002598:	e7fe      	b.n	8002598 <Error_Handler+0x8>
	...

0800259c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_MspInit+0x30>)
 80025a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80025a8:	4a08      	ldr	r2, [pc, #32]	; (80025cc <HAL_MspInit+0x30>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_MspInit+0x30>)
 80025b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	58024400 	.word	0x58024400

080025d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b0b8      	sub	sp, #224	; 0xe0
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	22b8      	movs	r2, #184	; 0xb8
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f009 fcc7 	bl	800bf84 <memset>
  if(hadc->Instance==ADC1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2a      	ldr	r2, [pc, #168]	; (80026a4 <HAL_ADC_MspInit+0xd4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d14d      	bne.n	800269c <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002600:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002604:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8002606:	2320      	movs	r3, #32
 8002608:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 800260a:	2381      	movs	r3, #129	; 0x81
 800260c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800260e:	2302      	movs	r3, #2
 8002610:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002612:	2302      	movs	r3, #2
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002616:	2302      	movs	r3, #2
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800261a:	2340      	movs	r3, #64	; 0x40
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800261e:	2300      	movs	r3, #0
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	4618      	mov	r0, r3
 8002632:	f003 ff01 	bl	8006438 <HAL_RCCEx_PeriphCLKConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800263c:	f7ff ffa8 	bl	8002590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_ADC_MspInit+0xd8>)
 8002642:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <HAL_ADC_MspInit+0xd8>)
 8002648:	f043 0320 	orr.w	r3, r3, #32
 800264c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_ADC_MspInit+0xd8>)
 8002652:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_ADC_MspInit+0xd8>)
 8002660:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002664:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <HAL_ADC_MspInit+0xd8>)
 8002666:	f043 0320 	orr.w	r3, r3, #32
 800266a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <HAL_ADC_MspInit+0xd8>)
 8002670:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800267c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002684:	2303      	movs	r3, #3
 8002686:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002690:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002694:	4619      	mov	r1, r3
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <HAL_ADC_MspInit+0xdc>)
 8002698:	f002 fd1a 	bl	80050d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	37e0      	adds	r7, #224	; 0xe0
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40022000 	.word	0x40022000
 80026a8:	58024400 	.word	0x58024400
 80026ac:	58021400 	.word	0x58021400

080026b0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0b8      	sub	sp, #224	; 0xe0
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	22b8      	movs	r2, #184	; 0xb8
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f009 fc57 	bl	800bf84 <memset>
  if(hfdcan->Instance==FDCAN1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <HAL_FDCAN_MspInit+0xe0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d153      	bne.n	8002788 <HAL_FDCAN_MspInit+0xd8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80026e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 fea0 	bl	8006438 <HAL_RCCEx_PeriphCLKConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80026fe:	f7ff ff47 	bl	8002590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_FDCAN_MspInit+0xe4>)
 8002704:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_FDCAN_MspInit+0xe4>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_FDCAN_MspInit+0xe4>)
 8002714:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_FDCAN_MspInit+0xe4>)
 8002722:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002726:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_FDCAN_MspInit+0xe4>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <HAL_FDCAN_MspInit+0xe4>)
 8002732:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800273e:	2303      	movs	r3, #3
 8002740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002756:	2309      	movs	r3, #9
 8002758:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800275c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002760:	4619      	mov	r1, r3
 8002762:	480d      	ldr	r0, [pc, #52]	; (8002798 <HAL_FDCAN_MspInit+0xe8>)
 8002764:	f002 fcb4 	bl	80050d0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	2013      	movs	r0, #19
 800276e:	f001 fb94 	bl	8003e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002772:	2013      	movs	r0, #19
 8002774:	f001 fbab 	bl	8003ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2015      	movs	r0, #21
 800277e:	f001 fb8c 	bl	8003e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002782:	2015      	movs	r0, #21
 8002784:	f001 fba3 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002788:	bf00      	nop
 800278a:	37e0      	adds	r7, #224	; 0xe0
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	4000a000 	.word	0x4000a000
 8002794:	58024400 	.word	0x58024400
 8002798:	58020c00 	.word	0x58020c00

0800279c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b0b8      	sub	sp, #224	; 0xe0
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	22b8      	movs	r2, #184	; 0xb8
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f009 fbe1 	bl	800bf84 <memset>
  if(hspi->Instance==SPI1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a24      	ldr	r2, [pc, #144]	; (8002858 <HAL_SPI_MspInit+0xbc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d141      	bne.n	8002850 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80027cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fe2c 	bl	8006438 <HAL_RCCEx_PeriphCLKConfig>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80027e6:	f7ff fed3 	bl	8002590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_SPI_MspInit+0xc0>)
 80027ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_SPI_MspInit+0xc0>)
 80027f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_SPI_MspInit+0xc0>)
 80027fc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_SPI_MspInit+0xc0>)
 800280a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <HAL_SPI_MspInit+0xc0>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_SPI_MspInit+0xc0>)
 800281a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002826:	23e0      	movs	r3, #224	; 0xe0
 8002828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800283e:	2305      	movs	r3, #5
 8002840:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002848:	4619      	mov	r1, r3
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <HAL_SPI_MspInit+0xc4>)
 800284c:	f002 fc40 	bl	80050d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002850:	bf00      	nop
 8002852:	37e0      	adds	r7, #224	; 0xe0
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40013000 	.word	0x40013000
 800285c:	58024400 	.word	0x58024400
 8002860:	58020000 	.word	0x58020000

08002864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a23      	ldr	r2, [pc, #140]	; (8002900 <HAL_TIM_Base_MspInit+0x9c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10f      	bne.n	8002896 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_TIM_Base_MspInit+0xa0>)
 8002878:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800287c:	4a21      	ldr	r2, [pc, #132]	; (8002904 <HAL_TIM_Base_MspInit+0xa0>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <HAL_TIM_Base_MspInit+0xa0>)
 8002888:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002894:	e030      	b.n	80028f8 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d117      	bne.n	80028d0 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_TIM_Base_MspInit+0xa0>)
 80028a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80028a6:	4a17      	ldr	r2, [pc, #92]	; (8002904 <HAL_TIM_Base_MspInit+0xa0>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_TIM_Base_MspInit+0xa0>)
 80028b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	201c      	movs	r0, #28
 80028c4:	f001 fae9 	bl	8003e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028c8:	201c      	movs	r0, #28
 80028ca:	f001 fb00 	bl	8003ece <HAL_NVIC_EnableIRQ>
}
 80028ce:	e013      	b.n	80028f8 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <HAL_TIM_Base_MspInit+0xa4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10e      	bne.n	80028f8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_TIM_Base_MspInit+0xa0>)
 80028dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80028e0:	4a08      	ldr	r2, [pc, #32]	; (8002904 <HAL_TIM_Base_MspInit+0xa0>)
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_TIM_Base_MspInit+0xa0>)
 80028ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	bf00      	nop
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40010000 	.word	0x40010000
 8002904:	58024400 	.word	0x58024400
 8002908:	40000400 	.word	0x40000400

0800290c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_TIM_MspPostInit+0x100>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d120      	bne.n	8002970 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_TIM_MspPostInit+0x104>)
 8002930:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002934:	4a36      	ldr	r2, [pc, #216]	; (8002a10 <HAL_TIM_MspPostInit+0x104>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_TIM_MspPostInit+0x104>)
 8002940:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800294c:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8002950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800295e:	2301      	movs	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	482a      	ldr	r0, [pc, #168]	; (8002a14 <HAL_TIM_MspPostInit+0x108>)
 800296a:	f002 fbb1 	bl	80050d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800296e:	e048      	b.n	8002a02 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d11f      	bne.n	80029ba <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_TIM_MspPostInit+0x104>)
 800297c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002980:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <HAL_TIM_MspPostInit+0x104>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_TIM_MspPostInit+0x104>)
 800298c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002998:	2301      	movs	r3, #1
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029a8:	2301      	movs	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	4819      	ldr	r0, [pc, #100]	; (8002a18 <HAL_TIM_MspPostInit+0x10c>)
 80029b4:	f002 fb8c 	bl	80050d0 <HAL_GPIO_Init>
}
 80029b8:	e023      	b.n	8002a02 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <HAL_TIM_MspPostInit+0x110>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d11e      	bne.n	8002a02 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_TIM_MspPostInit+0x104>)
 80029c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80029ca:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <HAL_TIM_MspPostInit+0x104>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_TIM_MspPostInit+0x104>)
 80029d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029e2:	2340      	movs	r3, #64	; 0x40
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029f2:	2302      	movs	r3, #2
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	4808      	ldr	r0, [pc, #32]	; (8002a20 <HAL_TIM_MspPostInit+0x114>)
 80029fe:	f002 fb67 	bl	80050d0 <HAL_GPIO_Init>
}
 8002a02:	bf00      	nop
 8002a04:	3728      	adds	r7, #40	; 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	58024400 	.word	0x58024400
 8002a14:	58021000 	.word	0x58021000
 8002a18:	58020000 	.word	0x58020000
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	58020800 	.word	0x58020800

08002a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0b8      	sub	sp, #224	; 0xe0
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	22b8      	movs	r2, #184	; 0xb8
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f009 fa9d 	bl	800bf84 <memset>
  if(huart->Instance==USART3)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <HAL_UART_MspInit+0xc0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d142      	bne.n	8002ada <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a54:	2302      	movs	r3, #2
 8002a56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fce8 	bl	8006438 <HAL_RCCEx_PeriphCLKConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a6e:	f7ff fd8f 	bl	8002590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <HAL_UART_MspInit+0xc4>)
 8002a74:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <HAL_UART_MspInit+0xc4>)
 8002a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_UART_MspInit+0xc4>)
 8002a84:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a90:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_UART_MspInit+0xc4>)
 8002a92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a96:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <HAL_UART_MspInit+0xc4>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_UART_MspInit+0xc4>)
 8002aa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ab2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ac8:	2307      	movs	r3, #7
 8002aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ace:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <HAL_UART_MspInit+0xc8>)
 8002ad6:	f002 fafb 	bl	80050d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ada:	bf00      	nop
 8002adc:	37e0      	adds	r7, #224	; 0xe0
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40004800 	.word	0x40004800
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	58020c00 	.word	0x58020c00

08002af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <NMI_Handler+0x4>

08002af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afa:	e7fe      	b.n	8002afa <HardFault_Handler+0x4>

08002afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <MemManage_Handler+0x4>

08002b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <BusFault_Handler+0x4>

08002b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <UsageFault_Handler+0x4>

08002b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b3c:	f000 f934 	bl	8002da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <FDCAN1_IT0_IRQHandler+0x10>)
 8002b4a:	f001 fe47 	bl	80047dc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	240001f0 	.word	0x240001f0

08002b58 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <FDCAN1_IT1_IRQHandler+0x10>)
 8002b5e:	f001 fe3d 	bl	80047dc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	240001f0 	.word	0x240001f0

08002b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <TIM2_IRQHandler+0x10>)
 8002b72:	f006 ff91 	bl	8009a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	240003b4 	.word	0x240003b4

08002b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <SystemInit+0xd0>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <SystemInit+0xd0>)
 8002b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b94:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <SystemInit+0xd4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d807      	bhi.n	8002bb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ba0:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <SystemInit+0xd4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 030f 	bic.w	r3, r3, #15
 8002ba8:	4a2a      	ldr	r2, [pc, #168]	; (8002c54 <SystemInit+0xd4>)
 8002baa:	f043 0303 	orr.w	r3, r3, #3
 8002bae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <SystemInit+0xd8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <SystemInit+0xd8>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002bbc:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <SystemInit+0xd8>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <SystemInit+0xd8>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4924      	ldr	r1, [pc, #144]	; (8002c58 <SystemInit+0xd8>)
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <SystemInit+0xdc>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bce:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <SystemInit+0xd4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bda:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <SystemInit+0xd4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 030f 	bic.w	r3, r3, #15
 8002be2:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <SystemInit+0xd4>)
 8002be4:	f043 0303 	orr.w	r3, r3, #3
 8002be8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <SystemInit+0xd8>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <SystemInit+0xd8>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <SystemInit+0xd8>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <SystemInit+0xd8>)
 8002bfe:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <SystemInit+0xe0>)
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <SystemInit+0xd8>)
 8002c04:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <SystemInit+0xe4>)
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <SystemInit+0xd8>)
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <SystemInit+0xe8>)
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <SystemInit+0xd8>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <SystemInit+0xd8>)
 8002c16:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <SystemInit+0xe8>)
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <SystemInit+0xd8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <SystemInit+0xd8>)
 8002c22:	4a11      	ldr	r2, [pc, #68]	; (8002c68 <SystemInit+0xe8>)
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <SystemInit+0xd8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <SystemInit+0xd8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <SystemInit+0xd8>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <SystemInit+0xd8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <SystemInit+0xec>)
 8002c40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c44:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00
 8002c54:	52002000 	.word	0x52002000
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c60:	02020200 	.word	0x02020200
 8002c64:	01ff0000 	.word	0x01ff0000
 8002c68:	01010280 	.word	0x01010280
 8002c6c:	52004000 	.word	0x52004000

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c74:	f7ff ff84 	bl	8002b80 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c7a:	490d      	ldr	r1, [pc, #52]	; (8002cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c80:	e002      	b.n	8002c88 <LoopCopyDataInit>

08002c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c86:	3304      	adds	r3, #4

08002c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c8c:	d3f9      	bcc.n	8002c82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c90:	4c0a      	ldr	r4, [pc, #40]	; (8002cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c94:	e001      	b.n	8002c9a <LoopFillZerobss>

08002c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c98:	3204      	adds	r2, #4

08002c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c9c:	d3fb      	bcc.n	8002c96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f009 f93f 	bl	800bf20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7fd ff8f 	bl	8000bc4 <main>
  bx  lr
 8002ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002cac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002cb0:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8002cb4:	0800c060 	.word	0x0800c060
  ldr r2, =_sbss
 8002cb8:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8002cbc:	24000470 	.word	0x24000470

08002cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC_IRQHandler>
	...

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cca:	2003      	movs	r0, #3
 8002ccc:	f001 f8da 	bl	8003e84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002cd0:	f003 f9dc 	bl	800608c <HAL_RCC_GetSysClockFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <HAL_Init+0x68>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	4913      	ldr	r1, [pc, #76]	; (8002d30 <HAL_Init+0x6c>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_Init+0x68>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <HAL_Init+0x6c>)
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <HAL_Init+0x70>)
 8002d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_Init+0x74>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0e:	200f      	movs	r0, #15
 8002d10:	f000 f814 	bl	8002d3c <HAL_InitTick>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e002      	b.n	8002d24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d1e:	f7ff fc3d 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	0800c008 	.word	0x0800c008
 8002d34:	2400000c 	.word	0x2400000c
 8002d38:	24000008 	.word	0x24000008

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_InitTick+0x60>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e021      	b.n	8002d94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_InitTick+0x64>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_InitTick+0x60>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 f8bf 	bl	8003eea <HAL_SYSTICK_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00e      	b.n	8002d94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b0f      	cmp	r3, #15
 8002d7a:	d80a      	bhi.n	8002d92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f001 f889 	bl	8003e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d88:	4a06      	ldr	r2, [pc, #24]	; (8002da4 <HAL_InitTick+0x68>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	24000014 	.word	0x24000014
 8002da0:	24000008 	.word	0x24000008
 8002da4:	24000010 	.word	0x24000010

08002da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_IncTick+0x20>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_IncTick+0x24>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4413      	add	r3, r2
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_IncTick+0x24>)
 8002dba:	6013      	str	r3, [r2, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	24000014 	.word	0x24000014
 8002dcc:	2400046c 	.word	0x2400046c

08002dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_GetTick+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	2400046c 	.word	0x2400046c

08002de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff ffee 	bl	8002dd0 <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d005      	beq.n	8002e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_Delay+0x44>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e0e:	bf00      	nop
 8002e10:	f7ff ffde 	bl	8002dd0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d8f7      	bhi.n	8002e10 <HAL_Delay+0x28>
  {
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	24000014 	.word	0x24000014

08002e30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	609a      	str	r2, [r3, #8]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3360      	adds	r3, #96	; 0x60
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	611a      	str	r2, [r3, #16]
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b087      	sub	sp, #28
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3360      	adds	r3, #96	; 0x60
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	601a      	str	r2, [r3, #0]
  }
}
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3330      	adds	r3, #48	; 0x30
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	4413      	add	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	211f      	movs	r1, #31
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	401a      	ands	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0e9b      	lsrs	r3, r3, #26
 8002f78:	f003 011f 	and.w	r1, r3, #31
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	431a      	orrs	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f8c:	bf00      	nop
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	0e5b      	lsrs	r3, r3, #25
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	4413      	add	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	0d1b      	lsrs	r3, r3, #20
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2107      	movs	r1, #7
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	401a      	ands	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	0d1b      	lsrs	r3, r3, #20
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003008:	43db      	mvns	r3, r3
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0318 	and.w	r3, r3, #24
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003014:	40d9      	lsrs	r1, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	400b      	ands	r3, r1
 800301a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800301e:	431a      	orrs	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	000fffff 	.word	0x000fffff

08003038 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6093      	str	r3, [r2, #8]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	5fffffc0 	.word	0x5fffffc0

0800305c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800306c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003070:	d101      	bne.n	8003076 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003092:	4013      	ands	r3, r2
 8003094:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	6fffffc0 	.word	0x6fffffc0

080030ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <LL_ADC_IsEnabled+0x18>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <LL_ADC_IsEnabled+0x1a>
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d101      	bne.n	8003112 <LL_ADC_REG_IsConversionOngoing+0x18>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b08      	cmp	r3, #8
 8003132:	d101      	bne.n	8003138 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e138      	b.n	80033d4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fa2d 	bl	80025d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff67 	bl	800305c <LL_ADC_IsDeepPowerDownEnabled>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff4d 	bl	8003038 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ff82 	bl	80030ac <LL_ADC_IsInternalRegulatorEnabled>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d114      	bne.n	80031d8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff66 	bl	8003084 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b8:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_ADC_Init+0x294>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	4a88      	ldr	r2, [pc, #544]	; (80033e0 <HAL_ADC_Init+0x298>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	3301      	adds	r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031ca:	e002      	b.n	80031d2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f9      	bne.n	80031cc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff65 	bl	80030ac <LL_ADC_IsInternalRegulatorEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f043 0210 	orr.w	r2, r3, #16
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff76 	bl	80030fa <LL_ADC_REG_IsConversionOngoing>
 800320e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	f040 80d2 	bne.w	80033c2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 80ce 	bne.w	80033c2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800322e:	f043 0202 	orr.w	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff4a 	bl	80030d4 <LL_ADC_IsEnabled>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d110      	bne.n	8003268 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003246:	4867      	ldr	r0, [pc, #412]	; (80033e4 <HAL_ADC_Init+0x29c>)
 8003248:	f7ff ff44 	bl	80030d4 <LL_ADC_IsEnabled>
 800324c:	4604      	mov	r4, r0
 800324e:	4866      	ldr	r0, [pc, #408]	; (80033e8 <HAL_ADC_Init+0x2a0>)
 8003250:	f7ff ff40 	bl	80030d4 <LL_ADC_IsEnabled>
 8003254:	4603      	mov	r3, r0
 8003256:	4323      	orrs	r3, r4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4619      	mov	r1, r3
 8003262:	4862      	ldr	r0, [pc, #392]	; (80033ec <HAL_ADC_Init+0x2a4>)
 8003264:	f7ff fde4 	bl	8002e30 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7d5b      	ldrb	r3, [r3, #21]
 800326c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003272:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8003278:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7f1b      	ldrb	r3, [r3, #28]
 800327e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7f1b      	ldrb	r3, [r3, #28]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d106      	bne.n	800329a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	3b01      	subs	r3, #1
 8003292:	045b      	lsls	r3, r3, #17
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_ADC_Init+0x2a8>)
 80032be:	4013      	ands	r3, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	430b      	orrs	r3, r1
 80032c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff13 	bl	80030fa <LL_ADC_REG_IsConversionOngoing>
 80032d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff20 	bl	8003120 <LL_ADC_INJ_IsConversionOngoing>
 80032e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d14a      	bne.n	800337e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d147      	bne.n	800337e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7d1b      	ldrb	r3, [r3, #20]
 80032f2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <HAL_ADC_Init+0x2ac>)
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	69b9      	ldr	r1, [r7, #24]
 800330c:	430b      	orrs	r3, r1
 800330e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003316:	2b01      	cmp	r3, #1
 8003318:	d11b      	bne.n	8003352 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_ADC_Init+0x2b0>)
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800332e:	3a01      	subs	r2, #1
 8003330:	0411      	lsls	r1, r2, #16
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800333c:	4311      	orrs	r1, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003342:	430a      	orrs	r2, r1
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	611a      	str	r2, [r3, #16]
 8003350:	e007      	b.n	8003362 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fb25 	bl	80039c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10c      	bne.n	80033a0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f023 010f 	bic.w	r1, r3, #15
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	1e5a      	subs	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
 800339e:	e007      	b.n	80033b0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 020f 	bic.w	r2, r2, #15
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	f023 0303 	bic.w	r3, r3, #3
 80033b8:	f043 0201 	orr.w	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
 80033c0:	e007      	b.n	80033d2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f043 0210 	orr.w	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3724      	adds	r7, #36	; 0x24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}
 80033dc:	24000008 	.word	0x24000008
 80033e0:	053e2d63 	.word	0x053e2d63
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40022100 	.word	0x40022100
 80033ec:	40022300 	.word	0x40022300
 80033f0:	fff0c003 	.word	0xfff0c003
 80033f4:	ffffbffc 	.word	0xffffbffc
 80033f8:	fc00f81e 	.word	0xfc00f81e

080033fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b0a1      	sub	sp, #132	; 0x84
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a9a      	ldr	r2, [pc, #616]	; (8003680 <HAL_ADC_ConfigChannel+0x284>)
 8003416:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x2a>
 8003422:	2302      	movs	r3, #2
 8003424:	e2bc      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x5a4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fe61 	bl	80030fa <LL_ADC_REG_IsConversionOngoing>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 82a1 	bne.w	8003982 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003448:	2b00      	cmp	r3, #0
 800344a:	d108      	bne.n	800345e <HAL_ADC_ConfigChannel+0x62>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2201      	movs	r2, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	e016      	b.n	800348c <HAL_ADC_ConfigChannel+0x90>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800346c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003476:	2320      	movs	r3, #32
 8003478:	e003      	b.n	8003482 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800347a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2201      	movs	r2, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	69d1      	ldr	r1, [r2, #28]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	430b      	orrs	r3, r1
 8003498:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f7ff fd4a 	bl	8002f40 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fe22 	bl	80030fa <LL_ADC_REG_IsConversionOngoing>
 80034b6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fe2f 	bl	8003120 <LL_ADC_INJ_IsConversionOngoing>
 80034c2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 80a0 	bne.w	800360c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 809c 	bne.w	800360c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f7ff fd59 	bl	8002f98 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <HAL_ADC_ConfigChannel+0x110>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	e00a      	b.n	8003522 <HAL_ADC_ConfigChannel+0x126>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d027      	beq.n	800357c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6919      	ldr	r1, [r3, #16]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800353a:	f7ff fcad 	bl	8002e98 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6919      	ldr	r1, [r3, #16]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	7e5b      	ldrb	r3, [r3, #25]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d102      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x158>
 800354e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003552:	e000      	b.n	8003556 <HAL_ADC_ConfigChannel+0x15a>
 8003554:	2300      	movs	r3, #0
 8003556:	461a      	mov	r2, r3
 8003558:	f7ff fcd7 	bl	8002f0a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6919      	ldr	r1, [r3, #16]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	7e1b      	ldrb	r3, [r3, #24]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d102      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x176>
 800356c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003570:	e000      	b.n	8003574 <HAL_ADC_ConfigChannel+0x178>
 8003572:	2300      	movs	r3, #0
 8003574:	461a      	mov	r2, r3
 8003576:	f7ff fcaf 	bl	8002ed8 <LL_ADC_SetDataRightShift>
 800357a:	e047      	b.n	800360c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003582:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	069b      	lsls	r3, r3, #26
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800359e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	069b      	lsls	r3, r3, #26
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d107      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035c2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	069b      	lsls	r3, r3, #26
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d107      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035e6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	069b      	lsls	r3, r3, #26
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d107      	bne.n	800360c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800360a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fd5f 	bl	80030d4 <LL_ADC_IsEnabled>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	f040 81bb 	bne.w	8003994 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	461a      	mov	r2, r3
 800362c:	f7ff fce0 	bl	8002ff0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a12      	ldr	r2, [pc, #72]	; (8003680 <HAL_ADC_ConfigChannel+0x284>)
 8003636:	4293      	cmp	r3, r2
 8003638:	f040 8130 	bne.w	800389c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x268>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	3301      	adds	r3, #1
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2b09      	cmp	r3, #9
 800365a:	bf94      	ite	ls
 800365c:	2301      	movls	r3, #1
 800365e:	2300      	movhi	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e01b      	b.n	800369c <HAL_ADC_ConfigChannel+0x2a0>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003674:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d103      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	e005      	b.n	800368c <HAL_ADC_ConfigChannel+0x290>
 8003680:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8003684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2b09      	cmp	r3, #9
 8003694:	bf94      	ite	ls
 8003696:	2301      	movls	r3, #1
 8003698:	2300      	movhi	r3, #0
 800369a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800369c:	2b00      	cmp	r3, #0
 800369e:	d079      	beq.n	8003794 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x2c0>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0e9b      	lsrs	r3, r3, #26
 80036b2:	3301      	adds	r3, #1
 80036b4:	069b      	lsls	r3, r3, #26
 80036b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ba:	e015      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x2ec>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e003      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80036d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	069b      	lsls	r3, r3, #26
 80036e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x30c>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0e9b      	lsrs	r3, r3, #26
 80036fa:	3301      	adds	r3, #1
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	2101      	movs	r1, #1
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	e017      	b.n	8003738 <HAL_ADC_ConfigChannel+0x33c>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003718:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800371a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8003720:	2320      	movs	r3, #32
 8003722:	e003      	b.n	800372c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8003724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3301      	adds	r3, #1
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	ea42 0103 	orr.w	r1, r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <HAL_ADC_ConfigChannel+0x362>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0e9b      	lsrs	r3, r3, #26
 800374e:	3301      	adds	r3, #1
 8003750:	f003 021f 	and.w	r2, r3, #31
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	051b      	lsls	r3, r3, #20
 800375c:	e018      	b.n	8003790 <HAL_ADC_ConfigChannel+0x394>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003776:	2320      	movs	r3, #32
 8003778:	e003      	b.n	8003782 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	3301      	adds	r3, #1
 8003784:	f003 021f 	and.w	r2, r3, #31
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003790:	430b      	orrs	r3, r1
 8003792:	e07e      	b.n	8003892 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x3b4>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0e9b      	lsrs	r3, r3, #26
 80037a6:	3301      	adds	r3, #1
 80037a8:	069b      	lsls	r3, r3, #26
 80037aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ae:	e015      	b.n	80037dc <HAL_ADC_ConfigChannel+0x3e0>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	fa93 f3a3 	rbit	r3, r3
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80037c8:	2320      	movs	r3, #32
 80037ca:	e003      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	3301      	adds	r3, #1
 80037d6:	069b      	lsls	r3, r3, #26
 80037d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x400>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0e9b      	lsrs	r3, r3, #26
 80037ee:	3301      	adds	r3, #1
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2101      	movs	r1, #1
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	e017      	b.n	800382c <HAL_ADC_ConfigChannel+0x430>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	61bb      	str	r3, [r7, #24]
  return result;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8003814:	2320      	movs	r3, #32
 8003816:	e003      	b.n	8003820 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3301      	adds	r3, #1
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2101      	movs	r1, #1
 8003828:	fa01 f303 	lsl.w	r3, r1, r3
 800382c:	ea42 0103 	orr.w	r1, r2, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x45c>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	3301      	adds	r3, #1
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	3b1e      	subs	r3, #30
 8003850:	051b      	lsls	r3, r3, #20
 8003852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003856:	e01b      	b.n	8003890 <HAL_ADC_ConfigChannel+0x494>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	60fb      	str	r3, [r7, #12]
  return result;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8003870:	2320      	movs	r3, #32
 8003872:	e003      	b.n	800387c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3301      	adds	r3, #1
 800387e:	f003 021f 	and.w	r2, r3, #31
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	3b1e      	subs	r3, #30
 800388a:	051b      	lsls	r3, r3, #20
 800388c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003890:	430b      	orrs	r3, r1
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	6892      	ldr	r2, [r2, #8]
 8003896:	4619      	mov	r1, r3
 8003898:	f7ff fb7e 	bl	8002f98 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da77      	bge.n	8003994 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038a4:	4840      	ldr	r0, [pc, #256]	; (80039a8 <HAL_ADC_ConfigChannel+0x5ac>)
 80038a6:	f7ff fae9 	bl	8002e7c <LL_ADC_GetCommonPathInternalCh>
 80038aa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038ac:	483f      	ldr	r0, [pc, #252]	; (80039ac <HAL_ADC_ConfigChannel+0x5b0>)
 80038ae:	f7ff fc11 	bl	80030d4 <LL_ADC_IsEnabled>
 80038b2:	4604      	mov	r4, r0
 80038b4:	483e      	ldr	r0, [pc, #248]	; (80039b0 <HAL_ADC_ConfigChannel+0x5b4>)
 80038b6:	f7ff fc0d 	bl	80030d4 <LL_ADC_IsEnabled>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4323      	orrs	r3, r4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d155      	bne.n	800396e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3b      	ldr	r2, [pc, #236]	; (80039b4 <HAL_ADC_ConfigChannel+0x5b8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d122      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x516>
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11d      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a35      	ldr	r2, [pc, #212]	; (80039b0 <HAL_ADC_ConfigChannel+0x5b4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d159      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038e6:	4619      	mov	r1, r3
 80038e8:	482f      	ldr	r0, [pc, #188]	; (80039a8 <HAL_ADC_ConfigChannel+0x5ac>)
 80038ea:	f7ff fab4 	bl	8002e56 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038ee:	4b32      	ldr	r3, [pc, #200]	; (80039b8 <HAL_ADC_ConfigChannel+0x5bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	099b      	lsrs	r3, r3, #6
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_ADC_ConfigChannel+0x5c0>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	099b      	lsrs	r3, r3, #6
 80038fc:	3301      	adds	r3, #1
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003902:	e002      	b.n	800390a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	3b01      	subs	r3, #1
 8003908:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003910:	e040      	b.n	8003994 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a2a      	ldr	r2, [pc, #168]	; (80039c0 <HAL_ADC_ConfigChannel+0x5c4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d111      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x544>
 800391c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10c      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <HAL_ADC_ConfigChannel+0x5b4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d131      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003936:	4619      	mov	r1, r3
 8003938:	481b      	ldr	r0, [pc, #108]	; (80039a8 <HAL_ADC_ConfigChannel+0x5ac>)
 800393a:	f7ff fa8c 	bl	8002e56 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800393e:	e029      	b.n	8003994 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d124      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x598>
 800394a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d11f      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <HAL_ADC_ConfigChannel+0x5b4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d11a      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003964:	4619      	mov	r1, r3
 8003966:	4810      	ldr	r0, [pc, #64]	; (80039a8 <HAL_ADC_ConfigChannel+0x5ac>)
 8003968:	f7ff fa75 	bl	8002e56 <LL_ADC_SetCommonPathInternalCh>
 800396c:	e012      	b.n	8003994 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003980:	e008      	b.n	8003994 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800399c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3784      	adds	r7, #132	; 0x84
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}
 80039a8:	40022300 	.word	0x40022300
 80039ac:	40022000 	.word	0x40022000
 80039b0:	40022100 	.word	0x40022100
 80039b4:	cb840000 	.word	0xcb840000
 80039b8:	24000008 	.word	0x24000008
 80039bc:	053e2d63 	.word	0x053e2d63
 80039c0:	bac04000 	.word	0xbac04000
 80039c4:	cfb80000 	.word	0xcfb80000

080039c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80039d0:	4b5f      	ldr	r3, [pc, #380]	; (8003b50 <ADC_ConfigureBoostMode+0x188>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01c      	beq.n	8003a16 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039dc:	f002 fcd0 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 80039e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039ea:	d010      	beq.n	8003a0e <ADC_ConfigureBoostMode+0x46>
 80039ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039f0:	d871      	bhi.n	8003ad6 <ADC_ConfigureBoostMode+0x10e>
 80039f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f6:	d002      	beq.n	80039fe <ADC_ConfigureBoostMode+0x36>
 80039f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039fc:	d16b      	bne.n	8003ad6 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	60fb      	str	r3, [r7, #12]
        break;
 8003a0c:	e066      	b.n	8003adc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	60fb      	str	r3, [r7, #12]
        break;
 8003a14:	e062      	b.n	8003adc <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003a16:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a1a:	f003 fc19 	bl	8007250 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a1e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a28:	d051      	beq.n	8003ace <ADC_ConfigureBoostMode+0x106>
 8003a2a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a2e:	d854      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x112>
 8003a30:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a34:	d047      	beq.n	8003ac6 <ADC_ConfigureBoostMode+0xfe>
 8003a36:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a3a:	d84e      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x112>
 8003a3c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a40:	d03d      	beq.n	8003abe <ADC_ConfigureBoostMode+0xf6>
 8003a42:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a46:	d848      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x112>
 8003a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a4c:	d033      	beq.n	8003ab6 <ADC_ConfigureBoostMode+0xee>
 8003a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a52:	d842      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x112>
 8003a54:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a58:	d029      	beq.n	8003aae <ADC_ConfigureBoostMode+0xe6>
 8003a5a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a5e:	d83c      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x112>
 8003a60:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a64:	d01a      	beq.n	8003a9c <ADC_ConfigureBoostMode+0xd4>
 8003a66:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a6a:	d836      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x112>
 8003a6c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a70:	d014      	beq.n	8003a9c <ADC_ConfigureBoostMode+0xd4>
 8003a72:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a76:	d830      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x112>
 8003a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7c:	d00e      	beq.n	8003a9c <ADC_ConfigureBoostMode+0xd4>
 8003a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a82:	d82a      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x112>
 8003a84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a88:	d008      	beq.n	8003a9c <ADC_ConfigureBoostMode+0xd4>
 8003a8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a8e:	d824      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x112>
 8003a90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a94:	d002      	beq.n	8003a9c <ADC_ConfigureBoostMode+0xd4>
 8003a96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a9a:	d11e      	bne.n	8003ada <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	0c9b      	lsrs	r3, r3, #18
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	60fb      	str	r3, [r7, #12]
        break;
 8003aac:	e016      	b.n	8003adc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
        break;
 8003ab4:	e012      	b.n	8003adc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	60fb      	str	r3, [r7, #12]
        break;
 8003abc:	e00e      	b.n	8003adc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	60fb      	str	r3, [r7, #12]
        break;
 8003ac4:	e00a      	b.n	8003adc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	09db      	lsrs	r3, r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]
        break;
 8003acc:	e006      	b.n	8003adc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	60fb      	str	r3, [r7, #12]
        break;
 8003ad4:	e002      	b.n	8003adc <ADC_ConfigureBoostMode+0x114>
        break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8003ada:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <ADC_ConfigureBoostMode+0x18c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d808      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003af8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003afa:	e025      	b.n	8003b48 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a16      	ldr	r2, [pc, #88]	; (8003b58 <ADC_ConfigureBoostMode+0x190>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d80a      	bhi.n	8003b1a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b16:	609a      	str	r2, [r3, #8]
}
 8003b18:	e016      	b.n	8003b48 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <ADC_ConfigureBoostMode+0x194>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d80a      	bhi.n	8003b38 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b34:	609a      	str	r2, [r3, #8]
}
 8003b36:	e007      	b.n	8003b48 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40022300 	.word	0x40022300
 8003b54:	005f5e10 	.word	0x005f5e10
 8003b58:	00bebc20 	.word	0x00bebc20
 8003b5c:	017d7840 	.word	0x017d7840

08003b60 <LL_ADC_IsEnabled>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <LL_ADC_IsEnabled+0x18>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <LL_ADC_IsEnabled+0x1a>
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d101      	bne.n	8003b9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b09f      	sub	sp, #124	; 0x7c
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e080      	b.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3d      	ldr	r2, [pc, #244]	; (8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d102      	bne.n	8003bea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003be4:	4b3c      	ldr	r3, [pc, #240]	; (8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	e001      	b.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e05f      	b.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ffb9 	bl	8003b86 <LL_ADC_REG_IsConversionOngoing>
 8003c14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ffb3 	bl	8003b86 <LL_ADC_REG_IsConversionOngoing>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d141      	bne.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d13e      	bne.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003c2e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c48:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c4a:	4822      	ldr	r0, [pc, #136]	; (8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003c4c:	f7ff ff88 	bl	8003b60 <LL_ADC_IsEnabled>
 8003c50:	4604      	mov	r4, r0
 8003c52:	4821      	ldr	r0, [pc, #132]	; (8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003c54:	f7ff ff84 	bl	8003b60 <LL_ADC_IsEnabled>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4323      	orrs	r3, r4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d12e      	bne.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	6811      	ldr	r1, [r2, #0]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	6892      	ldr	r2, [r2, #8]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c78:	e021      	b.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c86:	4813      	ldr	r0, [pc, #76]	; (8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003c88:	f7ff ff6a 	bl	8003b60 <LL_ADC_IsEnabled>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	4812      	ldr	r0, [pc, #72]	; (8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003c90:	f7ff ff66 	bl	8003b60 <LL_ADC_IsEnabled>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4323      	orrs	r3, r4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d110      	bne.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ca6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ca8:	e009      	b.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	f043 0220 	orr.w	r2, r3, #32
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003cbc:	e000      	b.n	8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cbe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cc8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	377c      	adds	r7, #124	; 0x7c
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd90      	pop	{r4, r7, pc}
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40022100 	.word	0x40022100
 8003cdc:	40022300 	.word	0x40022300
 8003ce0:	fffff0e0 	.word	0xfffff0e0

08003ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <__NVIC_SetPriorityGrouping+0x40>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d00:	4013      	ands	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <__NVIC_SetPriorityGrouping+0x44>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d12:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <__NVIC_SetPriorityGrouping+0x40>)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	60d3      	str	r3, [r2, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000ed00 	.word	0xe000ed00
 8003d28:	05fa0000 	.word	0x05fa0000

08003d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <__NVIC_GetPriorityGrouping+0x18>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 0307 	and.w	r3, r3, #7
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	db0b      	blt.n	8003d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	4907      	ldr	r1, [pc, #28]	; (8003d80 <__NVIC_EnableIRQ+0x38>)
 8003d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	2001      	movs	r0, #1
 8003d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000e100 	.word	0xe000e100

08003d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	db0a      	blt.n	8003dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <__NVIC_SetPriority+0x4c>)
 8003d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	440b      	add	r3, r1
 8003da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dac:	e00a      	b.n	8003dc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <__NVIC_SetPriority+0x50>)
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	761a      	strb	r2, [r3, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	bf28      	it	cs
 8003df6:	2304      	movcs	r3, #4
 8003df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d902      	bls.n	8003e08 <NVIC_EncodePriority+0x30>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3b03      	subs	r3, #3
 8003e06:	e000      	b.n	8003e0a <NVIC_EncodePriority+0x32>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e20:	f04f 31ff 	mov.w	r1, #4294967295
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	43d9      	mvns	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	4313      	orrs	r3, r2
         );
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e50:	d301      	bcc.n	8003e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e52:	2301      	movs	r3, #1
 8003e54:	e00f      	b.n	8003e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <SysTick_Config+0x40>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e5e:	210f      	movs	r1, #15
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	f7ff ff8e 	bl	8003d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <SysTick_Config+0x40>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e6e:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <SysTick_Config+0x40>)
 8003e70:	2207      	movs	r2, #7
 8003e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	e000e010 	.word	0xe000e010

08003e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff29 	bl	8003ce4 <__NVIC_SetPriorityGrouping>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea8:	f7ff ff40 	bl	8003d2c <__NVIC_GetPriorityGrouping>
 8003eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff ff90 	bl	8003dd8 <NVIC_EncodePriority>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff5f 	bl	8003d84 <__NVIC_SetPriority>
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff33 	bl	8003d48 <__NVIC_EnableIRQ>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ffa4 	bl	8003e40 <SysTick_Config>
 8003ef8:	4603      	mov	r3, r0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b098      	sub	sp, #96	; 0x60
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003f0c:	4a84      	ldr	r2, [pc, #528]	; (8004120 <HAL_FDCAN_Init+0x21c>)
 8003f0e:	f107 030c 	add.w	r3, r7, #12
 8003f12:	4611      	mov	r1, r2
 8003f14:	224c      	movs	r2, #76	; 0x4c
 8003f16:	4618      	mov	r0, r3
 8003f18:	f008 f826 	bl	800bf68 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e1ca      	b.n	80042bc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7e      	ldr	r2, [pc, #504]	; (8004124 <HAL_FDCAN_Init+0x220>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d106      	bne.n	8003f3e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fe fbac 	bl	80026b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0210 	bic.w	r2, r2, #16
 8003f66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f68:	f7fe ff32 	bl	8002dd0 <HAL_GetTick>
 8003f6c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f6e:	e014      	b.n	8003f9a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f70:	f7fe ff2e 	bl	8002dd0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b0a      	cmp	r3, #10
 8003f7c:	d90d      	bls.n	8003f9a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2203      	movs	r2, #3
 8003f92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e190      	b.n	80042bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d0e3      	beq.n	8003f70 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb8:	f7fe ff0a 	bl	8002dd0 <HAL_GetTick>
 8003fbc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003fbe:	e014      	b.n	8003fea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003fc0:	f7fe ff06 	bl	8002dd0 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b0a      	cmp	r3, #10
 8003fcc:	d90d      	bls.n	8003fea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd4:	f043 0201 	orr.w	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e168      	b.n	80042bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0e3      	beq.n	8003fc0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0202 	orr.w	r2, r2, #2
 8004006:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	7c1b      	ldrb	r3, [r3, #16]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d108      	bne.n	8004022 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800401e:	619a      	str	r2, [r3, #24]
 8004020:	e007      	b.n	8004032 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004030:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	7c5b      	ldrb	r3, [r3, #17]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d108      	bne.n	800404c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004048:	619a      	str	r2, [r3, #24]
 800404a:	e007      	b.n	800405c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800405a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	7c9b      	ldrb	r3, [r3, #18]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d108      	bne.n	8004076 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004072:	619a      	str	r2, [r3, #24]
 8004074:	e007      	b.n	8004086 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004084:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80040aa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0210 	bic.w	r2, r2, #16
 80040ba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d108      	bne.n	80040d6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0204 	orr.w	r2, r2, #4
 80040d2:	619a      	str	r2, [r3, #24]
 80040d4:	e030      	b.n	8004138 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d02c      	beq.n	8004138 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d020      	beq.n	8004128 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699a      	ldr	r2, [r3, #24]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040f4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0210 	orr.w	r2, r2, #16
 8004104:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b03      	cmp	r3, #3
 800410c:	d114      	bne.n	8004138 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0220 	orr.w	r2, r2, #32
 800411c:	619a      	str	r2, [r3, #24]
 800411e:	e00b      	b.n	8004138 <HAL_FDCAN_Init+0x234>
 8004120:	0800bfbc 	.word	0x0800bfbc
 8004124:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0220 	orr.w	r2, r2, #32
 8004136:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	3b01      	subs	r3, #1
 800413e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	3b01      	subs	r3, #1
 8004146:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004148:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004150:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	3b01      	subs	r3, #1
 800415a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004160:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004162:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800416c:	d115      	bne.n	800419a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	3b01      	subs	r3, #1
 800417a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800417c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	3b01      	subs	r3, #1
 8004184:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004186:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	3b01      	subs	r3, #1
 8004190:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004196:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004198:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c0:	4413      	add	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d012      	beq.n	80041ec <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80041ce:	f023 0107 	bic.w	r1, r3, #7
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041dc:	4413      	add	r3, r2
 80041de:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d012      	beq.n	800421a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80041fc:	f023 0107 	bic.w	r1, r3, #7
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800420a:	4413      	add	r3, r2
 800420c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	2b00      	cmp	r3, #0
 8004220:	d013      	beq.n	800424a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800422a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004238:	4413      	add	r3, r2
 800423a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800423e:	011a      	lsls	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424e:	2b00      	cmp	r3, #0
 8004250:	d013      	beq.n	800427a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800425a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004268:	4413      	add	r3, r2
 800426a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800426e:	021a      	lsls	r2, r3, #8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a11      	ldr	r2, [pc, #68]	; (80042c4 <HAL_FDCAN_Init+0x3c0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d107      	bne.n	8004294 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f022 0203 	bic.w	r2, r2, #3
 8004292:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fd89 	bl	8004dc4 <FDCAN_CalcultateRamBlockAddresses>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80042b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3760      	adds	r7, #96	; 0x60
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	4000a000 	.word	0x4000a000

080042c8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80042d8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d002      	beq.n	80042e6 <HAL_FDCAN_ConfigFilter+0x1e>
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d157      	bne.n	8004396 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d12b      	bne.n	8004346 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b07      	cmp	r3, #7
 80042f4:	d10d      	bne.n	8004312 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004302:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004308:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800430a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e00e      	b.n	8004330 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800431e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004326:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e025      	b.n	8004392 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	075a      	lsls	r2, r3, #29
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b07      	cmp	r3, #7
 800435a:	d103      	bne.n	8004364 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	e006      	b.n	8004372 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	079a      	lsls	r2, r3, #30
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3304      	adds	r3, #4
 800438a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e008      	b.n	80043a8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800439c:	f043 0202 	orr.w	r2, r3, #2
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d111      	bne.n	80043ec <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e008      	b.n	80043fe <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043f2:	f043 0204 	orr.w	r2, r3, #4
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800440c:	b480      	push	{r7}
 800440e:	b08b      	sub	sp, #44	; 0x2c
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004424:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004426:	7efb      	ldrb	r3, [r7, #27]
 8004428:	2b02      	cmp	r3, #2
 800442a:	f040 814b 	bne.w	80046c4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d14d      	bne.n	80044d0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800443c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e13e      	b.n	80046d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e12c      	b.n	80046d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004484:	0e1b      	lsrs	r3, r3, #24
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10b      	bne.n	80044a6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004496:	0fdb      	lsrs	r3, r3, #31
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044a0:	d101      	bne.n	80044a6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	69f9      	ldr	r1, [r7, #28]
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
 80044ce:	e069      	b.n	80045a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b41      	cmp	r3, #65	; 0x41
 80044d4:	d14d      	bne.n	8004572 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e0ed      	b.n	80046d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004510:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e0db      	b.n	80046d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004526:	0e1b      	lsrs	r3, r3, #24
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10b      	bne.n	8004548 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004538:	0fdb      	lsrs	r3, r3, #31
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004542:	d101      	bne.n	8004548 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004544:	2301      	movs	r3, #1
 8004546:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004550:	0a1b      	lsrs	r3, r3, #8
 8004552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004564:	69f9      	ldr	r1, [r7, #28]
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
 8004570:	e018      	b.n	80045a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	d309      	bcc.n	8004590 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0a2      	b.n	80046d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d107      	bne.n	80045c8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	0c9b      	lsrs	r3, r3, #18
 80045be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e005      	b.n	80045d4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	3304      	adds	r3, #4
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	0e1b      	lsrs	r3, r3, #24
 8004626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	0fda      	lsrs	r2, r3, #31
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	3304      	adds	r3, #4
 800463c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004642:	2300      	movs	r3, #0
 8004644:	623b      	str	r3, [r7, #32]
 8004646:	e00a      	b.n	800465e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	441a      	add	r2, r3
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	440b      	add	r3, r1
 8004654:	7812      	ldrb	r2, [r2, #0]
 8004656:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	3301      	adds	r3, #1
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	461a      	mov	r2, r3
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	4293      	cmp	r3, r2
 800466e:	d3eb      	bcc.n	8004648 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d105      	bne.n	8004682 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004680:	e01e      	b.n	80046c0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b41      	cmp	r3, #65	; 0x41
 8004686:	d105      	bne.n	8004694 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004692:	e015      	b.n	80046c0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b1f      	cmp	r3, #31
 8004698:	d808      	bhi.n	80046ac <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2101      	movs	r1, #1
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	fa01 f202 	lsl.w	r2, r1, r2
 80046a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80046aa:	e009      	b.n	80046c0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 021f 	and.w	r2, r3, #31
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2101      	movs	r1, #1
 80046b8:	fa01 f202 	lsl.w	r2, r1, r2
 80046bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e008      	b.n	80046d6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ca:	f043 0208 	orr.w	r2, r3, #8
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	372c      	adds	r7, #44	; 0x2c
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	0800c018 	.word	0x0800c018

080046e8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80046fa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d002      	beq.n	8004708 <HAL_FDCAN_ActivateNotification+0x20>
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d155      	bne.n	80047b4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4013      	ands	r3, r2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	65da      	str	r2, [r3, #92]	; 0x5c
 8004726:	e014      	b.n	8004752 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	d108      	bne.n	800474a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0202 	orr.w	r2, r2, #2
 8004746:	65da      	str	r2, [r3, #92]	; 0x5c
 8004748:	e003      	b.n	8004752 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2203      	movs	r2, #3
 8004750:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	430a      	orrs	r2, r1
 800476c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	430a      	orrs	r2, r1
 800478a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <HAL_FDCAN_ActivateNotification+0xec>)
 8004798:	4013      	ands	r3, r2
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	430b      	orrs	r3, r1
 80047a0:	6553      	str	r3, [r2, #84]	; 0x54
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <HAL_FDCAN_ActivateNotification+0xf0>)
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	0f9b      	lsrs	r3, r3, #30
 80047aa:	490b      	ldr	r1, [pc, #44]	; (80047d8 <HAL_FDCAN_ActivateNotification+0xf0>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e008      	b.n	80047c6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	3fcfffff 	.word	0x3fcfffff
 80047d8:	4000a800 	.word	0x4000a800

080047dc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b092      	sub	sp, #72	; 0x48
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80047e4:	4b90      	ldr	r3, [pc, #576]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	079b      	lsls	r3, r3, #30
 80047ea:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80047ec:	4b8e      	ldr	r3, [pc, #568]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	079b      	lsls	r3, r3, #30
 80047f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f4:	4013      	ands	r3, r2
 80047f6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800480c:	4013      	ands	r3, r2
 800480e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004824:	4013      	ands	r3, r2
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004832:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800483c:	4013      	ands	r3, r2
 800483e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004846:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004854:	4013      	ands	r3, r2
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004862:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486c:	4013      	ands	r3, r2
 800486e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d011      	beq.n	80048a2 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004894:	651a      	str	r2, [r3, #80]	; 0x50
 8004896:	4b64      	ldr	r3, [pc, #400]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 8004898:	2200      	movs	r2, #0
 800489a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fa45 	bl	8004d2c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01e      	beq.n	80048ee <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d017      	beq.n	80048ee <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80048d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d2:	4013      	ands	r3, r2
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048de:	651a      	str	r2, [r3, #80]	; 0x50
 80048e0:	4b51      	ldr	r3, [pc, #324]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80048e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa00 	bl	8004cee <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80048ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00d      	beq.n	8004910 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048fa:	4b4c      	ldr	r3, [pc, #304]	; (8004a2c <HAL_FDCAN_IRQHandler+0x250>)
 80048fc:	400b      	ands	r3, r1
 80048fe:	6513      	str	r3, [r2, #80]	; 0x50
 8004900:	4a49      	ldr	r2, [pc, #292]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 8004902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004904:	0f9b      	lsrs	r3, r3, #30
 8004906:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004908:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9c4 	bl	8004c98 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800491c:	4b43      	ldr	r3, [pc, #268]	; (8004a2c <HAL_FDCAN_IRQHandler+0x250>)
 800491e:	400b      	ands	r3, r1
 8004920:	6513      	str	r3, [r2, #80]	; 0x50
 8004922:	4a41      	ldr	r2, [pc, #260]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 8004924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004926:	0f9b      	lsrs	r3, r3, #30
 8004928:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800492a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9be 	bl	8004cae <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800493e:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <HAL_FDCAN_IRQHandler+0x250>)
 8004940:	400b      	ands	r3, r1
 8004942:	6513      	str	r3, [r2, #80]	; 0x50
 8004944:	4a38      	ldr	r2, [pc, #224]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 8004946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004948:	0f9b      	lsrs	r3, r3, #30
 800494a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800494c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc f8d2 	bl	8000af8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004960:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <HAL_FDCAN_IRQHandler+0x250>)
 8004962:	400b      	ands	r3, r1
 8004964:	6513      	str	r3, [r2, #80]	; 0x50
 8004966:	4a30      	ldr	r2, [pc, #192]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 8004968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496a:	0f9b      	lsrs	r3, r3, #30
 800496c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800496e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fc f8e5 	bl	8000b40 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004980:	2b00      	cmp	r3, #0
 8004982:	d011      	beq.n	80049a8 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800499a:	651a      	str	r2, [r3, #80]	; 0x50
 800499c:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 800499e:	2200      	movs	r2, #0
 80049a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f98e 	bl	8004cc4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01e      	beq.n	80049f4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d017      	beq.n	80049f4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049d8:	4013      	ands	r3, r2
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e4:	651a      	str	r2, [r3, #80]	; 0x50
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80049ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f972 	bl	8004cd8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00f      	beq.n	8004a30 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a18:	651a      	str	r2, [r3, #80]	; 0x50
 8004a1a:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <HAL_FDCAN_IRQHandler+0x24c>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fc f8b1 	bl	8000b88 <HAL_FDCAN_RxBufferNewMessageCallback>
 8004a26:	e003      	b.n	8004a30 <HAL_FDCAN_IRQHandler+0x254>
 8004a28:	4000a800 	.word	0x4000a800
 8004a2c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d011      	beq.n	8004a62 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a54:	651a      	str	r2, [r3, #80]	; 0x50
 8004a56:	4b8d      	ldr	r3, [pc, #564]	; (8004c8c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f951 	bl	8004d04 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d011      	beq.n	8004a94 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50
 8004a88:	4b80      	ldr	r3, [pc, #512]	; (8004c8c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f942 	bl	8004d18 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d016      	beq.n	8004ad0 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00f      	beq.n	8004ad0 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50
 8004aba:	4b74      	ldr	r3, [pc, #464]	; (8004c8c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ac6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004adc:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004ade:	400b      	ands	r3, r1
 8004ae0:	6513      	str	r3, [r2, #80]	; 0x50
 8004ae2:	4a6a      	ldr	r2, [pc, #424]	; (8004c8c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	0f9b      	lsrs	r3, r3, #30
 8004ae8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004aea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f931 	bl	8004d54 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d011      	beq.n	8004b1c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004afe:	4b64      	ldr	r3, [pc, #400]	; (8004c90 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004b00:	400b      	ands	r3, r1
 8004b02:	6513      	str	r3, [r2, #80]	; 0x50
 8004b04:	4a61      	ldr	r2, [pc, #388]	; (8004c8c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b08:	0f9b      	lsrs	r3, r3, #30
 8004b0a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a5c      	ldr	r2, [pc, #368]	; (8004c94 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	f040 80a6 	bne.w	8004c74 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 809e 	beq.w	8004c74 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b5a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	6a3a      	ldr	r2, [r7, #32]
 8004b64:	4013      	ands	r3, r2
 8004b66:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004b72:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004b8a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004ba2:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4013      	ands	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f8d2 	bl	8004d6a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004bd4:	6a39      	ldr	r1, [r7, #32]
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8d2 	bl	8004d80 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01b      	beq.n	8004c22 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d014      	beq.n	8004c22 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c0e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2240      	movs	r2, #64	; 0x40
 8004c16:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	6939      	ldr	r1, [r7, #16]
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f8ba 	bl	8004d96 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004c30:	69f9      	ldr	r1, [r7, #28]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8bb 	bl	8004dae <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f85e 	bl	8004d40 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004c84:	bf00      	nop
 8004c86:	3748      	adds	r7, #72	; 0x48
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	4000a800 	.word	0x4000a800
 8004c90:	3fcfffff 	.word	0x3fcfffff
 8004c94:	4000a000 	.word	0x4000a000

08004c98 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004dda:	4ba7      	ldr	r3, [pc, #668]	; (8005078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	0091      	lsls	r1, r2, #2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	430b      	orrs	r3, r1
 8004de8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	041a      	lsls	r2, r3, #16
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e1a:	4b97      	ldr	r3, [pc, #604]	; (8005078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	0091      	lsls	r1, r2, #2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	430b      	orrs	r3, r1
 8004e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	041a      	lsls	r2, r3, #16
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4413      	add	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004e5c:	4b86      	ldr	r3, [pc, #536]	; (8005078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	0091      	lsls	r1, r2, #2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	041a      	lsls	r2, r3, #16
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	4413      	add	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004ea4:	4b74      	ldr	r3, [pc, #464]	; (8005078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	0091      	lsls	r1, r2, #2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ebe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec6:	041a      	lsls	r2, r3, #16
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004eec:	4b62      	ldr	r3, [pc, #392]	; (8005078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	0091      	lsls	r1, r2, #2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004f18:	4b57      	ldr	r3, [pc, #348]	; (8005078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	0091      	lsls	r1, r2, #2
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f32:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3a:	041a      	lsls	r2, r3, #16
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	4413      	add	r3, r2
 8004f50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004f5a:	4b47      	ldr	r3, [pc, #284]	; (8005078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	0091      	lsls	r1, r2, #2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	430b      	orrs	r3, r1
 8004f68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f74:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7c:	041a      	lsls	r2, r3, #16
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f90:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f98:	061a      	lsls	r2, r3, #24
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa8:	4b34      	ldr	r3, [pc, #208]	; (800507c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004faa:	4413      	add	r3, r2
 8004fac:	009a      	lsls	r2, r3, #2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	441a      	add	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	441a      	add	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800505a:	fb01 f303 	mul.w	r3, r1, r3
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	441a      	add	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	4a04      	ldr	r2, [pc, #16]	; (8005080 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d915      	bls.n	80050a0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005074:	e006      	b.n	8005084 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005076:	bf00      	nop
 8005078:	ffff0003 	.word	0xffff0003
 800507c:	10002b00 	.word	0x10002b00
 8005080:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2203      	movs	r2, #3
 8005098:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e010      	b.n	80050c2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e005      	b.n	80050b4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3304      	adds	r3, #4
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3f3      	bcc.n	80050a8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop

080050d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b089      	sub	sp, #36	; 0x24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050de:	4b89      	ldr	r3, [pc, #548]	; (8005304 <HAL_GPIO_Init+0x234>)
 80050e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050e2:	e194      	b.n	800540e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	2101      	movs	r1, #1
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	fa01 f303 	lsl.w	r3, r1, r3
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8186 	beq.w	8005408 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d005      	beq.n	8005114 <HAL_GPIO_Init+0x44>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d130      	bne.n	8005176 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	2203      	movs	r2, #3
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800514a:	2201      	movs	r2, #1
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 0201 	and.w	r2, r3, #1
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b03      	cmp	r3, #3
 8005180:	d017      	beq.n	80051b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	2203      	movs	r2, #3
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d123      	bne.n	8005206 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	08da      	lsrs	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3208      	adds	r2, #8
 80051c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	220f      	movs	r2, #15
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	08da      	lsrs	r2, r3, #3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3208      	adds	r2, #8
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	2203      	movs	r2, #3
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 0203 	and.w	r2, r3, #3
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 80e0 	beq.w	8005408 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005248:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <HAL_GPIO_Init+0x238>)
 800524a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800524e:	4a2e      	ldr	r2, [pc, #184]	; (8005308 <HAL_GPIO_Init+0x238>)
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <HAL_GPIO_Init+0x238>)
 800525a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005266:	4a29      	ldr	r2, [pc, #164]	; (800530c <HAL_GPIO_Init+0x23c>)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	3302      	adds	r3, #2
 800526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a20      	ldr	r2, [pc, #128]	; (8005310 <HAL_GPIO_Init+0x240>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d052      	beq.n	8005338 <HAL_GPIO_Init+0x268>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <HAL_GPIO_Init+0x244>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_GPIO_Init+0x22e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_GPIO_Init+0x248>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <HAL_GPIO_Init+0x22a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <HAL_GPIO_Init+0x24c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d025      	beq.n	80052f6 <HAL_GPIO_Init+0x226>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <HAL_GPIO_Init+0x250>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01f      	beq.n	80052f2 <HAL_GPIO_Init+0x222>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <HAL_GPIO_Init+0x254>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d019      	beq.n	80052ee <HAL_GPIO_Init+0x21e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1a      	ldr	r2, [pc, #104]	; (8005328 <HAL_GPIO_Init+0x258>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_GPIO_Init+0x21a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <HAL_GPIO_Init+0x25c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00d      	beq.n	80052e6 <HAL_GPIO_Init+0x216>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a18      	ldr	r2, [pc, #96]	; (8005330 <HAL_GPIO_Init+0x260>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <HAL_GPIO_Init+0x212>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a17      	ldr	r2, [pc, #92]	; (8005334 <HAL_GPIO_Init+0x264>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_GPIO_Init+0x20e>
 80052da:	2309      	movs	r3, #9
 80052dc:	e02d      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052de:	230a      	movs	r3, #10
 80052e0:	e02b      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052e2:	2308      	movs	r3, #8
 80052e4:	e029      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052e6:	2307      	movs	r3, #7
 80052e8:	e027      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052ea:	2306      	movs	r3, #6
 80052ec:	e025      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052ee:	2305      	movs	r3, #5
 80052f0:	e023      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052f2:	2304      	movs	r3, #4
 80052f4:	e021      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052f6:	2303      	movs	r3, #3
 80052f8:	e01f      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e01d      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052fe:	2301      	movs	r3, #1
 8005300:	e01b      	b.n	800533a <HAL_GPIO_Init+0x26a>
 8005302:	bf00      	nop
 8005304:	58000080 	.word	0x58000080
 8005308:	58024400 	.word	0x58024400
 800530c:	58000400 	.word	0x58000400
 8005310:	58020000 	.word	0x58020000
 8005314:	58020400 	.word	0x58020400
 8005318:	58020800 	.word	0x58020800
 800531c:	58020c00 	.word	0x58020c00
 8005320:	58021000 	.word	0x58021000
 8005324:	58021400 	.word	0x58021400
 8005328:	58021800 	.word	0x58021800
 800532c:	58021c00 	.word	0x58021c00
 8005330:	58022000 	.word	0x58022000
 8005334:	58022400 	.word	0x58022400
 8005338:	2300      	movs	r3, #0
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	f002 0203 	and.w	r2, r2, #3
 8005340:	0092      	lsls	r2, r2, #2
 8005342:	4093      	lsls	r3, r2
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4313      	orrs	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800534a:	4938      	ldr	r1, [pc, #224]	; (800542c <HAL_GPIO_Init+0x35c>)
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	089b      	lsrs	r3, r3, #2
 8005350:	3302      	adds	r3, #2
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	43db      	mvns	r3, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800537e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80053ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	43db      	mvns	r3, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4013      	ands	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	43db      	mvns	r3, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	4013      	ands	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	3301      	adds	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	f47f ae63 	bne.w	80050e4 <HAL_GPIO_Init+0x14>
  }
}
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	3724      	adds	r7, #36	; 0x24
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	58000400 	.word	0x58000400

08005430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
 800543c:	4613      	mov	r3, r2
 800543e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005440:	787b      	ldrb	r3, [r7, #1]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005446:	887a      	ldrh	r2, [r7, #2]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800544c:	e003      	b.n	8005456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800544e:	887b      	ldrh	r3, [r7, #2]
 8005450:	041a      	lsls	r2, r3, #16
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	619a      	str	r2, [r3, #24]
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800546c:	4b29      	ldr	r3, [pc, #164]	; (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	2b06      	cmp	r3, #6
 8005476:	d00a      	beq.n	800548e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005478:	4b26      	ldr	r3, [pc, #152]	; (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d001      	beq.n	800548a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e040      	b.n	800550c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e03e      	b.n	800550c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005496:	491f      	ldr	r1, [pc, #124]	; (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4313      	orrs	r3, r2
 800549c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800549e:	f7fd fc97 	bl	8002dd0 <HAL_GetTick>
 80054a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054a4:	e009      	b.n	80054ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054a6:	f7fd fc93 	bl	8002dd0 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b4:	d901      	bls.n	80054ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e028      	b.n	800550c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054ba:	4b16      	ldr	r3, [pc, #88]	; (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c6:	d1ee      	bne.n	80054a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b1e      	cmp	r3, #30
 80054cc:	d008      	beq.n	80054e0 <HAL_PWREx_ConfigSupply+0x7c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b2e      	cmp	r3, #46	; 0x2e
 80054d2:	d005      	beq.n	80054e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b1d      	cmp	r3, #29
 80054d8:	d002      	beq.n	80054e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b2d      	cmp	r3, #45	; 0x2d
 80054de:	d114      	bne.n	800550a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80054e0:	f7fd fc76 	bl	8002dd0 <HAL_GetTick>
 80054e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054e6:	e009      	b.n	80054fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054e8:	f7fd fc72 	bl	8002dd0 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f6:	d901      	bls.n	80054fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e007      	b.n	800550c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d1ee      	bne.n	80054e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	58024800 	.word	0x58024800

08005518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08c      	sub	sp, #48	; 0x30
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e3f3      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80b3 	beq.w	800569e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005538:	4b9e      	ldr	r3, [pc, #632]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005542:	4b9c      	ldr	r3, [pc, #624]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	2b10      	cmp	r3, #16
 800554c:	d007      	beq.n	800555e <HAL_RCC_OscConfig+0x46>
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	2b18      	cmp	r3, #24
 8005552:	d112      	bne.n	800557a <HAL_RCC_OscConfig+0x62>
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d10d      	bne.n	800557a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800555e:	4b95      	ldr	r3, [pc, #596]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8098 	beq.w	800569c <HAL_RCC_OscConfig+0x184>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f040 8093 	bne.w	800569c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e3cb      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005582:	d106      	bne.n	8005592 <HAL_RCC_OscConfig+0x7a>
 8005584:	4b8b      	ldr	r3, [pc, #556]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a8a      	ldr	r2, [pc, #552]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800558a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	e058      	b.n	8005644 <HAL_RCC_OscConfig+0x12c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d112      	bne.n	80055c0 <HAL_RCC_OscConfig+0xa8>
 800559a:	4b86      	ldr	r3, [pc, #536]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a85      	ldr	r2, [pc, #532]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	4b83      	ldr	r3, [pc, #524]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a82      	ldr	r2, [pc, #520]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	4b80      	ldr	r3, [pc, #512]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a7f      	ldr	r2, [pc, #508]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	e041      	b.n	8005644 <HAL_RCC_OscConfig+0x12c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c8:	d112      	bne.n	80055f0 <HAL_RCC_OscConfig+0xd8>
 80055ca:	4b7a      	ldr	r3, [pc, #488]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a79      	ldr	r2, [pc, #484]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	4b77      	ldr	r3, [pc, #476]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a76      	ldr	r2, [pc, #472]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4b74      	ldr	r3, [pc, #464]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a73      	ldr	r2, [pc, #460]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e029      	b.n	8005644 <HAL_RCC_OscConfig+0x12c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80055f8:	d112      	bne.n	8005620 <HAL_RCC_OscConfig+0x108>
 80055fa:	4b6e      	ldr	r3, [pc, #440]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a6d      	ldr	r2, [pc, #436]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b6b      	ldr	r3, [pc, #428]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a6a      	ldr	r2, [pc, #424]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800560c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	4b68      	ldr	r3, [pc, #416]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a67      	ldr	r2, [pc, #412]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	e011      	b.n	8005644 <HAL_RCC_OscConfig+0x12c>
 8005620:	4b64      	ldr	r3, [pc, #400]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a63      	ldr	r2, [pc, #396]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	4b61      	ldr	r3, [pc, #388]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a60      	ldr	r2, [pc, #384]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	4b5e      	ldr	r3, [pc, #376]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a5d      	ldr	r2, [pc, #372]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800563e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fd fbc0 	bl	8002dd0 <HAL_GetTick>
 8005650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005654:	f7fd fbbc 	bl	8002dd0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b64      	cmp	r3, #100	; 0x64
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e355      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005666:	4b53      	ldr	r3, [pc, #332]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0x13c>
 8005672:	e014      	b.n	800569e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fd fbac 	bl	8002dd0 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800567c:	f7fd fba8 	bl	8002dd0 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b64      	cmp	r3, #100	; 0x64
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e341      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800568e:	4b49      	ldr	r3, [pc, #292]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x164>
 800569a:	e000      	b.n	800569e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 808c 	beq.w	80057c4 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ac:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056b6:	4b3f      	ldr	r3, [pc, #252]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1ba>
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	2b18      	cmp	r3, #24
 80056c6:	d137      	bne.n	8005738 <HAL_RCC_OscConfig+0x220>
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d132      	bne.n	8005738 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d2:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_RCC_OscConfig+0x1d2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e313      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056ea:	4b32      	ldr	r3, [pc, #200]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f023 0219 	bic.w	r2, r3, #25
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	492f      	ldr	r1, [pc, #188]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056fc:	f7fd fb68 	bl	8002dd0 <HAL_GetTick>
 8005700:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005704:	f7fd fb64 	bl	8002dd0 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e2fd      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005716:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f0      	beq.n	8005704 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	061b      	lsls	r3, r3, #24
 8005730:	4920      	ldr	r1, [pc, #128]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005732:	4313      	orrs	r3, r2
 8005734:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005736:	e045      	b.n	80057c4 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d026      	beq.n	800578e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005740:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f023 0219 	bic.w	r2, r3, #25
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4919      	ldr	r1, [pc, #100]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005752:	f7fd fb3d 	bl	8002dd0 <HAL_GetTick>
 8005756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800575a:	f7fd fb39 	bl	8002dd0 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e2d2      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f0      	beq.n	800575a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	061b      	lsls	r3, r3, #24
 8005786:	490b      	ldr	r1, [pc, #44]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005788:	4313      	orrs	r3, r2
 800578a:	604b      	str	r3, [r1, #4]
 800578c:	e01a      	b.n	80057c4 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <HAL_RCC_OscConfig+0x29c>)
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579a:	f7fd fb19 	bl	8002dd0 <HAL_GetTick>
 800579e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057a0:	e00a      	b.n	80057b8 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057a2:	f7fd fb15 	bl	8002dd0 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d903      	bls.n	80057b8 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e2ae      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
 80057b4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057b8:	4b99      	ldr	r3, [pc, #612]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ee      	bne.n	80057a2 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d06a      	beq.n	80058a6 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057d0:	4b93      	ldr	r3, [pc, #588]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057da:	4b91      	ldr	r3, [pc, #580]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d007      	beq.n	80057f6 <HAL_RCC_OscConfig+0x2de>
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b18      	cmp	r3, #24
 80057ea:	d11b      	bne.n	8005824 <HAL_RCC_OscConfig+0x30c>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d116      	bne.n	8005824 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057f6:	4b8a      	ldr	r3, [pc, #552]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d005      	beq.n	800580e <HAL_RCC_OscConfig+0x2f6>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	2b80      	cmp	r3, #128	; 0x80
 8005808:	d001      	beq.n	800580e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e281      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800580e:	4b84      	ldr	r3, [pc, #528]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	061b      	lsls	r3, r3, #24
 800581c:	4980      	ldr	r1, [pc, #512]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 800581e:	4313      	orrs	r3, r2
 8005820:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005822:	e040      	b.n	80058a6 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d023      	beq.n	8005874 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800582c:	4b7c      	ldr	r3, [pc, #496]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a7b      	ldr	r2, [pc, #492]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd faca 	bl	8002dd0 <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005840:	f7fd fac6 	bl	8002dd0 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e25f      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005852:	4b73      	ldr	r3, [pc, #460]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800585e:	4b70      	ldr	r3, [pc, #448]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	061b      	lsls	r3, r3, #24
 800586c:	496c      	ldr	r1, [pc, #432]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 800586e:	4313      	orrs	r3, r2
 8005870:	60cb      	str	r3, [r1, #12]
 8005872:	e018      	b.n	80058a6 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005874:	4b6a      	ldr	r3, [pc, #424]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a69      	ldr	r2, [pc, #420]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 800587a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800587e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fd faa6 	bl	8002dd0 <HAL_GetTick>
 8005884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005888:	f7fd faa2 	bl	8002dd0 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e23b      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800589a:	4b61      	ldr	r3, [pc, #388]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d036      	beq.n	8005920 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d019      	beq.n	80058ee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ba:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80058bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058be:	4a58      	ldr	r2, [pc, #352]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c6:	f7fd fa83 	bl	8002dd0 <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ce:	f7fd fa7f 	bl	8002dd0 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e218      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058e0:	4b4f      	ldr	r3, [pc, #316]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80058e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0f0      	beq.n	80058ce <HAL_RCC_OscConfig+0x3b6>
 80058ec:	e018      	b.n	8005920 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ee:	4b4c      	ldr	r3, [pc, #304]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80058f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f2:	4a4b      	ldr	r2, [pc, #300]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fa:	f7fd fa69 	bl	8002dd0 <HAL_GetTick>
 80058fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005902:	f7fd fa65 	bl	8002dd0 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e1fe      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005914:	4b42      	ldr	r3, [pc, #264]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f0      	bne.n	8005902 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d036      	beq.n	800599a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d019      	beq.n	8005968 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005934:	4b3a      	ldr	r3, [pc, #232]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a39      	ldr	r2, [pc, #228]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 800593a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800593e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005940:	f7fd fa46 	bl	8002dd0 <HAL_GetTick>
 8005944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005948:	f7fd fa42 	bl	8002dd0 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e1db      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800595a:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x430>
 8005966:	e018      	b.n	800599a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005968:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 800596e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005972:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005974:	f7fd fa2c 	bl	8002dd0 <HAL_GetTick>
 8005978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800597c:	f7fd fa28 	bl	8002dd0 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e1c1      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800598e:	4b24      	ldr	r3, [pc, #144]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80af 	beq.w	8005b06 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059a8:	4b1e      	ldr	r3, [pc, #120]	; (8005a24 <HAL_RCC_OscConfig+0x50c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <HAL_RCC_OscConfig+0x50c>)
 80059ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059b4:	f7fd fa0c 	bl	8002dd0 <HAL_GetTick>
 80059b8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059bc:	f7fd fa08 	bl	8002dd0 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e1a1      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ce:	4b15      	ldr	r3, [pc, #84]	; (8005a24 <HAL_RCC_OscConfig+0x50c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d106      	bne.n	80059f0 <HAL_RCC_OscConfig+0x4d8>
 80059e2:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80059e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e6:	4a0e      	ldr	r2, [pc, #56]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80059e8:	f043 0301 	orr.w	r3, r3, #1
 80059ec:	6713      	str	r3, [r2, #112]	; 0x70
 80059ee:	e05b      	b.n	8005aa8 <HAL_RCC_OscConfig+0x590>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d117      	bne.n	8005a28 <HAL_RCC_OscConfig+0x510>
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80059fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fc:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	6713      	str	r3, [r2, #112]	; 0x70
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a08:	4a05      	ldr	r2, [pc, #20]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a14:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <HAL_RCC_OscConfig+0x508>)
 8005a16:	f023 0304 	bic.w	r3, r3, #4
 8005a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1c:	e044      	b.n	8005aa8 <HAL_RCC_OscConfig+0x590>
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
 8005a24:	58024800 	.word	0x58024800
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	2b05      	cmp	r3, #5
 8005a2e:	d112      	bne.n	8005a56 <HAL_RCC_OscConfig+0x53e>
 8005a30:	4b95      	ldr	r3, [pc, #596]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a34:	4a94      	ldr	r2, [pc, #592]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a36:	f043 0304 	orr.w	r3, r3, #4
 8005a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3c:	4b92      	ldr	r3, [pc, #584]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	4a91      	ldr	r2, [pc, #580]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a46:	6713      	str	r3, [r2, #112]	; 0x70
 8005a48:	4b8f      	ldr	r3, [pc, #572]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4c:	4a8e      	ldr	r2, [pc, #568]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6713      	str	r3, [r2, #112]	; 0x70
 8005a54:	e028      	b.n	8005aa8 <HAL_RCC_OscConfig+0x590>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b85      	cmp	r3, #133	; 0x85
 8005a5c:	d112      	bne.n	8005a84 <HAL_RCC_OscConfig+0x56c>
 8005a5e:	4b8a      	ldr	r3, [pc, #552]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a62:	4a89      	ldr	r2, [pc, #548]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a64:	f043 0304 	orr.w	r3, r3, #4
 8005a68:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6a:	4b87      	ldr	r3, [pc, #540]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4a86      	ldr	r2, [pc, #536]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70
 8005a76:	4b84      	ldr	r3, [pc, #528]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a83      	ldr	r2, [pc, #524]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
 8005a82:	e011      	b.n	8005aa8 <HAL_RCC_OscConfig+0x590>
 8005a84:	4b80      	ldr	r3, [pc, #512]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a88:	4a7f      	ldr	r2, [pc, #508]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a90:	4b7d      	ldr	r3, [pc, #500]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	4a7c      	ldr	r2, [pc, #496]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a96:	f023 0304 	bic.w	r3, r3, #4
 8005a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9c:	4b7a      	ldr	r3, [pc, #488]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	4a79      	ldr	r2, [pc, #484]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d015      	beq.n	8005adc <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab0:	f7fd f98e 	bl	8002dd0 <HAL_GetTick>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab8:	f7fd f98a 	bl	8002dd0 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e121      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ace:	4b6e      	ldr	r3, [pc, #440]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0ee      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x5a0>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005adc:	f7fd f978 	bl	8002dd0 <HAL_GetTick>
 8005ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ae2:	e00a      	b.n	8005afa <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae4:	f7fd f974 	bl	8002dd0 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e10b      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005afa:	4b63      	ldr	r3, [pc, #396]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1ee      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8100 	beq.w	8005d10 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b10:	4b5d      	ldr	r3, [pc, #372]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b18:	2b18      	cmp	r3, #24
 8005b1a:	f000 80bb 	beq.w	8005c94 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	f040 8095 	bne.w	8005c52 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b28:	4b57      	ldr	r3, [pc, #348]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a56      	ldr	r2, [pc, #344]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fd f94c 	bl	8002dd0 <HAL_GetTick>
 8005b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b3c:	f7fd f948 	bl	8002dd0 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e0e1      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b4e:	4b4e      	ldr	r3, [pc, #312]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b5a:	4b4b      	ldr	r3, [pc, #300]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b5e:	4b4b      	ldr	r3, [pc, #300]	; (8005c8c <HAL_RCC_OscConfig+0x774>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b6a:	0112      	lsls	r2, r2, #4
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	4946      	ldr	r1, [pc, #280]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	628b      	str	r3, [r1, #40]	; 0x28
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	3b01      	subs	r3, #1
 8005b84:	025b      	lsls	r3, r3, #9
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	061b      	lsls	r3, r3, #24
 8005ba0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ba4:	4938      	ldr	r1, [pc, #224]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005baa:	4b37      	ldr	r3, [pc, #220]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	4a36      	ldr	r2, [pc, #216]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bb0:	f023 0301 	bic.w	r3, r3, #1
 8005bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bb6:	4b34      	ldr	r3, [pc, #208]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bba:	4b35      	ldr	r3, [pc, #212]	; (8005c90 <HAL_RCC_OscConfig+0x778>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005bc2:	00d2      	lsls	r2, r2, #3
 8005bc4:	4930      	ldr	r1, [pc, #192]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bca:	4b2f      	ldr	r3, [pc, #188]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	f023 020c 	bic.w	r2, r3, #12
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	492c      	ldr	r1, [pc, #176]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bdc:	4b2a      	ldr	r3, [pc, #168]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	f023 0202 	bic.w	r2, r3, #2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	4927      	ldr	r1, [pc, #156]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bee:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	4a25      	ldr	r2, [pc, #148]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bfa:	4b23      	ldr	r3, [pc, #140]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c06:	4b20      	ldr	r3, [pc, #128]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	4a1f      	ldr	r2, [pc, #124]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005c12:	4b1d      	ldr	r3, [pc, #116]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2a:	f7fd f8d1 	bl	8002dd0 <HAL_GetTick>
 8005c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c32:	f7fd f8cd 	bl	8002dd0 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e066      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c44:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCC_OscConfig+0x71a>
 8005c50:	e05e      	b.n	8005d10 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c52:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a0c      	ldr	r2, [pc, #48]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5e:	f7fd f8b7 	bl	8002dd0 <HAL_GetTick>
 8005c62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c66:	f7fd f8b3 	bl	8002dd0 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e04c      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c78:	4b03      	ldr	r3, [pc, #12]	; (8005c88 <HAL_RCC_OscConfig+0x770>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f0      	bne.n	8005c66 <HAL_RCC_OscConfig+0x74e>
 8005c84:	e044      	b.n	8005d10 <HAL_RCC_OscConfig+0x7f8>
 8005c86:	bf00      	nop
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	fffffc0c 	.word	0xfffffc0c
 8005c90:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c94:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <HAL_RCC_OscConfig+0x804>)
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <HAL_RCC_OscConfig+0x804>)
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d031      	beq.n	8005d0c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f003 0203 	and.w	r2, r3, #3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d12a      	bne.n	8005d0c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d122      	bne.n	8005d0c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d11a      	bne.n	8005d0c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	0a5b      	lsrs	r3, r3, #9
 8005cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d111      	bne.n	8005d0c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	0c1b      	lsrs	r3, r3, #16
 8005cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d108      	bne.n	8005d0c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	0e1b      	lsrs	r3, r3, #24
 8005cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3730      	adds	r7, #48	; 0x30
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	58024400 	.word	0x58024400

08005d20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e19c      	b.n	800606e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d34:	4b8a      	ldr	r3, [pc, #552]	; (8005f60 <HAL_RCC_ClockConfig+0x240>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d910      	bls.n	8005d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d42:	4b87      	ldr	r3, [pc, #540]	; (8005f60 <HAL_RCC_ClockConfig+0x240>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f023 020f 	bic.w	r2, r3, #15
 8005d4a:	4985      	ldr	r1, [pc, #532]	; (8005f60 <HAL_RCC_ClockConfig+0x240>)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d52:	4b83      	ldr	r3, [pc, #524]	; (8005f60 <HAL_RCC_ClockConfig+0x240>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e184      	b.n	800606e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d010      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	4b7b      	ldr	r3, [pc, #492]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d908      	bls.n	8005d92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d80:	4b78      	ldr	r3, [pc, #480]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	4975      	ldr	r1, [pc, #468]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d010      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695a      	ldr	r2, [r3, #20]
 8005da2:	4b70      	ldr	r3, [pc, #448]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d908      	bls.n	8005dc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dae:	4b6d      	ldr	r3, [pc, #436]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	496a      	ldr	r1, [pc, #424]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d010      	beq.n	8005dee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	4b64      	ldr	r3, [pc, #400]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d908      	bls.n	8005dee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ddc:	4b61      	ldr	r3, [pc, #388]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	495e      	ldr	r1, [pc, #376]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69da      	ldr	r2, [r3, #28]
 8005dfe:	4b59      	ldr	r3, [pc, #356]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d908      	bls.n	8005e1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e0a:	4b56      	ldr	r3, [pc, #344]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	4953      	ldr	r1, [pc, #332]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d010      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	4b4d      	ldr	r3, [pc, #308]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d908      	bls.n	8005e4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e38:	4b4a      	ldr	r3, [pc, #296]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f023 020f 	bic.w	r2, r3, #15
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4947      	ldr	r1, [pc, #284]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d055      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e56:	4b43      	ldr	r3, [pc, #268]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	4940      	ldr	r1, [pc, #256]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d107      	bne.n	8005e80 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e70:	4b3c      	ldr	r3, [pc, #240]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d121      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0f6      	b.n	800606e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d107      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e88:	4b36      	ldr	r3, [pc, #216]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d115      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0ea      	b.n	800606e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d107      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ea0:	4b30      	ldr	r3, [pc, #192]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0de      	b.n	800606e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eb0:	4b2c      	ldr	r3, [pc, #176]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0d6      	b.n	800606e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ec0:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f023 0207 	bic.w	r2, r3, #7
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4925      	ldr	r1, [pc, #148]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed2:	f7fc ff7d 	bl	8002dd0 <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed8:	e00a      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eda:	f7fc ff79 	bl	8002dd0 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e0be      	b.n	800606e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef0:	4b1c      	ldr	r3, [pc, #112]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d1eb      	bne.n	8005eda <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d010      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d208      	bcs.n	8005f30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f023 020f 	bic.w	r2, r3, #15
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	490e      	ldr	r1, [pc, #56]	; (8005f64 <HAL_RCC_ClockConfig+0x244>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCC_ClockConfig+0x240>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d214      	bcs.n	8005f68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <HAL_RCC_ClockConfig+0x240>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 020f 	bic.w	r2, r3, #15
 8005f46:	4906      	ldr	r1, [pc, #24]	; (8005f60 <HAL_RCC_ClockConfig+0x240>)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4e:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <HAL_RCC_ClockConfig+0x240>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d005      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e086      	b.n	800606e <HAL_RCC_ClockConfig+0x34e>
 8005f60:	52002000 	.word	0x52002000
 8005f64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d010      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	4b3f      	ldr	r3, [pc, #252]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d208      	bcs.n	8005f96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f84:	4b3c      	ldr	r3, [pc, #240]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	4939      	ldr	r1, [pc, #228]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d010      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	4b34      	ldr	r3, [pc, #208]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d208      	bcs.n	8005fc4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fb2:	4b31      	ldr	r3, [pc, #196]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	492e      	ldr	r1, [pc, #184]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0310 	and.w	r3, r3, #16
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d010      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	4b28      	ldr	r3, [pc, #160]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d208      	bcs.n	8005ff2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fe0:	4b25      	ldr	r3, [pc, #148]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	4922      	ldr	r1, [pc, #136]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d010      	beq.n	8006020 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69da      	ldr	r2, [r3, #28]
 8006002:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800600a:	429a      	cmp	r2, r3
 800600c:	d208      	bcs.n	8006020 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800600e:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	4917      	ldr	r1, [pc, #92]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 800601c:	4313      	orrs	r3, r2
 800601e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006020:	f000 f834 	bl	800608c <HAL_RCC_GetSysClockFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	0a1b      	lsrs	r3, r3, #8
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	4912      	ldr	r1, [pc, #72]	; (800607c <HAL_RCC_ClockConfig+0x35c>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800603e:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <HAL_RCC_ClockConfig+0x358>)
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	4a0d      	ldr	r2, [pc, #52]	; (800607c <HAL_RCC_ClockConfig+0x35c>)
 8006048:	5cd3      	ldrb	r3, [r2, r3]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
 8006054:	4a0a      	ldr	r2, [pc, #40]	; (8006080 <HAL_RCC_ClockConfig+0x360>)
 8006056:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006058:	4a0a      	ldr	r2, [pc, #40]	; (8006084 <HAL_RCC_ClockConfig+0x364>)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800605e:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <HAL_RCC_ClockConfig+0x368>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7fc fe6a 	bl	8002d3c <HAL_InitTick>
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	58024400 	.word	0x58024400
 800607c:	0800c008 	.word	0x0800c008
 8006080:	2400000c 	.word	0x2400000c
 8006084:	24000008 	.word	0x24000008
 8006088:	24000010 	.word	0x24000010

0800608c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800608c:	b480      	push	{r7}
 800608e:	b089      	sub	sp, #36	; 0x24
 8006090:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006092:	4bb3      	ldr	r3, [pc, #716]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800609a:	2b18      	cmp	r3, #24
 800609c:	f200 8155 	bhi.w	800634a <HAL_RCC_GetSysClockFreq+0x2be>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	0800610d 	.word	0x0800610d
 80060ac:	0800634b 	.word	0x0800634b
 80060b0:	0800634b 	.word	0x0800634b
 80060b4:	0800634b 	.word	0x0800634b
 80060b8:	0800634b 	.word	0x0800634b
 80060bc:	0800634b 	.word	0x0800634b
 80060c0:	0800634b 	.word	0x0800634b
 80060c4:	0800634b 	.word	0x0800634b
 80060c8:	08006133 	.word	0x08006133
 80060cc:	0800634b 	.word	0x0800634b
 80060d0:	0800634b 	.word	0x0800634b
 80060d4:	0800634b 	.word	0x0800634b
 80060d8:	0800634b 	.word	0x0800634b
 80060dc:	0800634b 	.word	0x0800634b
 80060e0:	0800634b 	.word	0x0800634b
 80060e4:	0800634b 	.word	0x0800634b
 80060e8:	08006139 	.word	0x08006139
 80060ec:	0800634b 	.word	0x0800634b
 80060f0:	0800634b 	.word	0x0800634b
 80060f4:	0800634b 	.word	0x0800634b
 80060f8:	0800634b 	.word	0x0800634b
 80060fc:	0800634b 	.word	0x0800634b
 8006100:	0800634b 	.word	0x0800634b
 8006104:	0800634b 	.word	0x0800634b
 8006108:	0800613f 	.word	0x0800613f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800610c:	4b94      	ldr	r3, [pc, #592]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d009      	beq.n	800612c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006118:	4b91      	ldr	r3, [pc, #580]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	08db      	lsrs	r3, r3, #3
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	4a90      	ldr	r2, [pc, #576]	; (8006364 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
 8006128:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800612a:	e111      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800612c:	4b8d      	ldr	r3, [pc, #564]	; (8006364 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800612e:	61bb      	str	r3, [r7, #24]
    break;
 8006130:	e10e      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006132:	4b8d      	ldr	r3, [pc, #564]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006134:	61bb      	str	r3, [r7, #24]
    break;
 8006136:	e10b      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006138:	4b8c      	ldr	r3, [pc, #560]	; (800636c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800613a:	61bb      	str	r3, [r7, #24]
    break;
 800613c:	e108      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800613e:	4b88      	ldr	r3, [pc, #544]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006148:	4b85      	ldr	r3, [pc, #532]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006152:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006154:	4b82      	ldr	r3, [pc, #520]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800615e:	4b80      	ldr	r3, [pc, #512]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	08db      	lsrs	r3, r3, #3
 8006164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	fb02 f303 	mul.w	r3, r2, r3
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006176:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80e1 	beq.w	8006344 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b02      	cmp	r3, #2
 8006186:	f000 8083 	beq.w	8006290 <HAL_RCC_GetSysClockFreq+0x204>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b02      	cmp	r3, #2
 800618e:	f200 80a1 	bhi.w	80062d4 <HAL_RCC_GetSysClockFreq+0x248>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_RCC_GetSysClockFreq+0x114>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d056      	beq.n	800624c <HAL_RCC_GetSysClockFreq+0x1c0>
 800619e:	e099      	b.n	80062d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061a0:	4b6f      	ldr	r3, [pc, #444]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d02d      	beq.n	8006208 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061ac:	4b6c      	ldr	r3, [pc, #432]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	08db      	lsrs	r3, r3, #3
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	4a6b      	ldr	r2, [pc, #428]	; (8006364 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061b8:	fa22 f303 	lsr.w	r3, r2, r3
 80061bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d6:	4b62      	ldr	r3, [pc, #392]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006370 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006202:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006206:	e087      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006212:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006374 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800621a:	4b51      	ldr	r3, [pc, #324]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800622a:	ed97 6a02 	vldr	s12, [r7, #8]
 800622e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006370 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800623a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800623e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800624a:	e065      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006256:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006378 <HAL_RCC_GetSysClockFreq+0x2ec>
 800625a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800625e:	4b40      	ldr	r3, [pc, #256]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800626e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006272:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006370 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800627a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800627e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800628a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800628e:	e043      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800637c <HAL_RCC_GetSysClockFreq+0x2f0>
 800629e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a2:	4b2f      	ldr	r3, [pc, #188]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006370 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062d2:	e021      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006378 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e6:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006370 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800630a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006316:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006318:	4b11      	ldr	r3, [pc, #68]	; (8006360 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	0a5b      	lsrs	r3, r3, #9
 800631e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006322:	3301      	adds	r3, #1
 8006324:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006330:	edd7 6a07 	vldr	s13, [r7, #28]
 8006334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800633c:	ee17 3a90 	vmov	r3, s15
 8006340:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006342:	e005      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	61bb      	str	r3, [r7, #24]
    break;
 8006348:	e002      	b.n	8006350 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800634a:	4b07      	ldr	r3, [pc, #28]	; (8006368 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800634c:	61bb      	str	r3, [r7, #24]
    break;
 800634e:	bf00      	nop
  }

  return sysclockfreq;
 8006350:	69bb      	ldr	r3, [r7, #24]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3724      	adds	r7, #36	; 0x24
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	58024400 	.word	0x58024400
 8006364:	03d09000 	.word	0x03d09000
 8006368:	003d0900 	.word	0x003d0900
 800636c:	016e3600 	.word	0x016e3600
 8006370:	46000000 	.word	0x46000000
 8006374:	4c742400 	.word	0x4c742400
 8006378:	4a742400 	.word	0x4a742400
 800637c:	4bb71b00 	.word	0x4bb71b00

08006380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006386:	f7ff fe81 	bl	800608c <HAL_RCC_GetSysClockFreq>
 800638a:	4602      	mov	r2, r0
 800638c:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	490f      	ldr	r1, [pc, #60]	; (80063d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006398:	5ccb      	ldrb	r3, [r1, r3]
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	fa22 f303 	lsr.w	r3, r2, r3
 80063a2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80063ae:	5cd3      	ldrb	r3, [r2, r3]
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ba:	4a07      	ldr	r2, [pc, #28]	; (80063d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80063bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063be:	4a07      	ldr	r2, [pc, #28]	; (80063dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80063c6:	681b      	ldr	r3, [r3, #0]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	58024400 	.word	0x58024400
 80063d4:	0800c008 	.word	0x0800c008
 80063d8:	2400000c 	.word	0x2400000c
 80063dc:	24000008 	.word	0x24000008

080063e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80063e4:	f7ff ffcc 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b06      	ldr	r3, [pc, #24]	; (8006404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4904      	ldr	r1, [pc, #16]	; (8006408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	58024400 	.word	0x58024400
 8006408:	0800c008 	.word	0x0800c008

0800640c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006410:	f7ff ffb6 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	0a1b      	lsrs	r3, r3, #8
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4904      	ldr	r1, [pc, #16]	; (8006434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800642c:	4618      	mov	r0, r3
 800642e:	bd80      	pop	{r7, pc}
 8006430:	58024400 	.word	0x58024400
 8006434:	0800c008 	.word	0x0800c008

08006438 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006440:	2300      	movs	r3, #0
 8006442:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006444:	2300      	movs	r3, #0
 8006446:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d03f      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006458:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800645c:	d02a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800645e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006462:	d824      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006468:	d018      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800646a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800646e:	d81e      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006478:	d007      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800647a:	e018      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647c:	4ba6      	ldr	r3, [pc, #664]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	4aa5      	ldr	r2, [pc, #660]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006488:	e015      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	2102      	movs	r1, #2
 8006490:	4618      	mov	r0, r3
 8006492:	f001 ff17 	bl	80082c4 <RCCEx_PLL2_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800649a:	e00c      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3324      	adds	r3, #36	; 0x24
 80064a0:	2102      	movs	r1, #2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 ffc0 	bl	8008428 <RCCEx_PLL3_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064ac:	e003      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
      break;
 80064b2:	e000      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80064bc:	4b96      	ldr	r3, [pc, #600]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80064be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	4993      	ldr	r1, [pc, #588]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	650b      	str	r3, [r1, #80]	; 0x50
 80064ce:	e001      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d03d      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d826      	bhi.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80064e8:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	08006505 	.word	0x08006505
 80064f4:	08006513 	.word	0x08006513
 80064f8:	08006525 	.word	0x08006525
 80064fc:	0800653d 	.word	0x0800653d
 8006500:	0800653d 	.word	0x0800653d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006504:	4b84      	ldr	r3, [pc, #528]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a83      	ldr	r2, [pc, #524]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006510:	e015      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3304      	adds	r3, #4
 8006516:	2100      	movs	r1, #0
 8006518:	4618      	mov	r0, r3
 800651a:	f001 fed3 	bl	80082c4 <RCCEx_PLL2_Config>
 800651e:	4603      	mov	r3, r0
 8006520:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006522:	e00c      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3324      	adds	r3, #36	; 0x24
 8006528:	2100      	movs	r1, #0
 800652a:	4618      	mov	r0, r3
 800652c:	f001 ff7c 	bl	8008428 <RCCEx_PLL3_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006534:	e003      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
      break;
 800653a:	e000      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800653c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d109      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006544:	4b74      	ldr	r3, [pc, #464]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006548:	f023 0207 	bic.w	r2, r3, #7
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006550:	4971      	ldr	r1, [pc, #452]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006552:	4313      	orrs	r3, r2
 8006554:	650b      	str	r3, [r1, #80]	; 0x50
 8006556:	e001      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006564:	2b00      	cmp	r3, #0
 8006566:	d04a      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006570:	d031      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006572:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006576:	d82b      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657c:	d02d      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800657e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006582:	d825      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006584:	2bc0      	cmp	r3, #192	; 0xc0
 8006586:	d02a      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006588:	2bc0      	cmp	r3, #192	; 0xc0
 800658a:	d821      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800658c:	2b80      	cmp	r3, #128	; 0x80
 800658e:	d016      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006590:	2b80      	cmp	r3, #128	; 0x80
 8006592:	d81d      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	d007      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x174>
 800659c:	e018      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659e:	4b5e      	ldr	r3, [pc, #376]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a2:	4a5d      	ldr	r2, [pc, #372]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80065a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80065aa:	e019      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	2100      	movs	r1, #0
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 fe86 	bl	80082c4 <RCCEx_PLL2_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80065bc:	e010      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3324      	adds	r3, #36	; 0x24
 80065c2:	2100      	movs	r1, #0
 80065c4:	4618      	mov	r0, r3
 80065c6:	f001 ff2f 	bl	8008428 <RCCEx_PLL3_Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80065ce:	e007      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
      break;
 80065d4:	e004      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80065d6:	bf00      	nop
 80065d8:	e002      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80065da:	bf00      	nop
 80065dc:	e000      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80065de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d109      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80065e6:	4b4c      	ldr	r3, [pc, #304]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80065e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f2:	4949      	ldr	r1, [pc, #292]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	650b      	str	r3, [r1, #80]	; 0x50
 80065f8:	e001      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006606:	2b00      	cmp	r3, #0
 8006608:	d04f      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006612:	d036      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8006614:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006618:	d830      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800661a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661e:	d032      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006624:	d82a      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006626:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800662a:	d02e      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x252>
 800662c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006630:	d824      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006636:	d018      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d81e      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8006642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006646:	d007      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8006648:	e018      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800664a:	4b33      	ldr	r3, [pc, #204]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	4a32      	ldr	r2, [pc, #200]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006656:	e019      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	2100      	movs	r1, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f001 fe30 	bl	80082c4 <RCCEx_PLL2_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006668:	e010      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3324      	adds	r3, #36	; 0x24
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f001 fed9 	bl	8008428 <RCCEx_PLL3_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800667a:	e007      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	75fb      	strb	r3, [r7, #23]
      break;
 8006680:	e004      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006682:	bf00      	nop
 8006684:	e002      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006686:	bf00      	nop
 8006688:	e000      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800668a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006692:	4b21      	ldr	r3, [pc, #132]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006696:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669e:	491e      	ldr	r1, [pc, #120]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	650b      	str	r3, [r1, #80]	; 0x50
 80066a4:	e001      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d034      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ba:	2b30      	cmp	r3, #48	; 0x30
 80066bc:	d01c      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80066be:	2b30      	cmp	r3, #48	; 0x30
 80066c0:	d817      	bhi.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d00c      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d813      	bhi.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d10f      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d2:	4b11      	ldr	r3, [pc, #68]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	4a10      	ldr	r2, [pc, #64]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80066d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80066de:	e00e      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3304      	adds	r3, #4
 80066e4:	2102      	movs	r1, #2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 fdec 	bl	80082c4 <RCCEx_PLL2_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80066f0:	e005      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75fb      	strb	r3, [r7, #23]
      break;
 80066f6:	e002      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80066f8:	bf00      	nop
 80066fa:	e000      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80066fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006708:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006710:	4901      	ldr	r1, [pc, #4]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006712:	4313      	orrs	r3, r2
 8006714:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006716:	e003      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8006718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d047      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006734:	d030      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800673a:	d82a      	bhi.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800673c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006740:	d02c      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8006742:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006746:	d824      	bhi.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800674c:	d018      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800674e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006752:	d81e      	bhi.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675c:	d007      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800675e:	e018      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006760:	4bb0      	ldr	r3, [pc, #704]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4aaf      	ldr	r2, [pc, #700]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800676a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800676c:	e017      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3304      	adds	r3, #4
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f001 fda5 	bl	80082c4 <RCCEx_PLL2_Config>
 800677a:	4603      	mov	r3, r0
 800677c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800677e:	e00e      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3324      	adds	r3, #36	; 0x24
 8006784:	2100      	movs	r1, #0
 8006786:	4618      	mov	r0, r3
 8006788:	f001 fe4e 	bl	8008428 <RCCEx_PLL3_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006790:	e005      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
      break;
 8006796:	e002      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8006798:	bf00      	nop
 800679a:	e000      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800679c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d109      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80067a4:	4b9f      	ldr	r3, [pc, #636]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80067a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b0:	499c      	ldr	r1, [pc, #624]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	650b      	str	r3, [r1, #80]	; 0x50
 80067b6:	e001      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d049      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d0:	d02e      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80067d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d6:	d828      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80067d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067dc:	d02a      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80067de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067e2:	d822      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80067e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067e8:	d026      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80067ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067ee:	d81c      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80067f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067f4:	d010      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067fa:	d816      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01d      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	d111      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3304      	adds	r3, #4
 800680a:	2101      	movs	r1, #1
 800680c:	4618      	mov	r0, r3
 800680e:	f001 fd59 	bl	80082c4 <RCCEx_PLL2_Config>
 8006812:	4603      	mov	r3, r0
 8006814:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006816:	e012      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3324      	adds	r3, #36	; 0x24
 800681c:	2101      	movs	r1, #1
 800681e:	4618      	mov	r0, r3
 8006820:	f001 fe02 	bl	8008428 <RCCEx_PLL3_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006828:	e009      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
      break;
 800682e:	e006      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006830:	bf00      	nop
 8006832:	e004      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006834:	bf00      	nop
 8006836:	e002      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006838:	bf00      	nop
 800683a:	e000      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800683c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006844:	4b77      	ldr	r3, [pc, #476]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006848:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006850:	4974      	ldr	r1, [pc, #464]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006852:	4313      	orrs	r3, r2
 8006854:	650b      	str	r3, [r1, #80]	; 0x50
 8006856:	e001      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d053      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800686e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006872:	d034      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006874:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006878:	d82e      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800687a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800687e:	d030      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8006880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006884:	d828      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688a:	d02c      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800688c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006890:	d822      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006892:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006896:	d028      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006898:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800689c:	d81c      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800689e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a2:	d010      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80068a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a8:	d816      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01f      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80068ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068b2:	d111      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	2101      	movs	r1, #1
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 fd02 	bl	80082c4 <RCCEx_PLL2_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80068c4:	e014      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3324      	adds	r3, #36	; 0x24
 80068ca:	2101      	movs	r1, #1
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 fdab 	bl	8008428 <RCCEx_PLL3_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80068d6:	e00b      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
      break;
 80068dc:	e008      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80068de:	bf00      	nop
 80068e0:	e006      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80068e2:	bf00      	nop
 80068e4:	e004      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80068e6:	bf00      	nop
 80068e8:	e002      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80068ea:	bf00      	nop
 80068ec:	e000      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80068ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80068f6:	4b4b      	ldr	r3, [pc, #300]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80068f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006904:	4947      	ldr	r1, [pc, #284]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006906:	4313      	orrs	r3, r2
 8006908:	658b      	str	r3, [r1, #88]	; 0x58
 800690a:	e001      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d02f      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006924:	d00e      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692a:	d814      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d015      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006934:	d10f      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006936:	4b3b      	ldr	r3, [pc, #236]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	4a3a      	ldr	r2, [pc, #232]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800693c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006942:	e00c      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	2101      	movs	r1, #1
 800694a:	4618      	mov	r0, r3
 800694c:	f001 fcba 	bl	80082c4 <RCCEx_PLL2_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006954:	e003      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	75fb      	strb	r3, [r7, #23]
      break;
 800695a:	e000      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800695c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006964:	4b2f      	ldr	r3, [pc, #188]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006970:	492c      	ldr	r1, [pc, #176]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006972:	4313      	orrs	r3, r2
 8006974:	650b      	str	r3, [r1, #80]	; 0x50
 8006976:	e001      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d032      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698c:	2b03      	cmp	r3, #3
 800698e:	d81b      	bhi.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069cf 	.word	0x080069cf
 800699c:	080069a9 	.word	0x080069a9
 80069a0:	080069b7 	.word	0x080069b7
 80069a4:	080069cf 	.word	0x080069cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a8:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80069ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80069b4:	e00c      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3304      	adds	r3, #4
 80069ba:	2102      	movs	r1, #2
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 fc81 	bl	80082c4 <RCCEx_PLL2_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80069c6:	e003      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	75fb      	strb	r3, [r7, #23]
      break;
 80069cc:	e000      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80069ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069d6:	4b13      	ldr	r3, [pc, #76]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80069d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069da:	f023 0203 	bic.w	r2, r3, #3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	4910      	ldr	r1, [pc, #64]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069e8:	e001      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 808a 	beq.w	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a08:	f7fc f9e2 	bl	8002dd0 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a0e:	e00d      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a10:	f7fc f9de 	bl	8002dd0 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b64      	cmp	r3, #100	; 0x64
 8006a1c:	d906      	bls.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	75fb      	strb	r3, [r7, #23]
        break;
 8006a22:	e009      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8006a24:	58024400 	.word	0x58024400
 8006a28:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a2c:	4bba      	ldr	r3, [pc, #744]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0eb      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d166      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a3e:	4bb7      	ldr	r3, [pc, #732]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a48:	4053      	eors	r3, r2
 8006a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d013      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a52:	4bb2      	ldr	r3, [pc, #712]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a5c:	4baf      	ldr	r3, [pc, #700]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a60:	4aae      	ldr	r2, [pc, #696]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a66:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a68:	4bac      	ldr	r3, [pc, #688]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6c:	4aab      	ldr	r2, [pc, #684]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a72:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a74:	4aa9      	ldr	r2, [pc, #676]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a84:	d115      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a86:	f7fc f9a3 	bl	8002dd0 <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a8c:	e00b      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a8e:	f7fc f99f 	bl	8002dd0 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d902      	bls.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	75fb      	strb	r3, [r7, #23]
            break;
 8006aa4:	e005      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aa6:	4b9d      	ldr	r3, [pc, #628]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0ed      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d126      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac6:	d10d      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8006ac8:	4b94      	ldr	r3, [pc, #592]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ad6:	0919      	lsrs	r1, r3, #4
 8006ad8:	4b91      	ldr	r3, [pc, #580]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006ada:	400b      	ands	r3, r1
 8006adc:	498f      	ldr	r1, [pc, #572]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	610b      	str	r3, [r1, #16]
 8006ae2:	e005      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006ae4:	4b8d      	ldr	r3, [pc, #564]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	4a8c      	ldr	r2, [pc, #560]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006aea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006aee:	6113      	str	r3, [r2, #16]
 8006af0:	4b8a      	ldr	r3, [pc, #552]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006af2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006afe:	4987      	ldr	r1, [pc, #540]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	670b      	str	r3, [r1, #112]	; 0x70
 8006b04:	e004      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	75bb      	strb	r3, [r7, #22]
 8006b0a:	e001      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d07f      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b22:	2b28      	cmp	r3, #40	; 0x28
 8006b24:	d866      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006bfb 	.word	0x08006bfb
 8006b30:	08006bf5 	.word	0x08006bf5
 8006b34:	08006bf5 	.word	0x08006bf5
 8006b38:	08006bf5 	.word	0x08006bf5
 8006b3c:	08006bf5 	.word	0x08006bf5
 8006b40:	08006bf5 	.word	0x08006bf5
 8006b44:	08006bf5 	.word	0x08006bf5
 8006b48:	08006bf5 	.word	0x08006bf5
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bf5 	.word	0x08006bf5
 8006b54:	08006bf5 	.word	0x08006bf5
 8006b58:	08006bf5 	.word	0x08006bf5
 8006b5c:	08006bf5 	.word	0x08006bf5
 8006b60:	08006bf5 	.word	0x08006bf5
 8006b64:	08006bf5 	.word	0x08006bf5
 8006b68:	08006bf5 	.word	0x08006bf5
 8006b6c:	08006be3 	.word	0x08006be3
 8006b70:	08006bf5 	.word	0x08006bf5
 8006b74:	08006bf5 	.word	0x08006bf5
 8006b78:	08006bf5 	.word	0x08006bf5
 8006b7c:	08006bf5 	.word	0x08006bf5
 8006b80:	08006bf5 	.word	0x08006bf5
 8006b84:	08006bf5 	.word	0x08006bf5
 8006b88:	08006bf5 	.word	0x08006bf5
 8006b8c:	08006bfb 	.word	0x08006bfb
 8006b90:	08006bf5 	.word	0x08006bf5
 8006b94:	08006bf5 	.word	0x08006bf5
 8006b98:	08006bf5 	.word	0x08006bf5
 8006b9c:	08006bf5 	.word	0x08006bf5
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006bf5 	.word	0x08006bf5
 8006ba8:	08006bf5 	.word	0x08006bf5
 8006bac:	08006bfb 	.word	0x08006bfb
 8006bb0:	08006bf5 	.word	0x08006bf5
 8006bb4:	08006bf5 	.word	0x08006bf5
 8006bb8:	08006bf5 	.word	0x08006bf5
 8006bbc:	08006bf5 	.word	0x08006bf5
 8006bc0:	08006bf5 	.word	0x08006bf5
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006bf5 	.word	0x08006bf5
 8006bcc:	08006bfb 	.word	0x08006bfb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 fb74 	bl	80082c4 <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006be0:	e00c      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3324      	adds	r3, #36	; 0x24
 8006be6:	2101      	movs	r1, #1
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 fc1d 	bl	8008428 <RCCEx_PLL3_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006bf2:	e003      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf8:	e000      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8006bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c02:	4b46      	ldr	r3, [pc, #280]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c06:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c10:	4942      	ldr	r1, [pc, #264]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	654b      	str	r3, [r1, #84]	; 0x54
 8006c16:	e001      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d038      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c2c:	2b05      	cmp	r3, #5
 8006c2e:	d821      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c7b 	.word	0x08006c7b
 8006c3c:	08006c51 	.word	0x08006c51
 8006c40:	08006c63 	.word	0x08006c63
 8006c44:	08006c7b 	.word	0x08006c7b
 8006c48:	08006c7b 	.word	0x08006c7b
 8006c4c:	08006c7b 	.word	0x08006c7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3304      	adds	r3, #4
 8006c54:	2101      	movs	r1, #1
 8006c56:	4618      	mov	r0, r3
 8006c58:	f001 fb34 	bl	80082c4 <RCCEx_PLL2_Config>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c60:	e00c      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3324      	adds	r3, #36	; 0x24
 8006c66:	2101      	movs	r1, #1
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f001 fbdd 	bl	8008428 <RCCEx_PLL3_Config>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c72:	e003      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	75fb      	strb	r3, [r7, #23]
      break;
 8006c78:	e000      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c82:	4b26      	ldr	r3, [pc, #152]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	f023 0207 	bic.w	r2, r3, #7
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8e:	4923      	ldr	r1, [pc, #140]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	654b      	str	r3, [r1, #84]	; 0x54
 8006c94:	e001      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d040      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cac:	2b05      	cmp	r3, #5
 8006cae:	d821      	bhi.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006cb0:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006cfb 	.word	0x08006cfb
 8006cbc:	08006cd1 	.word	0x08006cd1
 8006cc0:	08006ce3 	.word	0x08006ce3
 8006cc4:	08006cfb 	.word	0x08006cfb
 8006cc8:	08006cfb 	.word	0x08006cfb
 8006ccc:	08006cfb 	.word	0x08006cfb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 faf4 	bl	80082c4 <RCCEx_PLL2_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ce0:	e00c      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3324      	adds	r3, #36	; 0x24
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 fb9d 	bl	8008428 <RCCEx_PLL3_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006cf2:	e003      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf8:	e000      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d110      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d02:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d06:	f023 0207 	bic.w	r2, r3, #7
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d10:	4902      	ldr	r1, [pc, #8]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	658b      	str	r3, [r1, #88]	; 0x58
 8006d16:	e007      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006d18:	58024800 	.word	0x58024800
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d04b      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d3e:	d02e      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d44:	d828      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4a:	d02a      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d50:	d822      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006d52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d56:	d026      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006d58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d5c:	d81c      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d62:	d010      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d68:	d816      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01d      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d72:	d111      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 faa2 	bl	80082c4 <RCCEx_PLL2_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d84:	e012      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3324      	adds	r3, #36	; 0x24
 8006d8a:	2102      	movs	r1, #2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 fb4b 	bl	8008428 <RCCEx_PLL3_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d96:	e009      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9c:	e006      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006d9e:	bf00      	nop
 8006da0:	e004      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006da2:	bf00      	nop
 8006da4:	e002      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006da6:	bf00      	nop
 8006da8:	e000      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006db2:	4bb3      	ldr	r3, [pc, #716]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dc0:	49af      	ldr	r1, [pc, #700]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	654b      	str	r3, [r1, #84]	; 0x54
 8006dc6:	e001      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d04b      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006de2:	d02e      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006de4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006de8:	d828      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dee:	d02a      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df4:	d822      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006df6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dfa:	d026      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e00:	d81c      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e06:	d010      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e0c:	d816      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01d      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e16:	d111      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 fa50 	bl	80082c4 <RCCEx_PLL2_Config>
 8006e24:	4603      	mov	r3, r0
 8006e26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006e28:	e012      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3324      	adds	r3, #36	; 0x24
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 faf9 	bl	8008428 <RCCEx_PLL3_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006e3a:	e009      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e40:	e006      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006e42:	bf00      	nop
 8006e44:	e004      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006e46:	bf00      	nop
 8006e48:	e002      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006e4a:	bf00      	nop
 8006e4c:	e000      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e56:	4b8a      	ldr	r3, [pc, #552]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e64:	4986      	ldr	r1, [pc, #536]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	658b      	str	r3, [r1, #88]	; 0x58
 8006e6a:	e001      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d04b      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e86:	d02e      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006e88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e8c:	d828      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e92:	d02a      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e98:	d822      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006e9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e9e:	d026      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006ea0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ea4:	d81c      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eaa:	d010      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb0:	d816      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d01d      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eba:	d111      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 f9fe 	bl	80082c4 <RCCEx_PLL2_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ecc:	e012      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3324      	adds	r3, #36	; 0x24
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f001 faa7 	bl	8008428 <RCCEx_PLL3_Config>
 8006eda:	4603      	mov	r3, r0
 8006edc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ede:	e009      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee4:	e006      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006ee6:	bf00      	nop
 8006ee8:	e004      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006eea:	bf00      	nop
 8006eec:	e002      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e000      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006efa:	4b61      	ldr	r3, [pc, #388]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f08:	495d      	ldr	r1, [pc, #372]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	658b      	str	r3, [r1, #88]	; 0x58
 8006f0e:	e001      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0308 	and.w	r3, r3, #8
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01a      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2a:	d10a      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3324      	adds	r3, #36	; 0x24
 8006f30:	2102      	movs	r1, #2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 fa78 	bl	8008428 <RCCEx_PLL3_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f42:	4b4f      	ldr	r3, [pc, #316]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f50:	494b      	ldr	r1, [pc, #300]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01a      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f6c:	d10a      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3324      	adds	r3, #36	; 0x24
 8006f72:	2102      	movs	r1, #2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fa57 	bl	8008428 <RCCEx_PLL3_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f84:	4b3e      	ldr	r3, [pc, #248]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f92:	493b      	ldr	r1, [pc, #236]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d034      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fae:	d01d      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8006fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb4:	d817      	bhi.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8006fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbe:	d009      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006fc0:	e011      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 f97b 	bl	80082c4 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006fd2:	e00c      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3324      	adds	r3, #36	; 0x24
 8006fd8:	2102      	movs	r1, #2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 fa24 	bl	8008428 <RCCEx_PLL3_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fea:	e000      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ff4:	4b22      	ldr	r3, [pc, #136]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007002:	491f      	ldr	r1, [pc, #124]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8007004:	4313      	orrs	r3, r2
 8007006:	658b      	str	r3, [r1, #88]	; 0x58
 8007008:	e001      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d036      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007020:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007024:	d01c      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007026:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800702a:	d816      	bhi.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800702c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007030:	d003      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8007032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007036:	d007      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007038:	e00f      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703a:	4b11      	ldr	r3, [pc, #68]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	4a10      	ldr	r2, [pc, #64]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8007040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007046:	e00c      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3324      	adds	r3, #36	; 0x24
 800704c:	2101      	movs	r1, #1
 800704e:	4618      	mov	r0, r3
 8007050:	f001 f9ea 	bl	8008428 <RCCEx_PLL3_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007058:	e003      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	75fb      	strb	r3, [r7, #23]
      break;
 800705e:	e000      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10d      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800706a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007076:	4902      	ldr	r1, [pc, #8]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8007078:	4313      	orrs	r3, r2
 800707a:	654b      	str	r3, [r1, #84]	; 0x54
 800707c:	e004      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800707e:	bf00      	nop
 8007080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d029      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800709c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a0:	d007      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80070a2:	e00f      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a4:	4b69      	ldr	r3, [pc, #420]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	4a68      	ldr	r2, [pc, #416]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80070b0:	e00b      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3304      	adds	r3, #4
 80070b6:	2102      	movs	r1, #2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 f903 	bl	80082c4 <RCCEx_PLL2_Config>
 80070be:	4603      	mov	r3, r0
 80070c0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80070c2:	e002      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]
      break;
 80070c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d109      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80070d0:	4b5e      	ldr	r3, [pc, #376]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070dc:	495b      	ldr	r1, [pc, #364]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070e2:	e001      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3324      	adds	r3, #36	; 0x24
 80070f8:	2102      	movs	r1, #2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 f994 	bl	8008428 <RCCEx_PLL3_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d032      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007120:	d017      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8007122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007126:	d811      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712c:	d013      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800712e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007132:	d80b      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d010      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8007138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800713c:	d106      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713e:	4b43      	ldr	r3, [pc, #268]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	4a42      	ldr	r2, [pc, #264]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007148:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800714a:	e007      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]
      break;
 8007150:	e004      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8007152:	bf00      	nop
 8007154:	e002      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8007156:	bf00      	nop
 8007158:	e000      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800715a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007162:	4b3a      	ldr	r3, [pc, #232]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007170:	4936      	ldr	r1, [pc, #216]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007172:	4313      	orrs	r3, r2
 8007174:	654b      	str	r3, [r1, #84]	; 0x54
 8007176:	e001      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d008      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007188:	4b30      	ldr	r3, [pc, #192]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800718a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007194:	492d      	ldr	r1, [pc, #180]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007196:	4313      	orrs	r3, r2
 8007198:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071a6:	4b29      	ldr	r3, [pc, #164]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80071a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b2:	4926      	ldr	r1, [pc, #152]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d008      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80071c4:	4b21      	ldr	r3, [pc, #132]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80071c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d0:	491e      	ldr	r1, [pc, #120]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00d      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071e2:	4b1a      	ldr	r3, [pc, #104]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4a19      	ldr	r2, [pc, #100]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80071e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071ec:	6113      	str	r3, [r2, #16]
 80071ee:	4b17      	ldr	r3, [pc, #92]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071f8:	4914      	ldr	r1, [pc, #80]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	da08      	bge.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007206:	4b11      	ldr	r3, [pc, #68]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007212:	490e      	ldr	r1, [pc, #56]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007214:	4313      	orrs	r3, r2
 8007216:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d009      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007224:	4b09      	ldr	r3, [pc, #36]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007232:	4906      	ldr	r1, [pc, #24]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007234:	4313      	orrs	r3, r2
 8007236:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007238:	7dbb      	ldrb	r3, [r7, #22]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e000      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	58024400 	.word	0x58024400

08007250 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b090      	sub	sp, #64	; 0x40
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725e:	f040 8089 	bne.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007262:	4ba8      	ldr	r3, [pc, #672]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	633b      	str	r3, [r7, #48]	; 0x30
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	2b04      	cmp	r3, #4
 8007270:	d87d      	bhi.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	0800728d 	.word	0x0800728d
 800727c:	080072b1 	.word	0x080072b1
 8007280:	080072d5 	.word	0x080072d5
 8007284:	08007369 	.word	0x08007369
 8007288:	080072f9 	.word	0x080072f9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800728c:	4b9d      	ldr	r3, [pc, #628]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007298:	d107      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800729a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 febe 	bl	8008020 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072a8:	e3f5      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ae:	e3f2      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072b0:	4b94      	ldr	r3, [pc, #592]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072bc:	d107      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072be:	f107 0318 	add.w	r3, r7, #24
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fc04 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072cc:	e3e3      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d2:	e3e0      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072d4:	4b8b      	ldr	r3, [pc, #556]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072e0:	d107      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072e2:	f107 030c 	add.w	r3, r7, #12
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fd46 	bl	8007d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072f0:	e3d1      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f6:	e3ce      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072f8:	4b82      	ldr	r3, [pc, #520]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007300:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007302:	4b80      	ldr	r3, [pc, #512]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b04      	cmp	r3, #4
 800730c:	d10c      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	2b00      	cmp	r3, #0
 8007312:	d109      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007314:	4b7b      	ldr	r3, [pc, #492]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	08db      	lsrs	r3, r3, #3
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	4a7a      	ldr	r2, [pc, #488]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007326:	e01e      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007328:	4b76      	ldr	r3, [pc, #472]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007334:	d106      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800733c:	d102      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800733e:	4b73      	ldr	r3, [pc, #460]	; (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007342:	e010      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007344:	4b6f      	ldr	r3, [pc, #444]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007350:	d106      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007358:	d102      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800735a:	4b6d      	ldr	r3, [pc, #436]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800735e:	e002      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007364:	e397      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007366:	e396      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007368:	4b6a      	ldr	r3, [pc, #424]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800736c:	e393      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007372:	e390      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800737a:	f040 8095 	bne.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800737e:	4b61      	ldr	r3, [pc, #388]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007382:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007386:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800738e:	d04d      	beq.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007396:	f200 8084 	bhi.w	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2bc0      	cmp	r3, #192	; 0xc0
 800739e:	d07d      	beq.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	2bc0      	cmp	r3, #192	; 0xc0
 80073a4:	d87d      	bhi.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	2b80      	cmp	r3, #128	; 0x80
 80073aa:	d02d      	beq.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2b80      	cmp	r3, #128	; 0x80
 80073b0:	d877      	bhi.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d012      	beq.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80073be:	e070      	b.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073c0:	4b50      	ldr	r3, [pc, #320]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073cc:	d107      	bne.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fe24 	bl	8008020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073dc:	e35b      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073e2:	e358      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073e4:	4b47      	ldr	r3, [pc, #284]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073f0:	d107      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073f2:	f107 0318 	add.w	r3, r7, #24
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fb6a 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007400:	e349      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007406:	e346      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007408:	4b3e      	ldr	r3, [pc, #248]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007414:	d107      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007416:	f107 030c 	add.w	r3, r7, #12
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fcac 	bl	8007d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007424:	e337      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800742a:	e334      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800742c:	4b35      	ldr	r3, [pc, #212]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800742e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007430:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007434:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007436:	4b33      	ldr	r3, [pc, #204]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b04      	cmp	r3, #4
 8007440:	d10c      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8007442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007444:	2b00      	cmp	r3, #0
 8007446:	d109      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007448:	4b2e      	ldr	r3, [pc, #184]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	08db      	lsrs	r3, r3, #3
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	4a2d      	ldr	r2, [pc, #180]	; (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800745a:	e01e      	b.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800745c:	4b29      	ldr	r3, [pc, #164]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007468:	d106      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 800746a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007470:	d102      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007472:	4b26      	ldr	r3, [pc, #152]	; (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007476:	e010      	b.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007478:	4b22      	ldr	r3, [pc, #136]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007484:	d106      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748c:	d102      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800748e:	4b20      	ldr	r3, [pc, #128]	; (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007492:	e002      	b.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007498:	e2fd      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800749a:	e2fc      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800749c:	4b1d      	ldr	r3, [pc, #116]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074a0:	e2f9      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074a6:	e2f6      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ae:	f040 80a7 	bne.w	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80074b2:	4b14      	ldr	r3, [pc, #80]	; (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80074ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c2:	d05f      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ca:	f200 8096 	bhi.w	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80074d4:	f000 808e 	beq.w	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80074de:	f200 808c 	bhi.w	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e8:	d03a      	beq.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f0:	f200 8083 	bhi.w	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00e      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007500:	d01c      	beq.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8007502:	e07a      	b.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007504:	58024400 	.word	0x58024400
 8007508:	03d09000 	.word	0x03d09000
 800750c:	003d0900 	.word	0x003d0900
 8007510:	016e3600 	.word	0x016e3600
 8007514:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007518:	4ba8      	ldr	r3, [pc, #672]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007524:	d107      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fd78 	bl	8008020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007534:	e2af      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800753a:	e2ac      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800753c:	4b9f      	ldr	r3, [pc, #636]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007548:	d107      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800754a:	f107 0318 	add.w	r3, r7, #24
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fabe 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007558:	e29d      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800755e:	e29a      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007560:	4b96      	ldr	r3, [pc, #600]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756c:	d107      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800756e:	f107 030c 	add.w	r3, r7, #12
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fc00 	bl	8007d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800757c:	e28b      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007582:	e288      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007584:	4b8d      	ldr	r3, [pc, #564]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800758c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800758e:	4b8b      	ldr	r3, [pc, #556]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b04      	cmp	r3, #4
 8007598:	d10c      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759c:	2b00      	cmp	r3, #0
 800759e:	d109      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075a0:	4b86      	ldr	r3, [pc, #536]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	08db      	lsrs	r3, r3, #3
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	4a85      	ldr	r2, [pc, #532]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b2:	e01e      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075b4:	4b81      	ldr	r3, [pc, #516]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c0:	d106      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 80075c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075c8:	d102      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80075ca:	4b7e      	ldr	r3, [pc, #504]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ce:	e010      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075d0:	4b7a      	ldr	r3, [pc, #488]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075dc:	d106      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e4:	d102      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80075e6:	4b78      	ldr	r3, [pc, #480]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ea:	e002      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 80075f0:	e251      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80075f2:	e250      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80075f4:	4b75      	ldr	r3, [pc, #468]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075f8:	e24d      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075fe:	e24a      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007606:	f040 809c 	bne.w	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800760a:	4b6c      	ldr	r3, [pc, #432]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800760c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007612:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800761a:	d054      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007622:	f200 808b 	bhi.w	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800762c:	f000 8083 	beq.w	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007636:	f200 8081 	bhi.w	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007640:	d02f      	beq.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8007642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007648:	d878      	bhi.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	d012      	beq.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8007658:	e070      	b.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800765a:	4b58      	ldr	r3, [pc, #352]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007666:	d107      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fcd7 	bl	8008020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007676:	e20e      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800767c:	e20b      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800767e:	4b4f      	ldr	r3, [pc, #316]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800768a:	d107      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800768c:	f107 0318 	add.w	r3, r7, #24
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fa1d 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800769a:	e1fc      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076a0:	e1f9      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076a2:	4b46      	ldr	r3, [pc, #280]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ae:	d107      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076b0:	f107 030c 	add.w	r3, r7, #12
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fb5f 	bl	8007d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076be:	e1ea      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c4:	e1e7      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80076c6:	4b3d      	ldr	r3, [pc, #244]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80076c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076d0:	4b3a      	ldr	r3, [pc, #232]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d10c      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d109      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076e2:	4b36      	ldr	r3, [pc, #216]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	08db      	lsrs	r3, r3, #3
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	4a34      	ldr	r2, [pc, #208]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80076ee:	fa22 f303 	lsr.w	r3, r2, r3
 80076f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f4:	e01e      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076f6:	4b31      	ldr	r3, [pc, #196]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007702:	d106      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800770a:	d102      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800770c:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800770e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007710:	e010      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007712:	4b2a      	ldr	r3, [pc, #168]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800771e:	d106      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007726:	d102      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007728:	4b27      	ldr	r3, [pc, #156]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800772a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800772c:	e002      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007732:	e1b0      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007734:	e1af      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007736:	4b25      	ldr	r3, [pc, #148]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800773a:	e1ac      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007740:	e1a9      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007748:	d17d      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800774a:	4b1c      	ldr	r3, [pc, #112]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800774c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007752:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800775a:	d039      	beq.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007762:	d86d      	bhi.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007770:	d012      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007772:	e065      	b.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007774:	4b11      	ldr	r3, [pc, #68]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800777c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007780:	d107      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007782:	f107 0318 	add.w	r3, r7, #24
 8007786:	4618      	mov	r0, r3
 8007788:	f000 f9a2 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007790:	e181      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007796:	e17e      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007798:	4b08      	ldr	r3, [pc, #32]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077a4:	d107      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077a6:	f107 030c 	add.w	r3, r7, #12
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fae4 	bl	8007d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077b4:	e16f      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ba:	e16c      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80077bc:	58024400 	.word	0x58024400
 80077c0:	03d09000 	.word	0x03d09000
 80077c4:	003d0900 	.word	0x003d0900
 80077c8:	016e3600 	.word	0x016e3600
 80077cc:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077d0:	4ba0      	ldr	r3, [pc, #640]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80077d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077da:	4b9e      	ldr	r3, [pc, #632]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d10c      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80077e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d109      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077ec:	4b99      	ldr	r3, [pc, #612]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	4a98      	ldr	r2, [pc, #608]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077fe:	e01e      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007800:	4b94      	ldr	r3, [pc, #592]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780c:	d106      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007814:	d102      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007816:	4b91      	ldr	r3, [pc, #580]	; (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800781a:	e010      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800781c:	4b8d      	ldr	r3, [pc, #564]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007828:	d106      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800782a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007830:	d102      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007832:	4b8b      	ldr	r3, [pc, #556]	; (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007836:	e002      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800783c:	e12b      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800783e:	e12a      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007844:	e127      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800784c:	d133      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800784e:	4b81      	ldr	r3, [pc, #516]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007856:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007864:	d012      	beq.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007866:	e023      	b.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007868:	4b7a      	ldr	r3, [pc, #488]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007874:	d107      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fbd0 	bl	8008020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007884:	e107      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800788a:	e104      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800788c:	4b71      	ldr	r3, [pc, #452]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007898:	d107      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800789a:	f107 0318 	add.w	r3, r7, #24
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f916 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80078a8:	e0f5      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ae:	e0f2      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078b4:	e0ef      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078bc:	f040 8091 	bne.w	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80078c0:	4b64      	ldr	r3, [pc, #400]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80078c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80078c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80078d0:	f000 8081 	beq.w	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80078da:	d87f      	bhi.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078e2:	d06b      	beq.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078ea:	d877      	bhi.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f2:	d056      	beq.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fa:	d86f      	bhi.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007902:	d03b      	beq.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800790a:	d867      	bhi.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007912:	d021      	beq.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791a:	d85f      	bhi.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	2b00      	cmp	r3, #0
 8007920:	d004      	beq.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007928:	d004      	beq.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 800792a:	e057      	b.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800792c:	f000 f8ba 	bl	8007aa4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007930:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007932:	e0b0      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007934:	4b47      	ldr	r3, [pc, #284]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800793c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007940:	d107      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007942:	f107 0318 	add.w	r3, r7, #24
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f8c2 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007950:	e0a1      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007956:	e09e      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007958:	4b3e      	ldr	r3, [pc, #248]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007964:	d107      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007966:	f107 030c 	add.w	r3, r7, #12
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fa04 	bl	8007d78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007974:	e08f      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800797a:	e08c      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800797c:	4b35      	ldr	r3, [pc, #212]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b04      	cmp	r3, #4
 8007986:	d109      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007988:	4b32      	ldr	r3, [pc, #200]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	08db      	lsrs	r3, r3, #3
 800798e:	f003 0303 	and.w	r3, r3, #3
 8007992:	4a31      	ldr	r2, [pc, #196]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800799a:	e07c      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a0:	e079      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80079a2:	4b2c      	ldr	r3, [pc, #176]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ae:	d102      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 80079b0:	4b2a      	ldr	r3, [pc, #168]	; (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079b4:	e06f      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ba:	e06c      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80079bc:	4b25      	ldr	r3, [pc, #148]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079c8:	d102      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 80079ca:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80079cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80079ce:	e062      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d4:	e05f      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80079d6:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80079d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079da:	e05c      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e0:	e059      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e8:	d153      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80079ea:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80079ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079fa:	d035      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a02:	d843      	bhi.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a10:	d00d      	beq.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8007a12:	e03b      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a14:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a20:	d102      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8007a22:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a26:	e036      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a2c:	e033      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a2e:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a3a:	d107      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 faed 	bl	8008020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a4a:	e024      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a50:	e021      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007a52:	bf00      	nop
 8007a54:	58024400 	.word	0x58024400
 8007a58:	03d09000 	.word	0x03d09000
 8007a5c:	003d0900 	.word	0x003d0900
 8007a60:	016e3600 	.word	0x016e3600
 8007a64:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a68:	4b0d      	ldr	r3, [pc, #52]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a74:	d107      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a76:	f107 0318 	add.w	r3, r7, #24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f828 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a84:	e007      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a8a:	e004      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a90:	e001      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3740      	adds	r7, #64	; 0x40
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	58024400 	.word	0x58024400

08007aa4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007aa8:	f7fe fc6a 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 8007aac:	4602      	mov	r2, r0
 8007aae:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	091b      	lsrs	r3, r3, #4
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	4904      	ldr	r1, [pc, #16]	; (8007acc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007aba:	5ccb      	ldrb	r3, [r1, r3]
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	58024400 	.word	0x58024400
 8007acc:	0800c008 	.word	0x0800c008

08007ad0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b089      	sub	sp, #36	; 0x24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ad8:	4ba1      	ldr	r3, [pc, #644]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007ae2:	4b9f      	ldr	r3, [pc, #636]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	0b1b      	lsrs	r3, r3, #12
 8007ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007aee:	4b9c      	ldr	r3, [pc, #624]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	091b      	lsrs	r3, r3, #4
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007afa:	4b99      	ldr	r3, [pc, #612]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	08db      	lsrs	r3, r3, #3
 8007b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 8111 	beq.w	8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	f000 8083 	beq.w	8007c2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	f200 80a1 	bhi.w	8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d056      	beq.n	8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b3a:	e099      	b.n	8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b3c:	4b88      	ldr	r3, [pc, #544]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d02d      	beq.n	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b48:	4b85      	ldr	r3, [pc, #532]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	08db      	lsrs	r3, r3, #3
 8007b4e:	f003 0303 	and.w	r3, r3, #3
 8007b52:	4a84      	ldr	r2, [pc, #528]	; (8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
 8007b58:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	ee07 3a90 	vmov	s15, r3
 8007b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b72:	4b7b      	ldr	r3, [pc, #492]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ba2:	e087      	b.n	8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb6:	4b6a      	ldr	r3, [pc, #424]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007be6:	e065      	b.n	8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfa:	4b59      	ldr	r3, [pc, #356]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c2a:	e043      	b.n	8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3e:	4b48      	ldr	r3, [pc, #288]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c6e:	e021      	b.n	8007cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c82:	4b37      	ldr	r3, [pc, #220]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007cb4:	4b2a      	ldr	r3, [pc, #168]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	0a5b      	lsrs	r3, r3, #9
 8007cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cda:	ee17 2a90 	vmov	r2, s15
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007ce2:	4b1f      	ldr	r3, [pc, #124]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	0c1b      	lsrs	r3, r3, #16
 8007ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d08:	ee17 2a90 	vmov	r2, s15
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007d10:	4b13      	ldr	r3, [pc, #76]	; (8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	0e1b      	lsrs	r3, r3, #24
 8007d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d36:	ee17 2a90 	vmov	r2, s15
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d3e:	e008      	b.n	8007d52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	609a      	str	r2, [r3, #8]
}
 8007d52:	bf00      	nop
 8007d54:	3724      	adds	r7, #36	; 0x24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	58024400 	.word	0x58024400
 8007d64:	03d09000 	.word	0x03d09000
 8007d68:	46000000 	.word	0x46000000
 8007d6c:	4c742400 	.word	0x4c742400
 8007d70:	4a742400 	.word	0x4a742400
 8007d74:	4bb71b00 	.word	0x4bb71b00

08007d78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b089      	sub	sp, #36	; 0x24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d80:	4ba1      	ldr	r3, [pc, #644]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d8a:	4b9f      	ldr	r3, [pc, #636]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8e:	0d1b      	lsrs	r3, r3, #20
 8007d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d96:	4b9c      	ldr	r3, [pc, #624]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	0a1b      	lsrs	r3, r3, #8
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007da2:	4b99      	ldr	r3, [pc, #612]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	08db      	lsrs	r3, r3, #3
 8007da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 8111 	beq.w	8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	f000 8083 	beq.w	8007ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	f200 80a1 	bhi.w	8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d003      	beq.n	8007de4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d056      	beq.n	8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007de2:	e099      	b.n	8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007de4:	4b88      	ldr	r3, [pc, #544]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d02d      	beq.n	8007e4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007df0:	4b85      	ldr	r3, [pc, #532]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	08db      	lsrs	r3, r3, #3
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	4a84      	ldr	r2, [pc, #528]	; (800800c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8007e00:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	ee07 3a90 	vmov	s15, r3
 8007e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1a:	4b7b      	ldr	r3, [pc, #492]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e4a:	e087      	b.n	8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008014 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5e:	4b6a      	ldr	r3, [pc, #424]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e8e:	e065      	b.n	8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea2:	4b59      	ldr	r3, [pc, #356]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ed2:	e043      	b.n	8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ede:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800801c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee6:	4b48      	ldr	r3, [pc, #288]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f16:	e021      	b.n	8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2a:	4b37      	ldr	r3, [pc, #220]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f5c:	4b2a      	ldr	r3, [pc, #168]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	0a5b      	lsrs	r3, r3, #9
 8007f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f82:	ee17 2a90 	vmov	r2, s15
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f8a:	4b1f      	ldr	r3, [pc, #124]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fb0:	ee17 2a90 	vmov	r2, s15
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007fb8:	4b13      	ldr	r3, [pc, #76]	; (8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	0e1b      	lsrs	r3, r3, #24
 8007fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fde:	ee17 2a90 	vmov	r2, s15
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007fe6:	e008      	b.n	8007ffa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	609a      	str	r2, [r3, #8]
}
 8007ffa:	bf00      	nop
 8007ffc:	3724      	adds	r7, #36	; 0x24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	58024400 	.word	0x58024400
 800800c:	03d09000 	.word	0x03d09000
 8008010:	46000000 	.word	0x46000000
 8008014:	4c742400 	.word	0x4c742400
 8008018:	4a742400 	.word	0x4a742400
 800801c:	4bb71b00 	.word	0x4bb71b00

08008020 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008020:	b480      	push	{r7}
 8008022:	b089      	sub	sp, #36	; 0x24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008028:	4ba0      	ldr	r3, [pc, #640]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	f003 0303 	and.w	r3, r3, #3
 8008030:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008032:	4b9e      	ldr	r3, [pc, #632]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008036:	091b      	lsrs	r3, r3, #4
 8008038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800803c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800803e:	4b9b      	ldr	r3, [pc, #620]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008048:	4b98      	ldr	r3, [pc, #608]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800804a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804c:	08db      	lsrs	r3, r3, #3
 800804e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	fb02 f303 	mul.w	r3, r2, r3
 8008058:	ee07 3a90 	vmov	s15, r3
 800805c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008060:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 8111 	beq.w	800828e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b02      	cmp	r3, #2
 8008070:	f000 8083 	beq.w	800817a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b02      	cmp	r3, #2
 8008078:	f200 80a1 	bhi.w	80081be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d056      	beq.n	8008136 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008088:	e099      	b.n	80081be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800808a:	4b88      	ldr	r3, [pc, #544]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0320 	and.w	r3, r3, #32
 8008092:	2b00      	cmp	r3, #0
 8008094:	d02d      	beq.n	80080f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008096:	4b85      	ldr	r3, [pc, #532]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	08db      	lsrs	r3, r3, #3
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	4a83      	ldr	r2, [pc, #524]	; (80082b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80080a2:	fa22 f303 	lsr.w	r3, r2, r3
 80080a6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	ee07 3a90 	vmov	s15, r3
 80080b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c0:	4b7a      	ldr	r3, [pc, #488]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80082b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080f0:	e087      	b.n	8008202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	ee07 3a90 	vmov	s15, r3
 80080f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008104:	4b69      	ldr	r3, [pc, #420]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810c:	ee07 3a90 	vmov	s15, r3
 8008110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008114:	ed97 6a03 	vldr	s12, [r7, #12]
 8008118:	eddf 5a66 	vldr	s11, [pc, #408]	; 80082b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800811c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008130:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008134:	e065      	b.n	8008202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	ee07 3a90 	vmov	s15, r3
 800813c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008140:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80082bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008148:	4b58      	ldr	r3, [pc, #352]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800814a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008150:	ee07 3a90 	vmov	s15, r3
 8008154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008158:	ed97 6a03 	vldr	s12, [r7, #12]
 800815c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80082b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008174:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008178:	e043      	b.n	8008202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	ee07 3a90 	vmov	s15, r3
 8008180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008184:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80082c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818c:	4b47      	ldr	r3, [pc, #284]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800818e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008194:	ee07 3a90 	vmov	s15, r3
 8008198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819c:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80082b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081bc:	e021      	b.n	8008202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	ee07 3a90 	vmov	s15, r3
 80081c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80081cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d0:	4b36      	ldr	r3, [pc, #216]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d8:	ee07 3a90 	vmov	s15, r3
 80081dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80082b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008200:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008202:	4b2a      	ldr	r3, [pc, #168]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	0a5b      	lsrs	r3, r3, #9
 8008208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800820c:	ee07 3a90 	vmov	s15, r3
 8008210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008218:	ee37 7a87 	vadd.f32	s14, s15, s14
 800821c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008228:	ee17 2a90 	vmov	r2, s15
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008230:	4b1e      	ldr	r3, [pc, #120]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008234:	0c1b      	lsrs	r3, r3, #16
 8008236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800824a:	edd7 6a07 	vldr	s13, [r7, #28]
 800824e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008256:	ee17 2a90 	vmov	r2, s15
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800825e:	4b13      	ldr	r3, [pc, #76]	; (80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008262:	0e1b      	lsrs	r3, r3, #24
 8008264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008268:	ee07 3a90 	vmov	s15, r3
 800826c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008274:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008278:	edd7 6a07 	vldr	s13, [r7, #28]
 800827c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008284:	ee17 2a90 	vmov	r2, s15
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800828c:	e008      	b.n	80082a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	609a      	str	r2, [r3, #8]
}
 80082a0:	bf00      	nop
 80082a2:	3724      	adds	r7, #36	; 0x24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	58024400 	.word	0x58024400
 80082b0:	03d09000 	.word	0x03d09000
 80082b4:	46000000 	.word	0x46000000
 80082b8:	4c742400 	.word	0x4c742400
 80082bc:	4a742400 	.word	0x4a742400
 80082c0:	4bb71b00 	.word	0x4bb71b00

080082c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082d2:	4b53      	ldr	r3, [pc, #332]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d101      	bne.n	80082e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e099      	b.n	8008416 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082e2:	4b4f      	ldr	r3, [pc, #316]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a4e      	ldr	r2, [pc, #312]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80082e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ee:	f7fa fd6f 	bl	8002dd0 <HAL_GetTick>
 80082f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082f4:	e008      	b.n	8008308 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80082f6:	f7fa fd6b 	bl	8002dd0 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d901      	bls.n	8008308 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e086      	b.n	8008416 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008308:	4b45      	ldr	r3, [pc, #276]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1f0      	bne.n	80082f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008314:	4b42      	ldr	r3, [pc, #264]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 8008316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008318:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	031b      	lsls	r3, r3, #12
 8008322:	493f      	ldr	r1, [pc, #252]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 8008324:	4313      	orrs	r3, r2
 8008326:	628b      	str	r3, [r1, #40]	; 0x28
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	3b01      	subs	r3, #1
 8008338:	025b      	lsls	r3, r3, #9
 800833a:	b29b      	uxth	r3, r3
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	3b01      	subs	r3, #1
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800834a:	431a      	orrs	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	3b01      	subs	r3, #1
 8008352:	061b      	lsls	r3, r3, #24
 8008354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008358:	4931      	ldr	r1, [pc, #196]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 800835a:	4313      	orrs	r3, r2
 800835c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800835e:	4b30      	ldr	r3, [pc, #192]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	492d      	ldr	r1, [pc, #180]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 800836c:	4313      	orrs	r3, r2
 800836e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008370:	4b2b      	ldr	r3, [pc, #172]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	f023 0220 	bic.w	r2, r3, #32
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	4928      	ldr	r1, [pc, #160]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008382:	4b27      	ldr	r3, [pc, #156]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	4a26      	ldr	r2, [pc, #152]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 8008388:	f023 0310 	bic.w	r3, r3, #16
 800838c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800838e:	4b24      	ldr	r3, [pc, #144]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 8008390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008392:	4b24      	ldr	r3, [pc, #144]	; (8008424 <RCCEx_PLL2_Config+0x160>)
 8008394:	4013      	ands	r3, r2
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	69d2      	ldr	r2, [r2, #28]
 800839a:	00d2      	lsls	r2, r2, #3
 800839c:	4920      	ldr	r1, [pc, #128]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083a2:	4b1f      	ldr	r3, [pc, #124]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	4a1e      	ldr	r2, [pc, #120]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083a8:	f043 0310 	orr.w	r3, r3, #16
 80083ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083b4:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	4a19      	ldr	r2, [pc, #100]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083c0:	e00f      	b.n	80083e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d106      	bne.n	80083d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083c8:	4b15      	ldr	r3, [pc, #84]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	4a14      	ldr	r2, [pc, #80]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083d4:	e005      	b.n	80083e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083d6:	4b12      	ldr	r3, [pc, #72]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	4a11      	ldr	r2, [pc, #68]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083e2:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a0e      	ldr	r2, [pc, #56]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 80083e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ee:	f7fa fcef 	bl	8002dd0 <HAL_GetTick>
 80083f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083f4:	e008      	b.n	8008408 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80083f6:	f7fa fceb 	bl	8002dd0 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e006      	b.n	8008416 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008408:	4b05      	ldr	r3, [pc, #20]	; (8008420 <RCCEx_PLL2_Config+0x15c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	58024400 	.word	0x58024400
 8008424:	ffff0007 	.word	0xffff0007

08008428 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008436:	4b53      	ldr	r3, [pc, #332]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 8008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843a:	f003 0303 	and.w	r3, r3, #3
 800843e:	2b03      	cmp	r3, #3
 8008440:	d101      	bne.n	8008446 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e099      	b.n	800857a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008446:	4b4f      	ldr	r3, [pc, #316]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a4e      	ldr	r2, [pc, #312]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800844c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008452:	f7fa fcbd 	bl	8002dd0 <HAL_GetTick>
 8008456:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008458:	e008      	b.n	800846c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800845a:	f7fa fcb9 	bl	8002dd0 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d901      	bls.n	800846c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e086      	b.n	800857a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800846c:	4b45      	ldr	r3, [pc, #276]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1f0      	bne.n	800845a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008478:	4b42      	ldr	r3, [pc, #264]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	051b      	lsls	r3, r3, #20
 8008486:	493f      	ldr	r1, [pc, #252]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 8008488:	4313      	orrs	r3, r2
 800848a:	628b      	str	r3, [r1, #40]	; 0x28
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	3b01      	subs	r3, #1
 8008492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	3b01      	subs	r3, #1
 800849c:	025b      	lsls	r3, r3, #9
 800849e:	b29b      	uxth	r3, r3
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	041b      	lsls	r3, r3, #16
 80084aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	061b      	lsls	r3, r3, #24
 80084b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084bc:	4931      	ldr	r1, [pc, #196]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084c2:	4b30      	ldr	r3, [pc, #192]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	492d      	ldr	r1, [pc, #180]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084d4:	4b2b      	ldr	r3, [pc, #172]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	4928      	ldr	r1, [pc, #160]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084e6:	4b27      	ldr	r3, [pc, #156]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	4a26      	ldr	r2, [pc, #152]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 80084ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80084f2:	4b24      	ldr	r3, [pc, #144]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 80084f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084f6:	4b24      	ldr	r3, [pc, #144]	; (8008588 <RCCEx_PLL3_Config+0x160>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	69d2      	ldr	r2, [r2, #28]
 80084fe:	00d2      	lsls	r2, r2, #3
 8008500:	4920      	ldr	r1, [pc, #128]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 8008502:	4313      	orrs	r3, r2
 8008504:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008506:	4b1f      	ldr	r3, [pc, #124]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 8008508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850a:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800850c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d106      	bne.n	8008526 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008518:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	4a19      	ldr	r2, [pc, #100]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800851e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008524:	e00f      	b.n	8008546 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d106      	bne.n	800853a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800852c:	4b15      	ldr	r3, [pc, #84]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	4a14      	ldr	r2, [pc, #80]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 8008532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008538:	e005      	b.n	8008546 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800853a:	4b12      	ldr	r3, [pc, #72]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	4a11      	ldr	r2, [pc, #68]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 8008540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008544:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008546:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a0e      	ldr	r2, [pc, #56]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800854c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008552:	f7fa fc3d 	bl	8002dd0 <HAL_GetTick>
 8008556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008558:	e008      	b.n	800856c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800855a:	f7fa fc39 	bl	8002dd0 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	2b02      	cmp	r3, #2
 8008566:	d901      	bls.n	800856c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e006      	b.n	800857a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <RCCEx_PLL3_Config+0x15c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0f0      	beq.n	800855a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	58024400 	.word	0x58024400
 8008588:	ffff0007 	.word	0xffff0007

0800858c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e0f1      	b.n	8008782 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a78      	ldr	r2, [pc, #480]	; (800878c <HAL_SPI_Init+0x200>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d00f      	beq.n	80085ce <HAL_SPI_Init+0x42>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a77      	ldr	r2, [pc, #476]	; (8008790 <HAL_SPI_Init+0x204>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00a      	beq.n	80085ce <HAL_SPI_Init+0x42>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a75      	ldr	r2, [pc, #468]	; (8008794 <HAL_SPI_Init+0x208>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d005      	beq.n	80085ce <HAL_SPI_Init+0x42>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	2b0f      	cmp	r3, #15
 80085c8:	d901      	bls.n	80085ce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e0d9      	b.n	8008782 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 f880 	bl	80096d4 <SPI_GetPacketSize>
 80085d4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a6c      	ldr	r2, [pc, #432]	; (800878c <HAL_SPI_Init+0x200>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00c      	beq.n	80085fa <HAL_SPI_Init+0x6e>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a6a      	ldr	r2, [pc, #424]	; (8008790 <HAL_SPI_Init+0x204>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d007      	beq.n	80085fa <HAL_SPI_Init+0x6e>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a69      	ldr	r2, [pc, #420]	; (8008794 <HAL_SPI_Init+0x208>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d002      	beq.n	80085fa <HAL_SPI_Init+0x6e>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d811      	bhi.n	800861e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085fe:	4a63      	ldr	r2, [pc, #396]	; (800878c <HAL_SPI_Init+0x200>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d009      	beq.n	8008618 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a61      	ldr	r2, [pc, #388]	; (8008790 <HAL_SPI_Init+0x204>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d004      	beq.n	8008618 <HAL_SPI_Init+0x8c>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a60      	ldr	r2, [pc, #384]	; (8008794 <HAL_SPI_Init+0x208>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d104      	bne.n	8008622 <HAL_SPI_Init+0x96>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b10      	cmp	r3, #16
 800861c:	d901      	bls.n	8008622 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e0af      	b.n	8008782 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d106      	bne.n	800863c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7fa f8b0 	bl	800279c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0201 	bic.w	r2, r2, #1
 8008652:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800865e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008668:	d119      	bne.n	800869e <HAL_SPI_Init+0x112>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008672:	d103      	bne.n	800867c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10c      	bne.n	800869e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800868c:	d107      	bne.n	800869e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800869c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	69da      	ldr	r2, [r3, #28]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	431a      	orrs	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b0:	ea42 0103 	orr.w	r1, r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	431a      	orrs	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	431a      	orrs	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f2:	431a      	orrs	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086fe:	ea42 0103 	orr.w	r1, r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d113      	bne.n	800873e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008728:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800873c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0201 	bic.w	r2, r2, #1
 800874c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40013000 	.word	0x40013000
 8008790:	40003800 	.word	0x40003800
 8008794:	40003c00 	.word	0x40003c00

08008798 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	; 0x28
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	4613      	mov	r3, r2
 80087a6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3320      	adds	r3, #32
 80087ae:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <HAL_SPI_Transmit+0x2a>
 80087be:	2302      	movs	r3, #2
 80087c0:	e1d7      	b.n	8008b72 <HAL_SPI_Transmit+0x3da>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087ca:	f7fa fb01 	bl	8002dd0 <HAL_GetTick>
 80087ce:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d007      	beq.n	80087ec <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80087dc:	2302      	movs	r3, #2
 80087de:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80087e8:	7efb      	ldrb	r3, [r7, #27]
 80087ea:	e1c2      	b.n	8008b72 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <HAL_SPI_Transmit+0x60>
 80087f2:	88fb      	ldrh	r3, [r7, #6]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d107      	bne.n	8008808 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008804:	7efb      	ldrb	r3, [r7, #27]
 8008806:	e1b4      	b.n	8008b72 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2203      	movs	r2, #3
 800880c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	88fa      	ldrh	r2, [r7, #6]
 8008822:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	88fa      	ldrh	r2, [r7, #6]
 800882a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008858:	d107      	bne.n	800886a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008868:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	4b96      	ldr	r3, [pc, #600]	; (8008acc <HAL_SPI_Transmit+0x334>)
 8008872:	4013      	ands	r3, r2
 8008874:	88f9      	ldrh	r1, [r7, #6]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	6812      	ldr	r2, [r2, #0]
 800887a:	430b      	orrs	r3, r1
 800887c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f042 0201 	orr.w	r2, r2, #1
 800888c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008896:	d107      	bne.n	80088a8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	2b0f      	cmp	r3, #15
 80088ae:	d947      	bls.n	8008940 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80088b0:	e03f      	b.n	8008932 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d114      	bne.n	80088ea <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6812      	ldr	r2, [r2, #0]
 80088ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d0:	1d1a      	adds	r2, r3, #4
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80088e8:	e023      	b.n	8008932 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ea:	f7fa fa71 	bl	8002dd0 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d803      	bhi.n	8008902 <HAL_SPI_Transmit+0x16a>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d102      	bne.n	8008908 <HAL_SPI_Transmit+0x170>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d114      	bne.n	8008932 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 fe15 	bl	8009538 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e11f      	b.n	8008b72 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1b9      	bne.n	80088b2 <HAL_SPI_Transmit+0x11a>
 800893e:	e0f2      	b.n	8008b26 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	2b07      	cmp	r3, #7
 8008946:	f240 80e7 	bls.w	8008b18 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800894a:	e05d      	b.n	8008a08 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b02      	cmp	r3, #2
 8008958:	d132      	bne.n	80089c0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008960:	b29b      	uxth	r3, r3
 8008962:	2b01      	cmp	r3, #1
 8008964:	d918      	bls.n	8008998 <HAL_SPI_Transmit+0x200>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896a:	2b00      	cmp	r3, #0
 800896c:	d014      	beq.n	8008998 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6812      	ldr	r2, [r2, #0]
 8008978:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800897e:	1d1a      	adds	r2, r3, #4
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800898a:	b29b      	uxth	r3, r3
 800898c:	3b02      	subs	r3, #2
 800898e:	b29a      	uxth	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008996:	e037      	b.n	8008a08 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899c:	881a      	ldrh	r2, [r3, #0]
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a6:	1c9a      	adds	r2, r3, #2
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80089be:	e023      	b.n	8008a08 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089c0:	f7fa fa06 	bl	8002dd0 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d803      	bhi.n	80089d8 <HAL_SPI_Transmit+0x240>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d102      	bne.n	80089de <HAL_SPI_Transmit+0x246>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d114      	bne.n	8008a08 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fdaa 	bl	8009538 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e0b4      	b.n	8008b72 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d19b      	bne.n	800894c <HAL_SPI_Transmit+0x1b4>
 8008a14:	e087      	b.n	8008b26 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d155      	bne.n	8008ad0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d918      	bls.n	8008a62 <HAL_SPI_Transmit+0x2ca>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a34:	2b40      	cmp	r3, #64	; 0x40
 8008a36:	d914      	bls.n	8008a62 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6812      	ldr	r2, [r2, #0]
 8008a42:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a48:	1d1a      	adds	r2, r3, #4
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3b04      	subs	r3, #4
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008a60:	e05a      	b.n	8008b18 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d917      	bls.n	8008a9e <HAL_SPI_Transmit+0x306>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d013      	beq.n	8008a9e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7a:	881a      	ldrh	r2, [r3, #0]
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a84:	1c9a      	adds	r2, r3, #2
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b02      	subs	r3, #2
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008a9c:	e03c      	b.n	8008b18 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3320      	adds	r3, #32
 8008aa8:	7812      	ldrb	r2, [r2, #0]
 8008aaa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008ac8:	e026      	b.n	8008b18 <HAL_SPI_Transmit+0x380>
 8008aca:	bf00      	nop
 8008acc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ad0:	f7fa f97e 	bl	8002dd0 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d803      	bhi.n	8008ae8 <HAL_SPI_Transmit+0x350>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae6:	d102      	bne.n	8008aee <HAL_SPI_Transmit+0x356>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d114      	bne.n	8008b18 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fd22 	bl	8009538 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e02c      	b.n	8008b72 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f47f af78 	bne.w	8008a16 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2108      	movs	r1, #8
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fda1 	bl	8009678 <SPI_WaitOnFlagUntilTimeout>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b42:	f043 0220 	orr.w	r2, r3, #32
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 fcf3 	bl	8009538 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e000      	b.n	8008b72 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008b70:	7efb      	ldrb	r3, [r7, #27]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3720      	adds	r7, #32
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop

08008b7c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	; 0x28
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3330      	adds	r3, #48	; 0x30
 8008b96:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ba0:	d112      	bne.n	8008bc8 <HAL_SPI_Receive+0x4c>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10e      	bne.n	8008bc8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2204      	movs	r2, #4
 8008bae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 f9ce 	bl	8008f60 <HAL_SPI_TransmitReceive>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	e1c7      	b.n	8008f58 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <HAL_SPI_Receive+0x5a>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e1c0      	b.n	8008f58 <HAL_SPI_Receive+0x3dc>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bde:	f7fa f8f7 	bl	8002dd0 <HAL_GetTick>
 8008be2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d007      	beq.n	8008c00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008bfc:	7ffb      	ldrb	r3, [r7, #31]
 8008bfe:	e1ab      	b.n	8008f58 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <HAL_SPI_Receive+0x90>
 8008c06:	88fb      	ldrh	r3, [r7, #6]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d107      	bne.n	8008c1c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c18:	7ffb      	ldrb	r3, [r7, #31]
 8008c1a:	e19d      	b.n	8008f58 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2204      	movs	r2, #4
 8008c20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	88fa      	ldrh	r2, [r7, #6]
 8008c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	88fa      	ldrh	r2, [r7, #6]
 8008c3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008c6c:	d107      	bne.n	8008c7e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	4b94      	ldr	r3, [pc, #592]	; (8008ed8 <HAL_SPI_Receive+0x35c>)
 8008c86:	4013      	ands	r3, r2
 8008c88:	88f9      	ldrh	r1, [r7, #6]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	6812      	ldr	r2, [r2, #0]
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f042 0201 	orr.w	r2, r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008caa:	d107      	bne.n	8008cbc <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b0f      	cmp	r3, #15
 8008cc2:	d948      	bls.n	8008d56 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008cc4:	e040      	b.n	8008d48 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695a      	ldr	r2, [r3, #20]
 8008ccc:	f248 0308 	movw	r3, #32776	; 0x8008
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d014      	beq.n	8008d00 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ce0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce6:	1d1a      	adds	r2, r3, #4
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008cfe:	e023      	b.n	8008d48 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d00:	f7fa f866 	bl	8002dd0 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d803      	bhi.n	8008d18 <HAL_SPI_Receive+0x19c>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d102      	bne.n	8008d1e <HAL_SPI_Receive+0x1a2>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d114      	bne.n	8008d48 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 fc0a 	bl	8009538 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e107      	b.n	8008f58 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1b8      	bne.n	8008cc6 <HAL_SPI_Receive+0x14a>
 8008d54:	e0ed      	b.n	8008f32 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	2b07      	cmp	r3, #7
 8008d5c:	f240 80e2 	bls.w	8008f24 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008d60:	e05b      	b.n	8008e1a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d030      	beq.n	8008dd2 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d014      	beq.n	8008da8 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d88:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d8e:	1d1a      	adds	r2, r3, #4
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3b02      	subs	r3, #2
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008da6:	e038      	b.n	8008e1a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	8812      	ldrh	r2, [r2, #0]
 8008db0:	b292      	uxth	r2, r2
 8008db2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db8:	1c9a      	adds	r2, r3, #2
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008dd0:	e023      	b.n	8008e1a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dd2:	f7f9 fffd 	bl	8002dd0 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d803      	bhi.n	8008dea <HAL_SPI_Receive+0x26e>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de8:	d102      	bne.n	8008df0 <HAL_SPI_Receive+0x274>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d114      	bne.n	8008e1a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 fba1 	bl	8009538 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e09e      	b.n	8008f58 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d19d      	bne.n	8008d62 <HAL_SPI_Receive+0x1e6>
 8008e26:	e084      	b.n	8008f32 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d052      	beq.n	8008edc <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d014      	beq.n	8008e6e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008e4e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e54:	1d1a      	adds	r2, r3, #4
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b04      	subs	r3, #4
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008e6c:	e05a      	b.n	8008f24 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e7c:	d914      	bls.n	8008ea8 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	8812      	ldrh	r2, [r2, #0]
 8008e86:	b292      	uxth	r2, r2
 8008e88:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e8e:	1c9a      	adds	r2, r3, #2
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	3b02      	subs	r3, #2
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ea6:	e03d      	b.n	8008f24 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eb4:	7812      	ldrb	r2, [r2, #0]
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ed6:	e025      	b.n	8008f24 <HAL_SPI_Receive+0x3a8>
 8008ed8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008edc:	f7f9 ff78 	bl	8002dd0 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d803      	bhi.n	8008ef4 <HAL_SPI_Receive+0x378>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	d102      	bne.n	8008efa <HAL_SPI_Receive+0x37e>
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d114      	bne.n	8008f24 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fb1c 	bl	8009538 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e019      	b.n	8008f58 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f47f af7b 	bne.w	8008e28 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f000 fb00 	bl	8009538 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8008f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3720      	adds	r7, #32
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08e      	sub	sp, #56	; 0x38
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3320      	adds	r3, #32
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3330      	adds	r3, #48	; 0x30
 8008f82:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <HAL_SPI_TransmitReceive+0x32>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e2ce      	b.n	8009530 <HAL_SPI_TransmitReceive+0x5d0>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f9a:	f7f9 ff19 	bl	8002dd0 <HAL_GetTick>
 8008f9e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008fa0:	887b      	ldrh	r3, [r7, #2]
 8008fa2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008fa4:	887b      	ldrh	r3, [r7, #2]
 8008fa6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008fae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fb6:	7efb      	ldrb	r3, [r7, #27]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d014      	beq.n	8008fe6 <HAL_SPI_TransmitReceive+0x86>
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fc2:	d106      	bne.n	8008fd2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008fcc:	7efb      	ldrb	r3, [r7, #27]
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d009      	beq.n	8008fe6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008fe0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fe4:	e2a4      	b.n	8009530 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d005      	beq.n	8008ff8 <HAL_SPI_TransmitReceive+0x98>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <HAL_SPI_TransmitReceive+0x98>
 8008ff2:	887b      	ldrh	r3, [r7, #2]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d109      	bne.n	800900c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800900a:	e291      	b.n	8009530 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b04      	cmp	r3, #4
 8009016:	d003      	beq.n	8009020 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2205      	movs	r2, #5
 800901c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	887a      	ldrh	r2, [r7, #2]
 8009032:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	887a      	ldrh	r2, [r7, #2]
 800903a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	887a      	ldrh	r2, [r7, #2]
 8009048:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	887a      	ldrh	r2, [r7, #2]
 8009050:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	4b9f      	ldr	r3, [pc, #636]	; (80092e4 <HAL_SPI_TransmitReceive+0x384>)
 8009068:	4013      	ands	r3, r2
 800906a:	8879      	ldrh	r1, [r7, #2]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	6812      	ldr	r2, [r2, #0]
 8009070:	430b      	orrs	r3, r1
 8009072:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0201 	orr.w	r2, r2, #1
 8009082:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800908c:	d107      	bne.n	800909e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800909c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	2b0f      	cmp	r3, #15
 80090a4:	d970      	bls.n	8009188 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80090a6:	e068      	b.n	800917a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d11a      	bne.n	80090ec <HAL_SPI_TransmitReceive+0x18c>
 80090b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d017      	beq.n	80090ec <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6812      	ldr	r2, [r2, #0]
 80090c6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090cc:	1d1a      	adds	r2, r3, #4
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3b01      	subs	r3, #1
 80090dc:	b29a      	uxth	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695a      	ldr	r2, [r3, #20]
 80090f2:	f248 0308 	movw	r3, #32776	; 0x8008
 80090f6:	4013      	ands	r3, r2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01a      	beq.n	8009132 <HAL_SPI_TransmitReceive+0x1d2>
 80090fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d017      	beq.n	8009132 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800910a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800910c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009112:	1d1a      	adds	r2, r3, #4
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800911e:	b29b      	uxth	r3, r3
 8009120:	3b01      	subs	r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009130:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009132:	f7f9 fe4d 	bl	8002dd0 <HAL_GetTick>
 8009136:	4602      	mov	r2, r0
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800913e:	429a      	cmp	r2, r3
 8009140:	d803      	bhi.n	800914a <HAL_SPI_TransmitReceive+0x1ea>
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009148:	d102      	bne.n	8009150 <HAL_SPI_TransmitReceive+0x1f0>
 800914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	d114      	bne.n	800917a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 f9f1 	bl	8009538 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e1da      	b.n	8009530 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800917a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800917c:	2b00      	cmp	r3, #0
 800917e:	d193      	bne.n	80090a8 <HAL_SPI_TransmitReceive+0x148>
 8009180:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d190      	bne.n	80090a8 <HAL_SPI_TransmitReceive+0x148>
 8009186:	e1ac      	b.n	80094e2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	2b07      	cmp	r3, #7
 800918e:	f240 81a0 	bls.w	80094d2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009192:	e0a9      	b.n	80092e8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d139      	bne.n	8009216 <HAL_SPI_TransmitReceive+0x2b6>
 80091a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d036      	beq.n	8009216 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80091a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d91c      	bls.n	80091e8 <HAL_SPI_TransmitReceive+0x288>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d018      	beq.n	80091e8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6812      	ldr	r2, [r2, #0]
 80091c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091c6:	1d1a      	adds	r2, r3, #4
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	3b02      	subs	r3, #2
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80091e6:	e016      	b.n	8009216 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ec:	881a      	ldrh	r2, [r3, #0]
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f6:	1c9a      	adds	r2, r3, #2
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009202:	b29b      	uxth	r3, r3
 8009204:	3b01      	subs	r3, #1
 8009206:	b29a      	uxth	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009214:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d03a      	beq.n	800929a <HAL_SPI_TransmitReceive+0x33a>
 8009224:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d037      	beq.n	800929a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d018      	beq.n	800926a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009240:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009242:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009248:	1d1a      	adds	r2, r3, #4
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009254:	b29b      	uxth	r3, r3
 8009256:	3b02      	subs	r3, #2
 8009258:	b29a      	uxth	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009266:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009268:	e017      	b.n	800929a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800926e:	6a3a      	ldr	r2, [r7, #32]
 8009270:	8812      	ldrh	r2, [r2, #0]
 8009272:	b292      	uxth	r2, r2
 8009274:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800927a:	1c9a      	adds	r2, r3, #2
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009286:	b29b      	uxth	r3, r3
 8009288:	3b01      	subs	r3, #1
 800928a:	b29a      	uxth	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009298:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800929a:	f7f9 fd99 	bl	8002dd0 <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d803      	bhi.n	80092b2 <HAL_SPI_TransmitReceive+0x352>
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b0:	d102      	bne.n	80092b8 <HAL_SPI_TransmitReceive+0x358>
 80092b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d117      	bne.n	80092e8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f93d 	bl	8009538 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e126      	b.n	8009530 <HAL_SPI_TransmitReceive+0x5d0>
 80092e2:	bf00      	nop
 80092e4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80092e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f47f af52 	bne.w	8009194 <HAL_SPI_TransmitReceive+0x234>
 80092f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f47f af4e 	bne.w	8009194 <HAL_SPI_TransmitReceive+0x234>
 80092f8:	e0f3      	b.n	80094e2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b02      	cmp	r3, #2
 8009306:	d15a      	bne.n	80093be <HAL_SPI_TransmitReceive+0x45e>
 8009308:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800930a:	2b00      	cmp	r3, #0
 800930c:	d057      	beq.n	80093be <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800930e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009310:	2b03      	cmp	r3, #3
 8009312:	d91c      	bls.n	800934e <HAL_SPI_TransmitReceive+0x3ee>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009318:	2b40      	cmp	r3, #64	; 0x40
 800931a:	d918      	bls.n	800934e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800932c:	1d1a      	adds	r2, r3, #4
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009338:	b29b      	uxth	r3, r3
 800933a:	3b04      	subs	r3, #4
 800933c:	b29a      	uxth	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800934a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800934c:	e037      	b.n	80093be <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800934e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009350:	2b01      	cmp	r3, #1
 8009352:	d91b      	bls.n	800938c <HAL_SPI_TransmitReceive+0x42c>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d017      	beq.n	800938c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009360:	881a      	ldrh	r2, [r3, #0]
 8009362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009364:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800936a:	1c9a      	adds	r2, r3, #2
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009376:	b29b      	uxth	r3, r3
 8009378:	3b02      	subs	r3, #2
 800937a:	b29a      	uxth	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009388:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800938a:	e018      	b.n	80093be <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3320      	adds	r3, #32
 8009396:	7812      	ldrb	r2, [r2, #0]
 8009398:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939e:	1c5a      	adds	r2, r3, #1
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d05e      	beq.n	800948a <HAL_SPI_TransmitReceive+0x52a>
 80093cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d05b      	beq.n	800948a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d018      	beq.n	8009412 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80093ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093f0:	1d1a      	adds	r2, r3, #4
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	3b04      	subs	r3, #4
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800940e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009410:	e03b      	b.n	800948a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800941c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009420:	d918      	bls.n	8009454 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009426:	6a3a      	ldr	r2, [r7, #32]
 8009428:	8812      	ldrh	r2, [r2, #0]
 800942a:	b292      	uxth	r2, r2
 800942c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009432:	1c9a      	adds	r2, r3, #2
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800943e:	b29b      	uxth	r3, r3
 8009440:	3b02      	subs	r3, #2
 8009442:	b29a      	uxth	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009450:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009452:	e01a      	b.n	800948a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009460:	7812      	ldrb	r2, [r2, #0]
 8009462:	b2d2      	uxtb	r2, r2
 8009464:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009476:	b29b      	uxth	r3, r3
 8009478:	3b01      	subs	r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009488:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800948a:	f7f9 fca1 	bl	8002dd0 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009496:	429a      	cmp	r2, r3
 8009498:	d803      	bhi.n	80094a2 <HAL_SPI_TransmitReceive+0x542>
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a0:	d102      	bne.n	80094a8 <HAL_SPI_TransmitReceive+0x548>
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d114      	bne.n	80094d2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 f845 	bl	8009538 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e02e      	b.n	8009530 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80094d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f47f af10 	bne.w	80092fa <HAL_SPI_TransmitReceive+0x39a>
 80094da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f47f af0c 	bne.w	80092fa <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	2200      	movs	r2, #0
 80094ea:	2108      	movs	r1, #8
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f8c3 	bl	8009678 <SPI_WaitOnFlagUntilTimeout>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d007      	beq.n	8009508 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094fe:	f043 0220 	orr.w	r2, r3, #32
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 f815 	bl	8009538 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e001      	b.n	8009530 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800952c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009530:	4618      	mov	r0, r3
 8009532:	3730      	adds	r7, #48	; 0x30
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0208 	orr.w	r2, r2, #8
 8009556:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699a      	ldr	r2, [r3, #24]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f042 0210 	orr.w	r2, r2, #16
 8009566:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 0201 	bic.w	r2, r2, #1
 8009576:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6919      	ldr	r1, [r3, #16]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	4b3c      	ldr	r3, [pc, #240]	; (8009674 <SPI_CloseTransfer+0x13c>)
 8009584:	400b      	ands	r3, r1
 8009586:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689a      	ldr	r2, [r3, #8]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009596:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	d014      	beq.n	80095ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f003 0320 	and.w	r3, r3, #32
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00f      	beq.n	80095ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	699a      	ldr	r2, [r3, #24]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0220 	orr.w	r2, r2, #32
 80095cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d014      	beq.n	8009604 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00f      	beq.n	8009604 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ea:	f043 0204 	orr.w	r2, r3, #4
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	699a      	ldr	r2, [r3, #24]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009602:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00f      	beq.n	800962e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009614:	f043 0201 	orr.w	r2, r3, #1
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	699a      	ldr	r2, [r3, #24]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800962c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00f      	beq.n	8009658 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800963e:	f043 0208 	orr.w	r2, r3, #8
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	699a      	ldr	r2, [r3, #24]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009656:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009668:	bf00      	nop
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	fffffc90 	.word	0xfffffc90

08009678 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	4613      	mov	r3, r2
 8009686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009688:	e010      	b.n	80096ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800968a:	f7f9 fba1 	bl	8002dd0 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	429a      	cmp	r2, r3
 8009698:	d803      	bhi.n	80096a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a0:	d102      	bne.n	80096a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e00f      	b.n	80096cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	695a      	ldr	r2, [r3, #20]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	4013      	ands	r3, r2
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	bf0c      	ite	eq
 80096bc:	2301      	moveq	r3, #1
 80096be:	2300      	movne	r3, #0
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	461a      	mov	r2, r3
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d0df      	beq.n	800968a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	3301      	adds	r3, #1
 80096e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	3301      	adds	r3, #1
 80096ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	3307      	adds	r3, #7
 80096f2:	08db      	lsrs	r3, r3, #3
 80096f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e049      	b.n	80097b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d106      	bne.n	8009736 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7f9 f897 	bl	8002864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2202      	movs	r2, #2
 800973a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f000 fd03 	bl	800a154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e049      	b.n	800985e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d106      	bne.n	80097e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f841 	bl	8009866 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3304      	adds	r3, #4
 80097f4:	4619      	mov	r1, r3
 80097f6:	4610      	mov	r0, r2
 80097f8:	f000 fcac 	bl	800a154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
	...

0800987c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <HAL_TIM_PWM_Start+0x24>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b01      	cmp	r3, #1
 8009896:	bf14      	ite	ne
 8009898:	2301      	movne	r3, #1
 800989a:	2300      	moveq	r3, #0
 800989c:	b2db      	uxtb	r3, r3
 800989e:	e03c      	b.n	800991a <HAL_TIM_PWM_Start+0x9e>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2b04      	cmp	r3, #4
 80098a4:	d109      	bne.n	80098ba <HAL_TIM_PWM_Start+0x3e>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	bf14      	ite	ne
 80098b2:	2301      	movne	r3, #1
 80098b4:	2300      	moveq	r3, #0
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	e02f      	b.n	800991a <HAL_TIM_PWM_Start+0x9e>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d109      	bne.n	80098d4 <HAL_TIM_PWM_Start+0x58>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	bf14      	ite	ne
 80098cc:	2301      	movne	r3, #1
 80098ce:	2300      	moveq	r3, #0
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	e022      	b.n	800991a <HAL_TIM_PWM_Start+0x9e>
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	2b0c      	cmp	r3, #12
 80098d8:	d109      	bne.n	80098ee <HAL_TIM_PWM_Start+0x72>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	bf14      	ite	ne
 80098e6:	2301      	movne	r3, #1
 80098e8:	2300      	moveq	r3, #0
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	e015      	b.n	800991a <HAL_TIM_PWM_Start+0x9e>
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b10      	cmp	r3, #16
 80098f2:	d109      	bne.n	8009908 <HAL_TIM_PWM_Start+0x8c>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	bf14      	ite	ne
 8009900:	2301      	movne	r3, #1
 8009902:	2300      	moveq	r3, #0
 8009904:	b2db      	uxtb	r3, r3
 8009906:	e008      	b.n	800991a <HAL_TIM_PWM_Start+0x9e>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b01      	cmp	r3, #1
 8009912:	bf14      	ite	ne
 8009914:	2301      	movne	r3, #1
 8009916:	2300      	moveq	r3, #0
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e0a1      	b.n	8009a66 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d104      	bne.n	8009932 <HAL_TIM_PWM_Start+0xb6>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009930:	e023      	b.n	800997a <HAL_TIM_PWM_Start+0xfe>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b04      	cmp	r3, #4
 8009936:	d104      	bne.n	8009942 <HAL_TIM_PWM_Start+0xc6>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009940:	e01b      	b.n	800997a <HAL_TIM_PWM_Start+0xfe>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b08      	cmp	r3, #8
 8009946:	d104      	bne.n	8009952 <HAL_TIM_PWM_Start+0xd6>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009950:	e013      	b.n	800997a <HAL_TIM_PWM_Start+0xfe>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b0c      	cmp	r3, #12
 8009956:	d104      	bne.n	8009962 <HAL_TIM_PWM_Start+0xe6>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009960:	e00b      	b.n	800997a <HAL_TIM_PWM_Start+0xfe>
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b10      	cmp	r3, #16
 8009966:	d104      	bne.n	8009972 <HAL_TIM_PWM_Start+0xf6>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009970:	e003      	b.n	800997a <HAL_TIM_PWM_Start+0xfe>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2202      	movs	r2, #2
 8009976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2201      	movs	r2, #1
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fff4 	bl	800a970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a38      	ldr	r2, [pc, #224]	; (8009a70 <HAL_TIM_PWM_Start+0x1f4>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d013      	beq.n	80099ba <HAL_TIM_PWM_Start+0x13e>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a37      	ldr	r2, [pc, #220]	; (8009a74 <HAL_TIM_PWM_Start+0x1f8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00e      	beq.n	80099ba <HAL_TIM_PWM_Start+0x13e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a35      	ldr	r2, [pc, #212]	; (8009a78 <HAL_TIM_PWM_Start+0x1fc>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d009      	beq.n	80099ba <HAL_TIM_PWM_Start+0x13e>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a34      	ldr	r2, [pc, #208]	; (8009a7c <HAL_TIM_PWM_Start+0x200>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d004      	beq.n	80099ba <HAL_TIM_PWM_Start+0x13e>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a32      	ldr	r2, [pc, #200]	; (8009a80 <HAL_TIM_PWM_Start+0x204>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d101      	bne.n	80099be <HAL_TIM_PWM_Start+0x142>
 80099ba:	2301      	movs	r3, #1
 80099bc:	e000      	b.n	80099c0 <HAL_TIM_PWM_Start+0x144>
 80099be:	2300      	movs	r3, #0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a25      	ldr	r2, [pc, #148]	; (8009a70 <HAL_TIM_PWM_Start+0x1f4>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d022      	beq.n	8009a24 <HAL_TIM_PWM_Start+0x1a8>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e6:	d01d      	beq.n	8009a24 <HAL_TIM_PWM_Start+0x1a8>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a25      	ldr	r2, [pc, #148]	; (8009a84 <HAL_TIM_PWM_Start+0x208>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d018      	beq.n	8009a24 <HAL_TIM_PWM_Start+0x1a8>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a24      	ldr	r2, [pc, #144]	; (8009a88 <HAL_TIM_PWM_Start+0x20c>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d013      	beq.n	8009a24 <HAL_TIM_PWM_Start+0x1a8>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a22      	ldr	r2, [pc, #136]	; (8009a8c <HAL_TIM_PWM_Start+0x210>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00e      	beq.n	8009a24 <HAL_TIM_PWM_Start+0x1a8>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a1a      	ldr	r2, [pc, #104]	; (8009a74 <HAL_TIM_PWM_Start+0x1f8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d009      	beq.n	8009a24 <HAL_TIM_PWM_Start+0x1a8>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a1e      	ldr	r2, [pc, #120]	; (8009a90 <HAL_TIM_PWM_Start+0x214>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d004      	beq.n	8009a24 <HAL_TIM_PWM_Start+0x1a8>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a16      	ldr	r2, [pc, #88]	; (8009a78 <HAL_TIM_PWM_Start+0x1fc>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d115      	bne.n	8009a50 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689a      	ldr	r2, [r3, #8]
 8009a2a:	4b1a      	ldr	r3, [pc, #104]	; (8009a94 <HAL_TIM_PWM_Start+0x218>)
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b06      	cmp	r3, #6
 8009a34:	d015      	beq.n	8009a62 <HAL_TIM_PWM_Start+0x1e6>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a3c:	d011      	beq.n	8009a62 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f042 0201 	orr.w	r2, r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a4e:	e008      	b.n	8009a62 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0201 	orr.w	r2, r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	e000      	b.n	8009a64 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	40010000 	.word	0x40010000
 8009a74:	40010400 	.word	0x40010400
 8009a78:	40014000 	.word	0x40014000
 8009a7c:	40014400 	.word	0x40014400
 8009a80:	40014800 	.word	0x40014800
 8009a84:	40000400 	.word	0x40000400
 8009a88:	40000800 	.word	0x40000800
 8009a8c:	40000c00 	.word	0x40000c00
 8009a90:	40001800 	.word	0x40001800
 8009a94:	00010007 	.word	0x00010007

08009a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f003 0302 	and.w	r3, r3, #2
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d122      	bne.n	8009af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	f003 0302 	and.w	r3, r3, #2
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d11b      	bne.n	8009af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f06f 0202 	mvn.w	r2, #2
 8009ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fb1c 	bl	800a118 <HAL_TIM_IC_CaptureCallback>
 8009ae0:	e005      	b.n	8009aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fb0e 	bl	800a104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fb1f 	bl	800a12c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f003 0304 	and.w	r3, r3, #4
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d122      	bne.n	8009b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d11b      	bne.n	8009b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f06f 0204 	mvn.w	r2, #4
 8009b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 faf2 	bl	800a118 <HAL_TIM_IC_CaptureCallback>
 8009b34:	e005      	b.n	8009b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fae4 	bl	800a104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 faf5 	bl	800a12c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f003 0308 	and.w	r3, r3, #8
 8009b52:	2b08      	cmp	r3, #8
 8009b54:	d122      	bne.n	8009b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	f003 0308 	and.w	r3, r3, #8
 8009b60:	2b08      	cmp	r3, #8
 8009b62:	d11b      	bne.n	8009b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f06f 0208 	mvn.w	r2, #8
 8009b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2204      	movs	r2, #4
 8009b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fac8 	bl	800a118 <HAL_TIM_IC_CaptureCallback>
 8009b88:	e005      	b.n	8009b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 faba 	bl	800a104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 facb 	bl	800a12c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	f003 0310 	and.w	r3, r3, #16
 8009ba6:	2b10      	cmp	r3, #16
 8009ba8:	d122      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f003 0310 	and.w	r3, r3, #16
 8009bb4:	2b10      	cmp	r3, #16
 8009bb6:	d11b      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f06f 0210 	mvn.w	r2, #16
 8009bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2208      	movs	r2, #8
 8009bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa9e 	bl	800a118 <HAL_TIM_IC_CaptureCallback>
 8009bdc:	e005      	b.n	8009bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa90 	bl	800a104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 faa1 	bl	800a12c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d10e      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d107      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f06f 0201 	mvn.w	r2, #1
 8009c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa6a 	bl	800a0f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c26:	2b80      	cmp	r3, #128	; 0x80
 8009c28:	d10e      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c34:	2b80      	cmp	r3, #128	; 0x80
 8009c36:	d107      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fff2 	bl	800ac2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c56:	d10e      	bne.n	8009c76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c62:	2b80      	cmp	r3, #128	; 0x80
 8009c64:	d107      	bne.n	8009c76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 ffe5 	bl	800ac40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c80:	2b40      	cmp	r3, #64	; 0x40
 8009c82:	d10e      	bne.n	8009ca2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8e:	2b40      	cmp	r3, #64	; 0x40
 8009c90:	d107      	bne.n	8009ca2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fa4f 	bl	800a140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	d10e      	bne.n	8009cce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d107      	bne.n	8009cce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f06f 0220 	mvn.w	r2, #32
 8009cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 ffa5 	bl	800ac18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cce:	bf00      	nop
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e0ff      	b.n	8009ef6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b14      	cmp	r3, #20
 8009d02:	f200 80f0 	bhi.w	8009ee6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d61 	.word	0x08009d61
 8009d10:	08009ee7 	.word	0x08009ee7
 8009d14:	08009ee7 	.word	0x08009ee7
 8009d18:	08009ee7 	.word	0x08009ee7
 8009d1c:	08009da1 	.word	0x08009da1
 8009d20:	08009ee7 	.word	0x08009ee7
 8009d24:	08009ee7 	.word	0x08009ee7
 8009d28:	08009ee7 	.word	0x08009ee7
 8009d2c:	08009de3 	.word	0x08009de3
 8009d30:	08009ee7 	.word	0x08009ee7
 8009d34:	08009ee7 	.word	0x08009ee7
 8009d38:	08009ee7 	.word	0x08009ee7
 8009d3c:	08009e23 	.word	0x08009e23
 8009d40:	08009ee7 	.word	0x08009ee7
 8009d44:	08009ee7 	.word	0x08009ee7
 8009d48:	08009ee7 	.word	0x08009ee7
 8009d4c:	08009e65 	.word	0x08009e65
 8009d50:	08009ee7 	.word	0x08009ee7
 8009d54:	08009ee7 	.word	0x08009ee7
 8009d58:	08009ee7 	.word	0x08009ee7
 8009d5c:	08009ea5 	.word	0x08009ea5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 fa8e 	bl	800a288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	699a      	ldr	r2, [r3, #24]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f042 0208 	orr.w	r2, r2, #8
 8009d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0204 	bic.w	r2, r2, #4
 8009d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6999      	ldr	r1, [r3, #24]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	691a      	ldr	r2, [r3, #16]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	619a      	str	r2, [r3, #24]
      break;
 8009d9e:	e0a5      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fafe 	bl	800a3a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699a      	ldr	r2, [r3, #24]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	699a      	ldr	r2, [r3, #24]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6999      	ldr	r1, [r3, #24]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	021a      	lsls	r2, r3, #8
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	619a      	str	r2, [r3, #24]
      break;
 8009de0:	e084      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68b9      	ldr	r1, [r7, #8]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fb67 	bl	800a4bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	69da      	ldr	r2, [r3, #28]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f042 0208 	orr.w	r2, r2, #8
 8009dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	69da      	ldr	r2, [r3, #28]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0204 	bic.w	r2, r2, #4
 8009e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	69d9      	ldr	r1, [r3, #28]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	691a      	ldr	r2, [r3, #16]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	61da      	str	r2, [r3, #28]
      break;
 8009e20:	e064      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68b9      	ldr	r1, [r7, #8]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fbcf 	bl	800a5cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69da      	ldr	r2, [r3, #28]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69da      	ldr	r2, [r3, #28]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69d9      	ldr	r1, [r3, #28]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	021a      	lsls	r2, r3, #8
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	61da      	str	r2, [r3, #28]
      break;
 8009e62:	e043      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 fc18 	bl	800a6a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0208 	orr.w	r2, r2, #8
 8009e7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0204 	bic.w	r2, r2, #4
 8009e8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	691a      	ldr	r2, [r3, #16]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ea2:	e023      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fc5c 	bl	800a768 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ebe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ece:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	021a      	lsls	r2, r3, #8
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ee4:	e002      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop

08009f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d101      	bne.n	8009f1c <HAL_TIM_ConfigClockSource+0x1c>
 8009f18:	2302      	movs	r3, #2
 8009f1a:	e0dc      	b.n	800a0d6 <HAL_TIM_ConfigClockSource+0x1d6>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	4b6a      	ldr	r3, [pc, #424]	; (800a0e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a64      	ldr	r2, [pc, #400]	; (800a0e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	f000 80a9 	beq.w	800a0aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009f58:	4a62      	ldr	r2, [pc, #392]	; (800a0e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	f200 80ae 	bhi.w	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009f60:	4a61      	ldr	r2, [pc, #388]	; (800a0e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	f000 80a1 	beq.w	800a0aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009f68:	4a5f      	ldr	r2, [pc, #380]	; (800a0e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	f200 80a6 	bhi.w	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009f70:	4a5e      	ldr	r2, [pc, #376]	; (800a0ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	f000 8099 	beq.w	800a0aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009f78:	4a5c      	ldr	r2, [pc, #368]	; (800a0ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	f200 809e 	bhi.w	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009f80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f84:	f000 8091 	beq.w	800a0aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009f88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f8c:	f200 8096 	bhi.w	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f94:	f000 8089 	beq.w	800a0aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f9c:	f200 808e 	bhi.w	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fa4:	d03e      	beq.n	800a024 <HAL_TIM_ConfigClockSource+0x124>
 8009fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009faa:	f200 8087 	bhi.w	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb2:	f000 8086 	beq.w	800a0c2 <HAL_TIM_ConfigClockSource+0x1c2>
 8009fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fba:	d87f      	bhi.n	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009fbc:	2b70      	cmp	r3, #112	; 0x70
 8009fbe:	d01a      	beq.n	8009ff6 <HAL_TIM_ConfigClockSource+0xf6>
 8009fc0:	2b70      	cmp	r3, #112	; 0x70
 8009fc2:	d87b      	bhi.n	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009fc4:	2b60      	cmp	r3, #96	; 0x60
 8009fc6:	d050      	beq.n	800a06a <HAL_TIM_ConfigClockSource+0x16a>
 8009fc8:	2b60      	cmp	r3, #96	; 0x60
 8009fca:	d877      	bhi.n	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009fcc:	2b50      	cmp	r3, #80	; 0x50
 8009fce:	d03c      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x14a>
 8009fd0:	2b50      	cmp	r3, #80	; 0x50
 8009fd2:	d873      	bhi.n	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009fd4:	2b40      	cmp	r3, #64	; 0x40
 8009fd6:	d058      	beq.n	800a08a <HAL_TIM_ConfigClockSource+0x18a>
 8009fd8:	2b40      	cmp	r3, #64	; 0x40
 8009fda:	d86f      	bhi.n	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009fdc:	2b30      	cmp	r3, #48	; 0x30
 8009fde:	d064      	beq.n	800a0aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009fe0:	2b30      	cmp	r3, #48	; 0x30
 8009fe2:	d86b      	bhi.n	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009fe4:	2b20      	cmp	r3, #32
 8009fe6:	d060      	beq.n	800a0aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	d867      	bhi.n	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d05c      	beq.n	800a0aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009ff0:	2b10      	cmp	r3, #16
 8009ff2:	d05a      	beq.n	800a0aa <HAL_TIM_ConfigClockSource+0x1aa>
 8009ff4:	e062      	b.n	800a0bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	6899      	ldr	r1, [r3, #8]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	f000 fc93 	bl	800a930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	609a      	str	r2, [r3, #8]
      break;
 800a022:	e04f      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	6899      	ldr	r1, [r3, #8]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	f000 fc7c 	bl	800a930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a046:	609a      	str	r2, [r3, #8]
      break;
 800a048:	e03c      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6818      	ldr	r0, [r3, #0]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	6859      	ldr	r1, [r3, #4]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	461a      	mov	r2, r3
 800a058:	f000 fbec 	bl	800a834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2150      	movs	r1, #80	; 0x50
 800a062:	4618      	mov	r0, r3
 800a064:	f000 fc46 	bl	800a8f4 <TIM_ITRx_SetConfig>
      break;
 800a068:	e02c      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	6859      	ldr	r1, [r3, #4]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	461a      	mov	r2, r3
 800a078:	f000 fc0b 	bl	800a892 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2160      	movs	r1, #96	; 0x60
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fc36 	bl	800a8f4 <TIM_ITRx_SetConfig>
      break;
 800a088:	e01c      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6818      	ldr	r0, [r3, #0]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	6859      	ldr	r1, [r3, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	461a      	mov	r2, r3
 800a098:	f000 fbcc 	bl	800a834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2140      	movs	r1, #64	; 0x40
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fc26 	bl	800a8f4 <TIM_ITRx_SetConfig>
      break;
 800a0a8:	e00c      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	f000 fc1d 	bl	800a8f4 <TIM_ITRx_SetConfig>
      break;
 800a0ba:	e003      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c0:	e000      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a0c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	ffceff88 	.word	0xffceff88
 800a0e4:	00100040 	.word	0x00100040
 800a0e8:	00100030 	.word	0x00100030
 800a0ec:	00100020 	.word	0x00100020

0800a0f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a40      	ldr	r2, [pc, #256]	; (800a268 <TIM_Base_SetConfig+0x114>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d013      	beq.n	800a194 <TIM_Base_SetConfig+0x40>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a172:	d00f      	beq.n	800a194 <TIM_Base_SetConfig+0x40>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a3d      	ldr	r2, [pc, #244]	; (800a26c <TIM_Base_SetConfig+0x118>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d00b      	beq.n	800a194 <TIM_Base_SetConfig+0x40>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a3c      	ldr	r2, [pc, #240]	; (800a270 <TIM_Base_SetConfig+0x11c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d007      	beq.n	800a194 <TIM_Base_SetConfig+0x40>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a3b      	ldr	r2, [pc, #236]	; (800a274 <TIM_Base_SetConfig+0x120>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d003      	beq.n	800a194 <TIM_Base_SetConfig+0x40>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a3a      	ldr	r2, [pc, #232]	; (800a278 <TIM_Base_SetConfig+0x124>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d108      	bne.n	800a1a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a19a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a2f      	ldr	r2, [pc, #188]	; (800a268 <TIM_Base_SetConfig+0x114>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d01f      	beq.n	800a1ee <TIM_Base_SetConfig+0x9a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b4:	d01b      	beq.n	800a1ee <TIM_Base_SetConfig+0x9a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a2c      	ldr	r2, [pc, #176]	; (800a26c <TIM_Base_SetConfig+0x118>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d017      	beq.n	800a1ee <TIM_Base_SetConfig+0x9a>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a2b      	ldr	r2, [pc, #172]	; (800a270 <TIM_Base_SetConfig+0x11c>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d013      	beq.n	800a1ee <TIM_Base_SetConfig+0x9a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a2a      	ldr	r2, [pc, #168]	; (800a274 <TIM_Base_SetConfig+0x120>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00f      	beq.n	800a1ee <TIM_Base_SetConfig+0x9a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a29      	ldr	r2, [pc, #164]	; (800a278 <TIM_Base_SetConfig+0x124>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00b      	beq.n	800a1ee <TIM_Base_SetConfig+0x9a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a28      	ldr	r2, [pc, #160]	; (800a27c <TIM_Base_SetConfig+0x128>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d007      	beq.n	800a1ee <TIM_Base_SetConfig+0x9a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a27      	ldr	r2, [pc, #156]	; (800a280 <TIM_Base_SetConfig+0x12c>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d003      	beq.n	800a1ee <TIM_Base_SetConfig+0x9a>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a26      	ldr	r2, [pc, #152]	; (800a284 <TIM_Base_SetConfig+0x130>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d108      	bne.n	800a200 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a10      	ldr	r2, [pc, #64]	; (800a268 <TIM_Base_SetConfig+0x114>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00f      	beq.n	800a24c <TIM_Base_SetConfig+0xf8>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a12      	ldr	r2, [pc, #72]	; (800a278 <TIM_Base_SetConfig+0x124>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d00b      	beq.n	800a24c <TIM_Base_SetConfig+0xf8>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a11      	ldr	r2, [pc, #68]	; (800a27c <TIM_Base_SetConfig+0x128>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d007      	beq.n	800a24c <TIM_Base_SetConfig+0xf8>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a10      	ldr	r2, [pc, #64]	; (800a280 <TIM_Base_SetConfig+0x12c>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d003      	beq.n	800a24c <TIM_Base_SetConfig+0xf8>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a0f      	ldr	r2, [pc, #60]	; (800a284 <TIM_Base_SetConfig+0x130>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d103      	bne.n	800a254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	691a      	ldr	r2, [r3, #16]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	615a      	str	r2, [r3, #20]
}
 800a25a:	bf00      	nop
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	40010000 	.word	0x40010000
 800a26c:	40000400 	.word	0x40000400
 800a270:	40000800 	.word	0x40000800
 800a274:	40000c00 	.word	0x40000c00
 800a278:	40010400 	.word	0x40010400
 800a27c:	40014000 	.word	0x40014000
 800a280:	40014400 	.word	0x40014400
 800a284:	40014800 	.word	0x40014800

0800a288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a288:	b480      	push	{r7}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	f023 0201 	bic.w	r2, r3, #1
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4b37      	ldr	r3, [pc, #220]	; (800a390 <TIM_OC1_SetConfig+0x108>)
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0303 	bic.w	r3, r3, #3
 800a2be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f023 0302 	bic.w	r3, r3, #2
 800a2d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a2d      	ldr	r2, [pc, #180]	; (800a394 <TIM_OC1_SetConfig+0x10c>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d00f      	beq.n	800a304 <TIM_OC1_SetConfig+0x7c>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a2c      	ldr	r2, [pc, #176]	; (800a398 <TIM_OC1_SetConfig+0x110>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d00b      	beq.n	800a304 <TIM_OC1_SetConfig+0x7c>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a2b      	ldr	r2, [pc, #172]	; (800a39c <TIM_OC1_SetConfig+0x114>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d007      	beq.n	800a304 <TIM_OC1_SetConfig+0x7c>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a2a      	ldr	r2, [pc, #168]	; (800a3a0 <TIM_OC1_SetConfig+0x118>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d003      	beq.n	800a304 <TIM_OC1_SetConfig+0x7c>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a29      	ldr	r2, [pc, #164]	; (800a3a4 <TIM_OC1_SetConfig+0x11c>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d10c      	bne.n	800a31e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f023 0308 	bic.w	r3, r3, #8
 800a30a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	4313      	orrs	r3, r2
 800a314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f023 0304 	bic.w	r3, r3, #4
 800a31c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a1c      	ldr	r2, [pc, #112]	; (800a394 <TIM_OC1_SetConfig+0x10c>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d00f      	beq.n	800a346 <TIM_OC1_SetConfig+0xbe>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a1b      	ldr	r2, [pc, #108]	; (800a398 <TIM_OC1_SetConfig+0x110>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d00b      	beq.n	800a346 <TIM_OC1_SetConfig+0xbe>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a1a      	ldr	r2, [pc, #104]	; (800a39c <TIM_OC1_SetConfig+0x114>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d007      	beq.n	800a346 <TIM_OC1_SetConfig+0xbe>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a19      	ldr	r2, [pc, #100]	; (800a3a0 <TIM_OC1_SetConfig+0x118>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d003      	beq.n	800a346 <TIM_OC1_SetConfig+0xbe>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a18      	ldr	r2, [pc, #96]	; (800a3a4 <TIM_OC1_SetConfig+0x11c>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d111      	bne.n	800a36a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a34c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	4313      	orrs	r3, r2
 800a368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	621a      	str	r2, [r3, #32]
}
 800a384:	bf00      	nop
 800a386:	371c      	adds	r7, #28
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	fffeff8f 	.word	0xfffeff8f
 800a394:	40010000 	.word	0x40010000
 800a398:	40010400 	.word	0x40010400
 800a39c:	40014000 	.word	0x40014000
 800a3a0:	40014400 	.word	0x40014400
 800a3a4:	40014800 	.word	0x40014800

0800a3a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	f023 0210 	bic.w	r2, r3, #16
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	4b34      	ldr	r3, [pc, #208]	; (800a4a4 <TIM_OC2_SetConfig+0xfc>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	021b      	lsls	r3, r3, #8
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f023 0320 	bic.w	r3, r3, #32
 800a3f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	011b      	lsls	r3, r3, #4
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a29      	ldr	r2, [pc, #164]	; (800a4a8 <TIM_OC2_SetConfig+0x100>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d003      	beq.n	800a410 <TIM_OC2_SetConfig+0x68>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a28      	ldr	r2, [pc, #160]	; (800a4ac <TIM_OC2_SetConfig+0x104>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d10d      	bne.n	800a42c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	011b      	lsls	r3, r3, #4
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4313      	orrs	r3, r2
 800a422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a42a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a1e      	ldr	r2, [pc, #120]	; (800a4a8 <TIM_OC2_SetConfig+0x100>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d00f      	beq.n	800a454 <TIM_OC2_SetConfig+0xac>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a1d      	ldr	r2, [pc, #116]	; (800a4ac <TIM_OC2_SetConfig+0x104>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d00b      	beq.n	800a454 <TIM_OC2_SetConfig+0xac>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a1c      	ldr	r2, [pc, #112]	; (800a4b0 <TIM_OC2_SetConfig+0x108>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d007      	beq.n	800a454 <TIM_OC2_SetConfig+0xac>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a1b      	ldr	r2, [pc, #108]	; (800a4b4 <TIM_OC2_SetConfig+0x10c>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d003      	beq.n	800a454 <TIM_OC2_SetConfig+0xac>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a1a      	ldr	r2, [pc, #104]	; (800a4b8 <TIM_OC2_SetConfig+0x110>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d113      	bne.n	800a47c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a45a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	695b      	ldr	r3, [r3, #20]
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	4313      	orrs	r3, r2
 800a47a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	621a      	str	r2, [r3, #32]
}
 800a496:	bf00      	nop
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	feff8fff 	.word	0xfeff8fff
 800a4a8:	40010000 	.word	0x40010000
 800a4ac:	40010400 	.word	0x40010400
 800a4b0:	40014000 	.word	0x40014000
 800a4b4:	40014400 	.word	0x40014400
 800a4b8:	40014800 	.word	0x40014800

0800a4bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4b33      	ldr	r3, [pc, #204]	; (800a5b4 <TIM_OC3_SetConfig+0xf8>)
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 0303 	bic.w	r3, r3, #3
 800a4f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	021b      	lsls	r3, r3, #8
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4313      	orrs	r3, r2
 800a510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a28      	ldr	r2, [pc, #160]	; (800a5b8 <TIM_OC3_SetConfig+0xfc>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d003      	beq.n	800a522 <TIM_OC3_SetConfig+0x66>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a27      	ldr	r2, [pc, #156]	; (800a5bc <TIM_OC3_SetConfig+0x100>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d10d      	bne.n	800a53e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	4313      	orrs	r3, r2
 800a534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a53c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a1d      	ldr	r2, [pc, #116]	; (800a5b8 <TIM_OC3_SetConfig+0xfc>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d00f      	beq.n	800a566 <TIM_OC3_SetConfig+0xaa>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a1c      	ldr	r2, [pc, #112]	; (800a5bc <TIM_OC3_SetConfig+0x100>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d00b      	beq.n	800a566 <TIM_OC3_SetConfig+0xaa>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a1b      	ldr	r2, [pc, #108]	; (800a5c0 <TIM_OC3_SetConfig+0x104>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d007      	beq.n	800a566 <TIM_OC3_SetConfig+0xaa>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a1a      	ldr	r2, [pc, #104]	; (800a5c4 <TIM_OC3_SetConfig+0x108>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d003      	beq.n	800a566 <TIM_OC3_SetConfig+0xaa>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a19      	ldr	r2, [pc, #100]	; (800a5c8 <TIM_OC3_SetConfig+0x10c>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d113      	bne.n	800a58e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a56c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	011b      	lsls	r3, r3, #4
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	4313      	orrs	r3, r2
 800a580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	697a      	ldr	r2, [r7, #20]
 800a5a6:	621a      	str	r2, [r3, #32]
}
 800a5a8:	bf00      	nop
 800a5aa:	371c      	adds	r7, #28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	fffeff8f 	.word	0xfffeff8f
 800a5b8:	40010000 	.word	0x40010000
 800a5bc:	40010400 	.word	0x40010400
 800a5c0:	40014000 	.word	0x40014000
 800a5c4:	40014400 	.word	0x40014400
 800a5c8:	40014800 	.word	0x40014800

0800a5cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4b24      	ldr	r3, [pc, #144]	; (800a688 <TIM_OC4_SetConfig+0xbc>)
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	021b      	lsls	r3, r3, #8
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	031b      	lsls	r3, r3, #12
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	4313      	orrs	r3, r2
 800a622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a19      	ldr	r2, [pc, #100]	; (800a68c <TIM_OC4_SetConfig+0xc0>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d00f      	beq.n	800a64c <TIM_OC4_SetConfig+0x80>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a18      	ldr	r2, [pc, #96]	; (800a690 <TIM_OC4_SetConfig+0xc4>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d00b      	beq.n	800a64c <TIM_OC4_SetConfig+0x80>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a17      	ldr	r2, [pc, #92]	; (800a694 <TIM_OC4_SetConfig+0xc8>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d007      	beq.n	800a64c <TIM_OC4_SetConfig+0x80>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a16      	ldr	r2, [pc, #88]	; (800a698 <TIM_OC4_SetConfig+0xcc>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d003      	beq.n	800a64c <TIM_OC4_SetConfig+0x80>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a15      	ldr	r2, [pc, #84]	; (800a69c <TIM_OC4_SetConfig+0xd0>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d109      	bne.n	800a660 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	019b      	lsls	r3, r3, #6
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	621a      	str	r2, [r3, #32]
}
 800a67a:	bf00      	nop
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	feff8fff 	.word	0xfeff8fff
 800a68c:	40010000 	.word	0x40010000
 800a690:	40010400 	.word	0x40010400
 800a694:	40014000 	.word	0x40014000
 800a698:	40014400 	.word	0x40014400
 800a69c:	40014800 	.word	0x40014800

0800a6a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4b21      	ldr	r3, [pc, #132]	; (800a750 <TIM_OC5_SetConfig+0xb0>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	041b      	lsls	r3, r3, #16
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a18      	ldr	r2, [pc, #96]	; (800a754 <TIM_OC5_SetConfig+0xb4>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d00f      	beq.n	800a716 <TIM_OC5_SetConfig+0x76>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a17      	ldr	r2, [pc, #92]	; (800a758 <TIM_OC5_SetConfig+0xb8>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d00b      	beq.n	800a716 <TIM_OC5_SetConfig+0x76>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a16      	ldr	r2, [pc, #88]	; (800a75c <TIM_OC5_SetConfig+0xbc>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d007      	beq.n	800a716 <TIM_OC5_SetConfig+0x76>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a15      	ldr	r2, [pc, #84]	; (800a760 <TIM_OC5_SetConfig+0xc0>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d003      	beq.n	800a716 <TIM_OC5_SetConfig+0x76>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a14      	ldr	r2, [pc, #80]	; (800a764 <TIM_OC5_SetConfig+0xc4>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d109      	bne.n	800a72a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a71c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	021b      	lsls	r3, r3, #8
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	4313      	orrs	r3, r2
 800a728:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	621a      	str	r2, [r3, #32]
}
 800a744:	bf00      	nop
 800a746:	371c      	adds	r7, #28
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	fffeff8f 	.word	0xfffeff8f
 800a754:	40010000 	.word	0x40010000
 800a758:	40010400 	.word	0x40010400
 800a75c:	40014000 	.word	0x40014000
 800a760:	40014400 	.word	0x40014400
 800a764:	40014800 	.word	0x40014800

0800a768 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a768:	b480      	push	{r7}
 800a76a:	b087      	sub	sp, #28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	4b22      	ldr	r3, [pc, #136]	; (800a81c <TIM_OC6_SetConfig+0xb4>)
 800a794:	4013      	ands	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	021b      	lsls	r3, r3, #8
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	051b      	lsls	r3, r3, #20
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a19      	ldr	r2, [pc, #100]	; (800a820 <TIM_OC6_SetConfig+0xb8>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d00f      	beq.n	800a7e0 <TIM_OC6_SetConfig+0x78>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a18      	ldr	r2, [pc, #96]	; (800a824 <TIM_OC6_SetConfig+0xbc>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d00b      	beq.n	800a7e0 <TIM_OC6_SetConfig+0x78>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a17      	ldr	r2, [pc, #92]	; (800a828 <TIM_OC6_SetConfig+0xc0>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d007      	beq.n	800a7e0 <TIM_OC6_SetConfig+0x78>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a16      	ldr	r2, [pc, #88]	; (800a82c <TIM_OC6_SetConfig+0xc4>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d003      	beq.n	800a7e0 <TIM_OC6_SetConfig+0x78>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a15      	ldr	r2, [pc, #84]	; (800a830 <TIM_OC6_SetConfig+0xc8>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d109      	bne.n	800a7f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	029b      	lsls	r3, r3, #10
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	621a      	str	r2, [r3, #32]
}
 800a80e:	bf00      	nop
 800a810:	371c      	adds	r7, #28
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	feff8fff 	.word	0xfeff8fff
 800a820:	40010000 	.word	0x40010000
 800a824:	40010400 	.word	0x40010400
 800a828:	40014000 	.word	0x40014000
 800a82c:	40014400 	.word	0x40014400
 800a830:	40014800 	.word	0x40014800

0800a834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6a1b      	ldr	r3, [r3, #32]
 800a844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	f023 0201 	bic.w	r2, r3, #1
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a85e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	011b      	lsls	r3, r3, #4
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	4313      	orrs	r3, r2
 800a868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f023 030a 	bic.w	r3, r3, #10
 800a870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	4313      	orrs	r3, r2
 800a878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	621a      	str	r2, [r3, #32]
}
 800a886:	bf00      	nop
 800a888:	371c      	adds	r7, #28
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a892:	b480      	push	{r7}
 800a894:	b087      	sub	sp, #28
 800a896:	af00      	add	r7, sp, #0
 800a898:	60f8      	str	r0, [r7, #12]
 800a89a:	60b9      	str	r1, [r7, #8]
 800a89c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	f023 0210 	bic.w	r2, r3, #16
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	031b      	lsls	r3, r3, #12
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	011b      	lsls	r3, r3, #4
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	693a      	ldr	r2, [r7, #16]
 800a8e4:	621a      	str	r2, [r3, #32]
}
 800a8e6:	bf00      	nop
 800a8e8:	371c      	adds	r7, #28
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <TIM_ITRx_SetConfig+0x38>)
 800a908:	4013      	ands	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	4313      	orrs	r3, r2
 800a912:	f043 0307 	orr.w	r3, r3, #7
 800a916:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	609a      	str	r2, [r3, #8]
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	ffcfff8f 	.word	0xffcfff8f

0800a930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a94a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	021a      	lsls	r2, r3, #8
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	431a      	orrs	r2, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	4313      	orrs	r3, r2
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	609a      	str	r2, [r3, #8]
}
 800a964:	bf00      	nop
 800a966:	371c      	adds	r7, #28
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a970:	b480      	push	{r7}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f003 031f 	and.w	r3, r3, #31
 800a982:	2201      	movs	r2, #1
 800a984:	fa02 f303 	lsl.w	r3, r2, r3
 800a988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6a1a      	ldr	r2, [r3, #32]
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	43db      	mvns	r3, r3
 800a992:	401a      	ands	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6a1a      	ldr	r2, [r3, #32]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f003 031f 	and.w	r3, r3, #31
 800a9a2:	6879      	ldr	r1, [r7, #4]
 800a9a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a9a8:	431a      	orrs	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	621a      	str	r2, [r3, #32]
}
 800a9ae:	bf00      	nop
 800a9b0:	371c      	adds	r7, #28
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
	...

0800a9bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d101      	bne.n	800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	e06d      	b.n	800aab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a30      	ldr	r2, [pc, #192]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d004      	beq.n	800aa08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a2f      	ldr	r2, [pc, #188]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d108      	bne.n	800aa1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a20      	ldr	r2, [pc, #128]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d022      	beq.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa46:	d01d      	beq.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a1d      	ldr	r2, [pc, #116]	; (800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d018      	beq.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a1c      	ldr	r2, [pc, #112]	; (800aac8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d013      	beq.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a1a      	ldr	r2, [pc, #104]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d00e      	beq.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a15      	ldr	r2, [pc, #84]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d009      	beq.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a16      	ldr	r2, [pc, #88]	; (800aad0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d004      	beq.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a15      	ldr	r2, [pc, #84]	; (800aad4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d10c      	bne.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	40010000 	.word	0x40010000
 800aac0:	40010400 	.word	0x40010400
 800aac4:	40000400 	.word	0x40000400
 800aac8:	40000800 	.word	0x40000800
 800aacc:	40000c00 	.word	0x40000c00
 800aad0:	40001800 	.word	0x40001800
 800aad4:	40014000 	.word	0x40014000

0800aad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e087      	b.n	800ac04 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	041b      	lsls	r3, r3, #16
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a27      	ldr	r2, [pc, #156]	; (800ac10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d004      	beq.n	800ab82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a25      	ldr	r2, [pc, #148]	; (800ac14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d106      	bne.n	800ab90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a1e      	ldr	r2, [pc, #120]	; (800ac10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d004      	beq.n	800aba4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a1d      	ldr	r2, [pc, #116]	; (800ac14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d126      	bne.n	800abf2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abae:	051b      	lsls	r3, r3, #20
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abcc:	4313      	orrs	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a0e      	ldr	r2, [pc, #56]	; (800ac10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d004      	beq.n	800abe4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a0d      	ldr	r2, [pc, #52]	; (800ac14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d106      	bne.n	800abf2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	4313      	orrs	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	40010000 	.word	0x40010000
 800ac14:	40010400 	.word	0x40010400

0800ac18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e042      	b.n	800acec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d106      	bne.n	800ac7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7f7 fed3 	bl	8002a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2224      	movs	r2, #36	; 0x24
 800ac82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f022 0201 	bic.w	r2, r2, #1
 800ac94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f82c 	bl	800acf4 <UART_SetConfig>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d101      	bne.n	800aca6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e022      	b.n	800acec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fe7e 	bl	800b9b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689a      	ldr	r2, [r3, #8]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f042 0201 	orr.w	r2, r2, #1
 800ace2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 ff05 	bl	800baf4 <UART_CheckIdleState>
 800acea:	4603      	mov	r3, r0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acf4:	b5b0      	push	{r4, r5, r7, lr}
 800acf6:	b08e      	sub	sp, #56	; 0x38
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	689a      	ldr	r2, [r3, #8]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	431a      	orrs	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	431a      	orrs	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	4bbf      	ldr	r3, [pc, #764]	; (800b020 <UART_SetConfig+0x32c>)
 800ad22:	4013      	ands	r3, r2
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	6812      	ldr	r2, [r2, #0]
 800ad28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad2a:	430b      	orrs	r3, r1
 800ad2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	68da      	ldr	r2, [r3, #12]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	430a      	orrs	r2, r1
 800ad42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4ab5      	ldr	r2, [pc, #724]	; (800b024 <UART_SetConfig+0x330>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d004      	beq.n	800ad5e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689a      	ldr	r2, [r3, #8]
 800ad64:	4bb0      	ldr	r3, [pc, #704]	; (800b028 <UART_SetConfig+0x334>)
 800ad66:	4013      	ands	r3, r2
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	6812      	ldr	r2, [r2, #0]
 800ad6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad78:	f023 010f 	bic.w	r1, r3, #15
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	430a      	orrs	r2, r1
 800ad86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4aa7      	ldr	r2, [pc, #668]	; (800b02c <UART_SetConfig+0x338>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d176      	bne.n	800ae80 <UART_SetConfig+0x18c>
 800ad92:	4ba7      	ldr	r3, [pc, #668]	; (800b030 <UART_SetConfig+0x33c>)
 800ad94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad9a:	2b28      	cmp	r3, #40	; 0x28
 800ad9c:	d86c      	bhi.n	800ae78 <UART_SetConfig+0x184>
 800ad9e:	a201      	add	r2, pc, #4	; (adr r2, 800ada4 <UART_SetConfig+0xb0>)
 800ada0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada4:	0800ae49 	.word	0x0800ae49
 800ada8:	0800ae79 	.word	0x0800ae79
 800adac:	0800ae79 	.word	0x0800ae79
 800adb0:	0800ae79 	.word	0x0800ae79
 800adb4:	0800ae79 	.word	0x0800ae79
 800adb8:	0800ae79 	.word	0x0800ae79
 800adbc:	0800ae79 	.word	0x0800ae79
 800adc0:	0800ae79 	.word	0x0800ae79
 800adc4:	0800ae51 	.word	0x0800ae51
 800adc8:	0800ae79 	.word	0x0800ae79
 800adcc:	0800ae79 	.word	0x0800ae79
 800add0:	0800ae79 	.word	0x0800ae79
 800add4:	0800ae79 	.word	0x0800ae79
 800add8:	0800ae79 	.word	0x0800ae79
 800addc:	0800ae79 	.word	0x0800ae79
 800ade0:	0800ae79 	.word	0x0800ae79
 800ade4:	0800ae59 	.word	0x0800ae59
 800ade8:	0800ae79 	.word	0x0800ae79
 800adec:	0800ae79 	.word	0x0800ae79
 800adf0:	0800ae79 	.word	0x0800ae79
 800adf4:	0800ae79 	.word	0x0800ae79
 800adf8:	0800ae79 	.word	0x0800ae79
 800adfc:	0800ae79 	.word	0x0800ae79
 800ae00:	0800ae79 	.word	0x0800ae79
 800ae04:	0800ae61 	.word	0x0800ae61
 800ae08:	0800ae79 	.word	0x0800ae79
 800ae0c:	0800ae79 	.word	0x0800ae79
 800ae10:	0800ae79 	.word	0x0800ae79
 800ae14:	0800ae79 	.word	0x0800ae79
 800ae18:	0800ae79 	.word	0x0800ae79
 800ae1c:	0800ae79 	.word	0x0800ae79
 800ae20:	0800ae79 	.word	0x0800ae79
 800ae24:	0800ae69 	.word	0x0800ae69
 800ae28:	0800ae79 	.word	0x0800ae79
 800ae2c:	0800ae79 	.word	0x0800ae79
 800ae30:	0800ae79 	.word	0x0800ae79
 800ae34:	0800ae79 	.word	0x0800ae79
 800ae38:	0800ae79 	.word	0x0800ae79
 800ae3c:	0800ae79 	.word	0x0800ae79
 800ae40:	0800ae79 	.word	0x0800ae79
 800ae44:	0800ae71 	.word	0x0800ae71
 800ae48:	2301      	movs	r3, #1
 800ae4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae4e:	e326      	b.n	800b49e <UART_SetConfig+0x7aa>
 800ae50:	2304      	movs	r3, #4
 800ae52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae56:	e322      	b.n	800b49e <UART_SetConfig+0x7aa>
 800ae58:	2308      	movs	r3, #8
 800ae5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5e:	e31e      	b.n	800b49e <UART_SetConfig+0x7aa>
 800ae60:	2310      	movs	r3, #16
 800ae62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae66:	e31a      	b.n	800b49e <UART_SetConfig+0x7aa>
 800ae68:	2320      	movs	r3, #32
 800ae6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6e:	e316      	b.n	800b49e <UART_SetConfig+0x7aa>
 800ae70:	2340      	movs	r3, #64	; 0x40
 800ae72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae76:	e312      	b.n	800b49e <UART_SetConfig+0x7aa>
 800ae78:	2380      	movs	r3, #128	; 0x80
 800ae7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7e:	e30e      	b.n	800b49e <UART_SetConfig+0x7aa>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a6b      	ldr	r2, [pc, #428]	; (800b034 <UART_SetConfig+0x340>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d130      	bne.n	800aeec <UART_SetConfig+0x1f8>
 800ae8a:	4b69      	ldr	r3, [pc, #420]	; (800b030 <UART_SetConfig+0x33c>)
 800ae8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8e:	f003 0307 	and.w	r3, r3, #7
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	d826      	bhi.n	800aee4 <UART_SetConfig+0x1f0>
 800ae96:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <UART_SetConfig+0x1a8>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aeb5 	.word	0x0800aeb5
 800aea0:	0800aebd 	.word	0x0800aebd
 800aea4:	0800aec5 	.word	0x0800aec5
 800aea8:	0800aecd 	.word	0x0800aecd
 800aeac:	0800aed5 	.word	0x0800aed5
 800aeb0:	0800aedd 	.word	0x0800aedd
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeba:	e2f0      	b.n	800b49e <UART_SetConfig+0x7aa>
 800aebc:	2304      	movs	r3, #4
 800aebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec2:	e2ec      	b.n	800b49e <UART_SetConfig+0x7aa>
 800aec4:	2308      	movs	r3, #8
 800aec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeca:	e2e8      	b.n	800b49e <UART_SetConfig+0x7aa>
 800aecc:	2310      	movs	r3, #16
 800aece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed2:	e2e4      	b.n	800b49e <UART_SetConfig+0x7aa>
 800aed4:	2320      	movs	r3, #32
 800aed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeda:	e2e0      	b.n	800b49e <UART_SetConfig+0x7aa>
 800aedc:	2340      	movs	r3, #64	; 0x40
 800aede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee2:	e2dc      	b.n	800b49e <UART_SetConfig+0x7aa>
 800aee4:	2380      	movs	r3, #128	; 0x80
 800aee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeea:	e2d8      	b.n	800b49e <UART_SetConfig+0x7aa>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a51      	ldr	r2, [pc, #324]	; (800b038 <UART_SetConfig+0x344>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d130      	bne.n	800af58 <UART_SetConfig+0x264>
 800aef6:	4b4e      	ldr	r3, [pc, #312]	; (800b030 <UART_SetConfig+0x33c>)
 800aef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefa:	f003 0307 	and.w	r3, r3, #7
 800aefe:	2b05      	cmp	r3, #5
 800af00:	d826      	bhi.n	800af50 <UART_SetConfig+0x25c>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <UART_SetConfig+0x214>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af21 	.word	0x0800af21
 800af0c:	0800af29 	.word	0x0800af29
 800af10:	0800af31 	.word	0x0800af31
 800af14:	0800af39 	.word	0x0800af39
 800af18:	0800af41 	.word	0x0800af41
 800af1c:	0800af49 	.word	0x0800af49
 800af20:	2300      	movs	r3, #0
 800af22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af26:	e2ba      	b.n	800b49e <UART_SetConfig+0x7aa>
 800af28:	2304      	movs	r3, #4
 800af2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af2e:	e2b6      	b.n	800b49e <UART_SetConfig+0x7aa>
 800af30:	2308      	movs	r3, #8
 800af32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af36:	e2b2      	b.n	800b49e <UART_SetConfig+0x7aa>
 800af38:	2310      	movs	r3, #16
 800af3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af3e:	e2ae      	b.n	800b49e <UART_SetConfig+0x7aa>
 800af40:	2320      	movs	r3, #32
 800af42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af46:	e2aa      	b.n	800b49e <UART_SetConfig+0x7aa>
 800af48:	2340      	movs	r3, #64	; 0x40
 800af4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af4e:	e2a6      	b.n	800b49e <UART_SetConfig+0x7aa>
 800af50:	2380      	movs	r3, #128	; 0x80
 800af52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af56:	e2a2      	b.n	800b49e <UART_SetConfig+0x7aa>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a37      	ldr	r2, [pc, #220]	; (800b03c <UART_SetConfig+0x348>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d130      	bne.n	800afc4 <UART_SetConfig+0x2d0>
 800af62:	4b33      	ldr	r3, [pc, #204]	; (800b030 <UART_SetConfig+0x33c>)
 800af64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af66:	f003 0307 	and.w	r3, r3, #7
 800af6a:	2b05      	cmp	r3, #5
 800af6c:	d826      	bhi.n	800afbc <UART_SetConfig+0x2c8>
 800af6e:	a201      	add	r2, pc, #4	; (adr r2, 800af74 <UART_SetConfig+0x280>)
 800af70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af74:	0800af8d 	.word	0x0800af8d
 800af78:	0800af95 	.word	0x0800af95
 800af7c:	0800af9d 	.word	0x0800af9d
 800af80:	0800afa5 	.word	0x0800afa5
 800af84:	0800afad 	.word	0x0800afad
 800af88:	0800afb5 	.word	0x0800afb5
 800af8c:	2300      	movs	r3, #0
 800af8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af92:	e284      	b.n	800b49e <UART_SetConfig+0x7aa>
 800af94:	2304      	movs	r3, #4
 800af96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af9a:	e280      	b.n	800b49e <UART_SetConfig+0x7aa>
 800af9c:	2308      	movs	r3, #8
 800af9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa2:	e27c      	b.n	800b49e <UART_SetConfig+0x7aa>
 800afa4:	2310      	movs	r3, #16
 800afa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afaa:	e278      	b.n	800b49e <UART_SetConfig+0x7aa>
 800afac:	2320      	movs	r3, #32
 800afae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afb2:	e274      	b.n	800b49e <UART_SetConfig+0x7aa>
 800afb4:	2340      	movs	r3, #64	; 0x40
 800afb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afba:	e270      	b.n	800b49e <UART_SetConfig+0x7aa>
 800afbc:	2380      	movs	r3, #128	; 0x80
 800afbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afc2:	e26c      	b.n	800b49e <UART_SetConfig+0x7aa>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a1d      	ldr	r2, [pc, #116]	; (800b040 <UART_SetConfig+0x34c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d142      	bne.n	800b054 <UART_SetConfig+0x360>
 800afce:	4b18      	ldr	r3, [pc, #96]	; (800b030 <UART_SetConfig+0x33c>)
 800afd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	2b05      	cmp	r3, #5
 800afd8:	d838      	bhi.n	800b04c <UART_SetConfig+0x358>
 800afda:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <UART_SetConfig+0x2ec>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800aff9 	.word	0x0800aff9
 800afe4:	0800b001 	.word	0x0800b001
 800afe8:	0800b009 	.word	0x0800b009
 800afec:	0800b011 	.word	0x0800b011
 800aff0:	0800b019 	.word	0x0800b019
 800aff4:	0800b045 	.word	0x0800b045
 800aff8:	2300      	movs	r3, #0
 800affa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affe:	e24e      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b000:	2304      	movs	r3, #4
 800b002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b006:	e24a      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b008:	2308      	movs	r3, #8
 800b00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00e:	e246      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b010:	2310      	movs	r3, #16
 800b012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b016:	e242      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b018:	2320      	movs	r3, #32
 800b01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b01e:	e23e      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b020:	cfff69f3 	.word	0xcfff69f3
 800b024:	58000c00 	.word	0x58000c00
 800b028:	11fff4ff 	.word	0x11fff4ff
 800b02c:	40011000 	.word	0x40011000
 800b030:	58024400 	.word	0x58024400
 800b034:	40004400 	.word	0x40004400
 800b038:	40004800 	.word	0x40004800
 800b03c:	40004c00 	.word	0x40004c00
 800b040:	40005000 	.word	0x40005000
 800b044:	2340      	movs	r3, #64	; 0x40
 800b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b04a:	e228      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b04c:	2380      	movs	r3, #128	; 0x80
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e224      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4ab1      	ldr	r2, [pc, #708]	; (800b320 <UART_SetConfig+0x62c>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d176      	bne.n	800b14c <UART_SetConfig+0x458>
 800b05e:	4bb1      	ldr	r3, [pc, #708]	; (800b324 <UART_SetConfig+0x630>)
 800b060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b066:	2b28      	cmp	r3, #40	; 0x28
 800b068:	d86c      	bhi.n	800b144 <UART_SetConfig+0x450>
 800b06a:	a201      	add	r2, pc, #4	; (adr r2, 800b070 <UART_SetConfig+0x37c>)
 800b06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b070:	0800b115 	.word	0x0800b115
 800b074:	0800b145 	.word	0x0800b145
 800b078:	0800b145 	.word	0x0800b145
 800b07c:	0800b145 	.word	0x0800b145
 800b080:	0800b145 	.word	0x0800b145
 800b084:	0800b145 	.word	0x0800b145
 800b088:	0800b145 	.word	0x0800b145
 800b08c:	0800b145 	.word	0x0800b145
 800b090:	0800b11d 	.word	0x0800b11d
 800b094:	0800b145 	.word	0x0800b145
 800b098:	0800b145 	.word	0x0800b145
 800b09c:	0800b145 	.word	0x0800b145
 800b0a0:	0800b145 	.word	0x0800b145
 800b0a4:	0800b145 	.word	0x0800b145
 800b0a8:	0800b145 	.word	0x0800b145
 800b0ac:	0800b145 	.word	0x0800b145
 800b0b0:	0800b125 	.word	0x0800b125
 800b0b4:	0800b145 	.word	0x0800b145
 800b0b8:	0800b145 	.word	0x0800b145
 800b0bc:	0800b145 	.word	0x0800b145
 800b0c0:	0800b145 	.word	0x0800b145
 800b0c4:	0800b145 	.word	0x0800b145
 800b0c8:	0800b145 	.word	0x0800b145
 800b0cc:	0800b145 	.word	0x0800b145
 800b0d0:	0800b12d 	.word	0x0800b12d
 800b0d4:	0800b145 	.word	0x0800b145
 800b0d8:	0800b145 	.word	0x0800b145
 800b0dc:	0800b145 	.word	0x0800b145
 800b0e0:	0800b145 	.word	0x0800b145
 800b0e4:	0800b145 	.word	0x0800b145
 800b0e8:	0800b145 	.word	0x0800b145
 800b0ec:	0800b145 	.word	0x0800b145
 800b0f0:	0800b135 	.word	0x0800b135
 800b0f4:	0800b145 	.word	0x0800b145
 800b0f8:	0800b145 	.word	0x0800b145
 800b0fc:	0800b145 	.word	0x0800b145
 800b100:	0800b145 	.word	0x0800b145
 800b104:	0800b145 	.word	0x0800b145
 800b108:	0800b145 	.word	0x0800b145
 800b10c:	0800b145 	.word	0x0800b145
 800b110:	0800b13d 	.word	0x0800b13d
 800b114:	2301      	movs	r3, #1
 800b116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b11a:	e1c0      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b11c:	2304      	movs	r3, #4
 800b11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b122:	e1bc      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b124:	2308      	movs	r3, #8
 800b126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12a:	e1b8      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b12c:	2310      	movs	r3, #16
 800b12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b132:	e1b4      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b134:	2320      	movs	r3, #32
 800b136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13a:	e1b0      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b13c:	2340      	movs	r3, #64	; 0x40
 800b13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b142:	e1ac      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b144:	2380      	movs	r3, #128	; 0x80
 800b146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b14a:	e1a8      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a75      	ldr	r2, [pc, #468]	; (800b328 <UART_SetConfig+0x634>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d130      	bne.n	800b1b8 <UART_SetConfig+0x4c4>
 800b156:	4b73      	ldr	r3, [pc, #460]	; (800b324 <UART_SetConfig+0x630>)
 800b158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	2b05      	cmp	r3, #5
 800b160:	d826      	bhi.n	800b1b0 <UART_SetConfig+0x4bc>
 800b162:	a201      	add	r2, pc, #4	; (adr r2, 800b168 <UART_SetConfig+0x474>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b181 	.word	0x0800b181
 800b16c:	0800b189 	.word	0x0800b189
 800b170:	0800b191 	.word	0x0800b191
 800b174:	0800b199 	.word	0x0800b199
 800b178:	0800b1a1 	.word	0x0800b1a1
 800b17c:	0800b1a9 	.word	0x0800b1a9
 800b180:	2300      	movs	r3, #0
 800b182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b186:	e18a      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b188:	2304      	movs	r3, #4
 800b18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b18e:	e186      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b190:	2308      	movs	r3, #8
 800b192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b196:	e182      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b198:	2310      	movs	r3, #16
 800b19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b19e:	e17e      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b1a0:	2320      	movs	r3, #32
 800b1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1a6:	e17a      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b1a8:	2340      	movs	r3, #64	; 0x40
 800b1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ae:	e176      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b1b0:	2380      	movs	r3, #128	; 0x80
 800b1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1b6:	e172      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a5b      	ldr	r2, [pc, #364]	; (800b32c <UART_SetConfig+0x638>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d130      	bne.n	800b224 <UART_SetConfig+0x530>
 800b1c2:	4b58      	ldr	r3, [pc, #352]	; (800b324 <UART_SetConfig+0x630>)
 800b1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1c6:	f003 0307 	and.w	r3, r3, #7
 800b1ca:	2b05      	cmp	r3, #5
 800b1cc:	d826      	bhi.n	800b21c <UART_SetConfig+0x528>
 800b1ce:	a201      	add	r2, pc, #4	; (adr r2, 800b1d4 <UART_SetConfig+0x4e0>)
 800b1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d4:	0800b1ed 	.word	0x0800b1ed
 800b1d8:	0800b1f5 	.word	0x0800b1f5
 800b1dc:	0800b1fd 	.word	0x0800b1fd
 800b1e0:	0800b205 	.word	0x0800b205
 800b1e4:	0800b20d 	.word	0x0800b20d
 800b1e8:	0800b215 	.word	0x0800b215
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f2:	e154      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b1f4:	2304      	movs	r3, #4
 800b1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fa:	e150      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b1fc:	2308      	movs	r3, #8
 800b1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b202:	e14c      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b204:	2310      	movs	r3, #16
 800b206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b20a:	e148      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b20c:	2320      	movs	r3, #32
 800b20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b212:	e144      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b214:	2340      	movs	r3, #64	; 0x40
 800b216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b21a:	e140      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b21c:	2380      	movs	r3, #128	; 0x80
 800b21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b222:	e13c      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a41      	ldr	r2, [pc, #260]	; (800b330 <UART_SetConfig+0x63c>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	f040 8082 	bne.w	800b334 <UART_SetConfig+0x640>
 800b230:	4b3c      	ldr	r3, [pc, #240]	; (800b324 <UART_SetConfig+0x630>)
 800b232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b234:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b238:	2b28      	cmp	r3, #40	; 0x28
 800b23a:	d86d      	bhi.n	800b318 <UART_SetConfig+0x624>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <UART_SetConfig+0x550>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b2e9 	.word	0x0800b2e9
 800b248:	0800b319 	.word	0x0800b319
 800b24c:	0800b319 	.word	0x0800b319
 800b250:	0800b319 	.word	0x0800b319
 800b254:	0800b319 	.word	0x0800b319
 800b258:	0800b319 	.word	0x0800b319
 800b25c:	0800b319 	.word	0x0800b319
 800b260:	0800b319 	.word	0x0800b319
 800b264:	0800b2f1 	.word	0x0800b2f1
 800b268:	0800b319 	.word	0x0800b319
 800b26c:	0800b319 	.word	0x0800b319
 800b270:	0800b319 	.word	0x0800b319
 800b274:	0800b319 	.word	0x0800b319
 800b278:	0800b319 	.word	0x0800b319
 800b27c:	0800b319 	.word	0x0800b319
 800b280:	0800b319 	.word	0x0800b319
 800b284:	0800b2f9 	.word	0x0800b2f9
 800b288:	0800b319 	.word	0x0800b319
 800b28c:	0800b319 	.word	0x0800b319
 800b290:	0800b319 	.word	0x0800b319
 800b294:	0800b319 	.word	0x0800b319
 800b298:	0800b319 	.word	0x0800b319
 800b29c:	0800b319 	.word	0x0800b319
 800b2a0:	0800b319 	.word	0x0800b319
 800b2a4:	0800b301 	.word	0x0800b301
 800b2a8:	0800b319 	.word	0x0800b319
 800b2ac:	0800b319 	.word	0x0800b319
 800b2b0:	0800b319 	.word	0x0800b319
 800b2b4:	0800b319 	.word	0x0800b319
 800b2b8:	0800b319 	.word	0x0800b319
 800b2bc:	0800b319 	.word	0x0800b319
 800b2c0:	0800b319 	.word	0x0800b319
 800b2c4:	0800b309 	.word	0x0800b309
 800b2c8:	0800b319 	.word	0x0800b319
 800b2cc:	0800b319 	.word	0x0800b319
 800b2d0:	0800b319 	.word	0x0800b319
 800b2d4:	0800b319 	.word	0x0800b319
 800b2d8:	0800b319 	.word	0x0800b319
 800b2dc:	0800b319 	.word	0x0800b319
 800b2e0:	0800b319 	.word	0x0800b319
 800b2e4:	0800b311 	.word	0x0800b311
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ee:	e0d6      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b2f0:	2304      	movs	r3, #4
 800b2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2f6:	e0d2      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b2f8:	2308      	movs	r3, #8
 800b2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2fe:	e0ce      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b300:	2310      	movs	r3, #16
 800b302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b306:	e0ca      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b308:	2320      	movs	r3, #32
 800b30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b30e:	e0c6      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b310:	2340      	movs	r3, #64	; 0x40
 800b312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b316:	e0c2      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b318:	2380      	movs	r3, #128	; 0x80
 800b31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31e:	e0be      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b320:	40011400 	.word	0x40011400
 800b324:	58024400 	.word	0x58024400
 800b328:	40007800 	.word	0x40007800
 800b32c:	40007c00 	.word	0x40007c00
 800b330:	40011800 	.word	0x40011800
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4aad      	ldr	r2, [pc, #692]	; (800b5f0 <UART_SetConfig+0x8fc>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d176      	bne.n	800b42c <UART_SetConfig+0x738>
 800b33e:	4bad      	ldr	r3, [pc, #692]	; (800b5f4 <UART_SetConfig+0x900>)
 800b340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b346:	2b28      	cmp	r3, #40	; 0x28
 800b348:	d86c      	bhi.n	800b424 <UART_SetConfig+0x730>
 800b34a:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <UART_SetConfig+0x65c>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b3f5 	.word	0x0800b3f5
 800b354:	0800b425 	.word	0x0800b425
 800b358:	0800b425 	.word	0x0800b425
 800b35c:	0800b425 	.word	0x0800b425
 800b360:	0800b425 	.word	0x0800b425
 800b364:	0800b425 	.word	0x0800b425
 800b368:	0800b425 	.word	0x0800b425
 800b36c:	0800b425 	.word	0x0800b425
 800b370:	0800b3fd 	.word	0x0800b3fd
 800b374:	0800b425 	.word	0x0800b425
 800b378:	0800b425 	.word	0x0800b425
 800b37c:	0800b425 	.word	0x0800b425
 800b380:	0800b425 	.word	0x0800b425
 800b384:	0800b425 	.word	0x0800b425
 800b388:	0800b425 	.word	0x0800b425
 800b38c:	0800b425 	.word	0x0800b425
 800b390:	0800b405 	.word	0x0800b405
 800b394:	0800b425 	.word	0x0800b425
 800b398:	0800b425 	.word	0x0800b425
 800b39c:	0800b425 	.word	0x0800b425
 800b3a0:	0800b425 	.word	0x0800b425
 800b3a4:	0800b425 	.word	0x0800b425
 800b3a8:	0800b425 	.word	0x0800b425
 800b3ac:	0800b425 	.word	0x0800b425
 800b3b0:	0800b40d 	.word	0x0800b40d
 800b3b4:	0800b425 	.word	0x0800b425
 800b3b8:	0800b425 	.word	0x0800b425
 800b3bc:	0800b425 	.word	0x0800b425
 800b3c0:	0800b425 	.word	0x0800b425
 800b3c4:	0800b425 	.word	0x0800b425
 800b3c8:	0800b425 	.word	0x0800b425
 800b3cc:	0800b425 	.word	0x0800b425
 800b3d0:	0800b415 	.word	0x0800b415
 800b3d4:	0800b425 	.word	0x0800b425
 800b3d8:	0800b425 	.word	0x0800b425
 800b3dc:	0800b425 	.word	0x0800b425
 800b3e0:	0800b425 	.word	0x0800b425
 800b3e4:	0800b425 	.word	0x0800b425
 800b3e8:	0800b425 	.word	0x0800b425
 800b3ec:	0800b425 	.word	0x0800b425
 800b3f0:	0800b41d 	.word	0x0800b41d
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3fa:	e050      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b3fc:	2304      	movs	r3, #4
 800b3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b402:	e04c      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b404:	2308      	movs	r3, #8
 800b406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b40a:	e048      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b40c:	2310      	movs	r3, #16
 800b40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b412:	e044      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b414:	2320      	movs	r3, #32
 800b416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b41a:	e040      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b41c:	2340      	movs	r3, #64	; 0x40
 800b41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b422:	e03c      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b424:	2380      	movs	r3, #128	; 0x80
 800b426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b42a:	e038      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a71      	ldr	r2, [pc, #452]	; (800b5f8 <UART_SetConfig+0x904>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d130      	bne.n	800b498 <UART_SetConfig+0x7a4>
 800b436:	4b6f      	ldr	r3, [pc, #444]	; (800b5f4 <UART_SetConfig+0x900>)
 800b438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43a:	f003 0307 	and.w	r3, r3, #7
 800b43e:	2b05      	cmp	r3, #5
 800b440:	d826      	bhi.n	800b490 <UART_SetConfig+0x79c>
 800b442:	a201      	add	r2, pc, #4	; (adr r2, 800b448 <UART_SetConfig+0x754>)
 800b444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b448:	0800b461 	.word	0x0800b461
 800b44c:	0800b469 	.word	0x0800b469
 800b450:	0800b471 	.word	0x0800b471
 800b454:	0800b479 	.word	0x0800b479
 800b458:	0800b481 	.word	0x0800b481
 800b45c:	0800b489 	.word	0x0800b489
 800b460:	2302      	movs	r3, #2
 800b462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b466:	e01a      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b468:	2304      	movs	r3, #4
 800b46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b46e:	e016      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b470:	2308      	movs	r3, #8
 800b472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b476:	e012      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b478:	2310      	movs	r3, #16
 800b47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b47e:	e00e      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b480:	2320      	movs	r3, #32
 800b482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b486:	e00a      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b488:	2340      	movs	r3, #64	; 0x40
 800b48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b48e:	e006      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b490:	2380      	movs	r3, #128	; 0x80
 800b492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b496:	e002      	b.n	800b49e <UART_SetConfig+0x7aa>
 800b498:	2380      	movs	r3, #128	; 0x80
 800b49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a55      	ldr	r2, [pc, #340]	; (800b5f8 <UART_SetConfig+0x904>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	f040 80f0 	bne.w	800b68a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4ae:	2b20      	cmp	r3, #32
 800b4b0:	dc46      	bgt.n	800b540 <UART_SetConfig+0x84c>
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	db75      	blt.n	800b5a2 <UART_SetConfig+0x8ae>
 800b4b6:	3b02      	subs	r3, #2
 800b4b8:	2b1e      	cmp	r3, #30
 800b4ba:	d872      	bhi.n	800b5a2 <UART_SetConfig+0x8ae>
 800b4bc:	a201      	add	r2, pc, #4	; (adr r2, 800b4c4 <UART_SetConfig+0x7d0>)
 800b4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c2:	bf00      	nop
 800b4c4:	0800b547 	.word	0x0800b547
 800b4c8:	0800b5a3 	.word	0x0800b5a3
 800b4cc:	0800b54f 	.word	0x0800b54f
 800b4d0:	0800b5a3 	.word	0x0800b5a3
 800b4d4:	0800b5a3 	.word	0x0800b5a3
 800b4d8:	0800b5a3 	.word	0x0800b5a3
 800b4dc:	0800b55f 	.word	0x0800b55f
 800b4e0:	0800b5a3 	.word	0x0800b5a3
 800b4e4:	0800b5a3 	.word	0x0800b5a3
 800b4e8:	0800b5a3 	.word	0x0800b5a3
 800b4ec:	0800b5a3 	.word	0x0800b5a3
 800b4f0:	0800b5a3 	.word	0x0800b5a3
 800b4f4:	0800b5a3 	.word	0x0800b5a3
 800b4f8:	0800b5a3 	.word	0x0800b5a3
 800b4fc:	0800b56f 	.word	0x0800b56f
 800b500:	0800b5a3 	.word	0x0800b5a3
 800b504:	0800b5a3 	.word	0x0800b5a3
 800b508:	0800b5a3 	.word	0x0800b5a3
 800b50c:	0800b5a3 	.word	0x0800b5a3
 800b510:	0800b5a3 	.word	0x0800b5a3
 800b514:	0800b5a3 	.word	0x0800b5a3
 800b518:	0800b5a3 	.word	0x0800b5a3
 800b51c:	0800b5a3 	.word	0x0800b5a3
 800b520:	0800b5a3 	.word	0x0800b5a3
 800b524:	0800b5a3 	.word	0x0800b5a3
 800b528:	0800b5a3 	.word	0x0800b5a3
 800b52c:	0800b5a3 	.word	0x0800b5a3
 800b530:	0800b5a3 	.word	0x0800b5a3
 800b534:	0800b5a3 	.word	0x0800b5a3
 800b538:	0800b5a3 	.word	0x0800b5a3
 800b53c:	0800b595 	.word	0x0800b595
 800b540:	2b40      	cmp	r3, #64	; 0x40
 800b542:	d02a      	beq.n	800b59a <UART_SetConfig+0x8a6>
 800b544:	e02d      	b.n	800b5a2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b546:	f7fc faad 	bl	8007aa4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b54a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b54c:	e02f      	b.n	800b5ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54e:	f107 0314 	add.w	r3, r7, #20
 800b552:	4618      	mov	r0, r3
 800b554:	f7fc fabc 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b55c:	e027      	b.n	800b5ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b55e:	f107 0308 	add.w	r3, r7, #8
 800b562:	4618      	mov	r0, r3
 800b564:	f7fc fc08 	bl	8007d78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b56c:	e01f      	b.n	800b5ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b56e:	4b21      	ldr	r3, [pc, #132]	; (800b5f4 <UART_SetConfig+0x900>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0320 	and.w	r3, r3, #32
 800b576:	2b00      	cmp	r3, #0
 800b578:	d009      	beq.n	800b58e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b57a:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <UART_SetConfig+0x900>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	08db      	lsrs	r3, r3, #3
 800b580:	f003 0303 	and.w	r3, r3, #3
 800b584:	4a1d      	ldr	r2, [pc, #116]	; (800b5fc <UART_SetConfig+0x908>)
 800b586:	fa22 f303 	lsr.w	r3, r2, r3
 800b58a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b58c:	e00f      	b.n	800b5ae <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800b58e:	4b1b      	ldr	r3, [pc, #108]	; (800b5fc <UART_SetConfig+0x908>)
 800b590:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b592:	e00c      	b.n	800b5ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b594:	4b1a      	ldr	r3, [pc, #104]	; (800b600 <UART_SetConfig+0x90c>)
 800b596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b598:	e009      	b.n	800b5ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b59a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b59e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5a0:	e005      	b.n	800b5ae <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b5ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 81e6 	beq.w	800b982 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ba:	4a12      	ldr	r2, [pc, #72]	; (800b604 <UART_SetConfig+0x910>)
 800b5bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5c8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	4413      	add	r3, r2
 800b5d4:	6a3a      	ldr	r2, [r7, #32]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d305      	bcc.n	800b5e6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5e0:	6a3a      	ldr	r2, [r7, #32]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d910      	bls.n	800b608 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b5ec:	e1c9      	b.n	800b982 <UART_SetConfig+0xc8e>
 800b5ee:	bf00      	nop
 800b5f0:	40011c00 	.word	0x40011c00
 800b5f4:	58024400 	.word	0x58024400
 800b5f8:	58000c00 	.word	0x58000c00
 800b5fc:	03d09000 	.word	0x03d09000
 800b600:	003d0900 	.word	0x003d0900
 800b604:	0800c028 	.word	0x0800c028
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	4618      	mov	r0, r3
 800b60c:	f04f 0100 	mov.w	r1, #0
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	4ac1      	ldr	r2, [pc, #772]	; (800b91c <UART_SetConfig+0xc28>)
 800b616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	f04f 0300 	mov.w	r3, #0
 800b620:	f7f4 fe64 	bl	80002ec <__aeabi_uldivmod>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4610      	mov	r0, r2
 800b62a:	4619      	mov	r1, r3
 800b62c:	f04f 0200 	mov.w	r2, #0
 800b630:	f04f 0300 	mov.w	r3, #0
 800b634:	020b      	lsls	r3, r1, #8
 800b636:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b63a:	0202      	lsls	r2, r0, #8
 800b63c:	6879      	ldr	r1, [r7, #4]
 800b63e:	6849      	ldr	r1, [r1, #4]
 800b640:	0849      	lsrs	r1, r1, #1
 800b642:	4608      	mov	r0, r1
 800b644:	f04f 0100 	mov.w	r1, #0
 800b648:	1814      	adds	r4, r2, r0
 800b64a:	eb43 0501 	adc.w	r5, r3, r1
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	461a      	mov	r2, r3
 800b654:	f04f 0300 	mov.w	r3, #0
 800b658:	4620      	mov	r0, r4
 800b65a:	4629      	mov	r1, r5
 800b65c:	f7f4 fe46 	bl	80002ec <__aeabi_uldivmod>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4613      	mov	r3, r2
 800b666:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b66e:	d308      	bcc.n	800b682 <UART_SetConfig+0x98e>
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b676:	d204      	bcs.n	800b682 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b67e:	60da      	str	r2, [r3, #12]
 800b680:	e17f      	b.n	800b982 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b688:	e17b      	b.n	800b982 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b692:	f040 80bd 	bne.w	800b810 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800b696:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	dc48      	bgt.n	800b730 <UART_SetConfig+0xa3c>
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	db7b      	blt.n	800b79a <UART_SetConfig+0xaa6>
 800b6a2:	2b20      	cmp	r3, #32
 800b6a4:	d879      	bhi.n	800b79a <UART_SetConfig+0xaa6>
 800b6a6:	a201      	add	r2, pc, #4	; (adr r2, 800b6ac <UART_SetConfig+0x9b8>)
 800b6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ac:	0800b737 	.word	0x0800b737
 800b6b0:	0800b73f 	.word	0x0800b73f
 800b6b4:	0800b79b 	.word	0x0800b79b
 800b6b8:	0800b79b 	.word	0x0800b79b
 800b6bc:	0800b747 	.word	0x0800b747
 800b6c0:	0800b79b 	.word	0x0800b79b
 800b6c4:	0800b79b 	.word	0x0800b79b
 800b6c8:	0800b79b 	.word	0x0800b79b
 800b6cc:	0800b757 	.word	0x0800b757
 800b6d0:	0800b79b 	.word	0x0800b79b
 800b6d4:	0800b79b 	.word	0x0800b79b
 800b6d8:	0800b79b 	.word	0x0800b79b
 800b6dc:	0800b79b 	.word	0x0800b79b
 800b6e0:	0800b79b 	.word	0x0800b79b
 800b6e4:	0800b79b 	.word	0x0800b79b
 800b6e8:	0800b79b 	.word	0x0800b79b
 800b6ec:	0800b767 	.word	0x0800b767
 800b6f0:	0800b79b 	.word	0x0800b79b
 800b6f4:	0800b79b 	.word	0x0800b79b
 800b6f8:	0800b79b 	.word	0x0800b79b
 800b6fc:	0800b79b 	.word	0x0800b79b
 800b700:	0800b79b 	.word	0x0800b79b
 800b704:	0800b79b 	.word	0x0800b79b
 800b708:	0800b79b 	.word	0x0800b79b
 800b70c:	0800b79b 	.word	0x0800b79b
 800b710:	0800b79b 	.word	0x0800b79b
 800b714:	0800b79b 	.word	0x0800b79b
 800b718:	0800b79b 	.word	0x0800b79b
 800b71c:	0800b79b 	.word	0x0800b79b
 800b720:	0800b79b 	.word	0x0800b79b
 800b724:	0800b79b 	.word	0x0800b79b
 800b728:	0800b79b 	.word	0x0800b79b
 800b72c:	0800b78d 	.word	0x0800b78d
 800b730:	2b40      	cmp	r3, #64	; 0x40
 800b732:	d02e      	beq.n	800b792 <UART_SetConfig+0xa9e>
 800b734:	e031      	b.n	800b79a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b736:	f7fa fe53 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 800b73a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b73c:	e033      	b.n	800b7a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b73e:	f7fa fe65 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 800b742:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b744:	e02f      	b.n	800b7a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b746:	f107 0314 	add.w	r3, r7, #20
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fc f9c0 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b754:	e027      	b.n	800b7a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b756:	f107 0308 	add.w	r3, r7, #8
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fc fb0c 	bl	8007d78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b764:	e01f      	b.n	800b7a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b766:	4b6e      	ldr	r3, [pc, #440]	; (800b920 <UART_SetConfig+0xc2c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0320 	and.w	r3, r3, #32
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d009      	beq.n	800b786 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b772:	4b6b      	ldr	r3, [pc, #428]	; (800b920 <UART_SetConfig+0xc2c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	08db      	lsrs	r3, r3, #3
 800b778:	f003 0303 	and.w	r3, r3, #3
 800b77c:	4a69      	ldr	r2, [pc, #420]	; (800b924 <UART_SetConfig+0xc30>)
 800b77e:	fa22 f303 	lsr.w	r3, r2, r3
 800b782:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b784:	e00f      	b.n	800b7a6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800b786:	4b67      	ldr	r3, [pc, #412]	; (800b924 <UART_SetConfig+0xc30>)
 800b788:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b78a:	e00c      	b.n	800b7a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b78c:	4b66      	ldr	r3, [pc, #408]	; (800b928 <UART_SetConfig+0xc34>)
 800b78e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b790:	e009      	b.n	800b7a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b798:	e005      	b.n	800b7a6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800b79a:	2300      	movs	r3, #0
 800b79c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b7a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 80ea 	beq.w	800b982 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	4a5a      	ldr	r2, [pc, #360]	; (800b91c <UART_SetConfig+0xc28>)
 800b7b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7c0:	005a      	lsls	r2, r3, #1
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	085b      	lsrs	r3, r3, #1
 800b7c8:	441a      	add	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	2b0f      	cmp	r3, #15
 800b7d8:	d916      	bls.n	800b808 <UART_SetConfig+0xb14>
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e0:	d212      	bcs.n	800b808 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	f023 030f 	bic.w	r3, r3, #15
 800b7ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	085b      	lsrs	r3, r3, #1
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	f003 0307 	and.w	r3, r3, #7
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b804:	60da      	str	r2, [r3, #12]
 800b806:	e0bc      	b.n	800b982 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b80e:	e0b8      	b.n	800b982 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b814:	2b20      	cmp	r3, #32
 800b816:	dc4b      	bgt.n	800b8b0 <UART_SetConfig+0xbbc>
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f2c0 8087 	blt.w	800b92c <UART_SetConfig+0xc38>
 800b81e:	2b20      	cmp	r3, #32
 800b820:	f200 8084 	bhi.w	800b92c <UART_SetConfig+0xc38>
 800b824:	a201      	add	r2, pc, #4	; (adr r2, 800b82c <UART_SetConfig+0xb38>)
 800b826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82a:	bf00      	nop
 800b82c:	0800b8b7 	.word	0x0800b8b7
 800b830:	0800b8bf 	.word	0x0800b8bf
 800b834:	0800b92d 	.word	0x0800b92d
 800b838:	0800b92d 	.word	0x0800b92d
 800b83c:	0800b8c7 	.word	0x0800b8c7
 800b840:	0800b92d 	.word	0x0800b92d
 800b844:	0800b92d 	.word	0x0800b92d
 800b848:	0800b92d 	.word	0x0800b92d
 800b84c:	0800b8d7 	.word	0x0800b8d7
 800b850:	0800b92d 	.word	0x0800b92d
 800b854:	0800b92d 	.word	0x0800b92d
 800b858:	0800b92d 	.word	0x0800b92d
 800b85c:	0800b92d 	.word	0x0800b92d
 800b860:	0800b92d 	.word	0x0800b92d
 800b864:	0800b92d 	.word	0x0800b92d
 800b868:	0800b92d 	.word	0x0800b92d
 800b86c:	0800b8e7 	.word	0x0800b8e7
 800b870:	0800b92d 	.word	0x0800b92d
 800b874:	0800b92d 	.word	0x0800b92d
 800b878:	0800b92d 	.word	0x0800b92d
 800b87c:	0800b92d 	.word	0x0800b92d
 800b880:	0800b92d 	.word	0x0800b92d
 800b884:	0800b92d 	.word	0x0800b92d
 800b888:	0800b92d 	.word	0x0800b92d
 800b88c:	0800b92d 	.word	0x0800b92d
 800b890:	0800b92d 	.word	0x0800b92d
 800b894:	0800b92d 	.word	0x0800b92d
 800b898:	0800b92d 	.word	0x0800b92d
 800b89c:	0800b92d 	.word	0x0800b92d
 800b8a0:	0800b92d 	.word	0x0800b92d
 800b8a4:	0800b92d 	.word	0x0800b92d
 800b8a8:	0800b92d 	.word	0x0800b92d
 800b8ac:	0800b90d 	.word	0x0800b90d
 800b8b0:	2b40      	cmp	r3, #64	; 0x40
 800b8b2:	d02e      	beq.n	800b912 <UART_SetConfig+0xc1e>
 800b8b4:	e03a      	b.n	800b92c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8b6:	f7fa fd93 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 800b8ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8bc:	e03c      	b.n	800b938 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8be:	f7fa fda5 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 800b8c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8c4:	e038      	b.n	800b938 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8c6:	f107 0314 	add.w	r3, r7, #20
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fc f900 	bl	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8d4:	e030      	b.n	800b938 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8d6:	f107 0308 	add.w	r3, r7, #8
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fc fa4c 	bl	8007d78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8e4:	e028      	b.n	800b938 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8e6:	4b0e      	ldr	r3, [pc, #56]	; (800b920 <UART_SetConfig+0xc2c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 0320 	and.w	r3, r3, #32
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d009      	beq.n	800b906 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8f2:	4b0b      	ldr	r3, [pc, #44]	; (800b920 <UART_SetConfig+0xc2c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	08db      	lsrs	r3, r3, #3
 800b8f8:	f003 0303 	and.w	r3, r3, #3
 800b8fc:	4a09      	ldr	r2, [pc, #36]	; (800b924 <UART_SetConfig+0xc30>)
 800b8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b902:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b904:	e018      	b.n	800b938 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800b906:	4b07      	ldr	r3, [pc, #28]	; (800b924 <UART_SetConfig+0xc30>)
 800b908:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b90a:	e015      	b.n	800b938 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b90c:	4b06      	ldr	r3, [pc, #24]	; (800b928 <UART_SetConfig+0xc34>)
 800b90e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b910:	e012      	b.n	800b938 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b918:	e00e      	b.n	800b938 <UART_SetConfig+0xc44>
 800b91a:	bf00      	nop
 800b91c:	0800c028 	.word	0x0800c028
 800b920:	58024400 	.word	0x58024400
 800b924:	03d09000 	.word	0x03d09000
 800b928:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b92c:	2300      	movs	r3, #0
 800b92e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b936:	bf00      	nop
    }

    if (pclk != 0U)
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d021      	beq.n	800b982 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b942:	4a1a      	ldr	r2, [pc, #104]	; (800b9ac <UART_SetConfig+0xcb8>)
 800b944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b948:	461a      	mov	r2, r3
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	085b      	lsrs	r3, r3, #1
 800b956:	441a      	add	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b960:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	2b0f      	cmp	r3, #15
 800b966:	d909      	bls.n	800b97c <UART_SetConfig+0xc88>
 800b968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b96e:	d205      	bcs.n	800b97c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	b29a      	uxth	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	60da      	str	r2, [r3, #12]
 800b97a:	e002      	b.n	800b982 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b99e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3738      	adds	r7, #56	; 0x38
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0800c028 	.word	0x0800c028

0800b9b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00a      	beq.n	800b9da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9de:	f003 0302 	and.w	r3, r3, #2
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	430a      	orrs	r2, r1
 800b9fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00a      	beq.n	800ba1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00a      	beq.n	800ba40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba44:	f003 0310 	and.w	r3, r3, #16
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00a      	beq.n	800ba62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba66:	f003 0320 	and.w	r3, r3, #32
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00a      	beq.n	800ba84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	430a      	orrs	r2, r1
 800ba82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d01a      	beq.n	800bac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baae:	d10a      	bne.n	800bac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	605a      	str	r2, [r3, #4]
  }
}
 800bae8:	bf00      	nop
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af02      	add	r7, sp, #8
 800bafa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb04:	f7f7 f964 	bl	8002dd0 <HAL_GetTick>
 800bb08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 0308 	and.w	r3, r3, #8
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	d10e      	bne.n	800bb36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f82f 	bl	800bb8a <UART_WaitOnFlagUntilTimeout>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb32:	2303      	movs	r3, #3
 800bb34:	e025      	b.n	800bb82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 0304 	and.w	r3, r3, #4
 800bb40:	2b04      	cmp	r3, #4
 800bb42:	d10e      	bne.n	800bb62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f819 	bl	800bb8a <UART_WaitOnFlagUntilTimeout>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e00f      	b.n	800bb82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2220      	movs	r2, #32
 800bb66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2220      	movs	r2, #32
 800bb6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b09c      	sub	sp, #112	; 0x70
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	603b      	str	r3, [r7, #0]
 800bb96:	4613      	mov	r3, r2
 800bb98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb9a:	e0a9      	b.n	800bcf0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba2:	f000 80a5 	beq.w	800bcf0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bba6:	f7f7 f913 	bl	8002dd0 <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d302      	bcc.n	800bbbc <UART_WaitOnFlagUntilTimeout+0x32>
 800bbb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d140      	bne.n	800bc3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc4:	e853 3f00 	ldrex	r3, [r3]
 800bbc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bbd0:	667b      	str	r3, [r7, #100]	; 0x64
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bbe2:	e841 2300 	strex	r3, r2, [r1]
 800bbe6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bbe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1e6      	bne.n	800bbbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf8:	e853 3f00 	ldrex	r3, [r3]
 800bbfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc00:	f023 0301 	bic.w	r3, r3, #1
 800bc04:	663b      	str	r3, [r7, #96]	; 0x60
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc0e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bc10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc16:	e841 2300 	strex	r3, r2, [r1]
 800bc1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1e5      	bne.n	800bbee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2220      	movs	r2, #32
 800bc26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	e069      	b.n	800bd12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d051      	beq.n	800bcf0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc5a:	d149      	bne.n	800bcf0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	461a      	mov	r2, r3
 800bc82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc84:	637b      	str	r3, [r7, #52]	; 0x34
 800bc86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc8c:	e841 2300 	strex	r3, r2, [r1]
 800bc90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1e6      	bne.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3308      	adds	r3, #8
 800bc9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	e853 3f00 	ldrex	r3, [r3]
 800bca6:	613b      	str	r3, [r7, #16]
   return(result);
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	f023 0301 	bic.w	r3, r3, #1
 800bcae:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bcb8:	623a      	str	r2, [r7, #32]
 800bcba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbc:	69f9      	ldr	r1, [r7, #28]
 800bcbe:	6a3a      	ldr	r2, [r7, #32]
 800bcc0:	e841 2300 	strex	r3, r2, [r1]
 800bcc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1e5      	bne.n	800bc98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2220      	movs	r2, #32
 800bcd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e010      	b.n	800bd12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	69da      	ldr	r2, [r3, #28]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	bf0c      	ite	eq
 800bd00:	2301      	moveq	r3, #1
 800bd02:	2300      	movne	r3, #0
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	461a      	mov	r2, r3
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	f43f af46 	beq.w	800bb9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3770      	adds	r7, #112	; 0x70
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b085      	sub	sp, #20
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d101      	bne.n	800bd30 <HAL_UARTEx_DisableFifoMode+0x16>
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	e027      	b.n	800bd80 <HAL_UARTEx_DisableFifoMode+0x66>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2224      	movs	r2, #36	; 0x24
 800bd3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f022 0201 	bic.w	r2, r2, #1
 800bd56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bd5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2220      	movs	r2, #32
 800bd72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3714      	adds	r7, #20
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d101      	bne.n	800bda4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bda0:	2302      	movs	r3, #2
 800bda2:	e02d      	b.n	800be00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2224      	movs	r2, #36	; 0x24
 800bdb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f022 0201 	bic.w	r2, r2, #1
 800bdca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	430a      	orrs	r2, r1
 800bdde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 f84f 	bl	800be84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2220      	movs	r2, #32
 800bdf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d101      	bne.n	800be20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be1c:	2302      	movs	r3, #2
 800be1e:	e02d      	b.n	800be7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2224      	movs	r2, #36	; 0x24
 800be2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f022 0201 	bic.w	r2, r2, #1
 800be46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	430a      	orrs	r2, r1
 800be5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f811 	bl	800be84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be90:	2b00      	cmp	r3, #0
 800be92:	d108      	bne.n	800bea6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2201      	movs	r2, #1
 800be98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bea4:	e031      	b.n	800bf0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bea6:	2310      	movs	r3, #16
 800bea8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800beaa:	2310      	movs	r3, #16
 800beac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	0e5b      	lsrs	r3, r3, #25
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	f003 0307 	and.w	r3, r3, #7
 800bebc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	0f5b      	lsrs	r3, r3, #29
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	f003 0307 	and.w	r3, r3, #7
 800becc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bece:	7bbb      	ldrb	r3, [r7, #14]
 800bed0:	7b3a      	ldrb	r2, [r7, #12]
 800bed2:	4911      	ldr	r1, [pc, #68]	; (800bf18 <UARTEx_SetNbDataToProcess+0x94>)
 800bed4:	5c8a      	ldrb	r2, [r1, r2]
 800bed6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800beda:	7b3a      	ldrb	r2, [r7, #12]
 800bedc:	490f      	ldr	r1, [pc, #60]	; (800bf1c <UARTEx_SetNbDataToProcess+0x98>)
 800bede:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bee0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	7b7a      	ldrb	r2, [r7, #13]
 800bef0:	4909      	ldr	r1, [pc, #36]	; (800bf18 <UARTEx_SetNbDataToProcess+0x94>)
 800bef2:	5c8a      	ldrb	r2, [r1, r2]
 800bef4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bef8:	7b7a      	ldrb	r2, [r7, #13]
 800befa:	4908      	ldr	r1, [pc, #32]	; (800bf1c <UARTEx_SetNbDataToProcess+0x98>)
 800befc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800befe:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bf0a:	bf00      	nop
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	0800c040 	.word	0x0800c040
 800bf1c:	0800c048 	.word	0x0800c048

0800bf20 <__libc_init_array>:
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	4d0d      	ldr	r5, [pc, #52]	; (800bf58 <__libc_init_array+0x38>)
 800bf24:	4c0d      	ldr	r4, [pc, #52]	; (800bf5c <__libc_init_array+0x3c>)
 800bf26:	1b64      	subs	r4, r4, r5
 800bf28:	10a4      	asrs	r4, r4, #2
 800bf2a:	2600      	movs	r6, #0
 800bf2c:	42a6      	cmp	r6, r4
 800bf2e:	d109      	bne.n	800bf44 <__libc_init_array+0x24>
 800bf30:	4d0b      	ldr	r5, [pc, #44]	; (800bf60 <__libc_init_array+0x40>)
 800bf32:	4c0c      	ldr	r4, [pc, #48]	; (800bf64 <__libc_init_array+0x44>)
 800bf34:	f000 f82e 	bl	800bf94 <_init>
 800bf38:	1b64      	subs	r4, r4, r5
 800bf3a:	10a4      	asrs	r4, r4, #2
 800bf3c:	2600      	movs	r6, #0
 800bf3e:	42a6      	cmp	r6, r4
 800bf40:	d105      	bne.n	800bf4e <__libc_init_array+0x2e>
 800bf42:	bd70      	pop	{r4, r5, r6, pc}
 800bf44:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf48:	4798      	blx	r3
 800bf4a:	3601      	adds	r6, #1
 800bf4c:	e7ee      	b.n	800bf2c <__libc_init_array+0xc>
 800bf4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf52:	4798      	blx	r3
 800bf54:	3601      	adds	r6, #1
 800bf56:	e7f2      	b.n	800bf3e <__libc_init_array+0x1e>
 800bf58:	0800c058 	.word	0x0800c058
 800bf5c:	0800c058 	.word	0x0800c058
 800bf60:	0800c058 	.word	0x0800c058
 800bf64:	0800c05c 	.word	0x0800c05c

0800bf68 <memcpy>:
 800bf68:	440a      	add	r2, r1
 800bf6a:	4291      	cmp	r1, r2
 800bf6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf70:	d100      	bne.n	800bf74 <memcpy+0xc>
 800bf72:	4770      	bx	lr
 800bf74:	b510      	push	{r4, lr}
 800bf76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf7e:	4291      	cmp	r1, r2
 800bf80:	d1f9      	bne.n	800bf76 <memcpy+0xe>
 800bf82:	bd10      	pop	{r4, pc}

0800bf84 <memset>:
 800bf84:	4402      	add	r2, r0
 800bf86:	4603      	mov	r3, r0
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d100      	bne.n	800bf8e <memset+0xa>
 800bf8c:	4770      	bx	lr
 800bf8e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf92:	e7f9      	b.n	800bf88 <memset+0x4>

0800bf94 <_init>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	bf00      	nop
 800bf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9a:	bc08      	pop	{r3}
 800bf9c:	469e      	mov	lr, r3
 800bf9e:	4770      	bx	lr

0800bfa0 <_fini>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr
