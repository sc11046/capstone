
FDCAN_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000558c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080058ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000168  24000010  080058bc  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000178  080058bc  00020178  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d64e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d71  00000000  00000000  0003d68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001060  00000000  00000000  00040400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000f58  00000000  00000000  00041460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003092b  00000000  00000000  000423b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012980  00000000  00000000  00072ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00141560  00000000  00000000  00085663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001c6bc3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000045bc  00000000  00000000  001c6c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005820 	.word	0x08005820

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005820 	.word	0x08005820

080002ec <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002f2:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 80002f4:	4a3d      	ldr	r2, [pc, #244]	; (80003ec <MX_FDCAN1_Init+0x100>)
 80002f6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80002f8:	4b3b      	ldr	r3, [pc, #236]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 80002fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002fe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000306:	4b38      	ldr	r3, [pc, #224]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000308:	2201      	movs	r2, #1
 800030a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800030e:	2200      	movs	r2, #0
 8000310:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000312:	4b35      	ldr	r3, [pc, #212]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000314:	2200      	movs	r2, #0
 8000316:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000318:	4b33      	ldr	r3, [pc, #204]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800031a:	2201      	movs	r2, #1
 800031c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000320:	2201      	movs	r2, #1
 8000322:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000324:	4b30      	ldr	r3, [pc, #192]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000326:	2205      	movs	r2, #5
 8000328:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800032a:	4b2f      	ldr	r3, [pc, #188]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800032c:	2202      	movs	r2, #2
 800032e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000330:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000332:	2201      	movs	r2, #1
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000336:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000338:	2204      	movs	r2, #4
 800033a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800033c:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800033e:	2205      	movs	r2, #5
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000342:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000344:	2204      	movs	r2, #4
 8000346:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800034a:	2200      	movs	r2, #0
 800034c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800034e:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000350:	2201      	movs	r2, #1
 8000352:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000356:	2200      	movs	r2, #0
 8000358:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800035a:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800035c:	2201      	movs	r2, #1
 800035e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000360:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000362:	2204      	movs	r2, #4
 8000364:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000366:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000368:	2200      	movs	r2, #0
 800036a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800036e:	2204      	movs	r2, #4
 8000370:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000374:	2201      	movs	r2, #1
 8000376:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800037a:	2204      	movs	r2, #4
 800037c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000380:	2200      	movs	r2, #0
 8000382:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000386:	2200      	movs	r2, #0
 8000388:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800038c:	2200      	movs	r2, #0
 800038e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000392:	2200      	movs	r2, #0
 8000394:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 8000398:	2204      	movs	r2, #4
 800039a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800039c:	4812      	ldr	r0, [pc, #72]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 800039e:	f000 fe0d 	bl	8000fbc <HAL_FDCAN_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 80003a8:	f000 fa42 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID; //IdType ?? ?ëúÏ§? ID ?òê?äî ?ôï?û• IDÎ•? ?Ç¨?ö©?ïò?äîÏß? ?ó¨Î∂?Î•? ?†ï?ùò?ï©?ãà?ã§ .
 80003ac:	2300      	movs	r3, #0
 80003ae:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;//Filterindex ?äî ?ó¨?ü¨ Í∞úÏùò ?ïÑ?Ñ∞Î•? Íµ¨ÏÑ±?ïò?äî Í≤ΩÏö∞?óê ?Ç¨?ö©?ê©?ãà?ã§. 1Í∞úÏùò ?ïÑ?Ñ∞Îß? ?Ç¨?ö©?ïòÍ≥? ?ûàÍ∏? ?ïåÎ¨∏Ïóê 0?úºÎ°? ?Ñ§?†ï?ï©?ãà?ã§.
 80003b0:	2300      	movs	r3, #0
 80003b2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;//FilterType ?? ?ö∞Î¶¨Í? ?Ç¨?ö©?ïò?äî ?ïÑ?Ñ∞ ?ú†?òï?ûÖ?ãà?ã§. ?ó¨Í∏∞ÏÑú?äî MASK ?ïÑ?Ñ∞Î•? ?Ç¨?ö©?ïòÍ≥? ?ûà?äµ?ãà?ã§
 80003b4:	2302      	movs	r3, #2
 80003b6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;//FilterConfig ?äî ?ïÑ?Ñ∞Î•? ?ÜµÍ≥ºÌïò?äî Î©îÏãúÏß??óê ?àò?ñâ?ï¥?ïº ?ïò?äî ?ûë?óÖ?ùÑ Í≤∞Ï†ï?ï©?ãà?ã§. RX FIFO 0?úºÎ°? Î≥¥ÎÇ¥?èÑÎ°? ?Ñ§?†ï?êò?ñ¥ ?ûà?äµ?ãà?ã§.
 80003b8:	2301      	movs	r3, #1
 80003ba:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;//?ù¥ MASK ?ïÑ?Ñ∞?ùò Í≤ΩÏö∞ ID1( 0x22 )?ù¥ IDÎ°? ?ûë?èô?ïòÍ≥? ID2( 0x22 )Í∞? ÎßàÏä§?Å¨ ÎπÑÌä∏Î°? ?ûë?èô?ï©?ãà?ã§.
 80003bc:	2311      	movs	r3, #17
 80003be:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7ff;
 80003c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80003c4:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;//RxBufferIndex ?äî FIFO ???ã† RX BufferÎ•? ?Ç¨?ö©?ï† Í≤ΩÏö∞ ?Ç¨?ö©?ïòÎØ?Î°? 0?úºÎ°? ?Ñ§?†ï?ïú?ã§.
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	4619      	mov	r1, r3
 80003ce:	4806      	ldr	r0, [pc, #24]	; (80003e8 <MX_FDCAN1_Init+0xfc>)
 80003d0:	f000 ffd6 	bl	8001380 <HAL_FDCAN_ConfigFilter>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_FDCAN1_Init+0xf2>
  {
    /* Filter configuration Error */
    Error_Handler();
 80003da:	f000 fa29 	bl	8000830 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	3720      	adds	r7, #32
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2400002c 	.word	0x2400002c
 80003ec:	4000a000 	.word	0x4000a000

080003f0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b0b8      	sub	sp, #224	; 0xe0
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000408:	f107 0314 	add.w	r3, r7, #20
 800040c:	22b8      	movs	r2, #184	; 0xb8
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f005 f9fd 	bl	8005810 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a29      	ldr	r2, [pc, #164]	; (80004c0 <HAL_FDCAN_MspInit+0xd0>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d14b      	bne.n	80004b8 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000424:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000426:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800042a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	4618      	mov	r0, r3
 8000434:	f003 f816 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 800043e:	f000 f9f7 	bl	8000830 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000442:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <HAL_FDCAN_MspInit+0xd4>)
 8000444:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <HAL_FDCAN_MspInit+0xd4>)
 800044a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800044e:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000452:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <HAL_FDCAN_MspInit+0xd4>)
 8000454:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800045c:	613b      	str	r3, [r7, #16]
 800045e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000460:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <HAL_FDCAN_MspInit+0xd4>)
 8000462:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000466:	4a17      	ldr	r2, [pc, #92]	; (80004c4 <HAL_FDCAN_MspInit+0xd4>)
 8000468:	f043 0308 	orr.w	r3, r3, #8
 800046c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000470:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <HAL_FDCAN_MspInit+0xd4>)
 8000472:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000476:	f003 0308 	and.w	r3, r3, #8
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800047e:	2303      	movs	r3, #3
 8000480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000484:	2302      	movs	r3, #2
 8000486:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2300      	movs	r3, #0
 8000492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000496:	2309      	movs	r3, #9
 8000498:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800049c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80004a0:	4619      	mov	r1, r3
 80004a2:	4809      	ldr	r0, [pc, #36]	; (80004c8 <HAL_FDCAN_MspInit+0xd8>)
 80004a4:	f001 fe86 	bl	80021b4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	2013      	movs	r0, #19
 80004ae:	f000 fd50 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80004b2:	2013      	movs	r0, #19
 80004b4:	f000 fd67 	bl	8000f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80004b8:	bf00      	nop
 80004ba:	37e0      	adds	r7, #224	; 0xe0
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	4000a000 	.word	0x4000a000
 80004c4:	58024400 	.word	0x58024400
 80004c8:	58020c00 	.word	0x58020c00

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e2:	4b3b      	ldr	r3, [pc, #236]	; (80005d0 <MX_GPIO_Init+0x104>)
 80004e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004e8:	4a39      	ldr	r2, [pc, #228]	; (80005d0 <MX_GPIO_Init+0x104>)
 80004ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80004f2:	4b37      	ldr	r3, [pc, #220]	; (80005d0 <MX_GPIO_Init+0x104>)
 80004f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000500:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000502:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000506:	4a32      	ldr	r2, [pc, #200]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000508:	f043 0320 	orr.w	r3, r3, #32
 800050c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000512:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000516:	f003 0320 	and.w	r3, r3, #32
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000520:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000524:	4a2a      	ldr	r2, [pc, #168]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800052e:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000530:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000534:	f003 0310 	and.w	r3, r3, #16
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_GPIO_Init+0x104>)
 800053e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000542:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000544:	f043 0308 	orr.w	r3, r3, #8
 8000548:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <MX_GPIO_Init+0x104>)
 800054e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000552:	f003 0308 	and.w	r3, r3, #8
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <MX_GPIO_Init+0x104>)
 800055c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000562:	f043 0302 	orr.w	r3, r3, #2
 8000566:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_GPIO_Init+0x104>)
 800056c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000570:	f003 0302 	and.w	r3, r3, #2
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800057e:	4815      	ldr	r0, [pc, #84]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000580:	f001 ffc8 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <MX_GPIO_Init+0x10c>)
 800058a:	f001 ffc3 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800058e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <MX_GPIO_Init+0x108>)
 80005a8:	f001 fe04 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005ac:	2320      	movs	r3, #32
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_GPIO_Init+0x10c>)
 80005c4:	f001 fdf6 	bl	80021b4 <HAL_GPIO_Init>

}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	58024400 	.word	0x58024400
 80005d4:	58021400 	.word	0x58021400
 80005d8:	58020400 	.word	0x58020400

080005dc <HAL_FDCAN_RxFifo0Callback>:
uint8_t TxData_Node2_To_Node3[8];
uint8_t RxData_From_Node3[8];

// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d014      	beq.n	800061a <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData_From_Node3) != HAL_OK)
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80005f2:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 ff64 	bl	80014c4 <HAL_FDCAN_GetRxMessage>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000602:	f000 f915 	bl	8000830 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f001 f8c8 	bl	80017a0 <HAL_FDCAN_ActivateNotification>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000616:	f000 f90b 	bl	8000830 <Error_Handler>
    }
  }
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	24000120 	.word	0x24000120
 8000628:	240000cc 	.word	0x240000cc

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fafe 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f88e 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ff48 	bl	80004cc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800063c:	f7ff fe56 	bl	80002ec <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000640:	f000 f9c2 	bl	80009c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	483e      	ldr	r0, [pc, #248]	; (8000740 <main+0x114>)
 8000648:	f004 f834 	bl	80046b4 <HAL_TIM_PWM_Start>
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 800064c:	483d      	ldr	r0, [pc, #244]	; (8000744 <main+0x118>)
 800064e:	f000 ff0d 	bl	800146c <HAL_FDCAN_Start>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <main+0x30>
    {
     Error_Handler();
 8000658:	f000 f8ea 	bl	8000830 <Error_Handler>
    }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	4838      	ldr	r0, [pc, #224]	; (8000744 <main+0x118>)
 8000662:	f001 f89d 	bl	80017a0 <HAL_FDCAN_ActivateNotification>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <main+0x44>
    {
      /* Notification Error */
      Error_Handler();
 800066c:	f000 f8e0 	bl	8000830 <Error_Handler>
    }
	TxHeader1.Identifier = 0x22;
 8000670:	4b35      	ldr	r3, [pc, #212]	; (8000748 <main+0x11c>)
 8000672:	2222      	movs	r2, #34	; 0x22
 8000674:	601a      	str	r2, [r3, #0]
	TxHeader1.IdType = FDCAN_STANDARD_ID;
 8000676:	4b34      	ldr	r3, [pc, #208]	; (8000748 <main+0x11c>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
	TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 800067c:	4b32      	ldr	r3, [pc, #200]	; (8000748 <main+0x11c>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
	TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <main+0x11c>)
 8000684:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000688:	60da      	str	r2, [r3, #12]
	TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800068a:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <main+0x11c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
	TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8000690:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <main+0x11c>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
	TxHeader1.FDFormat = FDCAN_FD_CAN;
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <main+0x11c>)
 8000698:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800069c:	619a      	str	r2, [r3, #24]
	TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <main+0x11c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
	TxHeader1.MessageMarker = 0;
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <main+0x11c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCR1=80;
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <main+0x114>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2250      	movs	r2, #80	; 0x50
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (RxData_From_Node3[0]=='L')
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <main+0x120>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b4c      	cmp	r3, #76	; 0x4c
 80006b8:	d11e      	bne.n	80006f8 <main+0xcc>

	  {
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c0:	4823      	ldr	r0, [pc, #140]	; (8000750 <main+0x124>)
 80006c2:	f001 ff27 	bl	8002514 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006cc:	4820      	ldr	r0, [pc, #128]	; (8000750 <main+0x124>)
 80006ce:	f001 ff21 	bl	8002514 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80006d2:	20c8      	movs	r0, #200	; 0xc8
 80006d4:	f000 fb3e 	bl	8000d54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006de:	481c      	ldr	r0, [pc, #112]	; (8000750 <main+0x124>)
 80006e0:	f001 ff18 	bl	8002514 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ea:	4819      	ldr	r0, [pc, #100]	; (8000750 <main+0x124>)
 80006ec:	f001 ff12 	bl	8002514 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80006f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f4:	f000 fb2e 	bl	8000d54 <HAL_Delay>
	  }
	  if (RxData_From_Node3[0]=='R'){
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <main+0x120>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b52      	cmp	r3, #82	; 0x52
 80006fe:	d1d8      	bne.n	80006b2 <main+0x86>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000706:	4812      	ldr	r0, [pc, #72]	; (8000750 <main+0x124>)
 8000708:	f001 ff04 	bl	8002514 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000712:	480f      	ldr	r0, [pc, #60]	; (8000750 <main+0x124>)
 8000714:	f001 fefe 	bl	8002514 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000718:	20c8      	movs	r0, #200	; 0xc8
 800071a:	f000 fb1b 	bl	8000d54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	480a      	ldr	r0, [pc, #40]	; (8000750 <main+0x124>)
 8000726:	f001 fef5 	bl	8002514 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <main+0x124>)
 8000732:	f001 feef 	bl	8002514 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073a:	f000 fb0b 	bl	8000d54 <HAL_Delay>
	  if (RxData_From_Node3[0]=='L')
 800073e:	e7b8      	b.n	80006b2 <main+0x86>
 8000740:	24000128 	.word	0x24000128
 8000744:	2400002c 	.word	0x2400002c
 8000748:	240000f4 	.word	0x240000f4
 800074c:	24000120 	.word	0x24000120
 8000750:	58021400 	.word	0x58021400

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b09c      	sub	sp, #112	; 0x70
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	224c      	movs	r2, #76	; 0x4c
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f005 f854 	bl	8005810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2220      	movs	r2, #32
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f005 f84e 	bl	8005810 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000774:	2004      	movs	r0, #4
 8000776:	f001 fee7 	bl	8002548 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <SystemClock_Config+0xd8>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a2a      	ldr	r2, [pc, #168]	; (800082c <SystemClock_Config+0xd8>)
 8000784:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xd8>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000796:	bf00      	nop
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <SystemClock_Config+0xd8>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a4:	d1f8      	bne.n	8000798 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a6:	2302      	movs	r3, #2
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2340      	movs	r3, #64	; 0x40
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b6:	2300      	movs	r3, #0
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007be:	2308      	movs	r3, #8
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 80007c6:	2320      	movs	r3, #32
 80007c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ce:	230c      	movs	r3, #12
 80007d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 ff0c 	bl	80025fc <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ea:	f000 f821 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	233f      	movs	r3, #63	; 0x3f
 80007f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800080c:	2340      	movs	r3, #64	; 0x40
 800080e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2102      	movs	r1, #2
 8000814:	4618      	mov	r0, r3
 8000816:	f002 faf5 	bl	8002e04 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000820:	f000 f806 	bl	8000830 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3770      	adds	r7, #112	; 0x70
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	58024800 	.word	0x58024800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_MspInit+0x30>)
 8000844:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000848:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x30>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x30>)
 8000854:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	58024400 	.word	0x58024400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 fa2a 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <FDCAN1_IT0_IRQHandler+0x10>)
 80008ca:	f000 ffe3 	bl	8001894 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2400002c 	.word	0x2400002c

080008d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008dc:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <SystemInit+0xd0>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e2:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <SystemInit+0xd0>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ec:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <SystemInit+0xd4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d807      	bhi.n	8000908 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <SystemInit+0xd4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f023 030f 	bic.w	r3, r3, #15
 8000900:	4a2a      	ldr	r2, [pc, #168]	; (80009ac <SystemInit+0xd4>)
 8000902:	f043 0303 	orr.w	r3, r3, #3
 8000906:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <SystemInit+0xd8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a28      	ldr	r2, [pc, #160]	; (80009b0 <SystemInit+0xd8>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <SystemInit+0xd8>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <SystemInit+0xd8>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4924      	ldr	r1, [pc, #144]	; (80009b0 <SystemInit+0xd8>)
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <SystemInit+0xdc>)
 8000922:	4013      	ands	r3, r2
 8000924:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <SystemInit+0xd4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 030c 	and.w	r3, r3, #12
 800092e:	2b00      	cmp	r3, #0
 8000930:	d007      	beq.n	8000942 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <SystemInit+0xd4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f023 030f 	bic.w	r3, r3, #15
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <SystemInit+0xd4>)
 800093c:	f043 0303 	orr.w	r3, r3, #3
 8000940:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <SystemInit+0xd8>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <SystemInit+0xd8>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <SystemInit+0xd8>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <SystemInit+0xd8>)
 8000956:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <SystemInit+0xe0>)
 8000958:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <SystemInit+0xd8>)
 800095c:	4a17      	ldr	r2, [pc, #92]	; (80009bc <SystemInit+0xe4>)
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <SystemInit+0xd8>)
 8000962:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <SystemInit+0xe8>)
 8000964:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <SystemInit+0xd8>)
 8000968:	2200      	movs	r2, #0
 800096a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <SystemInit+0xd8>)
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <SystemInit+0xe8>)
 8000970:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <SystemInit+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <SystemInit+0xd8>)
 800097a:	4a11      	ldr	r2, [pc, #68]	; (80009c0 <SystemInit+0xe8>)
 800097c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <SystemInit+0xd8>)
 8000980:	2200      	movs	r2, #0
 8000982:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <SystemInit+0xd8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <SystemInit+0xd8>)
 800098a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800098e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <SystemInit+0xd8>)
 8000992:	2200      	movs	r2, #0
 8000994:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <SystemInit+0xec>)
 8000998:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800099c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00
 80009ac:	52002000 	.word	0x52002000
 80009b0:	58024400 	.word	0x58024400
 80009b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80009b8:	02020200 	.word	0x02020200
 80009bc:	01ff0000 	.word	0x01ff0000
 80009c0:	01010280 	.word	0x01010280
 80009c4:	52004000 	.word	0x52004000

080009c8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09c      	sub	sp, #112	; 0x70
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2234      	movs	r2, #52	; 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 ff04 	bl	8005810 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a08:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a0a:	4a44      	ldr	r2, [pc, #272]	; (8000b1c <MX_TIM1_Init+0x154>)
 8000a0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000a0e:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a10:	223f      	movs	r2, #63	; 0x3f
 8000a12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a1c:	2264      	movs	r2, #100	; 0x64
 8000a1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a26:	4b3c      	ldr	r3, [pc, #240]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a32:	4839      	ldr	r0, [pc, #228]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a34:	f003 fd86 	bl	8004544 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a3e:	f7ff fef7 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a46:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4832      	ldr	r0, [pc, #200]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a50:	f004 f852 	bl	8004af8 <HAL_TIM_ConfigClockSource>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a5a:	f7ff fee9 	bl	8000830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a5e:	482e      	ldr	r0, [pc, #184]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a60:	f003 fdc7 	bl	80045f2 <HAL_TIM_PWM_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a6a:	f7ff fee1 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000a82:	f004 fd65 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000a8c:	f7ff fed0 	bl	8000830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a90:	2360      	movs	r3, #96	; 0x60
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8000a94:	2332      	movs	r3, #50	; 0x32
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4818      	ldr	r0, [pc, #96]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000ab6:	f003 ff0b 	bl	80048d0 <HAL_TIM_PWM_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000ac0:	f7ff feb6 	bl	8000830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000afa:	f004 fdb7 	bl	800566c <HAL_TIMEx_ConfigBreakDeadTime>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b04:	f7ff fe94 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_TIM1_Init+0x150>)
 8000b0a:	f000 f82b 	bl	8000b64 <HAL_TIM_MspPostInit>

}
 8000b0e:	bf00      	nop
 8000b10:	3770      	adds	r7, #112	; 0x70
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	24000128 	.word	0x24000128
 8000b1c:	40010000 	.word	0x40010000

08000b20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10e      	bne.n	8000b50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_TIM_Base_MspInit+0x40>)
 8000b34:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <HAL_TIM_Base_MspInit+0x40>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_TIM_Base_MspInit+0x40>)
 8000b44:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40010000 	.word	0x40010000
 8000b60:	58024400 	.word	0x58024400

08000b64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <HAL_TIM_MspPostInit+0x6c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d11f      	bne.n	8000bc6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_TIM_MspPostInit+0x70>)
 8000b88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8c:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <HAL_TIM_MspPostInit+0x70>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_TIM_MspPostInit+0x70>)
 8000b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9c:	f003 0310 	and.w	r3, r3, #16
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_TIM_MspPostInit+0x74>)
 8000bc2:	f001 faf7 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40010000 	.word	0x40010000
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	58021000 	.word	0x58021000

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be0:	f7ff fe7a 	bl	80008d8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f004 fdcf 	bl	80057ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fd0d 	bl	800062c <main>
  bx  lr
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c1c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c20:	080058ac 	.word	0x080058ac
  ldr r2, =_sbss
 8000c24:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c28:	24000178 	.word	0x24000178

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 f980 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000c3c:	f002 fa98 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8000c40:	4602      	mov	r2, r0
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_Init+0x68>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	4913      	ldr	r1, [pc, #76]	; (8000c9c <HAL_Init+0x6c>)
 8000c4e:	5ccb      	ldrb	r3, [r1, r3]
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	fa22 f303 	lsr.w	r3, r2, r3
 8000c58:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_Init+0x68>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_Init+0x6c>)
 8000c64:	5cd3      	ldrb	r3, [r2, r3]
 8000c66:	f003 031f 	and.w	r3, r3, #31
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_Init+0x70>)
 8000c72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <HAL_Init+0x74>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f000 f814 	bl	8000ca8 <HAL_InitTick>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e002      	b.n	8000c90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8a:	f7ff fdd7 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	08005884 	.word	0x08005884
 8000ca0:	24000004 	.word	0x24000004
 8000ca4:	24000000 	.word	0x24000000

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_InitTick+0x60>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e021      	b.n	8000d00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_InitTick+0x64>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_InitTick+0x60>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f965 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f92f 	bl	8000f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x68>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2400000c 	.word	0x2400000c
 8000d0c:	24000000 	.word	0x24000000
 8000d10:	24000008 	.word	0x24000008

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	2400000c 	.word	0x2400000c
 8000d38:	24000174 	.word	0x24000174

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	24000174 	.word	0x24000174

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2400000c 	.word	0x2400000c

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <__NVIC_SetPriorityGrouping+0x40>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <__NVIC_SetPriorityGrouping+0x40>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	05fa0000 	.word	0x05fa0000

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	; (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff29 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff40 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff90 	bl	8000e90 <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5f 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff33 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa4 	bl	8000ef8 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b098      	sub	sp, #96	; 0x60
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000fc4:	4a84      	ldr	r2, [pc, #528]	; (80011d8 <HAL_FDCAN_Init+0x21c>)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4611      	mov	r1, r2
 8000fcc:	224c      	movs	r2, #76	; 0x4c
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 fc10 	bl	80057f4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e1ca      	b.n	8001374 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a7e      	ldr	r2, [pc, #504]	; (80011dc <HAL_FDCAN_Init+0x220>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d106      	bne.n	8000ff6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff f9f0 	bl	80003f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0210 	bic.w	r2, r2, #16
 800101e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001020:	f7ff fe8c 	bl	8000d3c <HAL_GetTick>
 8001024:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001026:	e014      	b.n	8001052 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001028:	f7ff fe88 	bl	8000d3c <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b0a      	cmp	r3, #10
 8001034:	d90d      	bls.n	8001052 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800103c:	f043 0201 	orr.w	r2, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2203      	movs	r2, #3
 800104a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e190      	b.n	8001374 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b08      	cmp	r3, #8
 800105e:	d0e3      	beq.n	8001028 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001070:	f7ff fe64 	bl	8000d3c <HAL_GetTick>
 8001074:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001076:	e014      	b.n	80010a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001078:	f7ff fe60 	bl	8000d3c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b0a      	cmp	r3, #10
 8001084:	d90d      	bls.n	80010a2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e168      	b.n	8001374 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0e3      	beq.n	8001078 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0202 	orr.w	r2, r2, #2
 80010be:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7c1b      	ldrb	r3, [r3, #16]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d108      	bne.n	80010da <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	699a      	ldr	r2, [r3, #24]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010d6:	619a      	str	r2, [r3, #24]
 80010d8:	e007      	b.n	80010ea <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699a      	ldr	r2, [r3, #24]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7c5b      	ldrb	r3, [r3, #17]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d108      	bne.n	8001104 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001100:	619a      	str	r2, [r3, #24]
 8001102:	e007      	b.n	8001114 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	699a      	ldr	r2, [r3, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001112:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7c9b      	ldrb	r3, [r3, #18]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d108      	bne.n	800112e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	699a      	ldr	r2, [r3, #24]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800112a:	619a      	str	r2, [r3, #24]
 800112c:	e007      	b.n	800113e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	699a      	ldr	r2, [r3, #24]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800113c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	699a      	ldr	r2, [r3, #24]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001162:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0210 	bic.w	r2, r2, #16
 8001172:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d108      	bne.n	800118e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0204 	orr.w	r2, r2, #4
 800118a:	619a      	str	r2, [r3, #24]
 800118c:	e030      	b.n	80011f0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d02c      	beq.n	80011f0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d020      	beq.n	80011e0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ac:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0210 	orr.w	r2, r2, #16
 80011bc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d114      	bne.n	80011f0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699a      	ldr	r2, [r3, #24]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 0220 	orr.w	r2, r2, #32
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	e00b      	b.n	80011f0 <HAL_FDCAN_Init+0x234>
 80011d8:	08005838 	.word	0x08005838
 80011dc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0220 	orr.w	r2, r2, #32
 80011ee:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001200:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001208:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	3b01      	subs	r3, #1
 8001212:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001218:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800121a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001224:	d115      	bne.n	8001252 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	3b01      	subs	r3, #1
 8001232:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001234:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	3b01      	subs	r3, #1
 800123c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800123e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	3b01      	subs	r3, #1
 8001248:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800124e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001250:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00a      	beq.n	8001270 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001278:	4413      	add	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d012      	beq.n	80012a4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001286:	f023 0107 	bic.w	r1, r3, #7
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001294:	4413      	add	r3, r2
 8001296:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d012      	beq.n	80012d2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80012b4:	f023 0107 	bic.w	r1, r3, #7
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012c2:	4413      	add	r3, r2
 80012c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d013      	beq.n	8001302 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80012e2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012f0:	4413      	add	r3, r2
 80012f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80012f6:	011a      	lsls	r2, r3, #4
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001306:	2b00      	cmp	r3, #0
 8001308:	d013      	beq.n	8001332 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001312:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001320:	4413      	add	r3, r2
 8001322:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001326:	021a      	lsls	r2, r3, #8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a11      	ldr	r2, [pc, #68]	; (800137c <HAL_FDCAN_Init+0x3c0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d107      	bne.n	800134c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f022 0203 	bic.w	r2, r2, #3
 800134a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fd9f 	bl	8001ea8 <FDCAN_CalcultateRamBlockAddresses>
 800136a:	4603      	mov	r3, r0
 800136c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001370:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001374:	4618      	mov	r0, r3
 8001376:	3760      	adds	r7, #96	; 0x60
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	4000a000 	.word	0x4000a000

08001380 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001390:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d002      	beq.n	800139e <HAL_FDCAN_ConfigFilter+0x1e>
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d157      	bne.n	800144e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d12b      	bne.n	80013fe <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b07      	cmp	r3, #7
 80013ac:	d10d      	bne.n	80013ca <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80013ba:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80013c0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80013c2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e00e      	b.n	80013e8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013d6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80013de:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013e4:	4313      	orrs	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e025      	b.n	800144a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	075a      	lsls	r2, r3, #29
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b07      	cmp	r3, #7
 8001412:	d103      	bne.n	800141c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	e006      	b.n	800142a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	079a      	lsls	r2, r3, #30
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	3304      	adds	r3, #4
 8001442:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e008      	b.n	8001460 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001454:	f043 0202 	orr.w	r2, r3, #2
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
  }
}
 8001460:	4618      	mov	r0, r3
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d111      	bne.n	80014a4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e008      	b.n	80014b6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014aa:	f043 0204 	orr.w	r2, r3, #4
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
  }
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b08b      	sub	sp, #44	; 0x2c
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014dc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80014de:	7efb      	ldrb	r3, [r7, #27]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	f040 814b 	bne.w	800177c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b40      	cmp	r3, #64	; 0x40
 80014ea:	d14d      	bne.n	8001588 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001502:	f043 0220 	orr.w	r2, r3, #32
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e13e      	b.n	800178e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001526:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e12c      	b.n	800178e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800153c:	0e1b      	lsrs	r3, r3, #24
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b01      	cmp	r3, #1
 8001544:	d10b      	bne.n	800155e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800154e:	0fdb      	lsrs	r3, r3, #31
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001558:	d101      	bne.n	800155e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800155a:	2301      	movs	r3, #1
 800155c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	69f9      	ldr	r1, [r7, #28]
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	e069      	b.n	800165c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b41      	cmp	r3, #65	; 0x41
 800158c:	d14d      	bne.n	800162a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001596:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015a4:	f043 0220 	orr.w	r2, r3, #32
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0ed      	b.n	800178e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0db      	b.n	800178e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015de:	0e1b      	lsrs	r3, r3, #24
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d10b      	bne.n	8001600 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015f0:	0fdb      	lsrs	r3, r3, #31
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015fa:	d101      	bne.n	8001600 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	4413      	add	r3, r2
 8001612:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	69f9      	ldr	r1, [r7, #28]
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
 8001628:	e018      	b.n	800165c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	429a      	cmp	r2, r3
 8001632:	d309      	bcc.n	8001648 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800163a:	f043 0220 	orr.w	r2, r3, #32
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0a2      	b.n	800178e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d107      	bne.n	8001680 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0c9b      	lsrs	r3, r3, #18
 8001676:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e005      	b.n	800168c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	3304      	adds	r3, #4
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0e1b      	lsrs	r3, r3, #24
 80016de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0fda      	lsrs	r2, r3, #31
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	3304      	adds	r3, #4
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
 80016fe:	e00a      	b.n	8001716 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	441a      	add	r2, r3
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	440b      	add	r3, r1
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	3301      	adds	r3, #1
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	0c1b      	lsrs	r3, r3, #16
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_FDCAN_GetRxMessage+0x2d8>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	461a      	mov	r2, r3
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	4293      	cmp	r3, r2
 8001726:	d3eb      	bcc.n	8001700 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d105      	bne.n	800173a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001738:	e01e      	b.n	8001778 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b41      	cmp	r3, #65	; 0x41
 800173e:	d105      	bne.n	800174c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800174a:	e015      	b.n	8001778 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b1f      	cmp	r3, #31
 8001750:	d808      	bhi.n	8001764 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2101      	movs	r1, #1
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001762:	e009      	b.n	8001778 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f003 021f 	and.w	r2, r3, #31
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e008      	b.n	800178e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001782:	f043 0208 	orr.w	r2, r3, #8
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
  }
}
 800178e:	4618      	mov	r0, r3
 8001790:	372c      	adds	r7, #44	; 0x2c
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	08005894 	.word	0x08005894

080017a0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017b2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d002      	beq.n	80017c0 <HAL_FDCAN_ActivateNotification+0x20>
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d155      	bne.n	800186c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d108      	bne.n	80017e0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0201 	orr.w	r2, r2, #1
 80017dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80017de:	e014      	b.n	800180a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	4013      	ands	r3, r2
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d108      	bne.n	8001802 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0202 	orr.w	r2, r2, #2
 80017fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001800:	e003      	b.n	800180a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2203      	movs	r2, #3
 8001808:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001810:	2b00      	cmp	r3, #0
 8001812:	d009      	beq.n	8001828 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	430a      	orrs	r2, r1
 8001824:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	430a      	orrs	r2, r1
 8001842:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_FDCAN_ActivateNotification+0xec>)
 8001850:	4013      	ands	r3, r2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	430b      	orrs	r3, r1
 8001858:	6553      	str	r3, [r2, #84]	; 0x54
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_FDCAN_ActivateNotification+0xf0>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	0f9b      	lsrs	r3, r3, #30
 8001862:	490b      	ldr	r1, [pc, #44]	; (8001890 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001864:	4313      	orrs	r3, r2
 8001866:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	e008      	b.n	800187e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001872:	f043 0202 	orr.w	r2, r3, #2
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
  }
}
 800187e:	4618      	mov	r0, r3
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	3fcfffff 	.word	0x3fcfffff
 8001890:	4000a800 	.word	0x4000a800

08001894 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b092      	sub	sp, #72	; 0x48
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800189c:	4b90      	ldr	r3, [pc, #576]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	079b      	lsls	r3, r3, #30
 80018a2:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80018a4:	4b8e      	ldr	r3, [pc, #568]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	079b      	lsls	r3, r3, #30
 80018aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018ac:	4013      	ands	r3, r2
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80018ba:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018c4:	4013      	ands	r3, r2
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018dc:	4013      	ands	r3, r2
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f4:	4013      	ands	r3, r2
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fe:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800190c:	4013      	ands	r3, r2
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001916:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001924:	4013      	ands	r3, r2
 8001926:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d011      	beq.n	800195a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00a      	beq.n	800195a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194c:	651a      	str	r2, [r3, #80]	; 0x50
 800194e:	4b64      	ldr	r3, [pc, #400]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fa5a 	bl	8001e0e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01e      	beq.n	80019a6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001972:	2b00      	cmp	r3, #0
 8001974:	d017      	beq.n	80019a6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198a:	4013      	ands	r3, r2
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001996:	651a      	str	r2, [r3, #80]	; 0x50
 8001998:	4b51      	ldr	r3, [pc, #324]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800199e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fa0b 	bl	8001dbc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80019a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00d      	beq.n	80019c8 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019b2:	4b4c      	ldr	r3, [pc, #304]	; (8001ae4 <HAL_FDCAN_IRQHandler+0x250>)
 80019b4:	400b      	ands	r3, r1
 80019b6:	6513      	str	r3, [r2, #80]	; 0x50
 80019b8:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 80019ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019bc:	0f9b      	lsrs	r3, r3, #30
 80019be:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80019c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f9c4 	bl	8001d50 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00d      	beq.n	80019ea <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_FDCAN_IRQHandler+0x250>)
 80019d6:	400b      	ands	r3, r1
 80019d8:	6513      	str	r3, [r2, #80]	; 0x50
 80019da:	4a41      	ldr	r2, [pc, #260]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 80019dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019de:	0f9b      	lsrs	r3, r3, #30
 80019e0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80019e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f9be 	bl	8001d66 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80019ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00d      	beq.n	8001a0c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_FDCAN_IRQHandler+0x250>)
 80019f8:	400b      	ands	r3, r1
 80019fa:	6513      	str	r3, [r2, #80]	; 0x50
 80019fc:	4a38      	ldr	r2, [pc, #224]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 80019fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a00:	0f9b      	lsrs	r3, r3, #30
 8001a02:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7fe fde8 	bl	80005dc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_FDCAN_IRQHandler+0x250>)
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	6513      	str	r3, [r2, #80]	; 0x50
 8001a1e:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 8001a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a22:	0f9b      	lsrs	r3, r3, #30
 8001a24:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f9a7 	bl	8001d7c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d011      	beq.n	8001a60 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00a      	beq.n	8001a60 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a52:	651a      	str	r2, [r3, #80]	; 0x50
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f999 	bl	8001d92 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d01e      	beq.n	8001aac <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d017      	beq.n	8001aac <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a90:	4013      	ands	r3, r2
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f97d 	bl	8001da6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d016      	beq.n	8001ae8 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00f      	beq.n	8001ae8 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ad0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad2:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_FDCAN_IRQHandler+0x24c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f97a 	bl	8001dd2 <HAL_FDCAN_RxBufferNewMessageCallback>
 8001ade:	e003      	b.n	8001ae8 <HAL_FDCAN_IRQHandler+0x254>
 8001ae0:	4000a800 	.word	0x4000a800
 8001ae4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d011      	beq.n	8001b1a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b0c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b0e:	4b8d      	ldr	r3, [pc, #564]	; (8001d44 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f966 	bl	8001de6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d011      	beq.n	8001b4c <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b3e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b40:	4b80      	ldr	r3, [pc, #512]	; (8001d44 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f957 	bl	8001dfa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00f      	beq.n	8001b88 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b70:	651a      	str	r2, [r3, #80]	; 0x50
 8001b72:	4b74      	ldr	r3, [pc, #464]	; (8001d44 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b94:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001b96:	400b      	ands	r3, r1
 8001b98:	6513      	str	r3, [r2, #80]	; 0x50
 8001b9a:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9e:	0f9b      	lsrs	r3, r3, #30
 8001ba0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f946 	bl	8001e36 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d011      	beq.n	8001bd4 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bb6:	4b64      	ldr	r3, [pc, #400]	; (8001d48 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001bb8:	400b      	ands	r3, r1
 8001bba:	6513      	str	r3, [r2, #80]	; 0x50
 8001bbc:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc0:	0f9b      	lsrs	r3, r3, #30
 8001bc2:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a5c      	ldr	r2, [pc, #368]	; (8001d4c <HAL_FDCAN_IRQHandler+0x4b8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f040 80a6 	bne.w	8001d2c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 809e 	beq.w	8001d2c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c04:	4013      	ands	r3, r2
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c12:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	6a3a      	ldr	r2, [r7, #32]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c2a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001c42:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001c5a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c74:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8e7 	bl	8001e4c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	6a3a      	ldr	r2, [r7, #32]
 8001c8a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001c8c:	6a39      	ldr	r1, [r7, #32]
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8e7 	bl	8001e62 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01b      	beq.n	8001cda <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d014      	beq.n	8001cda <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	0c1b      	lsrs	r3, r3, #16
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc6:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2240      	movs	r2, #64	; 0x40
 8001cce:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	6939      	ldr	r1, [r7, #16]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8cf 	bl	8001e78 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001ce8:	69f9      	ldr	r1, [r7, #28]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8d0 	bl	8001e90 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f873 	bl	8001e22 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3748      	adds	r7, #72	; 0x48
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	4000a800 	.word	0x4000a800
 8001d48:	3fcfffff 	.word	0x3fcfffff
 8001d4c:	4000a000 	.word	0x4000a000

08001d50 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ebe:	4ba7      	ldr	r3, [pc, #668]	; (800215c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	0091      	lsls	r1, r2, #2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	430b      	orrs	r3, r1
 8001ecc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ed8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001efe:	4b97      	ldr	r3, [pc, #604]	; (800215c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	0091      	lsls	r1, r2, #2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f18:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	4413      	add	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001f40:	4b86      	ldr	r3, [pc, #536]	; (800215c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	0091      	lsls	r1, r2, #2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001f5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f88:	4b74      	ldr	r3, [pc, #464]	; (800215c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	0091      	lsls	r1, r2, #2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001fa2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001faa:	041a      	lsls	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001fd0:	4b62      	ldr	r3, [pc, #392]	; (800215c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	0091      	lsls	r1, r2, #2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ffc:	4b57      	ldr	r3, [pc, #348]	; (800215c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	0091      	lsls	r1, r2, #2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	430b      	orrs	r3, r1
 800200a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002016:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	041a      	lsls	r2, r3, #16
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	4413      	add	r3, r2
 8002034:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002040:	4013      	ands	r3, r2
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	0091      	lsls	r1, r2, #2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	430b      	orrs	r3, r1
 800204c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002058:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002074:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207c:	061a      	lsls	r2, r3, #24
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800208e:	4413      	add	r3, r2
 8002090:	009a      	lsls	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	441a      	add	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	441a      	add	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	441a      	add	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	441a      	add	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	441a      	add	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	441a      	add	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d915      	bls.n	8002184 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002158:	e006      	b.n	8002168 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800215a:	bf00      	nop
 800215c:	ffff0003 	.word	0xffff0003
 8002160:	10002b00 	.word	0x10002b00
 8002164:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800216e:	f043 0220 	orr.w	r2, r3, #32
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2203      	movs	r2, #3
 800217c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e010      	b.n	80021a6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e005      	b.n	8002198 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d3f3      	bcc.n	800218c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021c2:	4b89      	ldr	r3, [pc, #548]	; (80023e8 <HAL_GPIO_Init+0x234>)
 80021c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021c6:	e194      	b.n	80024f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8186 	beq.w	80024ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d005      	beq.n	80021f8 <HAL_GPIO_Init+0x44>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d130      	bne.n	800225a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222e:	2201      	movs	r2, #1
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0201 	and.w	r2, r3, #1
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b03      	cmp	r3, #3
 8002264:	d017      	beq.n	8002296 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d123      	bne.n	80022ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	69b9      	ldr	r1, [r7, #24]
 80022e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0203 	and.w	r2, r3, #3
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80e0 	beq.w	80024ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232c:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <HAL_GPIO_Init+0x238>)
 800232e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002332:	4a2e      	ldr	r2, [pc, #184]	; (80023ec <HAL_GPIO_Init+0x238>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_GPIO_Init+0x238>)
 800233e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234a:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_GPIO_Init+0x23c>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <HAL_GPIO_Init+0x240>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d052      	beq.n	800241c <HAL_GPIO_Init+0x268>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <HAL_GPIO_Init+0x244>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d031      	beq.n	80023e2 <HAL_GPIO_Init+0x22e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1e      	ldr	r2, [pc, #120]	; (80023fc <HAL_GPIO_Init+0x248>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x22a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_GPIO_Init+0x24c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x226>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_GPIO_Init+0x250>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x222>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <HAL_GPIO_Init+0x254>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x21e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_GPIO_Init+0x258>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x21a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_GPIO_Init+0x25c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x216>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a18      	ldr	r2, [pc, #96]	; (8002414 <HAL_GPIO_Init+0x260>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x212>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a17      	ldr	r2, [pc, #92]	; (8002418 <HAL_GPIO_Init+0x264>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x20e>
 80023be:	2309      	movs	r3, #9
 80023c0:	e02d      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023c2:	230a      	movs	r3, #10
 80023c4:	e02b      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023c6:	2308      	movs	r3, #8
 80023c8:	e029      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e027      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e025      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e023      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e021      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023da:	2303      	movs	r3, #3
 80023dc:	e01f      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023de:	2302      	movs	r3, #2
 80023e0:	e01d      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e01b      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023e6:	bf00      	nop
 80023e8:	58000080 	.word	0x58000080
 80023ec:	58024400 	.word	0x58024400
 80023f0:	58000400 	.word	0x58000400
 80023f4:	58020000 	.word	0x58020000
 80023f8:	58020400 	.word	0x58020400
 80023fc:	58020800 	.word	0x58020800
 8002400:	58020c00 	.word	0x58020c00
 8002404:	58021000 	.word	0x58021000
 8002408:	58021400 	.word	0x58021400
 800240c:	58021800 	.word	0x58021800
 8002410:	58021c00 	.word	0x58021c00
 8002414:	58022000 	.word	0x58022000
 8002418:	58022400 	.word	0x58022400
 800241c:	2300      	movs	r3, #0
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	f002 0203 	and.w	r2, r2, #3
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	4093      	lsls	r3, r2
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242e:	4938      	ldr	r1, [pc, #224]	; (8002510 <HAL_GPIO_Init+0x35c>)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f47f ae63 	bne.w	80021c8 <HAL_GPIO_Init+0x14>
  }
}
 8002502:	bf00      	nop
 8002504:	bf00      	nop
 8002506:	3724      	adds	r7, #36	; 0x24
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	58000400 	.word	0x58000400

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002530:	e003      	b.n	800253a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	041a      	lsls	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	2b06      	cmp	r3, #6
 800255a:	d00a      	beq.n	8002572 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800255c:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d001      	beq.n	800256e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e040      	b.n	80025f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e03e      	b.n	80025f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002572:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800257a:	491f      	ldr	r1, [pc, #124]	; (80025f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4313      	orrs	r3, r2
 8002580:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002582:	f7fe fbdb 	bl	8000d3c <HAL_GetTick>
 8002586:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002588:	e009      	b.n	800259e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800258a:	f7fe fbd7 	bl	8000d3c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002598:	d901      	bls.n	800259e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e028      	b.n	80025f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025aa:	d1ee      	bne.n	800258a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b1e      	cmp	r3, #30
 80025b0:	d008      	beq.n	80025c4 <HAL_PWREx_ConfigSupply+0x7c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b2e      	cmp	r3, #46	; 0x2e
 80025b6:	d005      	beq.n	80025c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b1d      	cmp	r3, #29
 80025bc:	d002      	beq.n	80025c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b2d      	cmp	r3, #45	; 0x2d
 80025c2:	d114      	bne.n	80025ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80025c4:	f7fe fbba 	bl	8000d3c <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025ca:	e009      	b.n	80025e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025cc:	f7fe fbb6 	bl	8000d3c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025da:	d901      	bls.n	80025e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e007      	b.n	80025f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d1ee      	bne.n	80025cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	58024800 	.word	0x58024800

080025fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	; 0x30
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e3f3      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80b3 	beq.w	8002782 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261c:	4b9e      	ldr	r3, [pc, #632]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002626:	4b9c      	ldr	r3, [pc, #624]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	2b10      	cmp	r3, #16
 8002630:	d007      	beq.n	8002642 <HAL_RCC_OscConfig+0x46>
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	2b18      	cmp	r3, #24
 8002636:	d112      	bne.n	800265e <HAL_RCC_OscConfig+0x62>
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d10d      	bne.n	800265e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002642:	4b95      	ldr	r3, [pc, #596]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8098 	beq.w	8002780 <HAL_RCC_OscConfig+0x184>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 8093 	bne.w	8002780 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e3cb      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x7a>
 8002668:	4b8b      	ldr	r3, [pc, #556]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a8a      	ldr	r2, [pc, #552]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800266e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e058      	b.n	8002728 <HAL_RCC_OscConfig+0x12c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d112      	bne.n	80026a4 <HAL_RCC_OscConfig+0xa8>
 800267e:	4b86      	ldr	r3, [pc, #536]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a85      	ldr	r2, [pc, #532]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b83      	ldr	r3, [pc, #524]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a82      	ldr	r2, [pc, #520]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002690:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b80      	ldr	r3, [pc, #512]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7f      	ldr	r2, [pc, #508]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800269c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e041      	b.n	8002728 <HAL_RCC_OscConfig+0x12c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ac:	d112      	bne.n	80026d4 <HAL_RCC_OscConfig+0xd8>
 80026ae:	4b7a      	ldr	r3, [pc, #488]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a79      	ldr	r2, [pc, #484]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b77      	ldr	r3, [pc, #476]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a76      	ldr	r2, [pc, #472]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b74      	ldr	r3, [pc, #464]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a73      	ldr	r2, [pc, #460]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e029      	b.n	8002728 <HAL_RCC_OscConfig+0x12c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x108>
 80026de:	4b6e      	ldr	r3, [pc, #440]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6d      	ldr	r2, [pc, #436]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b6b      	ldr	r3, [pc, #428]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6a      	ldr	r2, [pc, #424]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b68      	ldr	r3, [pc, #416]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a67      	ldr	r2, [pc, #412]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e011      	b.n	8002728 <HAL_RCC_OscConfig+0x12c>
 8002704:	4b64      	ldr	r3, [pc, #400]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b61      	ldr	r3, [pc, #388]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a60      	ldr	r2, [pc, #384]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b5e      	ldr	r3, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5d      	ldr	r2, [pc, #372]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fb04 	bl	8000d3c <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe fb00 	bl	8000d3c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e355      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800274a:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x13c>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe faf0 	bl	8000d3c <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe faec 	bl	8000d3c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e341      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x164>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 808c 	beq.w	80028a8 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002798:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800279a:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1ba>
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	2b18      	cmp	r3, #24
 80027aa:	d137      	bne.n	800281c <HAL_RCC_OscConfig+0x220>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d132      	bne.n	800281c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b6:	4b38      	ldr	r3, [pc, #224]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x1d2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e313      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0219 	bic.w	r2, r3, #25
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	492f      	ldr	r1, [pc, #188]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027e0:	f7fe faac 	bl	8000d3c <HAL_GetTick>
 80027e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe faa8 	bl	8000d3c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e2fd      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	4920      	ldr	r1, [pc, #128]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281a:	e045      	b.n	80028a8 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d026      	beq.n	8002872 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 0219 	bic.w	r2, r3, #25
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4919      	ldr	r1, [pc, #100]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe fa81 	bl	8000d3c <HAL_GetTick>
 800283a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283e:	f7fe fa7d 	bl	8000d3c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e2d2      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	490b      	ldr	r1, [pc, #44]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
 8002870:	e01a      	b.n	80028a8 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe fa5d 	bl	8000d3c <HAL_GetTick>
 8002882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002886:	f7fe fa59 	bl	8000d3c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d903      	bls.n	800289c <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e2ae      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
 8002898:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800289c:	4b99      	ldr	r3, [pc, #612]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d06a      	beq.n	800298a <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b4:	4b93      	ldr	r3, [pc, #588]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028be:	4b91      	ldr	r3, [pc, #580]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d007      	beq.n	80028da <HAL_RCC_OscConfig+0x2de>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b18      	cmp	r3, #24
 80028ce:	d11b      	bne.n	8002908 <HAL_RCC_OscConfig+0x30c>
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d116      	bne.n	8002908 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028da:	4b8a      	ldr	r3, [pc, #552]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2f6>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b80      	cmp	r3, #128	; 0x80
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e281      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028f2:	4b84      	ldr	r3, [pc, #528]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	4980      	ldr	r1, [pc, #512]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002902:	4313      	orrs	r3, r2
 8002904:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002906:	e040      	b.n	800298a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d023      	beq.n	8002958 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002910:	4b7c      	ldr	r3, [pc, #496]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a7b      	ldr	r2, [pc, #492]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fa0e 	bl	8000d3c <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002924:	f7fe fa0a 	bl	8000d3c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e25f      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002936:	4b73      	ldr	r3, [pc, #460]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002942:	4b70      	ldr	r3, [pc, #448]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	061b      	lsls	r3, r3, #24
 8002950:	496c      	ldr	r1, [pc, #432]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002952:	4313      	orrs	r3, r2
 8002954:	60cb      	str	r3, [r1, #12]
 8002956:	e018      	b.n	800298a <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002958:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a69      	ldr	r2, [pc, #420]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 800295e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe f9ea 	bl	8000d3c <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800296c:	f7fe f9e6 	bl	8000d3c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e23b      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d036      	beq.n	8002a04 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d019      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299e:	4b59      	ldr	r3, [pc, #356]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	4a58      	ldr	r2, [pc, #352]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029aa:	f7fe f9c7 	bl	8000d3c <HAL_GetTick>
 80029ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b2:	f7fe f9c3 	bl	8000d3c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e218      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029c4:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80029c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3b6>
 80029d0:	e018      	b.n	8002a04 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80029d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d6:	4a4b      	ldr	r2, [pc, #300]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029de:	f7fe f9ad 	bl	8000d3c <HAL_GetTick>
 80029e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe f9a9 	bl	8000d3c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1fe      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f8:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 80029fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d036      	beq.n	8002a7e <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d019      	beq.n	8002a4c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a18:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a39      	ldr	r2, [pc, #228]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a24:	f7fe f98a 	bl	8000d3c <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a2c:	f7fe f986 	bl	8000d3c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1db      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a3e:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x430>
 8002a4a:	e018      	b.n	8002a7e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a58:	f7fe f970 	bl	8000d3c <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a60:	f7fe f96c 	bl	8000d3c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e1c1      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80af 	beq.w	8002bea <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_RCC_OscConfig+0x50c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x50c>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a98:	f7fe f950 	bl	8000d3c <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7fe f94c 	bl	8000d3c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1a1      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x50c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d106      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4d8>
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a0e      	ldr	r2, [pc, #56]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad2:	e05b      	b.n	8002b8c <HAL_RCC_OscConfig+0x590>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d117      	bne.n	8002b0c <HAL_RCC_OscConfig+0x510>
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a02      	ldr	r2, [pc, #8]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	e044      	b.n	8002b8c <HAL_RCC_OscConfig+0x590>
 8002b02:	bf00      	nop
 8002b04:	58024400 	.word	0x58024400
 8002b08:	58024800 	.word	0x58024800
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d112      	bne.n	8002b3a <HAL_RCC_OscConfig+0x53e>
 8002b14:	4b95      	ldr	r3, [pc, #596]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a94      	ldr	r2, [pc, #592]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	4b92      	ldr	r3, [pc, #584]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a91      	ldr	r2, [pc, #580]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	4b8f      	ldr	r3, [pc, #572]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a8e      	ldr	r2, [pc, #568]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	e028      	b.n	8002b8c <HAL_RCC_OscConfig+0x590>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b85      	cmp	r3, #133	; 0x85
 8002b40:	d112      	bne.n	8002b68 <HAL_RCC_OscConfig+0x56c>
 8002b42:	4b8a      	ldr	r3, [pc, #552]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a89      	ldr	r2, [pc, #548]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4e:	4b87      	ldr	r3, [pc, #540]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a86      	ldr	r2, [pc, #536]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	4b84      	ldr	r3, [pc, #528]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a83      	ldr	r2, [pc, #524]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	e011      	b.n	8002b8c <HAL_RCC_OscConfig+0x590>
 8002b68:	4b80      	ldr	r3, [pc, #512]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a7f      	ldr	r2, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	4b7d      	ldr	r3, [pc, #500]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a7c      	ldr	r2, [pc, #496]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	4b7a      	ldr	r3, [pc, #488]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a79      	ldr	r2, [pc, #484]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe f8d2 	bl	8000d3c <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe f8ce 	bl	8000d3c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e121      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bb2:	4b6e      	ldr	r3, [pc, #440]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ee      	beq.n	8002b9c <HAL_RCC_OscConfig+0x5a0>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe f8bc 	bl	8000d3c <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe f8b8 	bl	8000d3c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e10b      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bde:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8100 	beq.w	8002df4 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bf4:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bfc:	2b18      	cmp	r3, #24
 8002bfe:	f000 80bb 	beq.w	8002d78 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	f040 8095 	bne.w	8002d36 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0c:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe f890 	bl	8000d3c <HAL_GetTick>
 8002c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe f88c 	bl	8000d3c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0e1      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c32:	4b4e      	ldr	r3, [pc, #312]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3e:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c42:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_RCC_OscConfig+0x774>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	430a      	orrs	r2, r1
 8002c52:	4946      	ldr	r1, [pc, #280]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	628b      	str	r3, [r1, #40]	; 0x28
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	3b01      	subs	r3, #1
 8002c68:	025b      	lsls	r3, r3, #9
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	3b01      	subs	r3, #1
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c88:	4938      	ldr	r1, [pc, #224]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	4a36      	ldr	r2, [pc, #216]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c9a:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c9e:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_RCC_OscConfig+0x778>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ca6:	00d2      	lsls	r2, r2, #3
 8002ca8:	4930      	ldr	r1, [pc, #192]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cae:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	f023 020c 	bic.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	492c      	ldr	r1, [pc, #176]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	f023 0202 	bic.w	r2, r3, #2
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	4927      	ldr	r1, [pc, #156]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cd2:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe f815 	bl	8000d3c <HAL_GetTick>
 8002d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fe f811 	bl	8000d3c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e066      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d28:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x71a>
 8002d34:	e05e      	b.n	8002df4 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fd fffb 	bl	8000d3c <HAL_GetTick>
 8002d46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fd fff7 	bl	8000d3c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e04c      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x74e>
 8002d68:	e044      	b.n	8002df4 <HAL_RCC_OscConfig+0x7f8>
 8002d6a:	bf00      	nop
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	fffffc0c 	.word	0xfffffc0c
 8002d74:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_RCC_OscConfig+0x804>)
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_RCC_OscConfig+0x804>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d031      	beq.n	8002df0 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0203 	and.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d12a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d122      	bne.n	8002df0 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d11a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	0a5b      	lsrs	r3, r3, #9
 8002dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d111      	bne.n	8002df0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	0c1b      	lsrs	r3, r3, #16
 8002dd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	0e1b      	lsrs	r3, r3, #24
 8002de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3730      	adds	r7, #48	; 0x30
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400

08002e04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e19c      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b8a      	ldr	r3, [pc, #552]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d910      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b87      	ldr	r3, [pc, #540]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	4985      	ldr	r1, [pc, #532]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b83      	ldr	r3, [pc, #524]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e184      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	4b7b      	ldr	r3, [pc, #492]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d908      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e64:	4b78      	ldr	r3, [pc, #480]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	4975      	ldr	r1, [pc, #468]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	4b70      	ldr	r3, [pc, #448]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d908      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e92:	4b6d      	ldr	r3, [pc, #436]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	496a      	ldr	r1, [pc, #424]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	4b64      	ldr	r3, [pc, #400]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d908      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ec0:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	495e      	ldr	r1, [pc, #376]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d908      	bls.n	8002f00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002eee:	4b56      	ldr	r3, [pc, #344]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4953      	ldr	r1, [pc, #332]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d908      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f023 020f 	bic.w	r2, r3, #15
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4947      	ldr	r1, [pc, #284]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d055      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f3a:	4b43      	ldr	r3, [pc, #268]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	4940      	ldr	r1, [pc, #256]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f54:	4b3c      	ldr	r3, [pc, #240]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d121      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0f6      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f6c:	4b36      	ldr	r3, [pc, #216]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d115      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0ea      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0de      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f94:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0d6      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fa4:	4b28      	ldr	r3, [pc, #160]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f023 0207 	bic.w	r2, r3, #7
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4925      	ldr	r1, [pc, #148]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fd fec1 	bl	8000d3c <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbe:	f7fd febd 	bl	8000d3c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0be      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d1eb      	bne.n	8002fbe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d208      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f023 020f 	bic.w	r2, r3, #15
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	490e      	ldr	r1, [pc, #56]	; (8003048 <HAL_RCC_ClockConfig+0x244>)
 8003010:	4313      	orrs	r3, r2
 8003012:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d214      	bcs.n	800304c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 020f 	bic.w	r2, r3, #15
 800302a:	4906      	ldr	r1, [pc, #24]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCC_ClockConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e086      	b.n	8003152 <HAL_RCC_ClockConfig+0x34e>
 8003044:	52002000 	.word	0x52002000
 8003048:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003064:	429a      	cmp	r2, r3
 8003066:	d208      	bcs.n	800307a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003068:	4b3c      	ldr	r3, [pc, #240]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	4939      	ldr	r1, [pc, #228]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 8003076:	4313      	orrs	r3, r2
 8003078:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003092:	429a      	cmp	r2, r3
 8003094:	d208      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	492e      	ldr	r1, [pc, #184]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d208      	bcs.n	80030d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4922      	ldr	r1, [pc, #136]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d010      	beq.n	8003104 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d208      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4917      	ldr	r1, [pc, #92]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 8003100:	4313      	orrs	r3, r2
 8003102:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003104:	f000 f834 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	4912      	ldr	r1, [pc, #72]	; (8003160 <HAL_RCC_ClockConfig+0x35c>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCC_ClockConfig+0x358>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_RCC_ClockConfig+0x35c>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x360>)
 800313a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x364>)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x368>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fdae 	bl	8000ca8 <HAL_InitTick>
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	58024400 	.word	0x58024400
 8003160:	08005884 	.word	0x08005884
 8003164:	24000004 	.word	0x24000004
 8003168:	24000000 	.word	0x24000000
 800316c:	24000008 	.word	0x24000008

08003170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003176:	4bb3      	ldr	r3, [pc, #716]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800317e:	2b18      	cmp	r3, #24
 8003180:	f200 8155 	bhi.w	800342e <HAL_RCC_GetSysClockFreq+0x2be>
 8003184:	a201      	add	r2, pc, #4	; (adr r2, 800318c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	080031f1 	.word	0x080031f1
 8003190:	0800342f 	.word	0x0800342f
 8003194:	0800342f 	.word	0x0800342f
 8003198:	0800342f 	.word	0x0800342f
 800319c:	0800342f 	.word	0x0800342f
 80031a0:	0800342f 	.word	0x0800342f
 80031a4:	0800342f 	.word	0x0800342f
 80031a8:	0800342f 	.word	0x0800342f
 80031ac:	08003217 	.word	0x08003217
 80031b0:	0800342f 	.word	0x0800342f
 80031b4:	0800342f 	.word	0x0800342f
 80031b8:	0800342f 	.word	0x0800342f
 80031bc:	0800342f 	.word	0x0800342f
 80031c0:	0800342f 	.word	0x0800342f
 80031c4:	0800342f 	.word	0x0800342f
 80031c8:	0800342f 	.word	0x0800342f
 80031cc:	0800321d 	.word	0x0800321d
 80031d0:	0800342f 	.word	0x0800342f
 80031d4:	0800342f 	.word	0x0800342f
 80031d8:	0800342f 	.word	0x0800342f
 80031dc:	0800342f 	.word	0x0800342f
 80031e0:	0800342f 	.word	0x0800342f
 80031e4:	0800342f 	.word	0x0800342f
 80031e8:	0800342f 	.word	0x0800342f
 80031ec:	08003223 	.word	0x08003223
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031f0:	4b94      	ldr	r3, [pc, #592]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031fc:	4b91      	ldr	r3, [pc, #580]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	08db      	lsrs	r3, r3, #3
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	4a90      	ldr	r2, [pc, #576]	; (8003448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
 800320c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800320e:	e111      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003210:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003212:	61bb      	str	r3, [r7, #24]
    break;
 8003214:	e10e      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003216:	4b8d      	ldr	r3, [pc, #564]	; (800344c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003218:	61bb      	str	r3, [r7, #24]
    break;
 800321a:	e10b      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800321c:	4b8c      	ldr	r3, [pc, #560]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800321e:	61bb      	str	r3, [r7, #24]
    break;
 8003220:	e108      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800322c:	4b85      	ldr	r3, [pc, #532]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003236:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003238:	4b82      	ldr	r3, [pc, #520]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003242:	4b80      	ldr	r3, [pc, #512]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	08db      	lsrs	r3, r3, #3
 8003248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80e1 	beq.w	8003428 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b02      	cmp	r3, #2
 800326a:	f000 8083 	beq.w	8003374 <HAL_RCC_GetSysClockFreq+0x204>
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b02      	cmp	r3, #2
 8003272:	f200 80a1 	bhi.w	80033b8 <HAL_RCC_GetSysClockFreq+0x248>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x114>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d056      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003282:	e099      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003284:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d02d      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003290:	4b6c      	ldr	r3, [pc, #432]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	4a6b      	ldr	r2, [pc, #428]	; (8003448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ba:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80032ea:	e087      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003458 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800330e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003312:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800331a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800331e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800332e:	e065      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800345c <HAL_RCC_GetSysClockFreq+0x2ec>
 800333e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003342:	4b40      	ldr	r3, [pc, #256]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003352:	ed97 6a02 	vldr	s12, [r7, #8]
 8003356:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800335a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003372:	e043      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003460 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003386:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003396:	ed97 6a02 	vldr	s12, [r7, #8]
 800339a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800339e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033b6:	e021      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800345c <HAL_RCC_GetSysClockFreq+0x2ec>
 80033c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033da:	ed97 6a02 	vldr	s12, [r7, #8]
 80033de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	0a5b      	lsrs	r3, r3, #9
 8003402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003406:	3301      	adds	r3, #1
 8003408:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003414:	edd7 6a07 	vldr	s13, [r7, #28]
 8003418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003420:	ee17 3a90 	vmov	r3, s15
 8003424:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003426:	e005      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
    break;
 800342c:	e002      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003430:	61bb      	str	r3, [r7, #24]
    break;
 8003432:	bf00      	nop
  }

  return sysclockfreq;
 8003434:	69bb      	ldr	r3, [r7, #24]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	; 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	58024400 	.word	0x58024400
 8003448:	03d09000 	.word	0x03d09000
 800344c:	003d0900 	.word	0x003d0900
 8003450:	016e3600 	.word	0x016e3600
 8003454:	46000000 	.word	0x46000000
 8003458:	4c742400 	.word	0x4c742400
 800345c:	4a742400 	.word	0x4a742400
 8003460:	4bb71b00 	.word	0x4bb71b00

08003464 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800346c:	2300      	movs	r3, #0
 800346e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003470:	2300      	movs	r3, #0
 8003472:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d03f      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003488:	d02a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800348a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800348e:	d824      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003494:	d018      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800349a:	d81e      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a4:	d007      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034a6:	e018      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a8:	4ba6      	ldr	r3, [pc, #664]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	4aa5      	ldr	r2, [pc, #660]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034b4:	e015      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fedd 	bl	800427c <RCCEx_PLL2_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034c6:	e00c      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 ff86 	bl	80043e0 <RCCEx_PLL3_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034d8:	e003      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
      break;
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034e8:	4b96      	ldr	r3, [pc, #600]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f4:	4993      	ldr	r1, [pc, #588]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	650b      	str	r3, [r1, #80]	; 0x50
 80034fa:	e001      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d03d      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	2b04      	cmp	r3, #4
 8003512:	d826      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003531 	.word	0x08003531
 8003520:	0800353f 	.word	0x0800353f
 8003524:	08003551 	.word	0x08003551
 8003528:	08003569 	.word	0x08003569
 800352c:	08003569 	.word	0x08003569
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b84      	ldr	r3, [pc, #528]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a83      	ldr	r2, [pc, #524]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800353c:	e015      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fe99 	bl	800427c <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800354e:	e00c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3324      	adds	r3, #36	; 0x24
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f000 ff42 	bl	80043e0 <RCCEx_PLL3_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
      break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003570:	4b74      	ldr	r3, [pc, #464]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	f023 0207 	bic.w	r2, r3, #7
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	4971      	ldr	r1, [pc, #452]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	650b      	str	r3, [r1, #80]	; 0x50
 8003582:	e001      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003590:	2b00      	cmp	r3, #0
 8003592:	d04a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800359c:	d031      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800359e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80035a2:	d82b      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80035a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a8:	d02d      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d825      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80035b0:	2bc0      	cmp	r3, #192	; 0xc0
 80035b2:	d02a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035b4:	2bc0      	cmp	r3, #192	; 0xc0
 80035b6:	d821      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80035b8:	2b80      	cmp	r3, #128	; 0x80
 80035ba:	d016      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x186>
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d81d      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d007      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80035c8:	e018      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ca:	4b5e      	ldr	r3, [pc, #376]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	4a5d      	ldr	r2, [pc, #372]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80035d6:	e019      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fe4c 	bl	800427c <RCCEx_PLL2_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80035e8:	e010      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3324      	adds	r3, #36	; 0x24
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fef5 	bl	80043e0 <RCCEx_PLL3_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80035fa:	e007      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003600:	e004      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003602:	bf00      	nop
 8003604:	e002      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800360a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003612:	4b4c      	ldr	r3, [pc, #304]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003616:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	4949      	ldr	r1, [pc, #292]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003620:	4313      	orrs	r3, r2
 8003622:	650b      	str	r3, [r1, #80]	; 0x50
 8003624:	e001      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	2b00      	cmp	r3, #0
 8003634:	d04f      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800363e:	d036      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003640:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003644:	d830      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364a:	d032      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800364c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003650:	d82a      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003652:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003656:	d02e      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003658:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800365c:	d824      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d018      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d81e      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800366e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003672:	d007      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003674:	e018      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	4a32      	ldr	r2, [pc, #200]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800367c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003680:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003682:	e019      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fdf6 	bl	800427c <RCCEx_PLL2_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003694:	e010      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3324      	adds	r3, #36	; 0x24
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fe9f 	bl	80043e0 <RCCEx_PLL3_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80036a6:	e007      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
      break;
 80036ac:	e004      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80036b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	491e      	ldr	r1, [pc, #120]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	650b      	str	r3, [r1, #80]	; 0x50
 80036d0:	e001      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d034      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e6:	2b30      	cmp	r3, #48	; 0x30
 80036e8:	d01c      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80036ea:	2b30      	cmp	r3, #48	; 0x30
 80036ec:	d817      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d00c      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d813      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d10f      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003708:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800370a:	e00e      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fdb2 	bl	800427c <RCCEx_PLL2_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800371c:	e005      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
      break;
 8003722:	e002      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003734:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	4901      	ldr	r1, [pc, #4]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800373e:	4313      	orrs	r3, r2
 8003740:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003742:	e003      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d047      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003760:	d030      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003766:	d82a      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003768:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800376c:	d02c      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800376e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003772:	d824      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003778:	d018      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x348>
 800377a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377e:	d81e      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d007      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800378a:	e018      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378c:	4bb0      	ldr	r3, [pc, #704]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	4aaf      	ldr	r2, [pc, #700]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003798:	e017      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fd6b 	bl	800427c <RCCEx_PLL2_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037aa:	e00e      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3324      	adds	r3, #36	; 0x24
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fe14 	bl	80043e0 <RCCEx_PLL3_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037bc:	e005      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
      break;
 80037c2:	e002      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80037c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037d0:	4b9f      	ldr	r3, [pc, #636]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037dc:	499c      	ldr	r1, [pc, #624]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	650b      	str	r3, [r1, #80]	; 0x50
 80037e2:	e001      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d049      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d02e      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80037fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003802:	d828      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003808:	d02a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800380a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800380e:	d822      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003810:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003814:	d026      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003816:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800381a:	d81c      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800381c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003820:	d010      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003826:	d816      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01d      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003830:	d111      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3304      	adds	r3, #4
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fd1f 	bl	800427c <RCCEx_PLL2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003842:	e012      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3324      	adds	r3, #36	; 0x24
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fdc8 	bl	80043e0 <RCCEx_PLL3_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003854:	e009      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
      break;
 800385a:	e006      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800385c:	bf00      	nop
 800385e:	e004      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003860:	bf00      	nop
 8003862:	e002      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003870:	4b77      	ldr	r3, [pc, #476]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003874:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800387c:	4974      	ldr	r1, [pc, #464]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800387e:	4313      	orrs	r3, r2
 8003880:	650b      	str	r3, [r1, #80]	; 0x50
 8003882:	e001      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d053      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800389a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800389e:	d034      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80038a0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80038a4:	d82e      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80038a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038aa:	d030      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80038ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b0:	d828      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b6:	d02c      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d822      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80038be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038c2:	d028      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80038c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038c8:	d81c      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80038ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ce:	d010      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80038d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d4:	d816      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01f      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80038da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038de:	d111      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	2101      	movs	r1, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fcc8 	bl	800427c <RCCEx_PLL2_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038f0:	e014      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3324      	adds	r3, #36	; 0x24
 80038f6:	2101      	movs	r1, #1
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fd71 	bl	80043e0 <RCCEx_PLL3_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003902:	e00b      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	75fb      	strb	r3, [r7, #23]
      break;
 8003908:	e008      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800390a:	bf00      	nop
 800390c:	e006      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800390e:	bf00      	nop
 8003910:	e004      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003912:	bf00      	nop
 8003914:	e002      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003916:	bf00      	nop
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800391a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003922:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003930:	4947      	ldr	r1, [pc, #284]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003932:	4313      	orrs	r3, r2
 8003934:	658b      	str	r3, [r1, #88]	; 0x58
 8003936:	e001      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d02f      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003950:	d00e      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003956:	d814      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800395c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003960:	d10f      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	4a3a      	ldr	r2, [pc, #232]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800396e:	e00c      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fc80 	bl	800427c <RCCEx_PLL2_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003980:	e003      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
      break;
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003990:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399c:	492c      	ldr	r1, [pc, #176]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	650b      	str	r3, [r1, #80]	; 0x50
 80039a2:	e001      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d032      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d81b      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80039bc:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039d5 	.word	0x080039d5
 80039cc:	080039e3 	.word	0x080039e3
 80039d0:	080039fb 	.word	0x080039fb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039e0:	e00c      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2102      	movs	r1, #2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fc47 	bl	800427c <RCCEx_PLL2_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039f2:	e003      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
      break;
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80039fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	f023 0203 	bic.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	4910      	ldr	r1, [pc, #64]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a14:	e001      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 808a 	beq.w	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a09      	ldr	r2, [pc, #36]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a34:	f7fd f982 	bl	8000d3c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a3a:	e00d      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fd f97e 	bl	8000d3c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d906      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	75fb      	strb	r3, [r7, #23]
        break;
 8003a4e:	e009      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003a50:	58024400 	.word	0x58024400
 8003a54:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a58:	4bba      	ldr	r3, [pc, #744]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0eb      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d166      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a6a:	4bb7      	ldr	r3, [pc, #732]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a74:	4053      	eors	r3, r2
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d013      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7e:	4bb2      	ldr	r3, [pc, #712]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a88:	4baf      	ldr	r3, [pc, #700]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4aae      	ldr	r2, [pc, #696]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a94:	4bac      	ldr	r3, [pc, #688]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4aab      	ldr	r2, [pc, #684]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aa0:	4aa9      	ldr	r2, [pc, #676]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab0:	d115      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fd f943 	bl	8000d3c <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ab8:	e00b      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fd f93f 	bl	8000d3c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d902      	bls.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	75fb      	strb	r3, [r7, #23]
            break;
 8003ad0:	e005      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad2:	4b9d      	ldr	r3, [pc, #628]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ed      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d126      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003af4:	4b94      	ldr	r3, [pc, #592]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b02:	0919      	lsrs	r1, r3, #4
 8003b04:	4b91      	ldr	r3, [pc, #580]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003b06:	400b      	ands	r3, r1
 8003b08:	498f      	ldr	r1, [pc, #572]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	610b      	str	r3, [r1, #16]
 8003b0e:	e005      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003b10:	4b8d      	ldr	r3, [pc, #564]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	4a8c      	ldr	r2, [pc, #560]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b1a:	6113      	str	r3, [r2, #16]
 8003b1c:	4b8a      	ldr	r3, [pc, #552]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2a:	4987      	ldr	r1, [pc, #540]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	670b      	str	r3, [r1, #112]	; 0x70
 8003b30:	e004      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	75bb      	strb	r3, [r7, #22]
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d07f      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b4e:	2b28      	cmp	r3, #40	; 0x28
 8003b50:	d866      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003c27 	.word	0x08003c27
 8003b5c:	08003c21 	.word	0x08003c21
 8003b60:	08003c21 	.word	0x08003c21
 8003b64:	08003c21 	.word	0x08003c21
 8003b68:	08003c21 	.word	0x08003c21
 8003b6c:	08003c21 	.word	0x08003c21
 8003b70:	08003c21 	.word	0x08003c21
 8003b74:	08003c21 	.word	0x08003c21
 8003b78:	08003bfd 	.word	0x08003bfd
 8003b7c:	08003c21 	.word	0x08003c21
 8003b80:	08003c21 	.word	0x08003c21
 8003b84:	08003c21 	.word	0x08003c21
 8003b88:	08003c21 	.word	0x08003c21
 8003b8c:	08003c21 	.word	0x08003c21
 8003b90:	08003c21 	.word	0x08003c21
 8003b94:	08003c21 	.word	0x08003c21
 8003b98:	08003c0f 	.word	0x08003c0f
 8003b9c:	08003c21 	.word	0x08003c21
 8003ba0:	08003c21 	.word	0x08003c21
 8003ba4:	08003c21 	.word	0x08003c21
 8003ba8:	08003c21 	.word	0x08003c21
 8003bac:	08003c21 	.word	0x08003c21
 8003bb0:	08003c21 	.word	0x08003c21
 8003bb4:	08003c21 	.word	0x08003c21
 8003bb8:	08003c27 	.word	0x08003c27
 8003bbc:	08003c21 	.word	0x08003c21
 8003bc0:	08003c21 	.word	0x08003c21
 8003bc4:	08003c21 	.word	0x08003c21
 8003bc8:	08003c21 	.word	0x08003c21
 8003bcc:	08003c21 	.word	0x08003c21
 8003bd0:	08003c21 	.word	0x08003c21
 8003bd4:	08003c21 	.word	0x08003c21
 8003bd8:	08003c27 	.word	0x08003c27
 8003bdc:	08003c21 	.word	0x08003c21
 8003be0:	08003c21 	.word	0x08003c21
 8003be4:	08003c21 	.word	0x08003c21
 8003be8:	08003c21 	.word	0x08003c21
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c21 	.word	0x08003c21
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c27 	.word	0x08003c27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fb3a 	bl	800427c <RCCEx_PLL2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c0c:	e00c      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3324      	adds	r3, #36	; 0x24
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fbe3 	bl	80043e0 <RCCEx_PLL3_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
      break;
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c2e:	4b46      	ldr	r3, [pc, #280]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3c:	4942      	ldr	r1, [pc, #264]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	654b      	str	r3, [r1, #84]	; 0x54
 8003c42:	e001      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d038      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c58:	2b05      	cmp	r3, #5
 8003c5a:	d821      	bhi.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003ca7 	.word	0x08003ca7
 8003c68:	08003c7d 	.word	0x08003c7d
 8003c6c:	08003c8f 	.word	0x08003c8f
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003ca7 	.word	0x08003ca7
 8003c78:	08003ca7 	.word	0x08003ca7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fafa 	bl	800427c <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c8c:	e00c      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3324      	adds	r3, #36	; 0x24
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fba3 	bl	80043e0 <RCCEx_PLL3_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cae:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f023 0207 	bic.w	r2, r3, #7
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cba:	4923      	ldr	r1, [pc, #140]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	654b      	str	r3, [r1, #84]	; 0x54
 8003cc0:	e001      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d040      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	d821      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d27 	.word	0x08003d27
 8003ce8:	08003cfd 	.word	0x08003cfd
 8003cec:	08003d0f 	.word	0x08003d0f
 8003cf0:	08003d27 	.word	0x08003d27
 8003cf4:	08003d27 	.word	0x08003d27
 8003cf8:	08003d27 	.word	0x08003d27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 faba 	bl	800427c <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d0c:	e00c      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	2101      	movs	r1, #1
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fb63 	bl	80043e0 <RCCEx_PLL3_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d1e:	e003      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
      break;
 8003d24:	e000      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d110      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	f023 0207 	bic.w	r2, r3, #7
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3c:	4902      	ldr	r1, [pc, #8]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	658b      	str	r3, [r1, #88]	; 0x58
 8003d42:	e007      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003d44:	58024800 	.word	0x58024800
 8003d48:	58024400 	.word	0x58024400
 8003d4c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d04b      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6a:	d02e      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d70:	d828      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d02a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d822      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d82:	d026      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003d84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d88:	d81c      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d8e:	d010      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d94:	d816      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01d      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9e:	d111      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fa68 	bl	800427c <RCCEx_PLL2_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003db0:	e012      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3324      	adds	r3, #36	; 0x24
 8003db6:	2102      	movs	r1, #2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fb11 	bl	80043e0 <RCCEx_PLL3_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dc2:	e009      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc8:	e006      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dde:	4bb3      	ldr	r3, [pc, #716]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dec:	49af      	ldr	r1, [pc, #700]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	654b      	str	r3, [r1, #84]	; 0x54
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d04b      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e0e:	d02e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003e10:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e14:	d828      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d02a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e20:	d822      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003e22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e26:	d026      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003e28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e2c:	d81c      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d010      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e38:	d816      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01d      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e42:	d111      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fa16 	bl	800427c <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e54:	e012      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3324      	adds	r3, #36	; 0x24
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fabf 	bl	80043e0 <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e66:	e009      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6c:	e006      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e82:	4b8a      	ldr	r3, [pc, #552]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e90:	4986      	ldr	r1, [pc, #536]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	658b      	str	r3, [r1, #88]	; 0x58
 8003e96:	e001      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d04b      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003eae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eb2:	d02e      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003eb4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eb8:	d828      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebe:	d02a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	d822      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003ec6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003eca:	d026      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003ecc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ed0:	d81c      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed6:	d010      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003edc:	d816      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01d      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee6:	d111      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f9c4 	bl	800427c <RCCEx_PLL2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ef8:	e012      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3324      	adds	r3, #36	; 0x24
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fa6d 	bl	80043e0 <RCCEx_PLL3_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f0a:	e009      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003f12:	bf00      	nop
 8003f14:	e004      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003f16:	bf00      	nop
 8003f18:	e002      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f26:	4b61      	ldr	r3, [pc, #388]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f34:	495d      	ldr	r1, [pc, #372]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	658b      	str	r3, [r1, #88]	; 0x58
 8003f3a:	e001      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f56:	d10a      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fa3e 	bl	80043e0 <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f6e:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	494b      	ldr	r1, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f98:	d10a      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3324      	adds	r3, #36	; 0x24
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fa1d 	bl	80043e0 <RCCEx_PLL3_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb0:	4b3e      	ldr	r3, [pc, #248]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fbe:	493b      	ldr	r1, [pc, #236]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d034      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fda:	d01d      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe0:	d817      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fea:	d009      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fec:	e011      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 f941 	bl	800427c <RCCEx_PLL2_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ffe:	e00c      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3324      	adds	r3, #36	; 0x24
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f9ea 	bl	80043e0 <RCCEx_PLL3_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004010:	e003      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	75fb      	strb	r3, [r7, #23]
      break;
 8004016:	e000      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401a:	7dfb      	ldrb	r3, [r7, #23]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004020:	4b22      	ldr	r3, [pc, #136]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800402e:	491f      	ldr	r1, [pc, #124]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004030:	4313      	orrs	r3, r2
 8004032:	658b      	str	r3, [r1, #88]	; 0x58
 8004034:	e001      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d036      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004050:	d01c      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004056:	d816      	bhi.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405c:	d003      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800405e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004062:	d007      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004064:	e00f      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800406c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004070:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004072:	e00c      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3324      	adds	r3, #36	; 0x24
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f9b0 	bl	80043e0 <RCCEx_PLL3_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004084:	e003      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	75fb      	strb	r3, [r7, #23]
      break;
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800408c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a2:	4902      	ldr	r1, [pc, #8]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	654b      	str	r3, [r1, #84]	; 0x54
 80040a8:	e004      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80040aa:	bf00      	nop
 80040ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d029      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d007      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80040ce:	e00f      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d0:	4b69      	ldr	r3, [pc, #420]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	4a68      	ldr	r2, [pc, #416]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040dc:	e00b      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f8c9 	bl	800427c <RCCEx_PLL2_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
      break;
 80040f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d109      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040fc:	4b5e      	ldr	r3, [pc, #376]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	495b      	ldr	r1, [pc, #364]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800410a:	4313      	orrs	r3, r2
 800410c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800410e:	e001      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3324      	adds	r3, #36	; 0x24
 8004124:	2102      	movs	r1, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f95a 	bl	80043e0 <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d032      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414c:	d017      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800414e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004152:	d811      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004158:	d013      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800415a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415e:	d80b      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004168:	d106      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416a:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	4a42      	ldr	r2, [pc, #264]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004174:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004176:	e007      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]
      break;
 800417c:	e004      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800417e:	bf00      	nop
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800418e:	4b3a      	ldr	r3, [pc, #232]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419c:	4936      	ldr	r1, [pc, #216]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	654b      	str	r3, [r1, #84]	; 0x54
 80041a2:	e001      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b4:	4b30      	ldr	r3, [pc, #192]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c0:	492d      	ldr	r1, [pc, #180]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041de:	4926      	ldr	r1, [pc, #152]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80041f0:	4b21      	ldr	r3, [pc, #132]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	491e      	ldr	r1, [pc, #120]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004214:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004218:	6113      	str	r3, [r2, #16]
 800421a:	4b17      	ldr	r3, [pc, #92]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004224:	4914      	ldr	r1, [pc, #80]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004226:	4313      	orrs	r3, r2
 8004228:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da08      	bge.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	490e      	ldr	r1, [pc, #56]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004240:	4313      	orrs	r3, r2
 8004242:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	4906      	ldr	r1, [pc, #24]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004260:	4313      	orrs	r3, r2
 8004262:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004264:	7dbb      	ldrb	r3, [r7, #22]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	58024400 	.word	0x58024400

0800427c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b03      	cmp	r3, #3
 8004294:	d101      	bne.n	800429a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e099      	b.n	80043ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800429a:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a4e      	ldr	r2, [pc, #312]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80042a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a6:	f7fc fd49 	bl	8000d3c <HAL_GetTick>
 80042aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042ac:	e008      	b.n	80042c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042ae:	f7fc fd45 	bl	8000d3c <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e086      	b.n	80043ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042c0:	4b45      	ldr	r3, [pc, #276]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042cc:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	031b      	lsls	r3, r3, #12
 80042da:	493f      	ldr	r1, [pc, #252]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	628b      	str	r3, [r1, #40]	; 0x28
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	025b      	lsls	r3, r3, #9
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	3b01      	subs	r3, #1
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004310:	4931      	ldr	r1, [pc, #196]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004316:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	492d      	ldr	r1, [pc, #180]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004328:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f023 0220 	bic.w	r2, r3, #32
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	4928      	ldr	r1, [pc, #160]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	4a26      	ldr	r2, [pc, #152]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <RCCEx_PLL2_Config+0x160>)
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	69d2      	ldr	r2, [r2, #28]
 8004352:	00d2      	lsls	r2, r2, #3
 8004354:	4920      	ldr	r1, [pc, #128]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800435a:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004360:	f043 0310 	orr.w	r3, r3, #16
 8004364:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004376:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004378:	e00f      	b.n	800439a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004380:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800438c:	e005      	b.n	800439a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	4a11      	ldr	r2, [pc, #68]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004394:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004398:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800439a:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a0e      	ldr	r2, [pc, #56]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80043a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a6:	f7fc fcc9 	bl	8000d3c <HAL_GetTick>
 80043aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043ac:	e008      	b.n	80043c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043ae:	f7fc fcc5 	bl	8000d3c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e006      	b.n	80043ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	58024400 	.word	0x58024400
 80043dc:	ffff0007 	.word	0xffff0007

080043e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043ee:	4b53      	ldr	r3, [pc, #332]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d101      	bne.n	80043fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e099      	b.n	8004532 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043fe:	4b4f      	ldr	r3, [pc, #316]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a4e      	ldr	r2, [pc, #312]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440a:	f7fc fc97 	bl	8000d3c <HAL_GetTick>
 800440e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004410:	e008      	b.n	8004424 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004412:	f7fc fc93 	bl	8000d3c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e086      	b.n	8004532 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004424:	4b45      	ldr	r3, [pc, #276]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004430:	4b42      	ldr	r3, [pc, #264]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	051b      	lsls	r3, r3, #20
 800443e:	493f      	ldr	r1, [pc, #252]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004440:	4313      	orrs	r3, r2
 8004442:	628b      	str	r3, [r1, #40]	; 0x28
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	3b01      	subs	r3, #1
 800444a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	3b01      	subs	r3, #1
 8004454:	025b      	lsls	r3, r3, #9
 8004456:	b29b      	uxth	r3, r3
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	3b01      	subs	r3, #1
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	3b01      	subs	r3, #1
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004474:	4931      	ldr	r1, [pc, #196]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	492d      	ldr	r1, [pc, #180]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800448c:	4b2b      	ldr	r3, [pc, #172]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4928      	ldr	r1, [pc, #160]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800449e:	4b27      	ldr	r3, [pc, #156]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	4a26      	ldr	r2, [pc, #152]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <RCCEx_PLL3_Config+0x160>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	69d2      	ldr	r2, [r2, #28]
 80044b6:	00d2      	lsls	r2, r2, #3
 80044b8:	4920      	ldr	r1, [pc, #128]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044be:	4b1f      	ldr	r3, [pc, #124]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	4a1e      	ldr	r2, [pc, #120]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044dc:	e00f      	b.n	80044fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044f0:	e005      	b.n	80044fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044f2:	4b12      	ldr	r3, [pc, #72]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	4a11      	ldr	r2, [pc, #68]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a0e      	ldr	r2, [pc, #56]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450a:	f7fc fc17 	bl	8000d3c <HAL_GetTick>
 800450e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004510:	e008      	b.n	8004524 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004512:	f7fc fc13 	bl	8000d3c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e006      	b.n	8004532 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	58024400 	.word	0x58024400
 8004540:	ffff0007 	.word	0xffff0007

08004544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e049      	b.n	80045ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc fad8 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 fbb0 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e049      	b.n	8004698 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f841 	bl	80046a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f000 fb59 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x24>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e03c      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d109      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x3e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	bf14      	ite	ne
 80046ea:	2301      	movne	r3, #1
 80046ec:	2300      	moveq	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	e02f      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d109      	bne.n	800470c <HAL_TIM_PWM_Start+0x58>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e022      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d109      	bne.n	8004726 <HAL_TIM_PWM_Start+0x72>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	bf14      	ite	ne
 800471e:	2301      	movne	r3, #1
 8004720:	2300      	moveq	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	e015      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b10      	cmp	r3, #16
 800472a:	d109      	bne.n	8004740 <HAL_TIM_PWM_Start+0x8c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	e008      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	bf14      	ite	ne
 800474c:	2301      	movne	r3, #1
 800474e:	2300      	moveq	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0a1      	b.n	800489e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_TIM_PWM_Start+0xb6>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004768:	e023      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d104      	bne.n	800477a <HAL_TIM_PWM_Start+0xc6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004778:	e01b      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d104      	bne.n	800478a <HAL_TIM_PWM_Start+0xd6>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004788:	e013      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b0c      	cmp	r3, #12
 800478e:	d104      	bne.n	800479a <HAL_TIM_PWM_Start+0xe6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004798:	e00b      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b10      	cmp	r3, #16
 800479e:	d104      	bne.n	80047aa <HAL_TIM_PWM_Start+0xf6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a8:	e003      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2201      	movs	r2, #1
 80047b8:	6839      	ldr	r1, [r7, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fea2 	bl	8005504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a38      	ldr	r2, [pc, #224]	; (80048a8 <HAL_TIM_PWM_Start+0x1f4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x13e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a37      	ldr	r2, [pc, #220]	; (80048ac <HAL_TIM_PWM_Start+0x1f8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x13e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a35      	ldr	r2, [pc, #212]	; (80048b0 <HAL_TIM_PWM_Start+0x1fc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x13e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <HAL_TIM_PWM_Start+0x200>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x13e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a32      	ldr	r2, [pc, #200]	; (80048b8 <HAL_TIM_PWM_Start+0x204>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_PWM_Start+0x142>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <HAL_TIM_PWM_Start+0x144>
 80047f6:	2300      	movs	r3, #0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800480a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a25      	ldr	r2, [pc, #148]	; (80048a8 <HAL_TIM_PWM_Start+0x1f4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d022      	beq.n	800485c <HAL_TIM_PWM_Start+0x1a8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d01d      	beq.n	800485c <HAL_TIM_PWM_Start+0x1a8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <HAL_TIM_PWM_Start+0x208>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_TIM_PWM_Start+0x1a8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <HAL_TIM_PWM_Start+0x20c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <HAL_TIM_PWM_Start+0x1a8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <HAL_TIM_PWM_Start+0x210>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_TIM_PWM_Start+0x1a8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1a      	ldr	r2, [pc, #104]	; (80048ac <HAL_TIM_PWM_Start+0x1f8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_TIM_PWM_Start+0x1a8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <HAL_TIM_PWM_Start+0x214>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIM_PWM_Start+0x1a8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <HAL_TIM_PWM_Start+0x1fc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d115      	bne.n	8004888 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <HAL_TIM_PWM_Start+0x218>)
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d015      	beq.n	800489a <HAL_TIM_PWM_Start+0x1e6>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004874:	d011      	beq.n	800489a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	e008      	b.n	800489a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e000      	b.n	800489c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40010400 	.word	0x40010400
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40014400 	.word	0x40014400
 80048b8:	40014800 	.word	0x40014800
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40001800 	.word	0x40001800
 80048cc:	00010007 	.word	0x00010007

080048d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0ff      	b.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b14      	cmp	r3, #20
 80048fa:	f200 80f0 	bhi.w	8004ade <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004959 	.word	0x08004959
 8004908:	08004adf 	.word	0x08004adf
 800490c:	08004adf 	.word	0x08004adf
 8004910:	08004adf 	.word	0x08004adf
 8004914:	08004999 	.word	0x08004999
 8004918:	08004adf 	.word	0x08004adf
 800491c:	08004adf 	.word	0x08004adf
 8004920:	08004adf 	.word	0x08004adf
 8004924:	080049db 	.word	0x080049db
 8004928:	08004adf 	.word	0x08004adf
 800492c:	08004adf 	.word	0x08004adf
 8004930:	08004adf 	.word	0x08004adf
 8004934:	08004a1b 	.word	0x08004a1b
 8004938:	08004adf 	.word	0x08004adf
 800493c:	08004adf 	.word	0x08004adf
 8004940:	08004adf 	.word	0x08004adf
 8004944:	08004a5d 	.word	0x08004a5d
 8004948:	08004adf 	.word	0x08004adf
 800494c:	08004adf 	.word	0x08004adf
 8004950:	08004adf 	.word	0x08004adf
 8004954:	08004a9d 	.word	0x08004a9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fa5c 	bl	8004e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0208 	orr.w	r2, r2, #8
 8004972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0204 	bic.w	r2, r2, #4
 8004982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6999      	ldr	r1, [r3, #24]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	619a      	str	r2, [r3, #24]
      break;
 8004996:	e0a5      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 facc 	bl	8004f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6999      	ldr	r1, [r3, #24]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	021a      	lsls	r2, r3, #8
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	619a      	str	r2, [r3, #24]
      break;
 80049d8:	e084      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fb35 	bl	8005050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0208 	orr.w	r2, r2, #8
 80049f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0204 	bic.w	r2, r2, #4
 8004a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69d9      	ldr	r1, [r3, #28]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	61da      	str	r2, [r3, #28]
      break;
 8004a18:	e064      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fb9d 	bl	8005160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69d9      	ldr	r1, [r3, #28]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	021a      	lsls	r2, r3, #8
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	61da      	str	r2, [r3, #28]
      break;
 8004a5a:	e043      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fbe6 	bl	8005234 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0204 	bic.w	r2, r2, #4
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a9a:	e023      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fc2a 	bl	80052fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	021a      	lsls	r2, r3, #8
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004adc:	e002      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop

08004af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_TIM_ConfigClockSource+0x1c>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e0dc      	b.n	8004cce <HAL_TIM_ConfigClockSource+0x1d6>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a64      	ldr	r2, [pc, #400]	; (8004cdc <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	f000 80a9 	beq.w	8004ca2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b50:	4a62      	ldr	r2, [pc, #392]	; (8004cdc <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	f200 80ae 	bhi.w	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b58:	4a61      	ldr	r2, [pc, #388]	; (8004ce0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	f000 80a1 	beq.w	8004ca2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b60:	4a5f      	ldr	r2, [pc, #380]	; (8004ce0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f200 80a6 	bhi.w	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b68:	4a5e      	ldr	r2, [pc, #376]	; (8004ce4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	f000 8099 	beq.w	8004ca2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b70:	4a5c      	ldr	r2, [pc, #368]	; (8004ce4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	f200 809e 	bhi.w	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b7c:	f000 8091 	beq.w	8004ca2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b84:	f200 8096 	bhi.w	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8c:	f000 8089 	beq.w	8004ca2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b94:	f200 808e 	bhi.w	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9c:	d03e      	beq.n	8004c1c <HAL_TIM_ConfigClockSource+0x124>
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba2:	f200 8087 	bhi.w	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004baa:	f000 8086 	beq.w	8004cba <HAL_TIM_ConfigClockSource+0x1c2>
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb2:	d87f      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bb4:	2b70      	cmp	r3, #112	; 0x70
 8004bb6:	d01a      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0xf6>
 8004bb8:	2b70      	cmp	r3, #112	; 0x70
 8004bba:	d87b      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bbc:	2b60      	cmp	r3, #96	; 0x60
 8004bbe:	d050      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0x16a>
 8004bc0:	2b60      	cmp	r3, #96	; 0x60
 8004bc2:	d877      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bc4:	2b50      	cmp	r3, #80	; 0x50
 8004bc6:	d03c      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x14a>
 8004bc8:	2b50      	cmp	r3, #80	; 0x50
 8004bca:	d873      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d058      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0x18a>
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	d86f      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bd4:	2b30      	cmp	r3, #48	; 0x30
 8004bd6:	d064      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bd8:	2b30      	cmp	r3, #48	; 0x30
 8004bda:	d86b      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d060      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	d867      	bhi.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d05c      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004be8:	2b10      	cmp	r3, #16
 8004bea:	d05a      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bec:	e062      	b.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6899      	ldr	r1, [r3, #8]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f000 fc61 	bl	80054c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	609a      	str	r2, [r3, #8]
      break;
 8004c1a:	e04f      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6899      	ldr	r1, [r3, #8]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f000 fc4a 	bl	80054c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c3e:	609a      	str	r2, [r3, #8]
      break;
 8004c40:	e03c      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6859      	ldr	r1, [r3, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f000 fbba 	bl	80053c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2150      	movs	r1, #80	; 0x50
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fc14 	bl	8005488 <TIM_ITRx_SetConfig>
      break;
 8004c60:	e02c      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f000 fbd9 	bl	8005426 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2160      	movs	r1, #96	; 0x60
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fc04 	bl	8005488 <TIM_ITRx_SetConfig>
      break;
 8004c80:	e01c      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 fb9a 	bl	80053c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fbf4 	bl	8005488 <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e00c      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f000 fbeb 	bl	8005488 <TIM_ITRx_SetConfig>
      break;
 8004cb2:	e003      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb8:	e000      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	ffceff88 	.word	0xffceff88
 8004cdc:	00100040 	.word	0x00100040
 8004ce0:	00100030 	.word	0x00100030
 8004ce4:	00100020 	.word	0x00100020

08004ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a40      	ldr	r2, [pc, #256]	; (8004dfc <TIM_Base_SetConfig+0x114>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d06:	d00f      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a3d      	ldr	r2, [pc, #244]	; (8004e00 <TIM_Base_SetConfig+0x118>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a3c      	ldr	r2, [pc, #240]	; (8004e04 <TIM_Base_SetConfig+0x11c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a3b      	ldr	r2, [pc, #236]	; (8004e08 <TIM_Base_SetConfig+0x120>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0x40>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a3a      	ldr	r2, [pc, #232]	; (8004e0c <TIM_Base_SetConfig+0x124>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2f      	ldr	r2, [pc, #188]	; (8004dfc <TIM_Base_SetConfig+0x114>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01f      	beq.n	8004d82 <TIM_Base_SetConfig+0x9a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d01b      	beq.n	8004d82 <TIM_Base_SetConfig+0x9a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <TIM_Base_SetConfig+0x118>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d017      	beq.n	8004d82 <TIM_Base_SetConfig+0x9a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <TIM_Base_SetConfig+0x11c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <TIM_Base_SetConfig+0x9a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a2a      	ldr	r2, [pc, #168]	; (8004e08 <TIM_Base_SetConfig+0x120>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_Base_SetConfig+0x9a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <TIM_Base_SetConfig+0x124>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_Base_SetConfig+0x9a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a28      	ldr	r2, [pc, #160]	; (8004e10 <TIM_Base_SetConfig+0x128>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_Base_SetConfig+0x9a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <TIM_Base_SetConfig+0x12c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_Base_SetConfig+0x9a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <TIM_Base_SetConfig+0x130>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d108      	bne.n	8004d94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a10      	ldr	r2, [pc, #64]	; (8004dfc <TIM_Base_SetConfig+0x114>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00f      	beq.n	8004de0 <TIM_Base_SetConfig+0xf8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <TIM_Base_SetConfig+0x124>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <TIM_Base_SetConfig+0xf8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <TIM_Base_SetConfig+0x128>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_Base_SetConfig+0xf8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <TIM_Base_SetConfig+0x12c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_Base_SetConfig+0xf8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a0f      	ldr	r2, [pc, #60]	; (8004e18 <TIM_Base_SetConfig+0x130>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d103      	bne.n	8004de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	615a      	str	r2, [r3, #20]
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800
 8004e08:	40000c00 	.word	0x40000c00
 8004e0c:	40010400 	.word	0x40010400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4b37      	ldr	r3, [pc, #220]	; (8004f24 <TIM_OC1_SetConfig+0x108>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0302 	bic.w	r3, r3, #2
 8004e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a2d      	ldr	r2, [pc, #180]	; (8004f28 <TIM_OC1_SetConfig+0x10c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00f      	beq.n	8004e98 <TIM_OC1_SetConfig+0x7c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <TIM_OC1_SetConfig+0x110>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <TIM_OC1_SetConfig+0x7c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a2b      	ldr	r2, [pc, #172]	; (8004f30 <TIM_OC1_SetConfig+0x114>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <TIM_OC1_SetConfig+0x7c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <TIM_OC1_SetConfig+0x118>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_OC1_SetConfig+0x7c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a29      	ldr	r2, [pc, #164]	; (8004f38 <TIM_OC1_SetConfig+0x11c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d10c      	bne.n	8004eb2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0308 	bic.w	r3, r3, #8
 8004e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <TIM_OC1_SetConfig+0x10c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00f      	beq.n	8004eda <TIM_OC1_SetConfig+0xbe>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <TIM_OC1_SetConfig+0x110>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <TIM_OC1_SetConfig+0xbe>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a1a      	ldr	r2, [pc, #104]	; (8004f30 <TIM_OC1_SetConfig+0x114>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <TIM_OC1_SetConfig+0xbe>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <TIM_OC1_SetConfig+0x118>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_OC1_SetConfig+0xbe>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <TIM_OC1_SetConfig+0x11c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d111      	bne.n	8004efe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	621a      	str	r2, [r3, #32]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	fffeff8f 	.word	0xfffeff8f
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40010400 	.word	0x40010400
 8004f30:	40014000 	.word	0x40014000
 8004f34:	40014400 	.word	0x40014400
 8004f38:	40014800 	.word	0x40014800

08004f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f023 0210 	bic.w	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4b34      	ldr	r3, [pc, #208]	; (8005038 <TIM_OC2_SetConfig+0xfc>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0320 	bic.w	r3, r3, #32
 8004f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a29      	ldr	r2, [pc, #164]	; (800503c <TIM_OC2_SetConfig+0x100>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <TIM_OC2_SetConfig+0x68>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a28      	ldr	r2, [pc, #160]	; (8005040 <TIM_OC2_SetConfig+0x104>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d10d      	bne.n	8004fc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <TIM_OC2_SetConfig+0x100>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_OC2_SetConfig+0xac>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <TIM_OC2_SetConfig+0x104>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <TIM_OC2_SetConfig+0xac>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <TIM_OC2_SetConfig+0x108>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_OC2_SetConfig+0xac>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a1b      	ldr	r2, [pc, #108]	; (8005048 <TIM_OC2_SetConfig+0x10c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_OC2_SetConfig+0xac>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a1a      	ldr	r2, [pc, #104]	; (800504c <TIM_OC2_SetConfig+0x110>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d113      	bne.n	8005010 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	feff8fff 	.word	0xfeff8fff
 800503c:	40010000 	.word	0x40010000
 8005040:	40010400 	.word	0x40010400
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400
 800504c:	40014800 	.word	0x40014800

08005050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4b33      	ldr	r3, [pc, #204]	; (8005148 <TIM_OC3_SetConfig+0xf8>)
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a28      	ldr	r2, [pc, #160]	; (800514c <TIM_OC3_SetConfig+0xfc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC3_SetConfig+0x66>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a27      	ldr	r2, [pc, #156]	; (8005150 <TIM_OC3_SetConfig+0x100>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d10d      	bne.n	80050d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1d      	ldr	r2, [pc, #116]	; (800514c <TIM_OC3_SetConfig+0xfc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00f      	beq.n	80050fa <TIM_OC3_SetConfig+0xaa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1c      	ldr	r2, [pc, #112]	; (8005150 <TIM_OC3_SetConfig+0x100>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00b      	beq.n	80050fa <TIM_OC3_SetConfig+0xaa>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1b      	ldr	r2, [pc, #108]	; (8005154 <TIM_OC3_SetConfig+0x104>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d007      	beq.n	80050fa <TIM_OC3_SetConfig+0xaa>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <TIM_OC3_SetConfig+0x108>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <TIM_OC3_SetConfig+0xaa>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a19      	ldr	r2, [pc, #100]	; (800515c <TIM_OC3_SetConfig+0x10c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d113      	bne.n	8005122 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	fffeff8f 	.word	0xfffeff8f
 800514c:	40010000 	.word	0x40010000
 8005150:	40010400 	.word	0x40010400
 8005154:	40014000 	.word	0x40014000
 8005158:	40014400 	.word	0x40014400
 800515c:	40014800 	.word	0x40014800

08005160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4b24      	ldr	r3, [pc, #144]	; (800521c <TIM_OC4_SetConfig+0xbc>)
 800518c:	4013      	ands	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	031b      	lsls	r3, r3, #12
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a19      	ldr	r2, [pc, #100]	; (8005220 <TIM_OC4_SetConfig+0xc0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00f      	beq.n	80051e0 <TIM_OC4_SetConfig+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <TIM_OC4_SetConfig+0xc4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00b      	beq.n	80051e0 <TIM_OC4_SetConfig+0x80>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <TIM_OC4_SetConfig+0xc8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <TIM_OC4_SetConfig+0x80>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a16      	ldr	r2, [pc, #88]	; (800522c <TIM_OC4_SetConfig+0xcc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_OC4_SetConfig+0x80>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a15      	ldr	r2, [pc, #84]	; (8005230 <TIM_OC4_SetConfig+0xd0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d109      	bne.n	80051f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	019b      	lsls	r3, r3, #6
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	feff8fff 	.word	0xfeff8fff
 8005220:	40010000 	.word	0x40010000
 8005224:	40010400 	.word	0x40010400
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800

08005234 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4b21      	ldr	r3, [pc, #132]	; (80052e4 <TIM_OC5_SetConfig+0xb0>)
 8005260:	4013      	ands	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005274:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <TIM_OC5_SetConfig+0xb4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00f      	beq.n	80052aa <TIM_OC5_SetConfig+0x76>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a17      	ldr	r2, [pc, #92]	; (80052ec <TIM_OC5_SetConfig+0xb8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00b      	beq.n	80052aa <TIM_OC5_SetConfig+0x76>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a16      	ldr	r2, [pc, #88]	; (80052f0 <TIM_OC5_SetConfig+0xbc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <TIM_OC5_SetConfig+0x76>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <TIM_OC5_SetConfig+0xc0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_OC5_SetConfig+0x76>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <TIM_OC5_SetConfig+0xc4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d109      	bne.n	80052be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	621a      	str	r2, [r3, #32]
}
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	fffeff8f 	.word	0xfffeff8f
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40010400 	.word	0x40010400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800

080052fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <TIM_OC6_SetConfig+0xb4>)
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800533e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	051b      	lsls	r3, r3, #20
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <TIM_OC6_SetConfig+0xb8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00f      	beq.n	8005374 <TIM_OC6_SetConfig+0x78>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <TIM_OC6_SetConfig+0xbc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00b      	beq.n	8005374 <TIM_OC6_SetConfig+0x78>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <TIM_OC6_SetConfig+0xc0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_OC6_SetConfig+0x78>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <TIM_OC6_SetConfig+0xc4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC6_SetConfig+0x78>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <TIM_OC6_SetConfig+0xc8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d109      	bne.n	8005388 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	029b      	lsls	r3, r3, #10
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	feff8fff 	.word	0xfeff8fff
 80053b4:	40010000 	.word	0x40010000
 80053b8:	40010400 	.word	0x40010400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800

080053c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f023 0201 	bic.w	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 030a 	bic.w	r3, r3, #10
 8005404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	bf00      	nop
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005426:	b480      	push	{r7}
 8005428:	b087      	sub	sp, #28
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0210 	bic.w	r2, r3, #16
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	031b      	lsls	r3, r3, #12
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <TIM_ITRx_SetConfig+0x38>)
 800549c:	4013      	ands	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f043 0307 	orr.w	r3, r3, #7
 80054aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	609a      	str	r2, [r3, #8]
}
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	ffcfff8f 	.word	0xffcfff8f

080054c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2201      	movs	r2, #1
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	43db      	mvns	r3, r3
 8005526:	401a      	ands	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1a      	ldr	r2, [r3, #32]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	fa01 f303 	lsl.w	r3, r1, r3
 800553c:	431a      	orrs	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e06d      	b.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a30      	ldr	r2, [pc, #192]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a20      	ldr	r2, [pc, #128]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d022      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055da:	d01d      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d018      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1c      	ldr	r2, [pc, #112]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1a      	ldr	r2, [pc, #104]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00e      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a15      	ldr	r2, [pc, #84]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d009      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a16      	ldr	r2, [pc, #88]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d10c      	bne.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40001800 	.word	0x40001800
 8005668:	40014000 	.word	0x40014000

0800566c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005684:	2302      	movs	r3, #2
 8005686:	e087      	b.n	8005798 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a27      	ldr	r2, [pc, #156]	; (80057a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d004      	beq.n	8005716 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d106      	bne.n	8005724 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1e      	ldr	r2, [pc, #120]	; (80057a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d126      	bne.n	8005786 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	051b      	lsls	r3, r3, #20
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a0d      	ldr	r2, [pc, #52]	; (80057a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d106      	bne.n	8005786 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010400 	.word	0x40010400

080057ac <__libc_init_array>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4d0d      	ldr	r5, [pc, #52]	; (80057e4 <__libc_init_array+0x38>)
 80057b0:	4c0d      	ldr	r4, [pc, #52]	; (80057e8 <__libc_init_array+0x3c>)
 80057b2:	1b64      	subs	r4, r4, r5
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	2600      	movs	r6, #0
 80057b8:	42a6      	cmp	r6, r4
 80057ba:	d109      	bne.n	80057d0 <__libc_init_array+0x24>
 80057bc:	4d0b      	ldr	r5, [pc, #44]	; (80057ec <__libc_init_array+0x40>)
 80057be:	4c0c      	ldr	r4, [pc, #48]	; (80057f0 <__libc_init_array+0x44>)
 80057c0:	f000 f82e 	bl	8005820 <_init>
 80057c4:	1b64      	subs	r4, r4, r5
 80057c6:	10a4      	asrs	r4, r4, #2
 80057c8:	2600      	movs	r6, #0
 80057ca:	42a6      	cmp	r6, r4
 80057cc:	d105      	bne.n	80057da <__libc_init_array+0x2e>
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d4:	4798      	blx	r3
 80057d6:	3601      	adds	r6, #1
 80057d8:	e7ee      	b.n	80057b8 <__libc_init_array+0xc>
 80057da:	f855 3b04 	ldr.w	r3, [r5], #4
 80057de:	4798      	blx	r3
 80057e0:	3601      	adds	r6, #1
 80057e2:	e7f2      	b.n	80057ca <__libc_init_array+0x1e>
 80057e4:	080058a4 	.word	0x080058a4
 80057e8:	080058a4 	.word	0x080058a4
 80057ec:	080058a4 	.word	0x080058a4
 80057f0:	080058a8 	.word	0x080058a8

080057f4 <memcpy>:
 80057f4:	440a      	add	r2, r1
 80057f6:	4291      	cmp	r1, r2
 80057f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057fc:	d100      	bne.n	8005800 <memcpy+0xc>
 80057fe:	4770      	bx	lr
 8005800:	b510      	push	{r4, lr}
 8005802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800580a:	4291      	cmp	r1, r2
 800580c:	d1f9      	bne.n	8005802 <memcpy+0xe>
 800580e:	bd10      	pop	{r4, pc}

08005810 <memset>:
 8005810:	4402      	add	r2, r0
 8005812:	4603      	mov	r3, r0
 8005814:	4293      	cmp	r3, r2
 8005816:	d100      	bne.n	800581a <memset+0xa>
 8005818:	4770      	bx	lr
 800581a:	f803 1b01 	strb.w	r1, [r3], #1
 800581e:	e7f9      	b.n	8005814 <memset+0x4>

08005820 <_init>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr

0800582c <_fini>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr
