
0110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd4  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000288  24000010  08007f28  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000298  08007f28  00020298  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027d3c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003901  00000000  00000000  00047d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013e0  00000000  00000000  0004b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000012c8  00000000  00000000  0004ca60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032269  00000000  00000000  0004dd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018f12  00000000  00000000  0007ff91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149d04  00000000  00000000  00098ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e2ba7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005510  00000000  00000000  001e2bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007e6c 	.word	0x08007e6c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	08007e6c 	.word	0x08007e6c

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 80005ee:	4a30      	ldr	r2, [pc, #192]	; (80006b0 <MX_FDCAN1_Init+0xc8>)
 80005f0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 80005f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000602:	2201      	movs	r2, #1
 8000604:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000608:	2200      	movs	r2, #0
 800060a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 800060e:	2200      	movs	r2, #0
 8000610:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000614:	2201      	movs	r2, #1
 8000616:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 800061a:	2201      	movs	r2, #1
 800061c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000620:	2202      	movs	r2, #2
 8000622:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000626:	2202      	movs	r2, #2
 8000628:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 800062c:	2219      	movs	r2, #25
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000632:	2201      	movs	r2, #1
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000638:	2202      	movs	r2, #2
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 800063e:	2201      	movs	r2, #1
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000644:	2200      	movs	r2, #0
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 800064a:	2201      	movs	r2, #1
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000650:	2200      	movs	r2, #0
 8000652:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000656:	2201      	movs	r2, #1
 8000658:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 800065c:	2205      	movs	r2, #5
 800065e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000662:	2200      	movs	r2, #0
 8000664:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000668:	2204      	movs	r2, #4
 800066a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 800066e:	2200      	movs	r2, #0
 8000670:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000674:	2204      	movs	r2, #4
 8000676:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 800067a:	2200      	movs	r2, #0
 800067c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000680:	2200      	movs	r2, #0
 8000682:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000686:	2201      	movs	r2, #1
 8000688:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 800068c:	2200      	movs	r2, #0
 800068e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000692:	2205      	movs	r2, #5
 8000694:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_FDCAN1_Init+0xc4>)
 8000698:	f001 f89e 	bl	80017d8 <HAL_FDCAN_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80006a2:	f000 fadb 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2400003c 	.word	0x2400003c
 80006b0:	4000a000 	.word	0x4000a000

080006b4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0b8      	sub	sp, #224	; 0xe0
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	22b8      	movs	r2, #184	; 0xb8
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f007 fbc1 	bl	8007e5c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <HAL_FDCAN_MspInit+0xe0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d153      	bne.n	800078c <HAL_FDCAN_MspInit+0xd8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80006ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 f89e 	bl	8003838 <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000702:	f000 faab 	bl	8000c5c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <HAL_FDCAN_MspInit+0xe4>)
 8000708:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800070c:	4a22      	ldr	r2, [pc, #136]	; (8000798 <HAL_FDCAN_MspInit+0xe4>)
 800070e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000712:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <HAL_FDCAN_MspInit+0xe4>)
 8000718:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800071c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <HAL_FDCAN_MspInit+0xe4>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <HAL_FDCAN_MspInit+0xe4>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_FDCAN_MspInit+0xe4>)
 8000736:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000742:	2303      	movs	r3, #3
 8000744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800075a:	2309      	movs	r3, #9
 800075c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000760:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000764:	4619      	mov	r1, r3
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <HAL_FDCAN_MspInit+0xe8>)
 8000768:	f001 feb2 	bl	80024d0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	2013      	movs	r0, #19
 8000772:	f000 fffc 	bl	800176e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000776:	2013      	movs	r0, #19
 8000778:	f001 f813 	bl	80017a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	2015      	movs	r0, #21
 8000782:	f000 fff4 	bl	800176e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000786:	2015      	movs	r0, #21
 8000788:	f001 f80b 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	37e0      	adds	r7, #224	; 0xe0
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	4000a000 	.word	0x4000a000
 8000798:	58024400 	.word	0x58024400
 800079c:	58020c00 	.word	0x58020c00

080007a0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b89      	ldr	r3, [pc, #548]	; (80009dc <MX_GPIO_Init+0x23c>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a87      	ldr	r2, [pc, #540]	; (80009dc <MX_GPIO_Init+0x23c>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b85      	ldr	r3, [pc, #532]	; (80009dc <MX_GPIO_Init+0x23c>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	623b      	str	r3, [r7, #32]
 80007d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d4:	4b81      	ldr	r3, [pc, #516]	; (80009dc <MX_GPIO_Init+0x23c>)
 80007d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007da:	4a80      	ldr	r2, [pc, #512]	; (80009dc <MX_GPIO_Init+0x23c>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <MX_GPIO_Init+0x23c>)
 80007e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ea:	f003 0320 	and.w	r3, r3, #32
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <MX_GPIO_Init+0x23c>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f8:	4a78      	ldr	r2, [pc, #480]	; (80009dc <MX_GPIO_Init+0x23c>)
 80007fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000802:	4b76      	ldr	r3, [pc, #472]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000804:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b72      	ldr	r3, [pc, #456]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	4a71      	ldr	r2, [pc, #452]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000820:	4b6e      	ldr	r3, [pc, #440]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000822:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b6b      	ldr	r3, [pc, #428]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	4a69      	ldr	r2, [pc, #420]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800083e:	4b67      	ldr	r3, [pc, #412]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084c:	4b63      	ldr	r3, [pc, #396]	; (80009dc <MX_GPIO_Init+0x23c>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	4a62      	ldr	r2, [pc, #392]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800085c:	4b5f      	ldr	r3, [pc, #380]	; (80009dc <MX_GPIO_Init+0x23c>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b5c      	ldr	r3, [pc, #368]	; (80009dc <MX_GPIO_Init+0x23c>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	4a5a      	ldr	r2, [pc, #360]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087a:	4b58      	ldr	r3, [pc, #352]	; (80009dc <MX_GPIO_Init+0x23c>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000888:	4b54      	ldr	r3, [pc, #336]	; (80009dc <MX_GPIO_Init+0x23c>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	4a53      	ldr	r2, [pc, #332]	; (80009dc <MX_GPIO_Init+0x23c>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000898:	4b50      	ldr	r3, [pc, #320]	; (80009dc <MX_GPIO_Init+0x23c>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ac:	484c      	ldr	r0, [pc, #304]	; (80009e0 <MX_GPIO_Init+0x240>)
 80008ae:	f001 ffbf 	bl	8002830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2122      	movs	r1, #34	; 0x22
 80008b6:	484b      	ldr	r0, [pc, #300]	; (80009e4 <MX_GPIO_Init+0x244>)
 80008b8:	f001 ffba 	bl	8002830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_7|GPIO_PIN_8
 80008bc:	2200      	movs	r2, #0
 80008be:	f244 3181 	movw	r1, #17281	; 0x4381
 80008c2:	4849      	ldr	r0, [pc, #292]	; (80009e8 <MX_GPIO_Init+0x248>)
 80008c4:	f001 ffb4 	bl	8002830 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2102      	movs	r1, #2
 80008cc:	4847      	ldr	r0, [pc, #284]	; (80009ec <MX_GPIO_Init+0x24c>)
 80008ce:	f001 ffaf 	bl	8002830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4842      	ldr	r0, [pc, #264]	; (80009f0 <MX_GPIO_Init+0x250>)
 80008e8:	f001 fdf2 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4836      	ldr	r0, [pc, #216]	; (80009e0 <MX_GPIO_Init+0x240>)
 8000906:	f001 fde3 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800090a:	2322      	movs	r3, #34	; 0x22
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	4830      	ldr	r0, [pc, #192]	; (80009e4 <MX_GPIO_Init+0x244>)
 8000922:	f001 fdd5 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_7|GPIO_PIN_8
 8000926:	f244 3381 	movw	r3, #17281	; 0x4381
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	482a      	ldr	r0, [pc, #168]	; (80009e8 <MX_GPIO_Init+0x248>)
 8000940:	f001 fdc6 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x254>)
 800095a:	f001 fdb9 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800095e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	481c      	ldr	r0, [pc, #112]	; (80009e4 <MX_GPIO_Init+0x244>)
 8000974:	f001 fdac 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800098a:	230a      	movs	r3, #10
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_GPIO_Init+0x244>)
 8000996:	f001 fd9b 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800099a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_GPIO_Init+0x244>)
 80009b4:	f001 fd8c 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b8:	2302      	movs	r3, #2
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <MX_GPIO_Init+0x24c>)
 80009d0:	f001 fd7e 	bl	80024d0 <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3738      	adds	r7, #56	; 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58024400 	.word	0x58024400
 80009e0:	58021400 	.word	0x58021400
 80009e4:	58020000 	.word	0x58020000
 80009e8:	58020400 	.word	0x58020400
 80009ec:	58021000 	.word	0x58021000
 80009f0:	58020800 	.word	0x58020800
 80009f4:	58021800 	.word	0x58021800

080009f8 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7f1b      	ldrb	r3, [r3, #28]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d17a      	bne.n	8000afe <HAL_TIM_IC_CaptureCallback+0x106>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000a08:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d11a      	bne.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000a10:	2100      	movs	r1, #0
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f005 f974 	bl	8005d00 <HAL_TIM_ReadCapturedValue>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a1c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6a1a      	ldr	r2, [r3, #32]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 020a 	bic.w	r2, r2, #10
 8000a32:	621a      	str	r2, [r3, #32]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	6a1a      	ldr	r2, [r3, #32]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0202 	orr.w	r2, r2, #2
 8000a42:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);//rising?���? ?��리거
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8000a44:	e05b      	b.n	8000afe <HAL_TIM_IC_CaptureCallback+0x106>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d157      	bne.n	8000afe <HAL_TIM_IC_CaptureCallback+0x106>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000a4e:	2100      	movs	r1, #0
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f005 f955 	bl	8005d00 <HAL_TIM_ReadCapturedValue>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a2f      	ldr	r2, [pc, #188]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a5a:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)//거리 측정
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d907      	bls.n	8000a80 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	4a28      	ldr	r2, [pc, #160]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	e00f      	b.n	8000aa0 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)//?��버플로우�? 고려?�� 코드
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d909      	bls.n	8000aa0 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1ad2      	subs	r2, r2, r3
 8000a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000a9e:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;//x?��?��?�� cm�? ?��?��
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x124>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000aac:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000b08 <HAL_TIM_IC_CaptureCallback+0x110>
 8000ab0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ab8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000abc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ac0:	edc7 7a00 	vstr	s15, [r7]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000aca:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);//rising?���? ?��리거
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6a1a      	ldr	r2, [r3, #32]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f022 020a 	bic.w	r2, r2, #10
 8000ae0:	621a      	str	r2, [r3, #32]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6a12      	ldr	r2, [r2, #32]
 8000aec:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 0202 	bic.w	r2, r2, #2
 8000afc:	60da      	str	r2, [r3, #12]
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	b020c49c 	.word	0xb020c49c
 8000b0c:	3fa16872 	.word	0x3fa16872
 8000b10:	24000038 	.word	0x24000038
 8000b14:	2400002c 	.word	0x2400002c
 8000b18:	24000030 	.word	0x24000030
 8000b1c:	24000034 	.word	0x24000034
 8000b20:	24000039 	.word	0x24000039
 8000b24:	240000dc 	.word	0x240000dc

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fcb2 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f824 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f7ff fe34 	bl	80007a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b38:	f000 fb7c 	bl	8001234 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b3c:	f000 fc78 	bl	8001430 <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 8000b40:	f7ff fd52 	bl	80005e8 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000b44:	f000 f96a 	bl	8000e1c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b48:	f000 fa06 	bl	8000f58 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000b4c:	f000 fb26 	bl	800119c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b50:	2100      	movs	r1, #0
 8000b52:	4808      	ldr	r0, [pc, #32]	; (8000b74 <main+0x4c>)
 8000b54:	f004 fa4c 	bl	8004ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <main+0x4c>)
 8000b5c:	f004 fa48 	bl	8004ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000b60:	2100      	movs	r1, #0
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <main+0x50>)
 8000b64:	f004 fbb4 	bl	80052d0 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim1.Instance->CCR2 = 1;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <main+0x4c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	639a      	str	r2, [r3, #56]	; 0x38
 8000b70:	e7fa      	b.n	8000b68 <main+0x40>
 8000b72:	bf00      	nop
 8000b74:	24000128 	.word	0x24000128
 8000b78:	240000dc 	.word	0x240000dc

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09c      	sub	sp, #112	; 0x70
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	224c      	movs	r2, #76	; 0x4c
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f007 f966 	bl	8007e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2220      	movs	r2, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f007 f960 	bl	8007e5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b9c:	2004      	movs	r0, #4
 8000b9e:	f001 fe61 	bl	8002864 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <SystemClock_Config+0xdc>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	4a2b      	ldr	r2, [pc, #172]	; (8000c58 <SystemClock_Config+0xdc>)
 8000bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <SystemClock_Config+0xdc>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bbe:	bf00      	nop
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <SystemClock_Config+0xdc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bcc:	d1f8      	bne.n	8000bc0 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000bce:	2322      	movs	r3, #34	; 0x22
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd6:	2340      	movs	r3, #64	; 0x40
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bde:	2302      	movs	r3, #2
 8000be0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be2:	2300      	movs	r3, #0
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be6:	2304      	movs	r3, #4
 8000be8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000bea:	2308      	movs	r3, #8
 8000bec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fe84 	bl	8002918 <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c16:	f000 f821 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	233f      	movs	r3, #63	; 0x3f
 8000c1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fa6e 	bl	8003120 <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c4a:	f000 f807 	bl	8000c5c <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3770      	adds	r7, #112	; 0x70
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	58024800 	.word	0x58024800

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_MspInit+0x30>)
 8000c70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_MspInit+0x30>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_MspInit+0x30>)
 8000c80:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	58024400 	.word	0x58024400

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 fc46 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <FDCAN1_IT0_IRQHandler+0x10>)
 8000cf6:	f000 ff51 	bl	8001b9c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2400003c 	.word	0x2400003c

08000d04 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <FDCAN1_IT1_IRQHandler+0x10>)
 8000d0a:	f000 ff47 	bl	8001b9c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2400003c 	.word	0x2400003c

08000d18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <TIM3_IRQHandler+0x10>)
 8000d1e:	f004 fc27 	bl	8005570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	240000dc 	.word	0x240000dc

08000d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d30:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <SystemInit+0xd0>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a31      	ldr	r2, [pc, #196]	; (8000dfc <SystemInit+0xd0>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d40:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <SystemInit+0xd4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d807      	bhi.n	8000d5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <SystemInit+0xd4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 030f 	bic.w	r3, r3, #15
 8000d54:	4a2a      	ldr	r2, [pc, #168]	; (8000e00 <SystemInit+0xd4>)
 8000d56:	f043 0303 	orr.w	r3, r3, #3
 8000d5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <SystemInit+0xd8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a28      	ldr	r2, [pc, #160]	; (8000e04 <SystemInit+0xd8>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <SystemInit+0xd8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <SystemInit+0xd8>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4924      	ldr	r1, [pc, #144]	; (8000e04 <SystemInit+0xd8>)
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <SystemInit+0xdc>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <SystemInit+0xd4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d007      	beq.n	8000d96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <SystemInit+0xd4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f023 030f 	bic.w	r3, r3, #15
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <SystemInit+0xd4>)
 8000d90:	f043 0303 	orr.w	r3, r3, #3
 8000d94:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <SystemInit+0xd8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <SystemInit+0xd8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <SystemInit+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <SystemInit+0xd8>)
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <SystemInit+0xe0>)
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <SystemInit+0xd8>)
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <SystemInit+0xe4>)
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <SystemInit+0xd8>)
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <SystemInit+0xe8>)
 8000db8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <SystemInit+0xd8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <SystemInit+0xd8>)
 8000dc2:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <SystemInit+0xe8>)
 8000dc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <SystemInit+0xd8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <SystemInit+0xd8>)
 8000dce:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <SystemInit+0xe8>)
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <SystemInit+0xd8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <SystemInit+0xd8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <SystemInit+0xd8>)
 8000dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <SystemInit+0xd8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <SystemInit+0xec>)
 8000dec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000df0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	52002000 	.word	0x52002000
 8000e04:	58024400 	.word	0x58024400
 8000e08:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e0c:	02020200 	.word	0x02020200
 8000e10:	01ff0000 	.word	0x01ff0000
 8000e14:	01010280 	.word	0x01010280
 8000e18:	52004000 	.word	0x52004000

08000e1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b098      	sub	sp, #96	; 0x60
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2234      	movs	r2, #52	; 0x34
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f007 f807 	bl	8007e5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4e:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000e50:	4a40      	ldr	r2, [pc, #256]	; (8000f54 <MX_TIM1_Init+0x138>)
 8000e52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000e54:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000e56:	223f      	movs	r2, #63	; 0x3f
 8000e58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000e60:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000e62:	2264      	movs	r2, #100	; 0x64
 8000e64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6c:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e78:	4835      	ldr	r0, [pc, #212]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000e7a:	f004 f862 	bl	8004f42 <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e84:	f7ff feea 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e98:	4619      	mov	r1, r3
 8000e9a:	482d      	ldr	r0, [pc, #180]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000e9c:	f005 fcfa 	bl	8006894 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ea6:	f7ff fed9 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eaa:	2360      	movs	r3, #96	; 0x60
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8000eae:	2332      	movs	r3, #50	; 0x32
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4820      	ldr	r0, [pc, #128]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000ed0:	f004 fd0a 	bl	80058e8 <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000eda:	f7ff febf 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eea:	2204      	movs	r2, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000ef0:	f004 fcfa 	bl	80058e8 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8000efa:	f7ff feaf 	bl	8000c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000f34:	f005 fd3c 	bl	80069b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000f3e:	f7ff fe8d 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <MX_TIM1_Init+0x134>)
 8000f44:	f000 f8ee 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3760      	adds	r7, #96	; 0x60
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	24000128 	.word	0x24000128
 8000f54:	40010000 	.word	0x40010000

08000f58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000f86:	4a2c      	ldr	r2, [pc, #176]	; (8001038 <MX_TIM3_Init+0xe0>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000f8c:	223f      	movs	r2, #63	; 0x3f
 8000f8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000faa:	4822      	ldr	r0, [pc, #136]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000fac:	f003 ff72 	bl	8004e94 <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000fb6:	f7ff fe51 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481b      	ldr	r0, [pc, #108]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000fc8:	f004 fda2 	bl	8005b10 <HAL_TIM_ConfigClockSource>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000fd2:	f7ff fe43 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000fd6:	4817      	ldr	r0, [pc, #92]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000fd8:	f004 f918 	bl	800520c <HAL_TIM_IC_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000fe2:	f7ff fe3b 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480f      	ldr	r0, [pc, #60]	; (8001034 <MX_TIM3_Init+0xdc>)
 8000ff6:	f005 fc4d 	bl	8006894 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001000:	f7ff fe2c 	bl	8000c5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001008:	2301      	movs	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <MX_TIM3_Init+0xdc>)
 800101c:	f004 fbc7 	bl	80057ae <HAL_TIM_IC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001026:	f7ff fe19 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3730      	adds	r7, #48	; 0x30
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	240000dc 	.word	0x240000dc
 8001038:	40000400 	.word	0x40000400

0800103c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_TIM_PWM_MspInit+0x3c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d10e      	bne.n	800106c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_TIM_PWM_MspInit+0x40>)
 8001050:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <HAL_TIM_PWM_MspInit+0x40>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_TIM_PWM_MspInit+0x40>)
 8001060:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40010000 	.word	0x40010000
 800107c:	58024400 	.word	0x58024400

08001080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <HAL_TIM_Base_MspInit+0x98>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d135      	bne.n	800110e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_TIM_Base_MspInit+0x9c>)
 80010a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_TIM_Base_MspInit+0x9c>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_TIM_Base_MspInit+0x9c>)
 80010b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_TIM_Base_MspInit+0x9c>)
 80010c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_TIM_Base_MspInit+0x9c>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_TIM_Base_MspInit+0x9c>)
 80010d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010de:	2340      	movs	r3, #64	; 0x40
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ee:	2302      	movs	r3, #2
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <HAL_TIM_Base_MspInit+0xa0>)
 80010fa:	f001 f9e9 	bl	80024d0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	201d      	movs	r0, #29
 8001104:	f000 fb33 	bl	800176e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001108:	201d      	movs	r0, #29
 800110a:	f000 fb4a 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40000400 	.word	0x40000400
 800111c:	58024400 	.word	0x58024400
 8001120:	58020000 	.word	0x58020000

08001124 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_TIM_MspPostInit+0x6c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d11f      	bne.n	8001186 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_TIM_MspPostInit+0x70>)
 8001148:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_TIM_MspPostInit+0x70>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_TIM_MspPostInit+0x70>)
 8001158:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001164:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001168:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_TIM_MspPostInit+0x74>)
 8001182:	f001 f9a5 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40010000 	.word	0x40010000
 8001194:	58024400 	.word	0x58024400
 8001198:	58021000 	.word	0x58021000

0800119c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <MX_USART2_UART_Init+0x94>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e4:	4811      	ldr	r0, [pc, #68]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011e6:	f005 fca1 	bl	8006b2c <HAL_UART_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011f0:	f7ff fd34 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f4:	2100      	movs	r1, #0
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_USART2_UART_Init+0x90>)
 80011f8:	f006 fd34 	bl	8007c64 <HAL_UARTEx_SetTxFifoThreshold>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001202:	f7ff fd2b 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001206:	2100      	movs	r1, #0
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <MX_USART2_UART_Init+0x90>)
 800120a:	f006 fd69 	bl	8007ce0 <HAL_UARTEx_SetRxFifoThreshold>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001214:	f7ff fd22 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_USART2_UART_Init+0x90>)
 800121a:	f006 fcea 	bl	8007bf2 <HAL_UARTEx_DisableFifoMode>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001224:	f7ff fd1a 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	24000204 	.word	0x24000204
 8001230:	40004400 	.word	0x40004400

08001234 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800123a:	4a23      	ldr	r2, [pc, #140]	; (80012c8 <MX_USART3_UART_Init+0x94>)
 800123c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800127e:	f005 fc55 	bl	8006b2c <HAL_UART_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001288:	f7ff fce8 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001290:	f006 fce8 	bl	8007c64 <HAL_UARTEx_SetTxFifoThreshold>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800129a:	f7ff fcdf 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129e:	2100      	movs	r1, #0
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 80012a2:	f006 fd1d 	bl	8007ce0 <HAL_UARTEx_SetRxFifoThreshold>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012ac:	f7ff fcd6 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 80012b2:	f006 fc9e 	bl	8007bf2 <HAL_UARTEx_DisableFifoMode>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f7ff fcce 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	24000174 	.word	0x24000174
 80012c8:	40004800 	.word	0x40004800

080012cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ba      	sub	sp, #232	; 0xe8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	22b8      	movs	r2, #184	; 0xb8
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 fdb5 	bl	8007e5c <memset>
  if(uartHandle->Instance==USART2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a49      	ldr	r2, [pc, #292]	; (800141c <HAL_UART_MspInit+0x150>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d142      	bne.n	8001382 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fa94 	bl	8003838 <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001316:	f7ff fca1 	bl	8000c5c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_UART_MspInit+0x154>)
 800131c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001320:	4a3f      	ldr	r2, [pc, #252]	; (8001420 <HAL_UART_MspInit+0x154>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_UART_MspInit+0x154>)
 800132c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b39      	ldr	r3, [pc, #228]	; (8001420 <HAL_UART_MspInit+0x154>)
 800133a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800133e:	4a38      	ldr	r2, [pc, #224]	; (8001420 <HAL_UART_MspInit+0x154>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001348:	4b35      	ldr	r3, [pc, #212]	; (8001420 <HAL_UART_MspInit+0x154>)
 800134a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001356:	230c      	movs	r3, #12
 8001358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136e:	2307      	movs	r3, #7
 8001370:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001378:	4619      	mov	r1, r3
 800137a:	482a      	ldr	r0, [pc, #168]	; (8001424 <HAL_UART_MspInit+0x158>)
 800137c:	f001 f8a8 	bl	80024d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001380:	e047      	b.n	8001412 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a28      	ldr	r2, [pc, #160]	; (8001428 <HAL_UART_MspInit+0x15c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d142      	bne.n	8001412 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800138c:	2302      	movs	r3, #2
 800138e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fa4c 	bl	8003838 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_UART_MspInit+0xde>
      Error_Handler();
 80013a6:	f7ff fc59 	bl	8000c5c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_UART_MspInit+0x154>)
 80013ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_UART_MspInit+0x154>)
 80013b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_UART_MspInit+0x154>)
 80013bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_UART_MspInit+0x154>)
 80013ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ce:	4a14      	ldr	r2, [pc, #80]	; (8001420 <HAL_UART_MspInit+0x154>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_UART_MspInit+0x154>)
 80013da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001400:	2307      	movs	r3, #7
 8001402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001406:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <HAL_UART_MspInit+0x160>)
 800140e:	f001 f85f 	bl	80024d0 <HAL_GPIO_Init>
}
 8001412:	bf00      	nop
 8001414:	37e8      	adds	r7, #232	; 0xe8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40004400 	.word	0x40004400
 8001420:	58024400 	.word	0x58024400
 8001424:	58020000 	.word	0x58020000
 8001428:	40004800 	.word	0x40004800
 800142c:	58020c00 	.word	0x58020c00

08001430 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f7ff fc72 	bl	8000d2c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	; (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800146e:	f006 fcc3 	bl	8007df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff fb59 	bl	8000b28 <main>
  bx  lr
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800147c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001480:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001484:	08007f18 	.word	0x08007f18
  ldr r2, =_sbss
 8001488:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800148c:	24000298 	.word	0x24000298

08001490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f95c 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80014a0:	f001 fff4 	bl	800348c <HAL_RCC_GetSysClockFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_Init+0x68>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	4913      	ldr	r1, [pc, #76]	; (8001500 <HAL_Init+0x6c>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_Init+0x68>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_Init+0x6c>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_Init+0x70>)
 80014d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_Init+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f814 	bl	800150c <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e002      	b.n	80014f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ee:	f7ff fbbb 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	58024400 	.word	0x58024400
 8001500:	08007ed0 	.word	0x08007ed0
 8001504:	24000004 	.word	0x24000004
 8001508:	24000000 	.word	0x24000000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_InitTick+0x60>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e021      	b.n	8001564 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_InitTick+0x64>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_InitTick+0x60>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f941 	bl	80017be <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f90b 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x68>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2400000c 	.word	0x2400000c
 8001570:	24000000 	.word	0x24000000
 8001574:	24000008 	.word	0x24000008

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2400000c 	.word	0x2400000c
 800159c:	24000294 	.word	0x24000294

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	24000294 	.word	0x24000294

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <__NVIC_SetPriorityGrouping+0x40>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x40>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	05fa0000 	.word	0x05fa0000

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff29 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff40 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff33 	bl	800161c <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa4 	bl	8001714 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b098      	sub	sp, #96	; 0x60
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80017e0:	4a84      	ldr	r2, [pc, #528]	; (80019f4 <HAL_FDCAN_Init+0x21c>)
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4611      	mov	r1, r2
 80017e8:	224c      	movs	r2, #76	; 0x4c
 80017ea:	4618      	mov	r0, r3
 80017ec:	f006 fb28 	bl	8007e40 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1ca      	b.n	8001b90 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a7e      	ldr	r2, [pc, #504]	; (80019f8 <HAL_FDCAN_Init+0x220>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d106      	bne.n	8001812 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800180c:	461a      	mov	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7fe ff44 	bl	80006b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0210 	bic.w	r2, r2, #16
 800183a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800183c:	f7ff feb0 	bl	80015a0 <HAL_GetTick>
 8001840:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001842:	e014      	b.n	800186e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001844:	f7ff feac 	bl	80015a0 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b0a      	cmp	r3, #10
 8001850:	d90d      	bls.n	800186e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e190      	b.n	8001b90 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b08      	cmp	r3, #8
 800187a:	d0e3      	beq.n	8001844 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800188c:	f7ff fe88 	bl	80015a0 <HAL_GetTick>
 8001890:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001892:	e014      	b.n	80018be <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001894:	f7ff fe84 	bl	80015a0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b0a      	cmp	r3, #10
 80018a0:	d90d      	bls.n	80018be <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e168      	b.n	8001b90 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0e3      	beq.n	8001894 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0202 	orr.w	r2, r2, #2
 80018da:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7c1b      	ldrb	r3, [r3, #16]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d108      	bne.n	80018f6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018f2:	619a      	str	r2, [r3, #24]
 80018f4:	e007      	b.n	8001906 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001904:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7c5b      	ldrb	r3, [r3, #17]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d108      	bne.n	8001920 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800191c:	619a      	str	r2, [r3, #24]
 800191e:	e007      	b.n	8001930 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800192e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7c9b      	ldrb	r3, [r3, #18]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d108      	bne.n	800194a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	e007      	b.n	800195a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001958:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800197e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0210 	bic.w	r2, r2, #16
 800198e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0204 	orr.w	r2, r2, #4
 80019a6:	619a      	str	r2, [r3, #24]
 80019a8:	e030      	b.n	8001a0c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d02c      	beq.n	8001a0c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d020      	beq.n	80019fc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699a      	ldr	r2, [r3, #24]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019c8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0210 	orr.w	r2, r2, #16
 80019d8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d114      	bne.n	8001a0c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	619a      	str	r2, [r3, #24]
 80019f2:	e00b      	b.n	8001a0c <HAL_FDCAN_Init+0x234>
 80019f4:	08007e84 	.word	0x08007e84
 80019f8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a1c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a24:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a34:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a36:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a40:	d115      	bne.n	8001a6e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a50:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	3b01      	subs	r3, #1
 8001a58:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001a5a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	3b01      	subs	r3, #1
 8001a64:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001a6a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a6c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00a      	beq.n	8001a8c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a94:	4413      	add	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d012      	beq.n	8001ac0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001aa2:	f023 0107 	bic.w	r1, r3, #7
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d012      	beq.n	8001aee <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001ad0:	f023 0107 	bic.w	r1, r3, #7
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ade:	4413      	add	r3, r2
 8001ae0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d013      	beq.n	8001b1e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001afe:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b12:	011a      	lsls	r2, r3, #4
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d013      	beq.n	8001b4e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b2e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b42:	021a      	lsls	r2, r3, #8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <HAL_FDCAN_Init+0x3c0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d107      	bne.n	8001b68 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f022 0203 	bic.w	r2, r2, #3
 8001b66:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fb1f 	bl	80021c4 <FDCAN_CalcultateRamBlockAddresses>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001b8c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3760      	adds	r7, #96	; 0x60
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	4000a000 	.word	0x4000a000

08001b9c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b092      	sub	sp, #72	; 0x48
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001ba4:	4b90      	ldr	r3, [pc, #576]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	079b      	lsls	r3, r3, #30
 8001baa:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001bac:	4b8e      	ldr	r3, [pc, #568]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	079b      	lsls	r3, r3, #30
 8001bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bbe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001bc2:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bcc:	4013      	ands	r3, r2
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001be4:	4013      	ands	r3, r2
 8001be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c06:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c14:	4013      	ands	r3, r2
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d011      	beq.n	8001c62 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00a      	beq.n	8001c62 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c54:	651a      	str	r2, [r3, #80]	; 0x50
 8001c56:	4b64      	ldr	r3, [pc, #400]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fa65 	bl	800212c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01e      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d017      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c92:	4013      	ands	r3, r2
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c9e:	651a      	str	r2, [r3, #80]	; 0x50
 8001ca0:	4b51      	ldr	r3, [pc, #324]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fa16 	bl	80020da <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001cba:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <HAL_FDCAN_IRQHandler+0x250>)
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	6513      	str	r3, [r2, #80]	; 0x50
 8001cc0:	4a49      	ldr	r2, [pc, #292]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc4:	0f9b      	lsrs	r3, r3, #30
 8001cc6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001cc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f9c4 	bl	8002058 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_FDCAN_IRQHandler+0x250>)
 8001cde:	400b      	ands	r3, r1
 8001ce0:	6513      	str	r3, [r2, #80]	; 0x50
 8001ce2:	4a41      	ldr	r2, [pc, #260]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce6:	0f9b      	lsrs	r3, r3, #30
 8001ce8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f9be 	bl	800206e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00d      	beq.n	8001d14 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <HAL_FDCAN_IRQHandler+0x250>)
 8001d00:	400b      	ands	r3, r1
 8001d02:	6513      	str	r3, [r2, #80]	; 0x50
 8001d04:	4a38      	ldr	r2, [pc, #224]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d08:	0f9b      	lsrs	r3, r3, #30
 8001d0a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f9b8 	bl	8002084 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00d      	beq.n	8001d36 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_FDCAN_IRQHandler+0x250>)
 8001d22:	400b      	ands	r3, r1
 8001d24:	6513      	str	r3, [r2, #80]	; 0x50
 8001d26:	4a30      	ldr	r2, [pc, #192]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2a:	0f9b      	lsrs	r3, r3, #30
 8001d2c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f9b2 	bl	800209a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d011      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f9a4 	bl	80020b0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01e      	beq.n	8001db4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d017      	beq.n	8001db4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d98:	4013      	ands	r3, r2
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da4:	651a      	str	r2, [r3, #80]	; 0x50
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f988 	bl	80020c4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00f      	beq.n	8001df0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001dd8:	651a      	str	r2, [r3, #80]	; 0x50
 8001dda:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_FDCAN_IRQHandler+0x24c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f985 	bl	80020f0 <HAL_FDCAN_RxBufferNewMessageCallback>
 8001de6:	e003      	b.n	8001df0 <HAL_FDCAN_IRQHandler+0x254>
 8001de8:	4000a800 	.word	0x4000a800
 8001dec:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d011      	beq.n	8001e22 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e14:	651a      	str	r2, [r3, #80]	; 0x50
 8001e16:	4b8d      	ldr	r3, [pc, #564]	; (800204c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f971 	bl	8002104 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d011      	beq.n	8001e54 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e46:	651a      	str	r2, [r3, #80]	; 0x50
 8001e48:	4b80      	ldr	r3, [pc, #512]	; (800204c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f962 	bl	8002118 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d016      	beq.n	8001e90 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00f      	beq.n	8001e90 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e78:	651a      	str	r2, [r3, #80]	; 0x50
 8001e7a:	4b74      	ldr	r3, [pc, #464]	; (800204c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00d      	beq.n	8001eb2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e9c:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	6513      	str	r3, [r2, #80]	; 0x50
 8001ea2:	4a6a      	ldr	r2, [pc, #424]	; (800204c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea6:	0f9b      	lsrs	r3, r3, #30
 8001ea8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f951 	bl	8002154 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d011      	beq.n	8001edc <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ebe:	4b64      	ldr	r3, [pc, #400]	; (8002050 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	6513      	str	r3, [r2, #80]	; 0x50
 8001ec4:	4a61      	ldr	r2, [pc, #388]	; (800204c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec8:	0f9b      	lsrs	r3, r3, #30
 8001eca:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5c      	ldr	r2, [pc, #368]	; (8002054 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	f040 80a6 	bne.w	8002034 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 809e 	beq.w	8002034 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f1a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	6a3a      	ldr	r2, [r7, #32]
 8001f24:	4013      	ands	r3, r2
 8001f26:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001f32:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001f4a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001f62:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8f2 	bl	800216a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	6a3a      	ldr	r2, [r7, #32]
 8001f92:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001f94:	6a39      	ldr	r1, [r7, #32]
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8f2 	bl	8002180 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01b      	beq.n	8001fe2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d014      	beq.n	8001fe2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fce:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	6939      	ldr	r1, [r7, #16]
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8da 	bl	8002196 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001ff0:	69f9      	ldr	r1, [r7, #28]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8db 	bl	80021ae <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f87e 	bl	8002140 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002044:	bf00      	nop
 8002046:	3748      	adds	r7, #72	; 0x48
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	4000a800 	.word	0x4000a800
 8002050:	3fcfffff 	.word	0x3fcfffff
 8002054:	4000a000 	.word	0x4000a000

08002058 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80021da:	4ba7      	ldr	r3, [pc, #668]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021dc:	4013      	ands	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	0091      	lsls	r1, r2, #2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	430b      	orrs	r3, r1
 80021e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	041a      	lsls	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4413      	add	r3, r2
 8002210:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800221a:	4b97      	ldr	r3, [pc, #604]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800221c:	4013      	ands	r3, r2
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	0091      	lsls	r1, r2, #2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	430b      	orrs	r3, r1
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	041a      	lsls	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4413      	add	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800225c:	4b86      	ldr	r3, [pc, #536]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800225e:	4013      	ands	r3, r2
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	0091      	lsls	r1, r2, #2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	430b      	orrs	r3, r1
 800226a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002276:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	041a      	lsls	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022a4:	4b74      	ldr	r3, [pc, #464]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	0091      	lsls	r1, r2, #2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c6:	041a      	lsls	r2, r3, #16
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80022ec:	4b62      	ldr	r3, [pc, #392]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	0091      	lsls	r1, r2, #2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	430b      	orrs	r3, r1
 80022fa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4413      	add	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002318:	4b57      	ldr	r3, [pc, #348]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800231a:	4013      	ands	r3, r2
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	0091      	lsls	r1, r2, #2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	430b      	orrs	r3, r1
 8002326:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002332:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	041a      	lsls	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	4413      	add	r3, r2
 8002350:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800235c:	4013      	ands	r3, r2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	0091      	lsls	r1, r2, #2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	430b      	orrs	r3, r1
 8002368:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002374:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002390:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	061a      	lsls	r2, r3, #24
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80023aa:	4413      	add	r3, r2
 80023ac:	009a      	lsls	r2, r3, #2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	441a      	add	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	441a      	add	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	441a      	add	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	441a      	add	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	4a04      	ldr	r2, [pc, #16]	; (8002480 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d915      	bls.n	80024a0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002474:	e006      	b.n	8002484 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002476:	bf00      	nop
 8002478:	ffff0003 	.word	0xffff0003
 800247c:	10002b00 	.word	0x10002b00
 8002480:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800248a:	f043 0220 	orr.w	r2, r3, #32
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2203      	movs	r2, #3
 8002498:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e010      	b.n	80024c2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e005      	b.n	80024b4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3304      	adds	r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3f3      	bcc.n	80024a8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_GPIO_Init+0x234>)
 80024e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024e2:	e194      	b.n	800280e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8186 	beq.w	8002808 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d005      	beq.n	8002514 <HAL_GPIO_Init+0x44>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d130      	bne.n	8002576 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800254a:	2201      	movs	r2, #1
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	f003 0201 	and.w	r2, r3, #1
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b03      	cmp	r3, #3
 8002580:	d017      	beq.n	80025b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d123      	bne.n	8002606 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	69b9      	ldr	r1, [r7, #24]
 8002602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0203 	and.w	r2, r3, #3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80e0 	beq.w	8002808 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002648:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <HAL_GPIO_Init+0x238>)
 800264a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800264e:	4a2e      	ldr	r2, [pc, #184]	; (8002708 <HAL_GPIO_Init+0x238>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_GPIO_Init+0x238>)
 800265a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002666:	4a29      	ldr	r2, [pc, #164]	; (800270c <HAL_GPIO_Init+0x23c>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a20      	ldr	r2, [pc, #128]	; (8002710 <HAL_GPIO_Init+0x240>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d052      	beq.n	8002738 <HAL_GPIO_Init+0x268>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_GPIO_Init+0x244>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x22e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_GPIO_Init+0x248>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x22a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_GPIO_Init+0x24c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x226>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <HAL_GPIO_Init+0x250>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x222>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_GPIO_Init+0x254>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x21e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a1a      	ldr	r2, [pc, #104]	; (8002728 <HAL_GPIO_Init+0x258>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x21a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_GPIO_Init+0x25c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x216>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_GPIO_Init+0x260>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x212>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_GPIO_Init+0x264>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x20e>
 80026da:	2309      	movs	r3, #9
 80026dc:	e02d      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026de:	230a      	movs	r3, #10
 80026e0:	e02b      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e029      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e027      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e025      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e023      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e021      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e01f      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e01d      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e01b      	b.n	800273a <HAL_GPIO_Init+0x26a>
 8002702:	bf00      	nop
 8002704:	58000080 	.word	0x58000080
 8002708:	58024400 	.word	0x58024400
 800270c:	58000400 	.word	0x58000400
 8002710:	58020000 	.word	0x58020000
 8002714:	58020400 	.word	0x58020400
 8002718:	58020800 	.word	0x58020800
 800271c:	58020c00 	.word	0x58020c00
 8002720:	58021000 	.word	0x58021000
 8002724:	58021400 	.word	0x58021400
 8002728:	58021800 	.word	0x58021800
 800272c:	58021c00 	.word	0x58021c00
 8002730:	58022000 	.word	0x58022000
 8002734:	58022400 	.word	0x58022400
 8002738:	2300      	movs	r3, #0
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	f002 0203 	and.w	r2, r2, #3
 8002740:	0092      	lsls	r2, r2, #2
 8002742:	4093      	lsls	r3, r2
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274a:	4938      	ldr	r1, [pc, #224]	; (800282c <HAL_GPIO_Init+0x35c>)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	3302      	adds	r3, #2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800277e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	3301      	adds	r3, #1
 800280c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f ae63 	bne.w	80024e4 <HAL_GPIO_Init+0x14>
  }
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	3724      	adds	r7, #36	; 0x24
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	58000400 	.word	0x58000400

08002830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
 800283c:	4613      	mov	r3, r2
 800283e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002840:	787b      	ldrb	r3, [r7, #1]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800284c:	e003      	b.n	8002856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	041a      	lsls	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	619a      	str	r2, [r3, #24]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_PWREx_ConfigSupply+0xb0>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	2b06      	cmp	r3, #6
 8002876:	d00a      	beq.n	800288e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002878:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_PWREx_ConfigSupply+0xb0>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e040      	b.n	800290c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e03e      	b.n	800290c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_PWREx_ConfigSupply+0xb0>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002896:	491f      	ldr	r1, [pc, #124]	; (8002914 <HAL_PWREx_ConfigSupply+0xb0>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4313      	orrs	r3, r2
 800289c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800289e:	f7fe fe7f 	bl	80015a0 <HAL_GetTick>
 80028a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028a4:	e009      	b.n	80028ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028a6:	f7fe fe7b 	bl	80015a0 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b4:	d901      	bls.n	80028ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e028      	b.n	800290c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_PWREx_ConfigSupply+0xb0>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c6:	d1ee      	bne.n	80028a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b1e      	cmp	r3, #30
 80028cc:	d008      	beq.n	80028e0 <HAL_PWREx_ConfigSupply+0x7c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b2e      	cmp	r3, #46	; 0x2e
 80028d2:	d005      	beq.n	80028e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b1d      	cmp	r3, #29
 80028d8:	d002      	beq.n	80028e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b2d      	cmp	r3, #45	; 0x2d
 80028de:	d114      	bne.n	800290a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80028e0:	f7fe fe5e 	bl	80015a0 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028e6:	e009      	b.n	80028fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028e8:	f7fe fe5a 	bl	80015a0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f6:	d901      	bls.n	80028fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e007      	b.n	800290c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_PWREx_ConfigSupply+0xb0>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002908:	d1ee      	bne.n	80028e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	58024800 	.word	0x58024800

08002918 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08c      	sub	sp, #48	; 0x30
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e3f3      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80b3 	beq.w	8002a9e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002938:	4b9e      	ldr	r3, [pc, #632]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002942:	4b9c      	ldr	r3, [pc, #624]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	2b10      	cmp	r3, #16
 800294c:	d007      	beq.n	800295e <HAL_RCC_OscConfig+0x46>
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	2b18      	cmp	r3, #24
 8002952:	d112      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d10d      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295e:	4b95      	ldr	r3, [pc, #596]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8098 	beq.w	8002a9c <HAL_RCC_OscConfig+0x184>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 8093 	bne.w	8002a9c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e3cb      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x7a>
 8002984:	4b8b      	ldr	r3, [pc, #556]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a8a      	ldr	r2, [pc, #552]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e058      	b.n	8002a44 <HAL_RCC_OscConfig+0x12c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d112      	bne.n	80029c0 <HAL_RCC_OscConfig+0xa8>
 800299a:	4b86      	ldr	r3, [pc, #536]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a85      	ldr	r2, [pc, #532]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b83      	ldr	r3, [pc, #524]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a82      	ldr	r2, [pc, #520]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7f      	ldr	r2, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e041      	b.n	8002a44 <HAL_RCC_OscConfig+0x12c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c8:	d112      	bne.n	80029f0 <HAL_RCC_OscConfig+0xd8>
 80029ca:	4b7a      	ldr	r3, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a79      	ldr	r2, [pc, #484]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b77      	ldr	r3, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a76      	ldr	r2, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b74      	ldr	r3, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a73      	ldr	r2, [pc, #460]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e029      	b.n	8002a44 <HAL_RCC_OscConfig+0x12c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80029f8:	d112      	bne.n	8002a20 <HAL_RCC_OscConfig+0x108>
 80029fa:	4b6e      	ldr	r3, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a6d      	ldr	r2, [pc, #436]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b6b      	ldr	r3, [pc, #428]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6a      	ldr	r2, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a67      	ldr	r2, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e011      	b.n	8002a44 <HAL_RCC_OscConfig+0x12c>
 8002a20:	4b64      	ldr	r3, [pc, #400]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a63      	ldr	r2, [pc, #396]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a60      	ldr	r2, [pc, #384]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b5e      	ldr	r3, [pc, #376]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5d      	ldr	r2, [pc, #372]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fda8 	bl	80015a0 <HAL_GetTick>
 8002a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fda4 	bl	80015a0 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e355      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x13c>
 8002a72:	e014      	b.n	8002a9e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fd94 	bl	80015a0 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fd90 	bl	80015a0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e341      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a8e:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x164>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 808c 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aac:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1ba>
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	2b18      	cmp	r3, #24
 8002ac6:	d137      	bne.n	8002b38 <HAL_RCC_OscConfig+0x220>
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d132      	bne.n	8002b38 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_RCC_OscConfig+0x1d2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e313      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aea:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 0219 	bic.w	r2, r3, #25
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	492f      	ldr	r1, [pc, #188]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002afc:	f7fe fd50 	bl	80015a0 <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b04:	f7fe fd4c 	bl	80015a0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e2fd      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b16:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	061b      	lsls	r3, r3, #24
 8002b30:	4920      	ldr	r1, [pc, #128]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b36:	e045      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d026      	beq.n	8002b8e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 0219 	bic.w	r2, r3, #25
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4919      	ldr	r1, [pc, #100]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fd25 	bl	80015a0 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fd21 	bl	80015a0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e2d2      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	490b      	ldr	r1, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
 8002b8c:	e01a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_RCC_OscConfig+0x29c>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fd01 	bl	80015a0 <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fcfd 	bl	80015a0 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d903      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e2ae      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
 8002bb4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bb8:	4b99      	ldr	r3, [pc, #612]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d06a      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd0:	4b93      	ldr	r3, [pc, #588]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bd8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bda:	4b91      	ldr	r3, [pc, #580]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d007      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2de>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b18      	cmp	r3, #24
 8002bea:	d11b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x30c>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d116      	bne.n	8002c24 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf6:	4b8a      	ldr	r3, [pc, #552]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2f6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e281      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c0e:	4b84      	ldr	r3, [pc, #528]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	061b      	lsls	r3, r3, #24
 8002c1c:	4980      	ldr	r1, [pc, #512]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c22:	e040      	b.n	8002ca6 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d023      	beq.n	8002c74 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c2c:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a7b      	ldr	r2, [pc, #492]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fcb2 	bl	80015a0 <HAL_GetTick>
 8002c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c40:	f7fe fcae 	bl	80015a0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e25f      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c52:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c5e:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	061b      	lsls	r3, r3, #24
 8002c6c:	496c      	ldr	r1, [pc, #432]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
 8002c72:	e018      	b.n	8002ca6 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c74:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a69      	ldr	r2, [pc, #420]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fc8e 	bl	80015a0 <HAL_GetTick>
 8002c84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c88:	f7fe fc8a 	bl	80015a0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e23b      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d036      	beq.n	8002d20 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d019      	beq.n	8002cee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cba:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbe:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fc6b 	bl	80015a0 <HAL_GetTick>
 8002cca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cce:	f7fe fc67 	bl	80015a0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e218      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ce0:	4b4f      	ldr	r3, [pc, #316]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x3b6>
 8002cec:	e018      	b.n	8002d20 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cee:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	4a4b      	ldr	r2, [pc, #300]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fc51 	bl	80015a0 <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d02:	f7fe fc4d 	bl	80015a0 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1fe      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d14:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d036      	beq.n	8002d9a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d019      	beq.n	8002d68 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a39      	ldr	r2, [pc, #228]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002d3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d40:	f7fe fc2e 	bl	80015a0 <HAL_GetTick>
 8002d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d48:	f7fe fc2a 	bl	80015a0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1db      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d5a:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x430>
 8002d66:	e018      	b.n	8002d9a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d68:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2c      	ldr	r2, [pc, #176]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d74:	f7fe fc14 	bl	80015a0 <HAL_GetTick>
 8002d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d7c:	f7fe fc10 	bl	80015a0 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1c1      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d8e:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80af 	beq.w	8002f06 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_RCC_OscConfig+0x50c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_RCC_OscConfig+0x50c>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fbf4 	bl	80015a0 <HAL_GetTick>
 8002db8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7fe fbf0 	bl	80015a0 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1a1      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <HAL_RCC_OscConfig+0x50c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d106      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4d8>
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6713      	str	r3, [r2, #112]	; 0x70
 8002dee:	e05b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x590>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d117      	bne.n	8002e28 <HAL_RCC_OscConfig+0x510>
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a02      	ldr	r2, [pc, #8]	; (8002e20 <HAL_RCC_OscConfig+0x508>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1c:	e044      	b.n	8002ea8 <HAL_RCC_OscConfig+0x590>
 8002e1e:	bf00      	nop
 8002e20:	58024400 	.word	0x58024400
 8002e24:	58024800 	.word	0x58024800
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d112      	bne.n	8002e56 <HAL_RCC_OscConfig+0x53e>
 8002e30:	4b95      	ldr	r3, [pc, #596]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	4a94      	ldr	r2, [pc, #592]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3c:	4b92      	ldr	r3, [pc, #584]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a91      	ldr	r2, [pc, #580]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	4b8f      	ldr	r3, [pc, #572]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a8e      	ldr	r2, [pc, #568]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	e028      	b.n	8002ea8 <HAL_RCC_OscConfig+0x590>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b85      	cmp	r3, #133	; 0x85
 8002e5c:	d112      	bne.n	8002e84 <HAL_RCC_OscConfig+0x56c>
 8002e5e:	4b8a      	ldr	r3, [pc, #552]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a89      	ldr	r2, [pc, #548]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6a:	4b87      	ldr	r3, [pc, #540]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a86      	ldr	r2, [pc, #536]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	4b84      	ldr	r3, [pc, #528]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a83      	ldr	r2, [pc, #524]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
 8002e82:	e011      	b.n	8002ea8 <HAL_RCC_OscConfig+0x590>
 8002e84:	4b80      	ldr	r3, [pc, #512]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a7f      	ldr	r2, [pc, #508]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e96:	f023 0304 	bic.w	r3, r3, #4
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	4b7a      	ldr	r3, [pc, #488]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a79      	ldr	r2, [pc, #484]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fb76 	bl	80015a0 <HAL_GetTick>
 8002eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fb72 	bl	80015a0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e121      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ece:	4b6e      	ldr	r3, [pc, #440]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ee      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x5a0>
 8002eda:	e014      	b.n	8002f06 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fb60 	bl	80015a0 <HAL_GetTick>
 8002ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fb5c 	bl	80015a0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e10b      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1ee      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8100 	beq.w	8003110 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f10:	4b5d      	ldr	r3, [pc, #372]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f18:	2b18      	cmp	r3, #24
 8002f1a:	f000 80bb 	beq.w	8003094 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	f040 8095 	bne.w	8003052 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b57      	ldr	r3, [pc, #348]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a56      	ldr	r2, [pc, #344]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fb34 	bl	80015a0 <HAL_GetTick>
 8002f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fb30 	bl	80015a0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e0e1      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f4e:	4b4e      	ldr	r3, [pc, #312]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5a:	4b4b      	ldr	r3, [pc, #300]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5e:	4b4b      	ldr	r3, [pc, #300]	; (800308c <HAL_RCC_OscConfig+0x774>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	4946      	ldr	r1, [pc, #280]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	628b      	str	r3, [r1, #40]	; 0x28
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f82:	3b01      	subs	r3, #1
 8002f84:	025b      	lsls	r3, r3, #9
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	041b      	lsls	r3, r3, #16
 8002f92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fa4:	4938      	ldr	r1, [pc, #224]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002faa:	4b37      	ldr	r3, [pc, #220]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	4a36      	ldr	r2, [pc, #216]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fb6:	4b34      	ldr	r3, [pc, #208]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	4b35      	ldr	r3, [pc, #212]	; (8003090 <HAL_RCC_OscConfig+0x778>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fc2:	00d2      	lsls	r2, r2, #3
 8002fc4:	4930      	ldr	r1, [pc, #192]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fca:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f023 020c 	bic.w	r2, r3, #12
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	492c      	ldr	r1, [pc, #176]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	f023 0202 	bic.w	r2, r3, #2
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	4927      	ldr	r1, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fee:	4b26      	ldr	r3, [pc, #152]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	4a25      	ldr	r2, [pc, #148]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	4a22      	ldr	r2, [pc, #136]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8003000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8003024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe fab9 	bl	80015a0 <HAL_GetTick>
 800302e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003032:	f7fe fab5 	bl	80015a0 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e066      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x71a>
 8003050:	e05e      	b.n	8003110 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 8003058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800305c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe fa9f 	bl	80015a0 <HAL_GetTick>
 8003062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003066:	f7fe fa9b 	bl	80015a0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e04c      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_OscConfig+0x770>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f0      	bne.n	8003066 <HAL_RCC_OscConfig+0x74e>
 8003084:	e044      	b.n	8003110 <HAL_RCC_OscConfig+0x7f8>
 8003086:	bf00      	nop
 8003088:	58024400 	.word	0x58024400
 800308c:	fffffc0c 	.word	0xfffffc0c
 8003090:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCC_OscConfig+0x804>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_OscConfig+0x804>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d031      	beq.n	800310c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f003 0203 	and.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d12a      	bne.n	800310c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d122      	bne.n	800310c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d11a      	bne.n	800310c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	0a5b      	lsrs	r3, r3, #9
 80030da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d111      	bne.n	800310c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d108      	bne.n	800310c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	0e1b      	lsrs	r3, r3, #24
 80030fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3730      	adds	r7, #48	; 0x30
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	58024400 	.word	0x58024400

08003120 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e19c      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003134:	4b8a      	ldr	r3, [pc, #552]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d910      	bls.n	8003164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b87      	ldr	r3, [pc, #540]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 020f 	bic.w	r2, r3, #15
 800314a:	4985      	ldr	r1, [pc, #532]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b83      	ldr	r3, [pc, #524]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e184      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	4b7b      	ldr	r3, [pc, #492]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800317c:	429a      	cmp	r2, r3
 800317e:	d908      	bls.n	8003192 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003180:	4b78      	ldr	r3, [pc, #480]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	4975      	ldr	r1, [pc, #468]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800318e:	4313      	orrs	r3, r2
 8003190:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	4b70      	ldr	r3, [pc, #448]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d908      	bls.n	80031c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ae:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	496a      	ldr	r1, [pc, #424]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	4b64      	ldr	r3, [pc, #400]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031d8:	429a      	cmp	r2, r3
 80031da:	d908      	bls.n	80031ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031dc:	4b61      	ldr	r3, [pc, #388]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	495e      	ldr	r1, [pc, #376]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d010      	beq.n	800321c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	4b59      	ldr	r3, [pc, #356]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003206:	429a      	cmp	r2, r3
 8003208:	d908      	bls.n	800321c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800320a:	4b56      	ldr	r3, [pc, #344]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4953      	ldr	r1, [pc, #332]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003218:	4313      	orrs	r3, r2
 800321a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	4b4d      	ldr	r3, [pc, #308]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	429a      	cmp	r2, r3
 8003236:	d908      	bls.n	800324a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f023 020f 	bic.w	r2, r3, #15
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4947      	ldr	r1, [pc, #284]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003246:	4313      	orrs	r3, r2
 8003248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d055      	beq.n	8003302 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4940      	ldr	r1, [pc, #256]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003264:	4313      	orrs	r3, r2
 8003266:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d107      	bne.n	8003280 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003270:	4b3c      	ldr	r3, [pc, #240]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d121      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0f6      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d107      	bne.n	8003298 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003288:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d115      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0ea      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0de      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032b0:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0d6      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f023 0207 	bic.w	r2, r3, #7
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4925      	ldr	r1, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fe f965 	bl	80015a0 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032da:	f7fe f961 	bl	80015a0 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0be      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	429a      	cmp	r2, r3
 8003300:	d1eb      	bne.n	80032da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d010      	beq.n	8003330 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	429a      	cmp	r2, r3
 800331c:	d208      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f023 020f 	bic.w	r2, r3, #15
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	490e      	ldr	r1, [pc, #56]	; (8003364 <HAL_RCC_ClockConfig+0x244>)
 800332c:	4313      	orrs	r3, r2
 800332e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d214      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 020f 	bic.w	r2, r3, #15
 8003346:	4906      	ldr	r1, [pc, #24]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <HAL_RCC_ClockConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d005      	beq.n	8003368 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e086      	b.n	800346e <HAL_RCC_ClockConfig+0x34e>
 8003360:	52002000 	.word	0x52002000
 8003364:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003380:	429a      	cmp	r2, r3
 8003382:	d208      	bcs.n	8003396 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003384:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	4939      	ldr	r1, [pc, #228]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003392:	4313      	orrs	r3, r2
 8003394:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d010      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d208      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033b2:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	492e      	ldr	r1, [pc, #184]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d010      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	4b28      	ldr	r3, [pc, #160]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033dc:	429a      	cmp	r2, r3
 80033de:	d208      	bcs.n	80033f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4922      	ldr	r1, [pc, #136]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d010      	beq.n	8003420 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800340a:	429a      	cmp	r2, r3
 800340c:	d208      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4917      	ldr	r1, [pc, #92]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 800341c:	4313      	orrs	r3, r2
 800341e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003420:	f000 f834 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	4912      	ldr	r1, [pc, #72]	; (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <HAL_RCC_ClockConfig+0x358>)
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_RCC_ClockConfig+0x35c>)
 8003448:	5cd3      	ldrb	r3, [r2, r3]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x360>)
 8003456:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_RCC_ClockConfig+0x364>)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCC_ClockConfig+0x368>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe f852 	bl	800150c <HAL_InitTick>
 8003468:	4603      	mov	r3, r0
 800346a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	58024400 	.word	0x58024400
 800347c:	08007ed0 	.word	0x08007ed0
 8003480:	24000004 	.word	0x24000004
 8003484:	24000000 	.word	0x24000000
 8003488:	24000008 	.word	0x24000008

0800348c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003492:	4bb3      	ldr	r3, [pc, #716]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800349a:	2b18      	cmp	r3, #24
 800349c:	f200 8155 	bhi.w	800374a <HAL_RCC_GetSysClockFreq+0x2be>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	0800350d 	.word	0x0800350d
 80034ac:	0800374b 	.word	0x0800374b
 80034b0:	0800374b 	.word	0x0800374b
 80034b4:	0800374b 	.word	0x0800374b
 80034b8:	0800374b 	.word	0x0800374b
 80034bc:	0800374b 	.word	0x0800374b
 80034c0:	0800374b 	.word	0x0800374b
 80034c4:	0800374b 	.word	0x0800374b
 80034c8:	08003533 	.word	0x08003533
 80034cc:	0800374b 	.word	0x0800374b
 80034d0:	0800374b 	.word	0x0800374b
 80034d4:	0800374b 	.word	0x0800374b
 80034d8:	0800374b 	.word	0x0800374b
 80034dc:	0800374b 	.word	0x0800374b
 80034e0:	0800374b 	.word	0x0800374b
 80034e4:	0800374b 	.word	0x0800374b
 80034e8:	08003539 	.word	0x08003539
 80034ec:	0800374b 	.word	0x0800374b
 80034f0:	0800374b 	.word	0x0800374b
 80034f4:	0800374b 	.word	0x0800374b
 80034f8:	0800374b 	.word	0x0800374b
 80034fc:	0800374b 	.word	0x0800374b
 8003500:	0800374b 	.word	0x0800374b
 8003504:	0800374b 	.word	0x0800374b
 8003508:	0800353f 	.word	0x0800353f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800350c:	4b94      	ldr	r3, [pc, #592]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003518:	4b91      	ldr	r3, [pc, #580]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	08db      	lsrs	r3, r3, #3
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	4a90      	ldr	r2, [pc, #576]	; (8003764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
 8003528:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800352a:	e111      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800352c:	4b8d      	ldr	r3, [pc, #564]	; (8003764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800352e:	61bb      	str	r3, [r7, #24]
    break;
 8003530:	e10e      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003532:	4b8d      	ldr	r3, [pc, #564]	; (8003768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003534:	61bb      	str	r3, [r7, #24]
    break;
 8003536:	e10b      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003538:	4b8c      	ldr	r3, [pc, #560]	; (800376c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800353a:	61bb      	str	r3, [r7, #24]
    break;
 800353c:	e108      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800353e:	4b88      	ldr	r3, [pc, #544]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003548:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003552:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003554:	4b82      	ldr	r3, [pc, #520]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800355e:	4b80      	ldr	r3, [pc, #512]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	08db      	lsrs	r3, r3, #3
 8003564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80e1 	beq.w	8003744 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b02      	cmp	r3, #2
 8003586:	f000 8083 	beq.w	8003690 <HAL_RCC_GetSysClockFreq+0x204>
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b02      	cmp	r3, #2
 800358e:	f200 80a1 	bhi.w	80036d4 <HAL_RCC_GetSysClockFreq+0x248>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x114>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d056      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x1c0>
 800359e:	e099      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035a0:	4b6f      	ldr	r3, [pc, #444]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d02d      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035ac:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	08db      	lsrs	r3, r3, #3
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	4a6b      	ldr	r2, [pc, #428]	; (8003764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
 80035bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d6:	4b62      	ldr	r3, [pc, #392]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003606:	e087      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003612:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003774 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361a:	4b51      	ldr	r3, [pc, #324]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362a:	ed97 6a02 	vldr	s12, [r7, #8]
 800362e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800364a:	e065      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003656:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003778 <HAL_RCC_GetSysClockFreq+0x2ec>
 800365a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800366e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003672:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800368e:	e043      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800377c <HAL_RCC_GetSysClockFreq+0x2f0>
 800369e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a2:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036d2:	e021      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003778 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003716:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	0a5b      	lsrs	r3, r3, #9
 800371e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003722:	3301      	adds	r3, #1
 8003724:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003730:	edd7 6a07 	vldr	s13, [r7, #28]
 8003734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800373c:	ee17 3a90 	vmov	r3, s15
 8003740:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003742:	e005      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
    break;
 8003748:	e002      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800374c:	61bb      	str	r3, [r7, #24]
    break;
 800374e:	bf00      	nop
  }

  return sysclockfreq;
 8003750:	69bb      	ldr	r3, [r7, #24]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3724      	adds	r7, #36	; 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	58024400 	.word	0x58024400
 8003764:	03d09000 	.word	0x03d09000
 8003768:	003d0900 	.word	0x003d0900
 800376c:	007a1200 	.word	0x007a1200
 8003770:	46000000 	.word	0x46000000
 8003774:	4c742400 	.word	0x4c742400
 8003778:	4a742400 	.word	0x4a742400
 800377c:	4af42400 	.word	0x4af42400

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003786:	f7ff fe81 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800378a:	4602      	mov	r2, r0
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	490f      	ldr	r1, [pc, #60]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003798:	5ccb      	ldrb	r3, [r1, r3]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80037bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037be:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	58024400 	.word	0x58024400
 80037d4:	08007ed0 	.word	0x08007ed0
 80037d8:	24000004 	.word	0x24000004
 80037dc:	24000000 	.word	0x24000000

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80037e4:	f7ff ffcc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4904      	ldr	r1, [pc, #16]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	58024400 	.word	0x58024400
 8003808:	08007ed0 	.word	0x08007ed0

0800380c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003810:	f7ff ffb6 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4904      	ldr	r1, [pc, #16]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	58024400 	.word	0x58024400
 8003834:	08007ed0 	.word	0x08007ed0

08003838 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003844:	2300      	movs	r3, #0
 8003846:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d03f      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800385c:	d02a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800385e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003862:	d824      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003868:	d018      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800386a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800386e:	d81e      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003878:	d007      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800387a:	e018      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4ba6      	ldr	r3, [pc, #664]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4aa5      	ldr	r2, [pc, #660]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003888:	e015      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f001 f99b 	bl	8004bcc <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800389a:	e00c      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fa44 	bl	8004d30 <RCCEx_PLL3_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038ac:	e003      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
      break;
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038bc:	4b96      	ldr	r3, [pc, #600]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c8:	4993      	ldr	r1, [pc, #588]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	650b      	str	r3, [r1, #80]	; 0x50
 80038ce:	e001      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d03d      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d826      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003905 	.word	0x08003905
 80038f4:	08003913 	.word	0x08003913
 80038f8:	08003925 	.word	0x08003925
 80038fc:	0800393d 	.word	0x0800393d
 8003900:	0800393d 	.word	0x0800393d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003904:	4b84      	ldr	r3, [pc, #528]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	4a83      	ldr	r2, [pc, #524]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800390a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003910:	e015      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f001 f957 	bl	8004bcc <RCCEx_PLL2_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003922:	e00c      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3324      	adds	r3, #36	; 0x24
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f001 fa00 	bl	8004d30 <RCCEx_PLL3_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003934:	e003      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
      break;
 800393a:	e000      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800393c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003944:	4b74      	ldr	r3, [pc, #464]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	f023 0207 	bic.w	r2, r3, #7
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	4971      	ldr	r1, [pc, #452]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	650b      	str	r3, [r1, #80]	; 0x50
 8003956:	e001      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003964:	2b00      	cmp	r3, #0
 8003966:	d04a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003970:	d031      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003972:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003976:	d82b      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397c:	d02d      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003982:	d825      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003984:	2bc0      	cmp	r3, #192	; 0xc0
 8003986:	d02a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003988:	2bc0      	cmp	r3, #192	; 0xc0
 800398a:	d821      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d016      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d81d      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d007      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x174>
 800399c:	e018      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399e:	4b5e      	ldr	r3, [pc, #376]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4a5d      	ldr	r2, [pc, #372]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039aa:	e019      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f90a 	bl	8004bcc <RCCEx_PLL2_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039bc:	e010      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3324      	adds	r3, #36	; 0x24
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f9b3 	bl	8004d30 <RCCEx_PLL3_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039ce:	e007      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
      break;
 80039d4:	e004      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80039de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80039e6:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	4949      	ldr	r1, [pc, #292]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	650b      	str	r3, [r1, #80]	; 0x50
 80039f8:	e001      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d04f      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a12:	d036      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003a14:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a18:	d830      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1e:	d032      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a24:	d82a      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a2a:	d02e      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003a2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a30:	d824      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a36:	d018      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3c:	d81e      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a46:	d007      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003a48:	e018      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4a:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	4a32      	ldr	r2, [pc, #200]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a56:	e019      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f8b4 	bl	8004bcc <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a68:	e010      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3324      	adds	r3, #36	; 0x24
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 f95d 	bl	8004d30 <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a7a:	e007      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a80:	e004      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003a82:	bf00      	nop
 8003a84:	e002      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003a92:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9e:	491e      	ldr	r1, [pc, #120]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	650b      	str	r3, [r1, #80]	; 0x50
 8003aa4:	e001      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d034      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aba:	2b30      	cmp	r3, #48	; 0x30
 8003abc:	d01c      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003abe:	2b30      	cmp	r3, #48	; 0x30
 8003ac0:	d817      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d813      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d10f      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003adc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003ade:	e00e      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 f870 	bl	8004bcc <RCCEx_PLL2_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003af0:	e005      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
      break;
 8003af6:	e002      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	4901      	ldr	r1, [pc, #4]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d047      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b34:	d030      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b3a:	d82a      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b40:	d02c      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003b42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b46:	d824      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4c:	d018      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b52:	d81e      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5c:	d007      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003b5e:	e018      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b60:	4bb0      	ldr	r3, [pc, #704]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	4aaf      	ldr	r2, [pc, #700]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b6c:	e017      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3304      	adds	r3, #4
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 f829 	bl	8004bcc <RCCEx_PLL2_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b7e:	e00e      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3324      	adds	r3, #36	; 0x24
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 f8d2 	bl	8004d30 <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b90:	e005      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
      break;
 8003b96:	e002      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003b98:	bf00      	nop
 8003b9a:	e000      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ba4:	4b9f      	ldr	r3, [pc, #636]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb0:	499c      	ldr	r1, [pc, #624]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	650b      	str	r3, [r1, #80]	; 0x50
 8003bb6:	e001      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d049      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd0:	d02e      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd6:	d828      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bdc:	d02a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003be2:	d822      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003be4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003be8:	d026      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003bea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bee:	d81c      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf4:	d010      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bfa:	d816      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01d      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d111      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ffdd 	bl	8004bcc <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c16:	e012      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3324      	adds	r3, #36	; 0x24
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 f886 	bl	8004d30 <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c28:	e009      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2e:	e006      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c30:	bf00      	nop
 8003c32:	e004      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c34:	bf00      	nop
 8003c36:	e002      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c44:	4b77      	ldr	r3, [pc, #476]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c50:	4974      	ldr	r1, [pc, #464]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	650b      	str	r3, [r1, #80]	; 0x50
 8003c56:	e001      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d053      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c6e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003c72:	d034      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c74:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003c78:	d82e      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c7e:	d030      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c84:	d828      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8a:	d02c      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c90:	d822      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c96:	d028      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c9c:	d81c      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca2:	d010      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca8:	d816      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cb2:	d111      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 ff86 	bl	8004bcc <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e014      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f82f 	bl	8004d30 <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cf6:	4b4b      	ldr	r3, [pc, #300]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d04:	4947      	ldr	r1, [pc, #284]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	658b      	str	r3, [r1, #88]	; 0x58
 8003d0a:	e001      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d02f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d24:	d00e      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2a:	d814      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d34:	d10f      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d36:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	4a3a      	ldr	r2, [pc, #232]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d42:	e00c      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 ff3e 	bl	8004bcc <RCCEx_PLL2_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d54:	e003      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d64:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	492c      	ldr	r1, [pc, #176]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	650b      	str	r3, [r1, #80]	; 0x50
 8003d76:	e001      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d032      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d81b      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dcf 	.word	0x08003dcf
 8003d9c:	08003da9 	.word	0x08003da9
 8003da0:	08003db7 	.word	0x08003db7
 8003da4:	08003dcf 	.word	0x08003dcf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003db4:	e00c      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 ff05 	bl	8004bcc <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	4910      	ldr	r1, [pc, #64]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003de8:	e001      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 808a 	beq.w	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a09      	ldr	r2, [pc, #36]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e08:	f7fd fbca 	bl	80015a0 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0e:	e00d      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fd fbc6 	bl	80015a0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d906      	bls.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	75fb      	strb	r3, [r7, #23]
        break;
 8003e22:	e009      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003e24:	58024400 	.word	0x58024400
 8003e28:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2c:	4bba      	ldr	r3, [pc, #744]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0eb      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d166      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e3e:	4bb7      	ldr	r3, [pc, #732]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e48:	4053      	eors	r3, r2
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d013      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e52:	4bb2      	ldr	r3, [pc, #712]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e5c:	4baf      	ldr	r3, [pc, #700]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4aae      	ldr	r2, [pc, #696]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e68:	4bac      	ldr	r3, [pc, #688]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4aab      	ldr	r2, [pc, #684]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e74:	4aa9      	ldr	r2, [pc, #676]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e84:	d115      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fd fb8b 	bl	80015a0 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8c:	e00b      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fd fb87 	bl	80015a0 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d902      	bls.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ea4:	e005      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea6:	4b9d      	ldr	r3, [pc, #628]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0ed      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d126      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec6:	d10d      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003ec8:	4b94      	ldr	r3, [pc, #592]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed6:	0919      	lsrs	r1, r3, #4
 8003ed8:	4b91      	ldr	r3, [pc, #580]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003eda:	400b      	ands	r3, r1
 8003edc:	498f      	ldr	r1, [pc, #572]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	610b      	str	r3, [r1, #16]
 8003ee2:	e005      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003ee4:	4b8d      	ldr	r3, [pc, #564]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	4a8c      	ldr	r2, [pc, #560]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eee:	6113      	str	r3, [r2, #16]
 8003ef0:	4b8a      	ldr	r3, [pc, #552]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	4987      	ldr	r1, [pc, #540]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	670b      	str	r3, [r1, #112]	; 0x70
 8003f04:	e004      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	75bb      	strb	r3, [r7, #22]
 8003f0a:	e001      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d07f      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f22:	2b28      	cmp	r3, #40	; 0x28
 8003f24:	d866      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003ffb 	.word	0x08003ffb
 8003f30:	08003ff5 	.word	0x08003ff5
 8003f34:	08003ff5 	.word	0x08003ff5
 8003f38:	08003ff5 	.word	0x08003ff5
 8003f3c:	08003ff5 	.word	0x08003ff5
 8003f40:	08003ff5 	.word	0x08003ff5
 8003f44:	08003ff5 	.word	0x08003ff5
 8003f48:	08003ff5 	.word	0x08003ff5
 8003f4c:	08003fd1 	.word	0x08003fd1
 8003f50:	08003ff5 	.word	0x08003ff5
 8003f54:	08003ff5 	.word	0x08003ff5
 8003f58:	08003ff5 	.word	0x08003ff5
 8003f5c:	08003ff5 	.word	0x08003ff5
 8003f60:	08003ff5 	.word	0x08003ff5
 8003f64:	08003ff5 	.word	0x08003ff5
 8003f68:	08003ff5 	.word	0x08003ff5
 8003f6c:	08003fe3 	.word	0x08003fe3
 8003f70:	08003ff5 	.word	0x08003ff5
 8003f74:	08003ff5 	.word	0x08003ff5
 8003f78:	08003ff5 	.word	0x08003ff5
 8003f7c:	08003ff5 	.word	0x08003ff5
 8003f80:	08003ff5 	.word	0x08003ff5
 8003f84:	08003ff5 	.word	0x08003ff5
 8003f88:	08003ff5 	.word	0x08003ff5
 8003f8c:	08003ffb 	.word	0x08003ffb
 8003f90:	08003ff5 	.word	0x08003ff5
 8003f94:	08003ff5 	.word	0x08003ff5
 8003f98:	08003ff5 	.word	0x08003ff5
 8003f9c:	08003ff5 	.word	0x08003ff5
 8003fa0:	08003ff5 	.word	0x08003ff5
 8003fa4:	08003ff5 	.word	0x08003ff5
 8003fa8:	08003ff5 	.word	0x08003ff5
 8003fac:	08003ffb 	.word	0x08003ffb
 8003fb0:	08003ff5 	.word	0x08003ff5
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	08003ffb 	.word	0x08003ffb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fdf8 	bl	8004bcc <RCCEx_PLL2_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fe0:	e00c      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3324      	adds	r3, #36	; 0x24
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fea1 	bl	8004d30 <RCCEx_PLL3_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ff2:	e003      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff8:	e000      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004002:	4b46      	ldr	r3, [pc, #280]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004010:	4942      	ldr	r1, [pc, #264]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	654b      	str	r3, [r1, #84]	; 0x54
 8004016:	e001      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004018:	7dfb      	ldrb	r3, [r7, #23]
 800401a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d038      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800402c:	2b05      	cmp	r3, #5
 800402e:	d821      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800407b 	.word	0x0800407b
 800403c:	08004051 	.word	0x08004051
 8004040:	08004063 	.word	0x08004063
 8004044:	0800407b 	.word	0x0800407b
 8004048:	0800407b 	.word	0x0800407b
 800404c:	0800407b 	.word	0x0800407b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	2101      	movs	r1, #1
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fdb8 	bl	8004bcc <RCCEx_PLL2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004060:	e00c      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3324      	adds	r3, #36	; 0x24
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fe61 	bl	8004d30 <RCCEx_PLL3_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004072:	e003      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
      break;
 8004078:	e000      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800407a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407c:	7dfb      	ldrb	r3, [r7, #23]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004082:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f023 0207 	bic.w	r2, r3, #7
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800408e:	4923      	ldr	r1, [pc, #140]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	654b      	str	r3, [r1, #84]	; 0x54
 8004094:	e001      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d040      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d821      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040fb 	.word	0x080040fb
 80040bc:	080040d1 	.word	0x080040d1
 80040c0:	080040e3 	.word	0x080040e3
 80040c4:	080040fb 	.word	0x080040fb
 80040c8:	080040fb 	.word	0x080040fb
 80040cc:	080040fb 	.word	0x080040fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fd78 	bl	8004bcc <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040e0:	e00c      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	2101      	movs	r1, #1
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fe21 	bl	8004d30 <RCCEx_PLL3_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
      break;
 80040f8:	e000      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80040fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d110      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	f023 0207 	bic.w	r2, r3, #7
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004110:	4902      	ldr	r1, [pc, #8]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	658b      	str	r3, [r1, #88]	; 0x58
 8004116:	e007      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004118:	58024800 	.word	0x58024800
 800411c:	58024400 	.word	0x58024400
 8004120:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d04b      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413e:	d02e      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004144:	d828      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d02a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d822      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004152:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004156:	d026      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004158:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800415c:	d81c      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800415e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004162:	d010      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004168:	d816      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01d      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x972>
 800416e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004172:	d111      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fd26 	bl	8004bcc <RCCEx_PLL2_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004184:	e012      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3324      	adds	r3, #36	; 0x24
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fdcf 	bl	8004d30 <RCCEx_PLL3_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004196:	e009      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
      break;
 800419c:	e006      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800419e:	bf00      	nop
 80041a0:	e004      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041a2:	bf00      	nop
 80041a4:	e002      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041b2:	4bb3      	ldr	r3, [pc, #716]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c0:	49af      	ldr	r1, [pc, #700]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	654b      	str	r3, [r1, #84]	; 0x54
 80041c6:	e001      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d04b      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041e2:	d02e      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80041e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041e8:	d828      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80041ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ee:	d02a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d822      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80041f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041fa:	d026      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80041fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004200:	d81c      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004206:	d010      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420c:	d816      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004216:	d111      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fcd4 	bl	8004bcc <RCCEx_PLL2_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004228:	e012      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3324      	adds	r3, #36	; 0x24
 800422e:	2102      	movs	r1, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fd7d 	bl	8004d30 <RCCEx_PLL3_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800423a:	e009      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
      break;
 8004240:	e006      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004242:	bf00      	nop
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800424e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004256:	4b8a      	ldr	r3, [pc, #552]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004264:	4986      	ldr	r1, [pc, #536]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004266:	4313      	orrs	r3, r2
 8004268:	658b      	str	r3, [r1, #88]	; 0x58
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d04b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004282:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004286:	d02e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004288:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800428c:	d828      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800428e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004292:	d02a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004298:	d822      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800429a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800429e:	d026      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80042a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042a4:	d81c      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042aa:	d010      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80042ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b0:	d816      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01d      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ba:	d111      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fc82 	bl	8004bcc <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042cc:	e012      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3324      	adds	r3, #36	; 0x24
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fd2b 	bl	8004d30 <RCCEx_PLL3_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042de:	e009      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
      break;
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80042e6:	bf00      	nop
 80042e8:	e004      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80042ea:	bf00      	nop
 80042ec:	e002      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80042f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042fa:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004308:	495d      	ldr	r1, [pc, #372]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800430a:	4313      	orrs	r3, r2
 800430c:	658b      	str	r3, [r1, #88]	; 0x58
 800430e:	e001      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d10a      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3324      	adds	r3, #36	; 0x24
 8004330:	2102      	movs	r1, #2
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fcfc 	bl	8004d30 <RCCEx_PLL3_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004342:	4b4f      	ldr	r3, [pc, #316]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	494b      	ldr	r1, [pc, #300]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004352:	4313      	orrs	r3, r2
 8004354:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436c:	d10a      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3324      	adds	r3, #36	; 0x24
 8004372:	2102      	movs	r1, #2
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fcdb 	bl	8004d30 <RCCEx_PLL3_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004384:	4b3e      	ldr	r3, [pc, #248]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004392:	493b      	ldr	r1, [pc, #236]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004394:	4313      	orrs	r3, r2
 8004396:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d034      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ae:	d01d      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80043b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b4:	d817      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043be:	d009      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043c0:	e011      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fbff 	bl	8004bcc <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043d2:	e00c      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3324      	adds	r3, #36	; 0x24
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fca8 	bl	8004d30 <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043e4:	e003      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80043ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043f4:	4b22      	ldr	r3, [pc, #136]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004402:	491f      	ldr	r1, [pc, #124]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004404:	4313      	orrs	r3, r2
 8004406:	658b      	str	r3, [r1, #88]	; 0x58
 8004408:	e001      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d036      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004420:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004424:	d01c      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800442a:	d816      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800442c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004430:	d003      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004436:	d007      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	4a10      	ldr	r2, [pc, #64]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004444:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004446:	e00c      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3324      	adds	r3, #36	; 0x24
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fc6e 	bl	8004d30 <RCCEx_PLL3_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
      break;
 800445e:	e000      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004462:	7dfb      	ldrb	r3, [r7, #23]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004476:	4902      	ldr	r1, [pc, #8]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004478:	4313      	orrs	r3, r2
 800447a:	654b      	str	r3, [r1, #84]	; 0x54
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800447e:	bf00      	nop
 8004480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	7dfb      	ldrb	r3, [r7, #23]
 8004486:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d029      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d007      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80044a2:	e00f      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a4:	4b69      	ldr	r3, [pc, #420]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4a68      	ldr	r2, [pc, #416]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044b0:	e00b      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2102      	movs	r1, #2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fb87 	bl	8004bcc <RCCEx_PLL2_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044c2:	e002      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
      break;
 80044c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d109      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044d0:	4b5e      	ldr	r3, [pc, #376]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044dc:	495b      	ldr	r1, [pc, #364]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044e2:	e001      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3324      	adds	r3, #36	; 0x24
 80044f8:	2102      	movs	r1, #2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fc18 	bl	8004d30 <RCCEx_PLL3_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d032      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800451c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004520:	d017      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004526:	d811      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452c:	d013      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800452e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004532:	d80b      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d010      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453c:	d106      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800453e:	4b43      	ldr	r3, [pc, #268]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004548:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800454a:	e007      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
      break;
 8004550:	e004      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800455a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	4936      	ldr	r1, [pc, #216]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004572:	4313      	orrs	r3, r2
 8004574:	654b      	str	r3, [r1, #84]	; 0x54
 8004576:	e001      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004588:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004594:	492d      	ldr	r1, [pc, #180]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004596:	4313      	orrs	r3, r2
 8004598:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b2:	4926      	ldr	r1, [pc, #152]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	491e      	ldr	r1, [pc, #120]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e2:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	4a19      	ldr	r2, [pc, #100]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045ec:	6113      	str	r3, [r2, #16]
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045f8:	4914      	ldr	r1, [pc, #80]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	da08      	bge.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004606:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	490e      	ldr	r1, [pc, #56]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004614:	4313      	orrs	r3, r2
 8004616:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	4906      	ldr	r1, [pc, #24]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004634:	4313      	orrs	r3, r2
 8004636:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004638:	7dbb      	ldrb	r3, [r7, #22]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	58024400 	.word	0x58024400

08004650 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004654:	f7ff f894 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	58024400 	.word	0x58024400
 8004678:	08007ed0 	.word	0x08007ed0

0800467c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004684:	4ba1      	ldr	r3, [pc, #644]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800468e:	4b9f      	ldr	r3, [pc, #636]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	0b1b      	lsrs	r3, r3, #12
 8004694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004698:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800469a:	4b9c      	ldr	r3, [pc, #624]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	091b      	lsrs	r3, r3, #4
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80046a6:	4b99      	ldr	r3, [pc, #612]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8111 	beq.w	80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	f000 8083 	beq.w	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	f200 80a1 	bhi.w	800481c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d056      	beq.n	8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046e6:	e099      	b.n	800481c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046e8:	4b88      	ldr	r3, [pc, #544]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d02d      	beq.n	8004750 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046f4:	4b85      	ldr	r3, [pc, #532]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	08db      	lsrs	r3, r3, #3
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	4a84      	ldr	r2, [pc, #528]	; (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
 8004704:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	ee07 3a90 	vmov	s15, r3
 800470c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471e:	4b7b      	ldr	r3, [pc, #492]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004732:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800474e:	e087      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b6a      	ldr	r3, [pc, #424]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a03 	vldr	s12, [r7, #12]
 8004776:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004792:	e065      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800491c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b59      	ldr	r3, [pc, #356]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047d6:	e043      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b48      	ldr	r3, [pc, #288]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800481a:	e021      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800491c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b37      	ldr	r3, [pc, #220]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004842:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800485e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004860:	4b2a      	ldr	r3, [pc, #168]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	0a5b      	lsrs	r3, r3, #9
 8004866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800487a:	edd7 6a07 	vldr	s13, [r7, #28]
 800487e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004886:	ee17 2a90 	vmov	r2, s15
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800488e:	4b1f      	ldr	r3, [pc, #124]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b4:	ee17 2a90 	vmov	r2, s15
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80048bc:	4b13      	ldr	r3, [pc, #76]	; (800490c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	0e1b      	lsrs	r3, r3, #24
 80048c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e2:	ee17 2a90 	vmov	r2, s15
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048ea:	e008      	b.n	80048fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
}
 80048fe:	bf00      	nop
 8004900:	3724      	adds	r7, #36	; 0x24
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
 8004910:	03d09000 	.word	0x03d09000
 8004914:	46000000 	.word	0x46000000
 8004918:	4c742400 	.word	0x4c742400
 800491c:	4a742400 	.word	0x4a742400
 8004920:	4af42400 	.word	0x4af42400

08004924 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800492c:	4ba1      	ldr	r3, [pc, #644]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004936:	4b9f      	ldr	r3, [pc, #636]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	0d1b      	lsrs	r3, r3, #20
 800493c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004940:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004942:	4b9c      	ldr	r3, [pc, #624]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800494e:	4b99      	ldr	r3, [pc, #612]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	08db      	lsrs	r3, r3, #3
 8004954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8111 	beq.w	8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b02      	cmp	r3, #2
 8004976:	f000 8083 	beq.w	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b02      	cmp	r3, #2
 800497e:	f200 80a1 	bhi.w	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d056      	beq.n	8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800498e:	e099      	b.n	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004990:	4b88      	ldr	r3, [pc, #544]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02d      	beq.n	80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800499c:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	08db      	lsrs	r3, r3, #3
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	4a84      	ldr	r2, [pc, #528]	; (8004bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c6:	4b7b      	ldr	r3, [pc, #492]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049da:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049f6:	e087      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0a:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a3a:	e065      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b59      	ldr	r3, [pc, #356]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a7e:	e043      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b48      	ldr	r3, [pc, #288]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ac2:	e021      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b37      	ldr	r3, [pc, #220]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b08:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	0a5b      	lsrs	r3, r3, #9
 8004b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2e:	ee17 2a90 	vmov	r2, s15
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b36:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b50:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5c:	ee17 2a90 	vmov	r2, s15
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004b64:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8a:	ee17 2a90 	vmov	r2, s15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b92:	e008      	b.n	8004ba6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
}
 8004ba6:	bf00      	nop
 8004ba8:	3724      	adds	r7, #36	; 0x24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	03d09000 	.word	0x03d09000
 8004bbc:	46000000 	.word	0x46000000
 8004bc0:	4c742400 	.word	0x4c742400
 8004bc4:	4a742400 	.word	0x4a742400
 8004bc8:	4af42400 	.word	0x4af42400

08004bcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bda:	4b53      	ldr	r3, [pc, #332]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d101      	bne.n	8004bea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e099      	b.n	8004d1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bea:	4b4f      	ldr	r3, [pc, #316]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a4e      	ldr	r2, [pc, #312]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004bf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf6:	f7fc fcd3 	bl	80015a0 <HAL_GetTick>
 8004bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bfc:	e008      	b.n	8004c10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bfe:	f7fc fccf 	bl	80015a0 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e086      	b.n	8004d1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c10:	4b45      	ldr	r3, [pc, #276]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f0      	bne.n	8004bfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c1c:	4b42      	ldr	r3, [pc, #264]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	031b      	lsls	r3, r3, #12
 8004c2a:	493f      	ldr	r1, [pc, #252]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	025b      	lsls	r3, r3, #9
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	041b      	lsls	r3, r3, #16
 8004c4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	061b      	lsls	r3, r3, #24
 8004c5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c60:	4931      	ldr	r1, [pc, #196]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c66:	4b30      	ldr	r3, [pc, #192]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	492d      	ldr	r1, [pc, #180]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c78:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f023 0220 	bic.w	r2, r3, #32
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	4928      	ldr	r1, [pc, #160]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c8a:	4b27      	ldr	r3, [pc, #156]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	4a26      	ldr	r2, [pc, #152]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c90:	f023 0310 	bic.w	r3, r3, #16
 8004c94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9a:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <RCCEx_PLL2_Config+0x160>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	69d2      	ldr	r2, [r2, #28]
 8004ca2:	00d2      	lsls	r2, r2, #3
 8004ca4:	4920      	ldr	r1, [pc, #128]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004caa:	4b1f      	ldr	r3, [pc, #124]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	4a1e      	ldr	r2, [pc, #120]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	f043 0310 	orr.w	r3, r3, #16
 8004cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cc8:	e00f      	b.n	8004cea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d106      	bne.n	8004cde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cd0:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cdc:	e005      	b.n	8004cea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	4a11      	ldr	r2, [pc, #68]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ce8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cea:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a0e      	ldr	r2, [pc, #56]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf6:	f7fc fc53 	bl	80015a0 <HAL_GetTick>
 8004cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cfc:	e008      	b.n	8004d10 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004cfe:	f7fc fc4f 	bl	80015a0 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e006      	b.n	8004d1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	58024400 	.word	0x58024400
 8004d2c:	ffff0007 	.word	0xffff0007

08004d30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d3e:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d101      	bne.n	8004d4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e099      	b.n	8004e82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d4e:	4b4f      	ldr	r3, [pc, #316]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a4e      	ldr	r2, [pc, #312]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5a:	f7fc fc21 	bl	80015a0 <HAL_GetTick>
 8004d5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d62:	f7fc fc1d 	bl	80015a0 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e086      	b.n	8004e82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d74:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d80:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	051b      	lsls	r3, r3, #20
 8004d8e:	493f      	ldr	r1, [pc, #252]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	628b      	str	r3, [r1, #40]	; 0x28
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	025b      	lsls	r3, r3, #9
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	061b      	lsls	r3, r3, #24
 8004dc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dc4:	4931      	ldr	r1, [pc, #196]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dca:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	492d      	ldr	r1, [pc, #180]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ddc:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	4928      	ldr	r1, [pc, #160]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dee:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <RCCEx_PLL3_Config+0x160>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	69d2      	ldr	r2, [r2, #28]
 8004e06:	00d2      	lsls	r2, r2, #3
 8004e08:	4920      	ldr	r1, [pc, #128]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e20:	4b1a      	ldr	r3, [pc, #104]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e2c:	e00f      	b.n	8004e4e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d106      	bne.n	8004e42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e40:	e005      	b.n	8004e4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a0e      	ldr	r2, [pc, #56]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5a:	f7fc fba1 	bl	80015a0 <HAL_GetTick>
 8004e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e60:	e008      	b.n	8004e74 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e62:	f7fc fb9d 	bl	80015a0 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e006      	b.n	8004e82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <RCCEx_PLL3_Config+0x15c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	58024400 	.word	0x58024400
 8004e90:	ffff0007 	.word	0xffff0007

08004e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e049      	b.n	8004f3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc f8e0 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 ff80 	bl	8005dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e049      	b.n	8004fe8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7fc f867 	bl	800103c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 ff29 	bl	8005dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_TIM_PWM_Start+0x24>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	e03c      	b.n	800508e <HAL_TIM_PWM_Start+0x9e>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b04      	cmp	r3, #4
 8005018:	d109      	bne.n	800502e <HAL_TIM_PWM_Start+0x3e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b01      	cmp	r3, #1
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e02f      	b.n	800508e <HAL_TIM_PWM_Start+0x9e>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d109      	bne.n	8005048 <HAL_TIM_PWM_Start+0x58>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e022      	b.n	800508e <HAL_TIM_PWM_Start+0x9e>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b0c      	cmp	r3, #12
 800504c:	d109      	bne.n	8005062 <HAL_TIM_PWM_Start+0x72>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b01      	cmp	r3, #1
 8005058:	bf14      	ite	ne
 800505a:	2301      	movne	r3, #1
 800505c:	2300      	moveq	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	e015      	b.n	800508e <HAL_TIM_PWM_Start+0x9e>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b10      	cmp	r3, #16
 8005066:	d109      	bne.n	800507c <HAL_TIM_PWM_Start+0x8c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e008      	b.n	800508e <HAL_TIM_PWM_Start+0x9e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e0a1      	b.n	80051da <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_PWM_Start+0xb6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a4:	e023      	b.n	80050ee <HAL_TIM_PWM_Start+0xfe>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_PWM_Start+0xc6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b4:	e01b      	b.n	80050ee <HAL_TIM_PWM_Start+0xfe>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_PWM_Start+0xd6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c4:	e013      	b.n	80050ee <HAL_TIM_PWM_Start+0xfe>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b0c      	cmp	r3, #12
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_PWM_Start+0xe6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050d4:	e00b      	b.n	80050ee <HAL_TIM_PWM_Start+0xfe>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_PWM_Start+0xf6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e4:	e003      	b.n	80050ee <HAL_TIM_PWM_Start+0xfe>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2201      	movs	r2, #1
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 fba6 	bl	8006848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a38      	ldr	r2, [pc, #224]	; (80051e4 <HAL_TIM_PWM_Start+0x1f4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_TIM_PWM_Start+0x13e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <HAL_TIM_PWM_Start+0x1f8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_TIM_PWM_Start+0x13e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a35      	ldr	r2, [pc, #212]	; (80051ec <HAL_TIM_PWM_Start+0x1fc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_TIM_PWM_Start+0x13e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a34      	ldr	r2, [pc, #208]	; (80051f0 <HAL_TIM_PWM_Start+0x200>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIM_PWM_Start+0x13e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a32      	ldr	r2, [pc, #200]	; (80051f4 <HAL_TIM_PWM_Start+0x204>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_TIM_PWM_Start+0x142>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <HAL_TIM_PWM_Start+0x144>
 8005132:	2300      	movs	r3, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005146:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a25      	ldr	r2, [pc, #148]	; (80051e4 <HAL_TIM_PWM_Start+0x1f4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d022      	beq.n	8005198 <HAL_TIM_PWM_Start+0x1a8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d01d      	beq.n	8005198 <HAL_TIM_PWM_Start+0x1a8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a25      	ldr	r2, [pc, #148]	; (80051f8 <HAL_TIM_PWM_Start+0x208>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d018      	beq.n	8005198 <HAL_TIM_PWM_Start+0x1a8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a24      	ldr	r2, [pc, #144]	; (80051fc <HAL_TIM_PWM_Start+0x20c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <HAL_TIM_PWM_Start+0x1a8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_TIM_PWM_Start+0x210>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00e      	beq.n	8005198 <HAL_TIM_PWM_Start+0x1a8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <HAL_TIM_PWM_Start+0x1f8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d009      	beq.n	8005198 <HAL_TIM_PWM_Start+0x1a8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_TIM_PWM_Start+0x214>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_TIM_PWM_Start+0x1a8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a16      	ldr	r2, [pc, #88]	; (80051ec <HAL_TIM_PWM_Start+0x1fc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d115      	bne.n	80051c4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	4b1a      	ldr	r3, [pc, #104]	; (8005208 <HAL_TIM_PWM_Start+0x218>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b06      	cmp	r3, #6
 80051a8:	d015      	beq.n	80051d6 <HAL_TIM_PWM_Start+0x1e6>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b0:	d011      	beq.n	80051d6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c2:	e008      	b.n	80051d6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	e000      	b.n	80051d8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40010400 	.word	0x40010400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40014400 	.word	0x40014400
 80051f4:	40014800 	.word	0x40014800
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	40001800 	.word	0x40001800
 8005208:	00010007 	.word	0x00010007

0800520c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e049      	b.n	80052b2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f841 	bl	80052ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f000 fdc4 	bl	8005dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_IC_Start_IT+0x1e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e023      	b.n	8005336 <HAL_TIM_IC_Start_IT+0x66>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_IC_Start_IT+0x2e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	e01b      	b.n	8005336 <HAL_TIM_IC_Start_IT+0x66>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d104      	bne.n	800530e <HAL_TIM_IC_Start_IT+0x3e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e013      	b.n	8005336 <HAL_TIM_IC_Start_IT+0x66>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b0c      	cmp	r3, #12
 8005312:	d104      	bne.n	800531e <HAL_TIM_IC_Start_IT+0x4e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800531a:	b2db      	uxtb	r3, r3
 800531c:	e00b      	b.n	8005336 <HAL_TIM_IC_Start_IT+0x66>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b10      	cmp	r3, #16
 8005322:	d104      	bne.n	800532e <HAL_TIM_IC_Start_IT+0x5e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800532a:	b2db      	uxtb	r3, r3
 800532c:	e003      	b.n	8005336 <HAL_TIM_IC_Start_IT+0x66>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005334:	b2db      	uxtb	r3, r3
 8005336:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <HAL_TIM_IC_Start_IT+0x78>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e013      	b.n	8005370 <HAL_TIM_IC_Start_IT+0xa0>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d104      	bne.n	8005358 <HAL_TIM_IC_Start_IT+0x88>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005354:	b2db      	uxtb	r3, r3
 8005356:	e00b      	b.n	8005370 <HAL_TIM_IC_Start_IT+0xa0>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d104      	bne.n	8005368 <HAL_TIM_IC_Start_IT+0x98>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e003      	b.n	8005370 <HAL_TIM_IC_Start_IT+0xa0>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800536e:	b2db      	uxtb	r3, r3
 8005370:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d102      	bne.n	800537e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005378:	7b7b      	ldrb	r3, [r7, #13]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d001      	beq.n	8005382 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e0e2      	b.n	8005548 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d104      	bne.n	8005392 <HAL_TIM_IC_Start_IT+0xc2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005390:	e023      	b.n	80053da <HAL_TIM_IC_Start_IT+0x10a>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b04      	cmp	r3, #4
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_IC_Start_IT+0xd2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a0:	e01b      	b.n	80053da <HAL_TIM_IC_Start_IT+0x10a>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_IC_Start_IT+0xe2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b0:	e013      	b.n	80053da <HAL_TIM_IC_Start_IT+0x10a>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_IC_Start_IT+0xf2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c0:	e00b      	b.n	80053da <HAL_TIM_IC_Start_IT+0x10a>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_IC_Start_IT+0x102>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d0:	e003      	b.n	80053da <HAL_TIM_IC_Start_IT+0x10a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <HAL_TIM_IC_Start_IT+0x11a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e8:	e013      	b.n	8005412 <HAL_TIM_IC_Start_IT+0x142>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_IC_Start_IT+0x12a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f8:	e00b      	b.n	8005412 <HAL_TIM_IC_Start_IT+0x142>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d104      	bne.n	800540a <HAL_TIM_IC_Start_IT+0x13a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005408:	e003      	b.n	8005412 <HAL_TIM_IC_Start_IT+0x142>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b0c      	cmp	r3, #12
 8005416:	d841      	bhi.n	800549c <HAL_TIM_IC_Start_IT+0x1cc>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <HAL_TIM_IC_Start_IT+0x150>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005455 	.word	0x08005455
 8005424:	0800549d 	.word	0x0800549d
 8005428:	0800549d 	.word	0x0800549d
 800542c:	0800549d 	.word	0x0800549d
 8005430:	08005467 	.word	0x08005467
 8005434:	0800549d 	.word	0x0800549d
 8005438:	0800549d 	.word	0x0800549d
 800543c:	0800549d 	.word	0x0800549d
 8005440:	08005479 	.word	0x08005479
 8005444:	0800549d 	.word	0x0800549d
 8005448:	0800549d 	.word	0x0800549d
 800544c:	0800549d 	.word	0x0800549d
 8005450:	0800548b 	.word	0x0800548b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0202 	orr.w	r2, r2, #2
 8005462:	60da      	str	r2, [r3, #12]
      break;
 8005464:	e01d      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0204 	orr.w	r2, r2, #4
 8005474:	60da      	str	r2, [r3, #12]
      break;
 8005476:	e014      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0208 	orr.w	r2, r2, #8
 8005486:	60da      	str	r2, [r3, #12]
      break;
 8005488:	e00b      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0210 	orr.w	r2, r2, #16
 8005498:	60da      	str	r2, [r3, #12]
      break;
 800549a:	e002      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
      break;
 80054a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d14e      	bne.n	8005546 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2201      	movs	r2, #1
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f9c9 	bl	8006848 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a25      	ldr	r2, [pc, #148]	; (8005550 <HAL_TIM_IC_Start_IT+0x280>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d022      	beq.n	8005506 <HAL_TIM_IC_Start_IT+0x236>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d01d      	beq.n	8005506 <HAL_TIM_IC_Start_IT+0x236>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a21      	ldr	r2, [pc, #132]	; (8005554 <HAL_TIM_IC_Start_IT+0x284>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d018      	beq.n	8005506 <HAL_TIM_IC_Start_IT+0x236>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <HAL_TIM_IC_Start_IT+0x288>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <HAL_TIM_IC_Start_IT+0x236>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1e      	ldr	r2, [pc, #120]	; (800555c <HAL_TIM_IC_Start_IT+0x28c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <HAL_TIM_IC_Start_IT+0x236>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <HAL_TIM_IC_Start_IT+0x290>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <HAL_TIM_IC_Start_IT+0x236>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <HAL_TIM_IC_Start_IT+0x294>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <HAL_TIM_IC_Start_IT+0x236>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a19      	ldr	r2, [pc, #100]	; (8005568 <HAL_TIM_IC_Start_IT+0x298>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d115      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	4b17      	ldr	r3, [pc, #92]	; (800556c <HAL_TIM_IC_Start_IT+0x29c>)
 800550e:	4013      	ands	r3, r2
 8005510:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b06      	cmp	r3, #6
 8005516:	d015      	beq.n	8005544 <HAL_TIM_IC_Start_IT+0x274>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551e:	d011      	beq.n	8005544 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005530:	e008      	b.n	8005544 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	e000      	b.n	8005546 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005544:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005546:	7bfb      	ldrb	r3, [r7, #15]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40010000 	.word	0x40010000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40010400 	.word	0x40010400
 8005564:	40001800 	.word	0x40001800
 8005568:	40014000 	.word	0x40014000
 800556c:	00010007 	.word	0x00010007

08005570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b02      	cmp	r3, #2
 8005584:	d122      	bne.n	80055cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b02      	cmp	r3, #2
 8005592:	d11b      	bne.n	80055cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0202 	mvn.w	r2, #2
 800559c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fb fa20 	bl	80009f8 <HAL_TIM_IC_CaptureCallback>
 80055b8:	e005      	b.n	80055c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fbee 	bl	8005d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fbf5 	bl	8005db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d122      	bne.n	8005620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d11b      	bne.n	8005620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0204 	mvn.w	r2, #4
 80055f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fb f9f6 	bl	80009f8 <HAL_TIM_IC_CaptureCallback>
 800560c:	e005      	b.n	800561a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fbc4 	bl	8005d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fbcb 	bl	8005db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b08      	cmp	r3, #8
 800562c:	d122      	bne.n	8005674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b08      	cmp	r3, #8
 800563a:	d11b      	bne.n	8005674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0208 	mvn.w	r2, #8
 8005644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2204      	movs	r2, #4
 800564a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fb f9cc 	bl	80009f8 <HAL_TIM_IC_CaptureCallback>
 8005660:	e005      	b.n	800566e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fb9a 	bl	8005d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fba1 	bl	8005db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b10      	cmp	r3, #16
 8005680:	d122      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	2b10      	cmp	r3, #16
 800568e:	d11b      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0210 	mvn.w	r2, #16
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2208      	movs	r2, #8
 800569e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb f9a2 	bl	80009f8 <HAL_TIM_IC_CaptureCallback>
 80056b4:	e005      	b.n	80056c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fb70 	bl	8005d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb77 	bl	8005db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d10e      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d107      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0201 	mvn.w	r2, #1
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fb4a 	bl	8005d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d10e      	bne.n	8005720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570c:	2b80      	cmp	r3, #128	; 0x80
 800570e:	d107      	bne.n	8005720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f001 f9f2 	bl	8006b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572e:	d10e      	bne.n	800574e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d107      	bne.n	800574e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 f9e5 	bl	8006b18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d10e      	bne.n	800577a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d107      	bne.n	800577a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fb25 	bl	8005dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b20      	cmp	r3, #32
 8005786:	d10e      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0220 	mvn.w	r2, #32
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 f9a5 	bl	8006af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b086      	sub	sp, #24
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e088      	b.n	80058de <HAL_TIM_IC_ConfigChannel+0x130>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d11b      	bne.n	8005812 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6819      	ldr	r1, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f000 fe65 	bl	80064b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 020c 	bic.w	r2, r2, #12
 80057fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6999      	ldr	r1, [r3, #24]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	619a      	str	r2, [r3, #24]
 8005810:	e060      	b.n	80058d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d11c      	bne.n	8005852 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f000 fee9 	bl	80065fe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800583a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6999      	ldr	r1, [r3, #24]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	021a      	lsls	r2, r3, #8
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	619a      	str	r2, [r3, #24]
 8005850:	e040      	b.n	80058d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6819      	ldr	r1, [r3, #0]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f000 ff36 	bl	80066d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 020c 	bic.w	r2, r2, #12
 800587a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69d9      	ldr	r1, [r3, #28]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	61da      	str	r2, [r3, #28]
 800588e:	e021      	b.n	80058d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b0c      	cmp	r3, #12
 8005894:	d11c      	bne.n	80058d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6819      	ldr	r1, [r3, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f000 ff53 	bl	8006750 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69d9      	ldr	r1, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	021a      	lsls	r2, r3, #8
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	61da      	str	r2, [r3, #28]
 80058ce:	e001      	b.n	80058d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005902:	2302      	movs	r3, #2
 8005904:	e0ff      	b.n	8005b06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b14      	cmp	r3, #20
 8005912:	f200 80f0 	bhi.w	8005af6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005916:	a201      	add	r2, pc, #4	; (adr r2, 800591c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	08005971 	.word	0x08005971
 8005920:	08005af7 	.word	0x08005af7
 8005924:	08005af7 	.word	0x08005af7
 8005928:	08005af7 	.word	0x08005af7
 800592c:	080059b1 	.word	0x080059b1
 8005930:	08005af7 	.word	0x08005af7
 8005934:	08005af7 	.word	0x08005af7
 8005938:	08005af7 	.word	0x08005af7
 800593c:	080059f3 	.word	0x080059f3
 8005940:	08005af7 	.word	0x08005af7
 8005944:	08005af7 	.word	0x08005af7
 8005948:	08005af7 	.word	0x08005af7
 800594c:	08005a33 	.word	0x08005a33
 8005950:	08005af7 	.word	0x08005af7
 8005954:	08005af7 	.word	0x08005af7
 8005958:	08005af7 	.word	0x08005af7
 800595c:	08005a75 	.word	0x08005a75
 8005960:	08005af7 	.word	0x08005af7
 8005964:	08005af7 	.word	0x08005af7
 8005968:	08005af7 	.word	0x08005af7
 800596c:	08005ab5 	.word	0x08005ab5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fac8 	bl	8005f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0208 	orr.w	r2, r2, #8
 800598a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0204 	bic.w	r2, r2, #4
 800599a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6999      	ldr	r1, [r3, #24]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	619a      	str	r2, [r3, #24]
      break;
 80059ae:	e0a5      	b.n	8005afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fb38 	bl	800602c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6999      	ldr	r1, [r3, #24]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	619a      	str	r2, [r3, #24]
      break;
 80059f0:	e084      	b.n	8005afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fba1 	bl	8006140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0208 	orr.w	r2, r2, #8
 8005a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0204 	bic.w	r2, r2, #4
 8005a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69d9      	ldr	r1, [r3, #28]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	61da      	str	r2, [r3, #28]
      break;
 8005a30:	e064      	b.n	8005afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fc09 	bl	8006250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69d9      	ldr	r1, [r3, #28]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	021a      	lsls	r2, r3, #8
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	61da      	str	r2, [r3, #28]
      break;
 8005a72:	e043      	b.n	8005afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fc52 	bl	8006324 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0208 	orr.w	r2, r2, #8
 8005a8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0204 	bic.w	r2, r2, #4
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ab2:	e023      	b.n	8005afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fc96 	bl	80063ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	021a      	lsls	r2, r3, #8
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005af4:	e002      	b.n	8005afc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
      break;
 8005afa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop

08005b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_TIM_ConfigClockSource+0x1c>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e0dc      	b.n	8005ce6 <HAL_TIM_ConfigClockSource+0x1d6>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	4b6a      	ldr	r3, [pc, #424]	; (8005cf0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a64      	ldr	r2, [pc, #400]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	f000 80a9 	beq.w	8005cba <HAL_TIM_ConfigClockSource+0x1aa>
 8005b68:	4a62      	ldr	r2, [pc, #392]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	f200 80ae 	bhi.w	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005b70:	4a61      	ldr	r2, [pc, #388]	; (8005cf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	f000 80a1 	beq.w	8005cba <HAL_TIM_ConfigClockSource+0x1aa>
 8005b78:	4a5f      	ldr	r2, [pc, #380]	; (8005cf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	f200 80a6 	bhi.w	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005b80:	4a5e      	ldr	r2, [pc, #376]	; (8005cfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	f000 8099 	beq.w	8005cba <HAL_TIM_ConfigClockSource+0x1aa>
 8005b88:	4a5c      	ldr	r2, [pc, #368]	; (8005cfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	f200 809e 	bhi.w	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005b90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b94:	f000 8091 	beq.w	8005cba <HAL_TIM_ConfigClockSource+0x1aa>
 8005b98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b9c:	f200 8096 	bhi.w	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba4:	f000 8089 	beq.w	8005cba <HAL_TIM_ConfigClockSource+0x1aa>
 8005ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bac:	f200 808e 	bhi.w	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb4:	d03e      	beq.n	8005c34 <HAL_TIM_ConfigClockSource+0x124>
 8005bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bba:	f200 8087 	bhi.w	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc2:	f000 8086 	beq.w	8005cd2 <HAL_TIM_ConfigClockSource+0x1c2>
 8005bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bca:	d87f      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005bcc:	2b70      	cmp	r3, #112	; 0x70
 8005bce:	d01a      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0xf6>
 8005bd0:	2b70      	cmp	r3, #112	; 0x70
 8005bd2:	d87b      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005bd4:	2b60      	cmp	r3, #96	; 0x60
 8005bd6:	d050      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x16a>
 8005bd8:	2b60      	cmp	r3, #96	; 0x60
 8005bda:	d877      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005bdc:	2b50      	cmp	r3, #80	; 0x50
 8005bde:	d03c      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x14a>
 8005be0:	2b50      	cmp	r3, #80	; 0x50
 8005be2:	d873      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d058      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x18a>
 8005be8:	2b40      	cmp	r3, #64	; 0x40
 8005bea:	d86f      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005bec:	2b30      	cmp	r3, #48	; 0x30
 8005bee:	d064      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x1aa>
 8005bf0:	2b30      	cmp	r3, #48	; 0x30
 8005bf2:	d86b      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d060      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x1aa>
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d867      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d05c      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x1aa>
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d05a      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x1aa>
 8005c04:	e062      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6899      	ldr	r1, [r3, #8]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f000 fdf7 	bl	8006808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	609a      	str	r2, [r3, #8]
      break;
 8005c32:	e04f      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	6899      	ldr	r1, [r3, #8]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f000 fde0 	bl	8006808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c56:	609a      	str	r2, [r3, #8]
      break;
 8005c58:	e03c      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f000 fc9a 	bl	80065a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2150      	movs	r1, #80	; 0x50
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fdaa 	bl	80067cc <TIM_ITRx_SetConfig>
      break;
 8005c78:	e02c      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6859      	ldr	r1, [r3, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f000 fcf6 	bl	8006678 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2160      	movs	r1, #96	; 0x60
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fd9a 	bl	80067cc <TIM_ITRx_SetConfig>
      break;
 8005c98:	e01c      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f000 fc7a 	bl	80065a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2140      	movs	r1, #64	; 0x40
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fd8a 	bl	80067cc <TIM_ITRx_SetConfig>
      break;
 8005cb8:	e00c      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f000 fd81 	bl	80067cc <TIM_ITRx_SetConfig>
      break;
 8005cca:	e003      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd0:	e000      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	ffceff88 	.word	0xffceff88
 8005cf4:	00100040 	.word	0x00100040
 8005cf8:	00100030 	.word	0x00100030
 8005cfc:	00100020 	.word	0x00100020

08005d00 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	d831      	bhi.n	8005d78 <HAL_TIM_ReadCapturedValue+0x78>
 8005d14:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d51 	.word	0x08005d51
 8005d20:	08005d79 	.word	0x08005d79
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005d5b 	.word	0x08005d5b
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005d79 	.word	0x08005d79
 8005d38:	08005d79 	.word	0x08005d79
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d79 	.word	0x08005d79
 8005d44:	08005d79 	.word	0x08005d79
 8005d48:	08005d79 	.word	0x08005d79
 8005d4c:	08005d6f 	.word	0x08005d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	60fb      	str	r3, [r7, #12]

      break;
 8005d58:	e00f      	b.n	8005d7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	60fb      	str	r3, [r7, #12]

      break;
 8005d62:	e00a      	b.n	8005d7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	60fb      	str	r3, [r7, #12]

      break;
 8005d6c:	e005      	b.n	8005d7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	60fb      	str	r3, [r7, #12]

      break;
 8005d76:	e000      	b.n	8005d7a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d78:	bf00      	nop
  }

  return tmpreg;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a40      	ldr	r2, [pc, #256]	; (8005eec <TIM_Base_SetConfig+0x114>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df6:	d00f      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a3d      	ldr	r2, [pc, #244]	; (8005ef0 <TIM_Base_SetConfig+0x118>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00b      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a3c      	ldr	r2, [pc, #240]	; (8005ef4 <TIM_Base_SetConfig+0x11c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a3b      	ldr	r2, [pc, #236]	; (8005ef8 <TIM_Base_SetConfig+0x120>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a3a      	ldr	r2, [pc, #232]	; (8005efc <TIM_Base_SetConfig+0x124>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d108      	bne.n	8005e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2f      	ldr	r2, [pc, #188]	; (8005eec <TIM_Base_SetConfig+0x114>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d01f      	beq.n	8005e72 <TIM_Base_SetConfig+0x9a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e38:	d01b      	beq.n	8005e72 <TIM_Base_SetConfig+0x9a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2c      	ldr	r2, [pc, #176]	; (8005ef0 <TIM_Base_SetConfig+0x118>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d017      	beq.n	8005e72 <TIM_Base_SetConfig+0x9a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a2b      	ldr	r2, [pc, #172]	; (8005ef4 <TIM_Base_SetConfig+0x11c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <TIM_Base_SetConfig+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2a      	ldr	r2, [pc, #168]	; (8005ef8 <TIM_Base_SetConfig+0x120>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00f      	beq.n	8005e72 <TIM_Base_SetConfig+0x9a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a29      	ldr	r2, [pc, #164]	; (8005efc <TIM_Base_SetConfig+0x124>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00b      	beq.n	8005e72 <TIM_Base_SetConfig+0x9a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a28      	ldr	r2, [pc, #160]	; (8005f00 <TIM_Base_SetConfig+0x128>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_Base_SetConfig+0x9a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <TIM_Base_SetConfig+0x12c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_Base_SetConfig+0x9a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a26      	ldr	r2, [pc, #152]	; (8005f08 <TIM_Base_SetConfig+0x130>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d108      	bne.n	8005e84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a10      	ldr	r2, [pc, #64]	; (8005eec <TIM_Base_SetConfig+0x114>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00f      	beq.n	8005ed0 <TIM_Base_SetConfig+0xf8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a12      	ldr	r2, [pc, #72]	; (8005efc <TIM_Base_SetConfig+0x124>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00b      	beq.n	8005ed0 <TIM_Base_SetConfig+0xf8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a11      	ldr	r2, [pc, #68]	; (8005f00 <TIM_Base_SetConfig+0x128>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d007      	beq.n	8005ed0 <TIM_Base_SetConfig+0xf8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a10      	ldr	r2, [pc, #64]	; (8005f04 <TIM_Base_SetConfig+0x12c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_Base_SetConfig+0xf8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a0f      	ldr	r2, [pc, #60]	; (8005f08 <TIM_Base_SetConfig+0x130>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d103      	bne.n	8005ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	615a      	str	r2, [r3, #20]
}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40000c00 	.word	0x40000c00
 8005efc:	40010400 	.word	0x40010400
 8005f00:	40014000 	.word	0x40014000
 8005f04:	40014400 	.word	0x40014400
 8005f08:	40014800 	.word	0x40014800

08005f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0201 	bic.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4b37      	ldr	r3, [pc, #220]	; (8006014 <TIM_OC1_SetConfig+0x108>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 0302 	bic.w	r3, r3, #2
 8005f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a2d      	ldr	r2, [pc, #180]	; (8006018 <TIM_OC1_SetConfig+0x10c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00f      	beq.n	8005f88 <TIM_OC1_SetConfig+0x7c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a2c      	ldr	r2, [pc, #176]	; (800601c <TIM_OC1_SetConfig+0x110>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00b      	beq.n	8005f88 <TIM_OC1_SetConfig+0x7c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a2b      	ldr	r2, [pc, #172]	; (8006020 <TIM_OC1_SetConfig+0x114>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d007      	beq.n	8005f88 <TIM_OC1_SetConfig+0x7c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a2a      	ldr	r2, [pc, #168]	; (8006024 <TIM_OC1_SetConfig+0x118>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_OC1_SetConfig+0x7c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a29      	ldr	r2, [pc, #164]	; (8006028 <TIM_OC1_SetConfig+0x11c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d10c      	bne.n	8005fa2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 0308 	bic.w	r3, r3, #8
 8005f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 0304 	bic.w	r3, r3, #4
 8005fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1c      	ldr	r2, [pc, #112]	; (8006018 <TIM_OC1_SetConfig+0x10c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00f      	beq.n	8005fca <TIM_OC1_SetConfig+0xbe>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a1b      	ldr	r2, [pc, #108]	; (800601c <TIM_OC1_SetConfig+0x110>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00b      	beq.n	8005fca <TIM_OC1_SetConfig+0xbe>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a1a      	ldr	r2, [pc, #104]	; (8006020 <TIM_OC1_SetConfig+0x114>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <TIM_OC1_SetConfig+0xbe>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a19      	ldr	r2, [pc, #100]	; (8006024 <TIM_OC1_SetConfig+0x118>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d003      	beq.n	8005fca <TIM_OC1_SetConfig+0xbe>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a18      	ldr	r2, [pc, #96]	; (8006028 <TIM_OC1_SetConfig+0x11c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d111      	bne.n	8005fee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	621a      	str	r2, [r3, #32]
}
 8006008:	bf00      	nop
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	fffeff8f 	.word	0xfffeff8f
 8006018:	40010000 	.word	0x40010000
 800601c:	40010400 	.word	0x40010400
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800

0800602c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0210 	bic.w	r2, r3, #16
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4b34      	ldr	r3, [pc, #208]	; (8006128 <TIM_OC2_SetConfig+0xfc>)
 8006058:	4013      	ands	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0320 	bic.w	r3, r3, #32
 8006076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a29      	ldr	r2, [pc, #164]	; (800612c <TIM_OC2_SetConfig+0x100>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC2_SetConfig+0x68>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a28      	ldr	r2, [pc, #160]	; (8006130 <TIM_OC2_SetConfig+0x104>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d10d      	bne.n	80060b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800609a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a1e      	ldr	r2, [pc, #120]	; (800612c <TIM_OC2_SetConfig+0x100>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00f      	beq.n	80060d8 <TIM_OC2_SetConfig+0xac>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a1d      	ldr	r2, [pc, #116]	; (8006130 <TIM_OC2_SetConfig+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00b      	beq.n	80060d8 <TIM_OC2_SetConfig+0xac>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <TIM_OC2_SetConfig+0x108>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d007      	beq.n	80060d8 <TIM_OC2_SetConfig+0xac>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a1b      	ldr	r2, [pc, #108]	; (8006138 <TIM_OC2_SetConfig+0x10c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d003      	beq.n	80060d8 <TIM_OC2_SetConfig+0xac>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a1a      	ldr	r2, [pc, #104]	; (800613c <TIM_OC2_SetConfig+0x110>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d113      	bne.n	8006100 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	feff8fff 	.word	0xfeff8fff
 800612c:	40010000 	.word	0x40010000
 8006130:	40010400 	.word	0x40010400
 8006134:	40014000 	.word	0x40014000
 8006138:	40014400 	.word	0x40014400
 800613c:	40014800 	.word	0x40014800

08006140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4b33      	ldr	r3, [pc, #204]	; (8006238 <TIM_OC3_SetConfig+0xf8>)
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0303 	bic.w	r3, r3, #3
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a28      	ldr	r2, [pc, #160]	; (800623c <TIM_OC3_SetConfig+0xfc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_OC3_SetConfig+0x66>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a27      	ldr	r2, [pc, #156]	; (8006240 <TIM_OC3_SetConfig+0x100>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d10d      	bne.n	80061c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1d      	ldr	r2, [pc, #116]	; (800623c <TIM_OC3_SetConfig+0xfc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00f      	beq.n	80061ea <TIM_OC3_SetConfig+0xaa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a1c      	ldr	r2, [pc, #112]	; (8006240 <TIM_OC3_SetConfig+0x100>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00b      	beq.n	80061ea <TIM_OC3_SetConfig+0xaa>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a1b      	ldr	r2, [pc, #108]	; (8006244 <TIM_OC3_SetConfig+0x104>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d007      	beq.n	80061ea <TIM_OC3_SetConfig+0xaa>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a1a      	ldr	r2, [pc, #104]	; (8006248 <TIM_OC3_SetConfig+0x108>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d003      	beq.n	80061ea <TIM_OC3_SetConfig+0xaa>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a19      	ldr	r2, [pc, #100]	; (800624c <TIM_OC3_SetConfig+0x10c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d113      	bne.n	8006212 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	621a      	str	r2, [r3, #32]
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	fffeff8f 	.word	0xfffeff8f
 800623c:	40010000 	.word	0x40010000
 8006240:	40010400 	.word	0x40010400
 8006244:	40014000 	.word	0x40014000
 8006248:	40014400 	.word	0x40014400
 800624c:	40014800 	.word	0x40014800

08006250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <TIM_OC4_SetConfig+0xbc>)
 800627c:	4013      	ands	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800629a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	031b      	lsls	r3, r3, #12
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a19      	ldr	r2, [pc, #100]	; (8006310 <TIM_OC4_SetConfig+0xc0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00f      	beq.n	80062d0 <TIM_OC4_SetConfig+0x80>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a18      	ldr	r2, [pc, #96]	; (8006314 <TIM_OC4_SetConfig+0xc4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00b      	beq.n	80062d0 <TIM_OC4_SetConfig+0x80>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a17      	ldr	r2, [pc, #92]	; (8006318 <TIM_OC4_SetConfig+0xc8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <TIM_OC4_SetConfig+0x80>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a16      	ldr	r2, [pc, #88]	; (800631c <TIM_OC4_SetConfig+0xcc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_OC4_SetConfig+0x80>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a15      	ldr	r2, [pc, #84]	; (8006320 <TIM_OC4_SetConfig+0xd0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d109      	bne.n	80062e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	019b      	lsls	r3, r3, #6
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	feff8fff 	.word	0xfeff8fff
 8006310:	40010000 	.word	0x40010000
 8006314:	40010400 	.word	0x40010400
 8006318:	40014000 	.word	0x40014000
 800631c:	40014400 	.word	0x40014400
 8006320:	40014800 	.word	0x40014800

08006324 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4b21      	ldr	r3, [pc, #132]	; (80063d4 <TIM_OC5_SetConfig+0xb0>)
 8006350:	4013      	ands	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006364:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	041b      	lsls	r3, r3, #16
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <TIM_OC5_SetConfig+0xb4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00f      	beq.n	800639a <TIM_OC5_SetConfig+0x76>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a17      	ldr	r2, [pc, #92]	; (80063dc <TIM_OC5_SetConfig+0xb8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_OC5_SetConfig+0x76>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <TIM_OC5_SetConfig+0xbc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_OC5_SetConfig+0x76>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <TIM_OC5_SetConfig+0xc0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_OC5_SetConfig+0x76>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <TIM_OC5_SetConfig+0xc4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d109      	bne.n	80063ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	621a      	str	r2, [r3, #32]
}
 80063c8:	bf00      	nop
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	fffeff8f 	.word	0xfffeff8f
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40010400 	.word	0x40010400
 80063e0:	40014000 	.word	0x40014000
 80063e4:	40014400 	.word	0x40014400
 80063e8:	40014800 	.word	0x40014800

080063ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <TIM_OC6_SetConfig+0xb4>)
 8006418:	4013      	ands	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800642e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	051b      	lsls	r3, r3, #20
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a19      	ldr	r2, [pc, #100]	; (80064a4 <TIM_OC6_SetConfig+0xb8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00f      	beq.n	8006464 <TIM_OC6_SetConfig+0x78>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a18      	ldr	r2, [pc, #96]	; (80064a8 <TIM_OC6_SetConfig+0xbc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00b      	beq.n	8006464 <TIM_OC6_SetConfig+0x78>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a17      	ldr	r2, [pc, #92]	; (80064ac <TIM_OC6_SetConfig+0xc0>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d007      	beq.n	8006464 <TIM_OC6_SetConfig+0x78>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <TIM_OC6_SetConfig+0xc4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_OC6_SetConfig+0x78>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <TIM_OC6_SetConfig+0xc8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d109      	bne.n	8006478 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800646a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	029b      	lsls	r3, r3, #10
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	feff8fff 	.word	0xfeff8fff
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800

080064b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	f023 0201 	bic.w	r2, r3, #1
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a28      	ldr	r2, [pc, #160]	; (8006584 <TIM_TI1_SetConfig+0xcc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01b      	beq.n	800651e <TIM_TI1_SetConfig+0x66>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ec:	d017      	beq.n	800651e <TIM_TI1_SetConfig+0x66>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a25      	ldr	r2, [pc, #148]	; (8006588 <TIM_TI1_SetConfig+0xd0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <TIM_TI1_SetConfig+0x66>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a24      	ldr	r2, [pc, #144]	; (800658c <TIM_TI1_SetConfig+0xd4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00f      	beq.n	800651e <TIM_TI1_SetConfig+0x66>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a23      	ldr	r2, [pc, #140]	; (8006590 <TIM_TI1_SetConfig+0xd8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00b      	beq.n	800651e <TIM_TI1_SetConfig+0x66>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a22      	ldr	r2, [pc, #136]	; (8006594 <TIM_TI1_SetConfig+0xdc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <TIM_TI1_SetConfig+0x66>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a21      	ldr	r2, [pc, #132]	; (8006598 <TIM_TI1_SetConfig+0xe0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_TI1_SetConfig+0x66>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a20      	ldr	r2, [pc, #128]	; (800659c <TIM_TI1_SetConfig+0xe4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d101      	bne.n	8006522 <TIM_TI1_SetConfig+0x6a>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <TIM_TI1_SetConfig+0x6c>
 8006522:	2300      	movs	r3, #0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d008      	beq.n	800653a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0303 	bic.w	r3, r3, #3
 800652e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e003      	b.n	8006542 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	b2db      	uxtb	r3, r3
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f023 030a 	bic.w	r3, r3, #10
 800655c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f003 030a 	and.w	r3, r3, #10
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	40010400 	.word	0x40010400
 8006598:	40001800 	.word	0x40001800
 800659c:	40014000 	.word	0x40014000

080065a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f023 0201 	bic.w	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 030a 	bic.w	r3, r3, #10
 80065dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	621a      	str	r2, [r3, #32]
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065fe:	b480      	push	{r7}
 8006600:	b087      	sub	sp, #28
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 0210 	bic.w	r2, r3, #16
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800663c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	031b      	lsls	r3, r3, #12
 8006642:	b29b      	uxth	r3, r3
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006650:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	621a      	str	r2, [r3, #32]
}
 800666c:	bf00      	nop
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f023 0210 	bic.w	r2, r3, #16
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	031b      	lsls	r3, r3, #12
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f023 0303 	bic.w	r3, r3, #3
 8006704:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006714:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	b2db      	uxtb	r3, r3
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006728:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	621a      	str	r2, [r3, #32]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800678e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	031b      	lsls	r3, r3, #12
 8006794:	b29b      	uxth	r3, r3
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	031b      	lsls	r3, r3, #12
 80067a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	621a      	str	r2, [r3, #32]
}
 80067be:	bf00      	nop
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <TIM_ITRx_SetConfig+0x38>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f043 0307 	orr.w	r3, r3, #7
 80067ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	609a      	str	r2, [r3, #8]
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	ffcfff8f 	.word	0xffcfff8f

08006808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	021a      	lsls	r2, r3, #8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	431a      	orrs	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4313      	orrs	r3, r2
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	2201      	movs	r2, #1
 800685c:	fa02 f303 	lsl.w	r3, r2, r3
 8006860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1a      	ldr	r2, [r3, #32]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	43db      	mvns	r3, r3
 800686a:	401a      	ands	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a1a      	ldr	r2, [r3, #32]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	431a      	orrs	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e06d      	b.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a30      	ldr	r2, [pc, #192]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d004      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a2f      	ldr	r2, [pc, #188]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d108      	bne.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a20      	ldr	r2, [pc, #128]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d022      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691e:	d01d      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1d      	ldr	r2, [pc, #116]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d018      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d013      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1a      	ldr	r2, [pc, #104]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00e      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d009      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a16      	ldr	r2, [pc, #88]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d004      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a15      	ldr	r2, [pc, #84]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d10c      	bne.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006962:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	4313      	orrs	r3, r2
 800696c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40010000 	.word	0x40010000
 8006998:	40010400 	.word	0x40010400
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40001800 	.word	0x40001800
 80069ac:	40014000 	.word	0x40014000

080069b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e087      	b.n	8006adc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	041b      	lsls	r3, r3, #16
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d004      	beq.n	8006a5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a25      	ldr	r2, [pc, #148]	; (8006aec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d106      	bne.n	8006a68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d126      	bne.n	8006aca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	051b      	lsls	r3, r3, #20
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a0e      	ldr	r2, [pc, #56]	; (8006ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d004      	beq.n	8006abc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a0d      	ldr	r2, [pc, #52]	; (8006aec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d106      	bne.n	8006aca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40010400 	.word	0x40010400

08006af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e042      	b.n	8006bc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fa fbbb 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2224      	movs	r2, #36	; 0x24
 8006b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0201 	bic.w	r2, r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f82c 	bl	8006bcc <UART_SetConfig>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e022      	b.n	8006bc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fe7e 	bl	8007888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 ff05 	bl	80079cc <UART_CheckIdleState>
 8006bc2:	4603      	mov	r3, r0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bcc:	b5b0      	push	{r4, r5, r7, lr}
 8006bce:	b08e      	sub	sp, #56	; 0x38
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4bbf      	ldr	r3, [pc, #764]	; (8006ef8 <UART_SetConfig+0x32c>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6812      	ldr	r2, [r2, #0]
 8006c00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4ab5      	ldr	r2, [pc, #724]	; (8006efc <UART_SetConfig+0x330>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d004      	beq.n	8006c36 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c32:	4313      	orrs	r3, r2
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	4bb0      	ldr	r3, [pc, #704]	; (8006f00 <UART_SetConfig+0x334>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6812      	ldr	r2, [r2, #0]
 8006c44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c46:	430b      	orrs	r3, r1
 8006c48:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	f023 010f 	bic.w	r1, r3, #15
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4aa7      	ldr	r2, [pc, #668]	; (8006f04 <UART_SetConfig+0x338>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d176      	bne.n	8006d58 <UART_SetConfig+0x18c>
 8006c6a:	4ba7      	ldr	r3, [pc, #668]	; (8006f08 <UART_SetConfig+0x33c>)
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c72:	2b28      	cmp	r3, #40	; 0x28
 8006c74:	d86c      	bhi.n	8006d50 <UART_SetConfig+0x184>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <UART_SetConfig+0xb0>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006d21 	.word	0x08006d21
 8006c80:	08006d51 	.word	0x08006d51
 8006c84:	08006d51 	.word	0x08006d51
 8006c88:	08006d51 	.word	0x08006d51
 8006c8c:	08006d51 	.word	0x08006d51
 8006c90:	08006d51 	.word	0x08006d51
 8006c94:	08006d51 	.word	0x08006d51
 8006c98:	08006d51 	.word	0x08006d51
 8006c9c:	08006d29 	.word	0x08006d29
 8006ca0:	08006d51 	.word	0x08006d51
 8006ca4:	08006d51 	.word	0x08006d51
 8006ca8:	08006d51 	.word	0x08006d51
 8006cac:	08006d51 	.word	0x08006d51
 8006cb0:	08006d51 	.word	0x08006d51
 8006cb4:	08006d51 	.word	0x08006d51
 8006cb8:	08006d51 	.word	0x08006d51
 8006cbc:	08006d31 	.word	0x08006d31
 8006cc0:	08006d51 	.word	0x08006d51
 8006cc4:	08006d51 	.word	0x08006d51
 8006cc8:	08006d51 	.word	0x08006d51
 8006ccc:	08006d51 	.word	0x08006d51
 8006cd0:	08006d51 	.word	0x08006d51
 8006cd4:	08006d51 	.word	0x08006d51
 8006cd8:	08006d51 	.word	0x08006d51
 8006cdc:	08006d39 	.word	0x08006d39
 8006ce0:	08006d51 	.word	0x08006d51
 8006ce4:	08006d51 	.word	0x08006d51
 8006ce8:	08006d51 	.word	0x08006d51
 8006cec:	08006d51 	.word	0x08006d51
 8006cf0:	08006d51 	.word	0x08006d51
 8006cf4:	08006d51 	.word	0x08006d51
 8006cf8:	08006d51 	.word	0x08006d51
 8006cfc:	08006d41 	.word	0x08006d41
 8006d00:	08006d51 	.word	0x08006d51
 8006d04:	08006d51 	.word	0x08006d51
 8006d08:	08006d51 	.word	0x08006d51
 8006d0c:	08006d51 	.word	0x08006d51
 8006d10:	08006d51 	.word	0x08006d51
 8006d14:	08006d51 	.word	0x08006d51
 8006d18:	08006d51 	.word	0x08006d51
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	2301      	movs	r3, #1
 8006d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d26:	e326      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d2e:	e322      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006d30:	2308      	movs	r3, #8
 8006d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d36:	e31e      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d3e:	e31a      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006d40:	2320      	movs	r3, #32
 8006d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d46:	e316      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006d48:	2340      	movs	r3, #64	; 0x40
 8006d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d4e:	e312      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006d50:	2380      	movs	r3, #128	; 0x80
 8006d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d56:	e30e      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a6b      	ldr	r2, [pc, #428]	; (8006f0c <UART_SetConfig+0x340>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d130      	bne.n	8006dc4 <UART_SetConfig+0x1f8>
 8006d62:	4b69      	ldr	r3, [pc, #420]	; (8006f08 <UART_SetConfig+0x33c>)
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b05      	cmp	r3, #5
 8006d6c:	d826      	bhi.n	8006dbc <UART_SetConfig+0x1f0>
 8006d6e:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <UART_SetConfig+0x1a8>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006d8d 	.word	0x08006d8d
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	08006d9d 	.word	0x08006d9d
 8006d80:	08006da5 	.word	0x08006da5
 8006d84:	08006dad 	.word	0x08006dad
 8006d88:	08006db5 	.word	0x08006db5
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d92:	e2f0      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006d94:	2304      	movs	r3, #4
 8006d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d9a:	e2ec      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006da2:	e2e8      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006da4:	2310      	movs	r3, #16
 8006da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006daa:	e2e4      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006dac:	2320      	movs	r3, #32
 8006dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db2:	e2e0      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dba:	e2dc      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006dbc:	2380      	movs	r3, #128	; 0x80
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc2:	e2d8      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a51      	ldr	r2, [pc, #324]	; (8006f10 <UART_SetConfig+0x344>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d130      	bne.n	8006e30 <UART_SetConfig+0x264>
 8006dce:	4b4e      	ldr	r3, [pc, #312]	; (8006f08 <UART_SetConfig+0x33c>)
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	2b05      	cmp	r3, #5
 8006dd8:	d826      	bhi.n	8006e28 <UART_SetConfig+0x25c>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <UART_SetConfig+0x214>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006df9 	.word	0x08006df9
 8006de4:	08006e01 	.word	0x08006e01
 8006de8:	08006e09 	.word	0x08006e09
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006e19 	.word	0x08006e19
 8006df4:	08006e21 	.word	0x08006e21
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dfe:	e2ba      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e00:	2304      	movs	r3, #4
 8006e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e06:	e2b6      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e08:	2308      	movs	r3, #8
 8006e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e0e:	e2b2      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e10:	2310      	movs	r3, #16
 8006e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e16:	e2ae      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e18:	2320      	movs	r3, #32
 8006e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e1e:	e2aa      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e20:	2340      	movs	r3, #64	; 0x40
 8006e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e26:	e2a6      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e28:	2380      	movs	r3, #128	; 0x80
 8006e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2e:	e2a2      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a37      	ldr	r2, [pc, #220]	; (8006f14 <UART_SetConfig+0x348>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d130      	bne.n	8006e9c <UART_SetConfig+0x2d0>
 8006e3a:	4b33      	ldr	r3, [pc, #204]	; (8006f08 <UART_SetConfig+0x33c>)
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d826      	bhi.n	8006e94 <UART_SetConfig+0x2c8>
 8006e46:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <UART_SetConfig+0x280>)
 8006e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4c:	08006e65 	.word	0x08006e65
 8006e50:	08006e6d 	.word	0x08006e6d
 8006e54:	08006e75 	.word	0x08006e75
 8006e58:	08006e7d 	.word	0x08006e7d
 8006e5c:	08006e85 	.word	0x08006e85
 8006e60:	08006e8d 	.word	0x08006e8d
 8006e64:	2300      	movs	r3, #0
 8006e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e6a:	e284      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e72:	e280      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e74:	2308      	movs	r3, #8
 8006e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e7a:	e27c      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e82:	e278      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e84:	2320      	movs	r3, #32
 8006e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8a:	e274      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e92:	e270      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e94:	2380      	movs	r3, #128	; 0x80
 8006e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9a:	e26c      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <UART_SetConfig+0x34c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d142      	bne.n	8006f2c <UART_SetConfig+0x360>
 8006ea6:	4b18      	ldr	r3, [pc, #96]	; (8006f08 <UART_SetConfig+0x33c>)
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	2b05      	cmp	r3, #5
 8006eb0:	d838      	bhi.n	8006f24 <UART_SetConfig+0x358>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <UART_SetConfig+0x2ec>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006ed1 	.word	0x08006ed1
 8006ebc:	08006ed9 	.word	0x08006ed9
 8006ec0:	08006ee1 	.word	0x08006ee1
 8006ec4:	08006ee9 	.word	0x08006ee9
 8006ec8:	08006ef1 	.word	0x08006ef1
 8006ecc:	08006f1d 	.word	0x08006f1d
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ed6:	e24e      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ede:	e24a      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ee6:	e246      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006ee8:	2310      	movs	r3, #16
 8006eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eee:	e242      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006ef0:	2320      	movs	r3, #32
 8006ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef6:	e23e      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006ef8:	cfff69f3 	.word	0xcfff69f3
 8006efc:	58000c00 	.word	0x58000c00
 8006f00:	11fff4ff 	.word	0x11fff4ff
 8006f04:	40011000 	.word	0x40011000
 8006f08:	58024400 	.word	0x58024400
 8006f0c:	40004400 	.word	0x40004400
 8006f10:	40004800 	.word	0x40004800
 8006f14:	40004c00 	.word	0x40004c00
 8006f18:	40005000 	.word	0x40005000
 8006f1c:	2340      	movs	r3, #64	; 0x40
 8006f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f22:	e228      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006f24:	2380      	movs	r3, #128	; 0x80
 8006f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f2a:	e224      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4ab1      	ldr	r2, [pc, #708]	; (80071f8 <UART_SetConfig+0x62c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d176      	bne.n	8007024 <UART_SetConfig+0x458>
 8006f36:	4bb1      	ldr	r3, [pc, #708]	; (80071fc <UART_SetConfig+0x630>)
 8006f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f3e:	2b28      	cmp	r3, #40	; 0x28
 8006f40:	d86c      	bhi.n	800701c <UART_SetConfig+0x450>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x37c>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006fed 	.word	0x08006fed
 8006f4c:	0800701d 	.word	0x0800701d
 8006f50:	0800701d 	.word	0x0800701d
 8006f54:	0800701d 	.word	0x0800701d
 8006f58:	0800701d 	.word	0x0800701d
 8006f5c:	0800701d 	.word	0x0800701d
 8006f60:	0800701d 	.word	0x0800701d
 8006f64:	0800701d 	.word	0x0800701d
 8006f68:	08006ff5 	.word	0x08006ff5
 8006f6c:	0800701d 	.word	0x0800701d
 8006f70:	0800701d 	.word	0x0800701d
 8006f74:	0800701d 	.word	0x0800701d
 8006f78:	0800701d 	.word	0x0800701d
 8006f7c:	0800701d 	.word	0x0800701d
 8006f80:	0800701d 	.word	0x0800701d
 8006f84:	0800701d 	.word	0x0800701d
 8006f88:	08006ffd 	.word	0x08006ffd
 8006f8c:	0800701d 	.word	0x0800701d
 8006f90:	0800701d 	.word	0x0800701d
 8006f94:	0800701d 	.word	0x0800701d
 8006f98:	0800701d 	.word	0x0800701d
 8006f9c:	0800701d 	.word	0x0800701d
 8006fa0:	0800701d 	.word	0x0800701d
 8006fa4:	0800701d 	.word	0x0800701d
 8006fa8:	08007005 	.word	0x08007005
 8006fac:	0800701d 	.word	0x0800701d
 8006fb0:	0800701d 	.word	0x0800701d
 8006fb4:	0800701d 	.word	0x0800701d
 8006fb8:	0800701d 	.word	0x0800701d
 8006fbc:	0800701d 	.word	0x0800701d
 8006fc0:	0800701d 	.word	0x0800701d
 8006fc4:	0800701d 	.word	0x0800701d
 8006fc8:	0800700d 	.word	0x0800700d
 8006fcc:	0800701d 	.word	0x0800701d
 8006fd0:	0800701d 	.word	0x0800701d
 8006fd4:	0800701d 	.word	0x0800701d
 8006fd8:	0800701d 	.word	0x0800701d
 8006fdc:	0800701d 	.word	0x0800701d
 8006fe0:	0800701d 	.word	0x0800701d
 8006fe4:	0800701d 	.word	0x0800701d
 8006fe8:	08007015 	.word	0x08007015
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ff2:	e1c0      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ffa:	e1bc      	b.n	8007376 <UART_SetConfig+0x7aa>
 8006ffc:	2308      	movs	r3, #8
 8006ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007002:	e1b8      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007004:	2310      	movs	r3, #16
 8007006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800700a:	e1b4      	b.n	8007376 <UART_SetConfig+0x7aa>
 800700c:	2320      	movs	r3, #32
 800700e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007012:	e1b0      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007014:	2340      	movs	r3, #64	; 0x40
 8007016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800701a:	e1ac      	b.n	8007376 <UART_SetConfig+0x7aa>
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007022:	e1a8      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a75      	ldr	r2, [pc, #468]	; (8007200 <UART_SetConfig+0x634>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d130      	bne.n	8007090 <UART_SetConfig+0x4c4>
 800702e:	4b73      	ldr	r3, [pc, #460]	; (80071fc <UART_SetConfig+0x630>)
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b05      	cmp	r3, #5
 8007038:	d826      	bhi.n	8007088 <UART_SetConfig+0x4bc>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x474>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007059 	.word	0x08007059
 8007044:	08007061 	.word	0x08007061
 8007048:	08007069 	.word	0x08007069
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	2300      	movs	r3, #0
 800705a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800705e:	e18a      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007060:	2304      	movs	r3, #4
 8007062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007066:	e186      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007068:	2308      	movs	r3, #8
 800706a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800706e:	e182      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007070:	2310      	movs	r3, #16
 8007072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007076:	e17e      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007078:	2320      	movs	r3, #32
 800707a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800707e:	e17a      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007080:	2340      	movs	r3, #64	; 0x40
 8007082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007086:	e176      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007088:	2380      	movs	r3, #128	; 0x80
 800708a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800708e:	e172      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a5b      	ldr	r2, [pc, #364]	; (8007204 <UART_SetConfig+0x638>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d130      	bne.n	80070fc <UART_SetConfig+0x530>
 800709a:	4b58      	ldr	r3, [pc, #352]	; (80071fc <UART_SetConfig+0x630>)
 800709c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	d826      	bhi.n	80070f4 <UART_SetConfig+0x528>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <UART_SetConfig+0x4e0>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080070c5 	.word	0x080070c5
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	080070d5 	.word	0x080070d5
 80070b8:	080070dd 	.word	0x080070dd
 80070bc:	080070e5 	.word	0x080070e5
 80070c0:	080070ed 	.word	0x080070ed
 80070c4:	2300      	movs	r3, #0
 80070c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ca:	e154      	b.n	8007376 <UART_SetConfig+0x7aa>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070d2:	e150      	b.n	8007376 <UART_SetConfig+0x7aa>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070da:	e14c      	b.n	8007376 <UART_SetConfig+0x7aa>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070e2:	e148      	b.n	8007376 <UART_SetConfig+0x7aa>
 80070e4:	2320      	movs	r3, #32
 80070e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ea:	e144      	b.n	8007376 <UART_SetConfig+0x7aa>
 80070ec:	2340      	movs	r3, #64	; 0x40
 80070ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070f2:	e140      	b.n	8007376 <UART_SetConfig+0x7aa>
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070fa:	e13c      	b.n	8007376 <UART_SetConfig+0x7aa>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a41      	ldr	r2, [pc, #260]	; (8007208 <UART_SetConfig+0x63c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	f040 8082 	bne.w	800720c <UART_SetConfig+0x640>
 8007108:	4b3c      	ldr	r3, [pc, #240]	; (80071fc <UART_SetConfig+0x630>)
 800710a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007110:	2b28      	cmp	r3, #40	; 0x28
 8007112:	d86d      	bhi.n	80071f0 <UART_SetConfig+0x624>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x550>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	080071c1 	.word	0x080071c1
 8007120:	080071f1 	.word	0x080071f1
 8007124:	080071f1 	.word	0x080071f1
 8007128:	080071f1 	.word	0x080071f1
 800712c:	080071f1 	.word	0x080071f1
 8007130:	080071f1 	.word	0x080071f1
 8007134:	080071f1 	.word	0x080071f1
 8007138:	080071f1 	.word	0x080071f1
 800713c:	080071c9 	.word	0x080071c9
 8007140:	080071f1 	.word	0x080071f1
 8007144:	080071f1 	.word	0x080071f1
 8007148:	080071f1 	.word	0x080071f1
 800714c:	080071f1 	.word	0x080071f1
 8007150:	080071f1 	.word	0x080071f1
 8007154:	080071f1 	.word	0x080071f1
 8007158:	080071f1 	.word	0x080071f1
 800715c:	080071d1 	.word	0x080071d1
 8007160:	080071f1 	.word	0x080071f1
 8007164:	080071f1 	.word	0x080071f1
 8007168:	080071f1 	.word	0x080071f1
 800716c:	080071f1 	.word	0x080071f1
 8007170:	080071f1 	.word	0x080071f1
 8007174:	080071f1 	.word	0x080071f1
 8007178:	080071f1 	.word	0x080071f1
 800717c:	080071d9 	.word	0x080071d9
 8007180:	080071f1 	.word	0x080071f1
 8007184:	080071f1 	.word	0x080071f1
 8007188:	080071f1 	.word	0x080071f1
 800718c:	080071f1 	.word	0x080071f1
 8007190:	080071f1 	.word	0x080071f1
 8007194:	080071f1 	.word	0x080071f1
 8007198:	080071f1 	.word	0x080071f1
 800719c:	080071e1 	.word	0x080071e1
 80071a0:	080071f1 	.word	0x080071f1
 80071a4:	080071f1 	.word	0x080071f1
 80071a8:	080071f1 	.word	0x080071f1
 80071ac:	080071f1 	.word	0x080071f1
 80071b0:	080071f1 	.word	0x080071f1
 80071b4:	080071f1 	.word	0x080071f1
 80071b8:	080071f1 	.word	0x080071f1
 80071bc:	080071e9 	.word	0x080071e9
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c6:	e0d6      	b.n	8007376 <UART_SetConfig+0x7aa>
 80071c8:	2304      	movs	r3, #4
 80071ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ce:	e0d2      	b.n	8007376 <UART_SetConfig+0x7aa>
 80071d0:	2308      	movs	r3, #8
 80071d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071d6:	e0ce      	b.n	8007376 <UART_SetConfig+0x7aa>
 80071d8:	2310      	movs	r3, #16
 80071da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071de:	e0ca      	b.n	8007376 <UART_SetConfig+0x7aa>
 80071e0:	2320      	movs	r3, #32
 80071e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071e6:	e0c6      	b.n	8007376 <UART_SetConfig+0x7aa>
 80071e8:	2340      	movs	r3, #64	; 0x40
 80071ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ee:	e0c2      	b.n	8007376 <UART_SetConfig+0x7aa>
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f6:	e0be      	b.n	8007376 <UART_SetConfig+0x7aa>
 80071f8:	40011400 	.word	0x40011400
 80071fc:	58024400 	.word	0x58024400
 8007200:	40007800 	.word	0x40007800
 8007204:	40007c00 	.word	0x40007c00
 8007208:	40011800 	.word	0x40011800
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4aad      	ldr	r2, [pc, #692]	; (80074c8 <UART_SetConfig+0x8fc>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d176      	bne.n	8007304 <UART_SetConfig+0x738>
 8007216:	4bad      	ldr	r3, [pc, #692]	; (80074cc <UART_SetConfig+0x900>)
 8007218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800721e:	2b28      	cmp	r3, #40	; 0x28
 8007220:	d86c      	bhi.n	80072fc <UART_SetConfig+0x730>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x65c>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	080072cd 	.word	0x080072cd
 800722c:	080072fd 	.word	0x080072fd
 8007230:	080072fd 	.word	0x080072fd
 8007234:	080072fd 	.word	0x080072fd
 8007238:	080072fd 	.word	0x080072fd
 800723c:	080072fd 	.word	0x080072fd
 8007240:	080072fd 	.word	0x080072fd
 8007244:	080072fd 	.word	0x080072fd
 8007248:	080072d5 	.word	0x080072d5
 800724c:	080072fd 	.word	0x080072fd
 8007250:	080072fd 	.word	0x080072fd
 8007254:	080072fd 	.word	0x080072fd
 8007258:	080072fd 	.word	0x080072fd
 800725c:	080072fd 	.word	0x080072fd
 8007260:	080072fd 	.word	0x080072fd
 8007264:	080072fd 	.word	0x080072fd
 8007268:	080072dd 	.word	0x080072dd
 800726c:	080072fd 	.word	0x080072fd
 8007270:	080072fd 	.word	0x080072fd
 8007274:	080072fd 	.word	0x080072fd
 8007278:	080072fd 	.word	0x080072fd
 800727c:	080072fd 	.word	0x080072fd
 8007280:	080072fd 	.word	0x080072fd
 8007284:	080072fd 	.word	0x080072fd
 8007288:	080072e5 	.word	0x080072e5
 800728c:	080072fd 	.word	0x080072fd
 8007290:	080072fd 	.word	0x080072fd
 8007294:	080072fd 	.word	0x080072fd
 8007298:	080072fd 	.word	0x080072fd
 800729c:	080072fd 	.word	0x080072fd
 80072a0:	080072fd 	.word	0x080072fd
 80072a4:	080072fd 	.word	0x080072fd
 80072a8:	080072ed 	.word	0x080072ed
 80072ac:	080072fd 	.word	0x080072fd
 80072b0:	080072fd 	.word	0x080072fd
 80072b4:	080072fd 	.word	0x080072fd
 80072b8:	080072fd 	.word	0x080072fd
 80072bc:	080072fd 	.word	0x080072fd
 80072c0:	080072fd 	.word	0x080072fd
 80072c4:	080072fd 	.word	0x080072fd
 80072c8:	080072f5 	.word	0x080072f5
 80072cc:	2301      	movs	r3, #1
 80072ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072d2:	e050      	b.n	8007376 <UART_SetConfig+0x7aa>
 80072d4:	2304      	movs	r3, #4
 80072d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072da:	e04c      	b.n	8007376 <UART_SetConfig+0x7aa>
 80072dc:	2308      	movs	r3, #8
 80072de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072e2:	e048      	b.n	8007376 <UART_SetConfig+0x7aa>
 80072e4:	2310      	movs	r3, #16
 80072e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ea:	e044      	b.n	8007376 <UART_SetConfig+0x7aa>
 80072ec:	2320      	movs	r3, #32
 80072ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f2:	e040      	b.n	8007376 <UART_SetConfig+0x7aa>
 80072f4:	2340      	movs	r3, #64	; 0x40
 80072f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fa:	e03c      	b.n	8007376 <UART_SetConfig+0x7aa>
 80072fc:	2380      	movs	r3, #128	; 0x80
 80072fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007302:	e038      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a71      	ldr	r2, [pc, #452]	; (80074d0 <UART_SetConfig+0x904>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d130      	bne.n	8007370 <UART_SetConfig+0x7a4>
 800730e:	4b6f      	ldr	r3, [pc, #444]	; (80074cc <UART_SetConfig+0x900>)
 8007310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	2b05      	cmp	r3, #5
 8007318:	d826      	bhi.n	8007368 <UART_SetConfig+0x79c>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UART_SetConfig+0x754>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007339 	.word	0x08007339
 8007324:	08007341 	.word	0x08007341
 8007328:	08007349 	.word	0x08007349
 800732c:	08007351 	.word	0x08007351
 8007330:	08007359 	.word	0x08007359
 8007334:	08007361 	.word	0x08007361
 8007338:	2302      	movs	r3, #2
 800733a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800733e:	e01a      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007346:	e016      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800734e:	e012      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007356:	e00e      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007358:	2320      	movs	r3, #32
 800735a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800735e:	e00a      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007366:	e006      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007368:	2380      	movs	r3, #128	; 0x80
 800736a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736e:	e002      	b.n	8007376 <UART_SetConfig+0x7aa>
 8007370:	2380      	movs	r3, #128	; 0x80
 8007372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a55      	ldr	r2, [pc, #340]	; (80074d0 <UART_SetConfig+0x904>)
 800737c:	4293      	cmp	r3, r2
 800737e:	f040 80f0 	bne.w	8007562 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007386:	2b20      	cmp	r3, #32
 8007388:	dc46      	bgt.n	8007418 <UART_SetConfig+0x84c>
 800738a:	2b02      	cmp	r3, #2
 800738c:	db75      	blt.n	800747a <UART_SetConfig+0x8ae>
 800738e:	3b02      	subs	r3, #2
 8007390:	2b1e      	cmp	r3, #30
 8007392:	d872      	bhi.n	800747a <UART_SetConfig+0x8ae>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <UART_SetConfig+0x7d0>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	0800741f 	.word	0x0800741f
 80073a0:	0800747b 	.word	0x0800747b
 80073a4:	08007427 	.word	0x08007427
 80073a8:	0800747b 	.word	0x0800747b
 80073ac:	0800747b 	.word	0x0800747b
 80073b0:	0800747b 	.word	0x0800747b
 80073b4:	08007437 	.word	0x08007437
 80073b8:	0800747b 	.word	0x0800747b
 80073bc:	0800747b 	.word	0x0800747b
 80073c0:	0800747b 	.word	0x0800747b
 80073c4:	0800747b 	.word	0x0800747b
 80073c8:	0800747b 	.word	0x0800747b
 80073cc:	0800747b 	.word	0x0800747b
 80073d0:	0800747b 	.word	0x0800747b
 80073d4:	08007447 	.word	0x08007447
 80073d8:	0800747b 	.word	0x0800747b
 80073dc:	0800747b 	.word	0x0800747b
 80073e0:	0800747b 	.word	0x0800747b
 80073e4:	0800747b 	.word	0x0800747b
 80073e8:	0800747b 	.word	0x0800747b
 80073ec:	0800747b 	.word	0x0800747b
 80073f0:	0800747b 	.word	0x0800747b
 80073f4:	0800747b 	.word	0x0800747b
 80073f8:	0800747b 	.word	0x0800747b
 80073fc:	0800747b 	.word	0x0800747b
 8007400:	0800747b 	.word	0x0800747b
 8007404:	0800747b 	.word	0x0800747b
 8007408:	0800747b 	.word	0x0800747b
 800740c:	0800747b 	.word	0x0800747b
 8007410:	0800747b 	.word	0x0800747b
 8007414:	0800746d 	.word	0x0800746d
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d02a      	beq.n	8007472 <UART_SetConfig+0x8a6>
 800741c:	e02d      	b.n	800747a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800741e:	f7fd f917 	bl	8004650 <HAL_RCCEx_GetD3PCLK1Freq>
 8007422:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007424:	e02f      	b.n	8007486 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007426:	f107 0314 	add.w	r3, r7, #20
 800742a:	4618      	mov	r0, r3
 800742c:	f7fd f926 	bl	800467c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007434:	e027      	b.n	8007486 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007436:	f107 0308 	add.w	r3, r7, #8
 800743a:	4618      	mov	r0, r3
 800743c:	f7fd fa72 	bl	8004924 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007444:	e01f      	b.n	8007486 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007446:	4b21      	ldr	r3, [pc, #132]	; (80074cc <UART_SetConfig+0x900>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007452:	4b1e      	ldr	r3, [pc, #120]	; (80074cc <UART_SetConfig+0x900>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	08db      	lsrs	r3, r3, #3
 8007458:	f003 0303 	and.w	r3, r3, #3
 800745c:	4a1d      	ldr	r2, [pc, #116]	; (80074d4 <UART_SetConfig+0x908>)
 800745e:	fa22 f303 	lsr.w	r3, r2, r3
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007464:	e00f      	b.n	8007486 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8007466:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <UART_SetConfig+0x908>)
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800746a:	e00c      	b.n	8007486 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800746c:	4b1a      	ldr	r3, [pc, #104]	; (80074d8 <UART_SetConfig+0x90c>)
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007470:	e009      	b.n	8007486 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007478:	e005      	b.n	8007486 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007484:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 81e6 	beq.w	800785a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	4a12      	ldr	r2, [pc, #72]	; (80074dc <UART_SetConfig+0x910>)
 8007494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007498:	461a      	mov	r2, r3
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	fbb3 f3f2 	udiv	r3, r3, r2
 80074a0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	4613      	mov	r3, r2
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	4413      	add	r3, r2
 80074ac:	6a3a      	ldr	r2, [r7, #32]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d305      	bcc.n	80074be <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074b8:	6a3a      	ldr	r2, [r7, #32]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d910      	bls.n	80074e0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80074c4:	e1c9      	b.n	800785a <UART_SetConfig+0xc8e>
 80074c6:	bf00      	nop
 80074c8:	40011c00 	.word	0x40011c00
 80074cc:	58024400 	.word	0x58024400
 80074d0:	58000c00 	.word	0x58000c00
 80074d4:	03d09000 	.word	0x03d09000
 80074d8:	003d0900 	.word	0x003d0900
 80074dc:	08007ee0 	.word	0x08007ee0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	4618      	mov	r0, r3
 80074e4:	f04f 0100 	mov.w	r1, #0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	4ac1      	ldr	r2, [pc, #772]	; (80077f4 <UART_SetConfig+0xc28>)
 80074ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	f7f8 fefa 	bl	80002f0 <__aeabi_uldivmod>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4610      	mov	r0, r2
 8007502:	4619      	mov	r1, r3
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	020b      	lsls	r3, r1, #8
 800750e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007512:	0202      	lsls	r2, r0, #8
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	6849      	ldr	r1, [r1, #4]
 8007518:	0849      	lsrs	r1, r1, #1
 800751a:	4608      	mov	r0, r1
 800751c:	f04f 0100 	mov.w	r1, #0
 8007520:	1814      	adds	r4, r2, r0
 8007522:	eb43 0501 	adc.w	r5, r3, r1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	461a      	mov	r2, r3
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	4620      	mov	r0, r4
 8007532:	4629      	mov	r1, r5
 8007534:	f7f8 fedc 	bl	80002f0 <__aeabi_uldivmod>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4613      	mov	r3, r2
 800753e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007546:	d308      	bcc.n	800755a <UART_SetConfig+0x98e>
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800754e:	d204      	bcs.n	800755a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007556:	60da      	str	r2, [r3, #12]
 8007558:	e17f      	b.n	800785a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007560:	e17b      	b.n	800785a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800756a:	f040 80bd 	bne.w	80076e8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800756e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007572:	2b20      	cmp	r3, #32
 8007574:	dc48      	bgt.n	8007608 <UART_SetConfig+0xa3c>
 8007576:	2b00      	cmp	r3, #0
 8007578:	db7b      	blt.n	8007672 <UART_SetConfig+0xaa6>
 800757a:	2b20      	cmp	r3, #32
 800757c:	d879      	bhi.n	8007672 <UART_SetConfig+0xaa6>
 800757e:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <UART_SetConfig+0x9b8>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	0800760f 	.word	0x0800760f
 8007588:	08007617 	.word	0x08007617
 800758c:	08007673 	.word	0x08007673
 8007590:	08007673 	.word	0x08007673
 8007594:	0800761f 	.word	0x0800761f
 8007598:	08007673 	.word	0x08007673
 800759c:	08007673 	.word	0x08007673
 80075a0:	08007673 	.word	0x08007673
 80075a4:	0800762f 	.word	0x0800762f
 80075a8:	08007673 	.word	0x08007673
 80075ac:	08007673 	.word	0x08007673
 80075b0:	08007673 	.word	0x08007673
 80075b4:	08007673 	.word	0x08007673
 80075b8:	08007673 	.word	0x08007673
 80075bc:	08007673 	.word	0x08007673
 80075c0:	08007673 	.word	0x08007673
 80075c4:	0800763f 	.word	0x0800763f
 80075c8:	08007673 	.word	0x08007673
 80075cc:	08007673 	.word	0x08007673
 80075d0:	08007673 	.word	0x08007673
 80075d4:	08007673 	.word	0x08007673
 80075d8:	08007673 	.word	0x08007673
 80075dc:	08007673 	.word	0x08007673
 80075e0:	08007673 	.word	0x08007673
 80075e4:	08007673 	.word	0x08007673
 80075e8:	08007673 	.word	0x08007673
 80075ec:	08007673 	.word	0x08007673
 80075f0:	08007673 	.word	0x08007673
 80075f4:	08007673 	.word	0x08007673
 80075f8:	08007673 	.word	0x08007673
 80075fc:	08007673 	.word	0x08007673
 8007600:	08007673 	.word	0x08007673
 8007604:	08007665 	.word	0x08007665
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d02e      	beq.n	800766a <UART_SetConfig+0xa9e>
 800760c:	e031      	b.n	8007672 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800760e:	f7fc f8e7 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8007612:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007614:	e033      	b.n	800767e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007616:	f7fc f8f9 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 800761a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800761c:	e02f      	b.n	800767e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800761e:	f107 0314 	add.w	r3, r7, #20
 8007622:	4618      	mov	r0, r3
 8007624:	f7fd f82a 	bl	800467c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800762c:	e027      	b.n	800767e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	4618      	mov	r0, r3
 8007634:	f7fd f976 	bl	8004924 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800763c:	e01f      	b.n	800767e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800763e:	4b6e      	ldr	r3, [pc, #440]	; (80077f8 <UART_SetConfig+0xc2c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800764a:	4b6b      	ldr	r3, [pc, #428]	; (80077f8 <UART_SetConfig+0xc2c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	08db      	lsrs	r3, r3, #3
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	4a69      	ldr	r2, [pc, #420]	; (80077fc <UART_SetConfig+0xc30>)
 8007656:	fa22 f303 	lsr.w	r3, r2, r3
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800765c:	e00f      	b.n	800767e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800765e:	4b67      	ldr	r3, [pc, #412]	; (80077fc <UART_SetConfig+0xc30>)
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007662:	e00c      	b.n	800767e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007664:	4b66      	ldr	r3, [pc, #408]	; (8007800 <UART_SetConfig+0xc34>)
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007668:	e009      	b.n	800767e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800766a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007670:	e005      	b.n	800767e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800767c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80ea 	beq.w	800785a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	4a5a      	ldr	r2, [pc, #360]	; (80077f4 <UART_SetConfig+0xc28>)
 800768c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007690:	461a      	mov	r2, r3
 8007692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007694:	fbb3 f3f2 	udiv	r3, r3, r2
 8007698:	005a      	lsls	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	085b      	lsrs	r3, r3, #1
 80076a0:	441a      	add	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	2b0f      	cmp	r3, #15
 80076b0:	d916      	bls.n	80076e0 <UART_SetConfig+0xb14>
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b8:	d212      	bcs.n	80076e0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	b29b      	uxth	r3, r3
 80076be:	f023 030f 	bic.w	r3, r3, #15
 80076c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076d2:	4313      	orrs	r3, r2
 80076d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076dc:	60da      	str	r2, [r3, #12]
 80076de:	e0bc      	b.n	800785a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80076e6:	e0b8      	b.n	800785a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	dc4b      	bgt.n	8007788 <UART_SetConfig+0xbbc>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f2c0 8087 	blt.w	8007804 <UART_SetConfig+0xc38>
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	f200 8084 	bhi.w	8007804 <UART_SetConfig+0xc38>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <UART_SetConfig+0xb38>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	0800778f 	.word	0x0800778f
 8007708:	08007797 	.word	0x08007797
 800770c:	08007805 	.word	0x08007805
 8007710:	08007805 	.word	0x08007805
 8007714:	0800779f 	.word	0x0800779f
 8007718:	08007805 	.word	0x08007805
 800771c:	08007805 	.word	0x08007805
 8007720:	08007805 	.word	0x08007805
 8007724:	080077af 	.word	0x080077af
 8007728:	08007805 	.word	0x08007805
 800772c:	08007805 	.word	0x08007805
 8007730:	08007805 	.word	0x08007805
 8007734:	08007805 	.word	0x08007805
 8007738:	08007805 	.word	0x08007805
 800773c:	08007805 	.word	0x08007805
 8007740:	08007805 	.word	0x08007805
 8007744:	080077bf 	.word	0x080077bf
 8007748:	08007805 	.word	0x08007805
 800774c:	08007805 	.word	0x08007805
 8007750:	08007805 	.word	0x08007805
 8007754:	08007805 	.word	0x08007805
 8007758:	08007805 	.word	0x08007805
 800775c:	08007805 	.word	0x08007805
 8007760:	08007805 	.word	0x08007805
 8007764:	08007805 	.word	0x08007805
 8007768:	08007805 	.word	0x08007805
 800776c:	08007805 	.word	0x08007805
 8007770:	08007805 	.word	0x08007805
 8007774:	08007805 	.word	0x08007805
 8007778:	08007805 	.word	0x08007805
 800777c:	08007805 	.word	0x08007805
 8007780:	08007805 	.word	0x08007805
 8007784:	080077e5 	.word	0x080077e5
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	d02e      	beq.n	80077ea <UART_SetConfig+0xc1e>
 800778c:	e03a      	b.n	8007804 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800778e:	f7fc f827 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8007792:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007794:	e03c      	b.n	8007810 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007796:	f7fc f839 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 800779a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800779c:	e038      	b.n	8007810 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800779e:	f107 0314 	add.w	r3, r7, #20
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fc ff6a 	bl	800467c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077ac:	e030      	b.n	8007810 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ae:	f107 0308 	add.w	r3, r7, #8
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fd f8b6 	bl	8004924 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077bc:	e028      	b.n	8007810 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077be:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <UART_SetConfig+0xc2c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <UART_SetConfig+0xc2c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	08db      	lsrs	r3, r3, #3
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	4a09      	ldr	r2, [pc, #36]	; (80077fc <UART_SetConfig+0xc30>)
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077dc:	e018      	b.n	8007810 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80077de:	4b07      	ldr	r3, [pc, #28]	; (80077fc <UART_SetConfig+0xc30>)
 80077e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077e2:	e015      	b.n	8007810 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077e4:	4b06      	ldr	r3, [pc, #24]	; (8007800 <UART_SetConfig+0xc34>)
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077e8:	e012      	b.n	8007810 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077f0:	e00e      	b.n	8007810 <UART_SetConfig+0xc44>
 80077f2:	bf00      	nop
 80077f4:	08007ee0 	.word	0x08007ee0
 80077f8:	58024400 	.word	0x58024400
 80077fc:	03d09000 	.word	0x03d09000
 8007800:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800780e:	bf00      	nop
    }

    if (pclk != 0U)
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d021      	beq.n	800785a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	4a1a      	ldr	r2, [pc, #104]	; (8007884 <UART_SetConfig+0xcb8>)
 800781c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007820:	461a      	mov	r2, r3
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	fbb3 f2f2 	udiv	r2, r3, r2
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	441a      	add	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	2b0f      	cmp	r3, #15
 800783e:	d909      	bls.n	8007854 <UART_SetConfig+0xc88>
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007846:	d205      	bcs.n	8007854 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	b29a      	uxth	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60da      	str	r2, [r3, #12]
 8007852:	e002      	b.n	800785a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007876:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800787a:	4618      	mov	r0, r3
 800787c:	3738      	adds	r7, #56	; 0x38
 800787e:	46bd      	mov	sp, r7
 8007880:	bdb0      	pop	{r4, r5, r7, pc}
 8007882:	bf00      	nop
 8007884:	08007ee0 	.word	0x08007ee0

08007888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00a      	beq.n	80078b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01a      	beq.n	800799e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007986:	d10a      	bne.n	800799e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	605a      	str	r2, [r3, #4]
  }
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079dc:	f7f9 fde0 	bl	80015a0 <HAL_GetTick>
 80079e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0308 	and.w	r3, r3, #8
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d10e      	bne.n	8007a0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f82f 	bl	8007a62 <UART_WaitOnFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e025      	b.n	8007a5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d10e      	bne.n	8007a3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f819 	bl	8007a62 <UART_WaitOnFlagUntilTimeout>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e00f      	b.n	8007a5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b09c      	sub	sp, #112	; 0x70
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a72:	e0a9      	b.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	f000 80a5 	beq.w	8007bc8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a7e:	f7f9 fd8f 	bl	80015a0 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d302      	bcc.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d140      	bne.n	8007b16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ab4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ab8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e6      	bne.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	663b      	str	r3, [r7, #96]	; 0x60
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ae6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ae8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e5      	bne.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e069      	b.n	8007bea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d051      	beq.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b32:	d149      	bne.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b64:	e841 2300 	strex	r3, r2, [r1]
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e6      	bne.n	8007b3e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3308      	adds	r3, #8
 8007b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f023 0301 	bic.w	r3, r3, #1
 8007b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b90:	623a      	str	r2, [r7, #32]
 8007b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	69f9      	ldr	r1, [r7, #28]
 8007b96:	6a3a      	ldr	r2, [r7, #32]
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e5      	bne.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e010      	b.n	8007bea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69da      	ldr	r2, [r3, #28]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2301      	moveq	r3, #1
 8007bda:	2300      	movne	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	f43f af46 	beq.w	8007a74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3770      	adds	r7, #112	; 0x70
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e027      	b.n	8007c58 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2224      	movs	r2, #36	; 0x24
 8007c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e02d      	b.n	8007cd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2224      	movs	r2, #36	; 0x24
 8007c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f84f 	bl	8007d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e02d      	b.n	8007d54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2224      	movs	r2, #36	; 0x24
 8007d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0201 	bic.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f811 	bl	8007d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d108      	bne.n	8007d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d7c:	e031      	b.n	8007de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d7e:	2310      	movs	r3, #16
 8007d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d82:	2310      	movs	r3, #16
 8007d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	0e5b      	lsrs	r3, r3, #25
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	0f5b      	lsrs	r3, r3, #29
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	7b3a      	ldrb	r2, [r7, #12]
 8007daa:	4911      	ldr	r1, [pc, #68]	; (8007df0 <UARTEx_SetNbDataToProcess+0x94>)
 8007dac:	5c8a      	ldrb	r2, [r1, r2]
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007db2:	7b3a      	ldrb	r2, [r7, #12]
 8007db4:	490f      	ldr	r1, [pc, #60]	; (8007df4 <UARTEx_SetNbDataToProcess+0x98>)
 8007db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	7b7a      	ldrb	r2, [r7, #13]
 8007dc8:	4909      	ldr	r1, [pc, #36]	; (8007df0 <UARTEx_SetNbDataToProcess+0x94>)
 8007dca:	5c8a      	ldrb	r2, [r1, r2]
 8007dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dd0:	7b7a      	ldrb	r2, [r7, #13]
 8007dd2:	4908      	ldr	r1, [pc, #32]	; (8007df4 <UARTEx_SetNbDataToProcess+0x98>)
 8007dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	08007ef8 	.word	0x08007ef8
 8007df4:	08007f00 	.word	0x08007f00

08007df8 <__libc_init_array>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	4d0d      	ldr	r5, [pc, #52]	; (8007e30 <__libc_init_array+0x38>)
 8007dfc:	4c0d      	ldr	r4, [pc, #52]	; (8007e34 <__libc_init_array+0x3c>)
 8007dfe:	1b64      	subs	r4, r4, r5
 8007e00:	10a4      	asrs	r4, r4, #2
 8007e02:	2600      	movs	r6, #0
 8007e04:	42a6      	cmp	r6, r4
 8007e06:	d109      	bne.n	8007e1c <__libc_init_array+0x24>
 8007e08:	4d0b      	ldr	r5, [pc, #44]	; (8007e38 <__libc_init_array+0x40>)
 8007e0a:	4c0c      	ldr	r4, [pc, #48]	; (8007e3c <__libc_init_array+0x44>)
 8007e0c:	f000 f82e 	bl	8007e6c <_init>
 8007e10:	1b64      	subs	r4, r4, r5
 8007e12:	10a4      	asrs	r4, r4, #2
 8007e14:	2600      	movs	r6, #0
 8007e16:	42a6      	cmp	r6, r4
 8007e18:	d105      	bne.n	8007e26 <__libc_init_array+0x2e>
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e20:	4798      	blx	r3
 8007e22:	3601      	adds	r6, #1
 8007e24:	e7ee      	b.n	8007e04 <__libc_init_array+0xc>
 8007e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2a:	4798      	blx	r3
 8007e2c:	3601      	adds	r6, #1
 8007e2e:	e7f2      	b.n	8007e16 <__libc_init_array+0x1e>
 8007e30:	08007f10 	.word	0x08007f10
 8007e34:	08007f10 	.word	0x08007f10
 8007e38:	08007f10 	.word	0x08007f10
 8007e3c:	08007f14 	.word	0x08007f14

08007e40 <memcpy>:
 8007e40:	440a      	add	r2, r1
 8007e42:	4291      	cmp	r1, r2
 8007e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e48:	d100      	bne.n	8007e4c <memcpy+0xc>
 8007e4a:	4770      	bx	lr
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e56:	4291      	cmp	r1, r2
 8007e58:	d1f9      	bne.n	8007e4e <memcpy+0xe>
 8007e5a:	bd10      	pop	{r4, pc}

08007e5c <memset>:
 8007e5c:	4402      	add	r2, r0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d100      	bne.n	8007e66 <memset+0xa>
 8007e64:	4770      	bx	lr
 8007e66:	f803 1b01 	strb.w	r1, [r3], #1
 8007e6a:	e7f9      	b.n	8007e60 <memset+0x4>

08007e6c <_init>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr

08007e78 <_fini>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	bf00      	nop
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr
