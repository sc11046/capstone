
capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b370  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800b61c  0800b61c  0001b61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b6c0  0800b6c0  0001b6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b6c8  0800b6c8  0001b6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b6cc  0800b6cc  0001b6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  0800b6d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000498  24000018  0800b6e8  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004b0  0800b6e8  000204b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033494  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000045da  00000000  00000000  000534da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a60  00000000  00000000  00057ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001908  00000000  00000000  00059518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000355e9  00000000  00000000  0005ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020ae6  00000000  00000000  00090409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016232a  00000000  00000000  000b0eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00213219  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000072a0  00000000  00000000  0021326c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000018 	.word	0x24000018
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b604 	.word	0x0800b604

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400001c 	.word	0x2400001c
 80002e8:	0800b604 	.word	0x0800b604

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <CS_Select>:
#define NRF24_CSN_PORT   GPIOD
#define NRF24_CSN_PIN    GPIO_PIN_15


void CS_Select (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <CS_Select+0x14>)
 80005f0:	f004 fa56 	bl	8004aa0 <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	58020c00 	.word	0x58020c00

080005fc <CS_UnSelect>:

void CS_UnSelect (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <CS_UnSelect+0x14>)
 8000608:	f004 fa4a 	bl	8004aa0 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	58020c00 	.word	0x58020c00

08000614 <CE_Enable>:


void CE_Enable (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <CE_Enable+0x14>)
 8000620:	f004 fa3e 	bl	8004aa0 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58020c00 	.word	0x58020c00

0800062c <CE_Disable>:

void CE_Disable (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <CE_Disable+0x14>)
 8000638:	f004 fa32 	bl	8004aa0 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58020c00 	.word	0x58020c00

08000644 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	b2db      	uxtb	r3, r3
 800065c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000662:	f7ff ffbf 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	2202      	movs	r2, #2
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <nrf24_WriteReg+0x40>)
 8000672:	f007 fbc9 	bl	8007e08 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000676:	f7ff ffc1 	bl	80005fc <CS_UnSelect>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000424 	.word	0x24000424

08000688 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	b2db      	uxtb	r3, r3
 800069e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006a0:	f7ff ffa0 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80006a4:	f107 0114 	add.w	r1, r7, #20
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006ae:	f007 fbab 	bl	8007e08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006be:	f007 fba3 	bl	8007e08 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006c2:	f7ff ff9b 	bl	80005fc <CS_UnSelect>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	24000424 	.word	0x24000424

080006d4 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006e2:	f7ff ff7f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80006e6:	1df9      	adds	r1, r7, #7
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4808      	ldr	r0, [pc, #32]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006ee:	f007 fb8b 	bl	8007e08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80006f2:	f107 010f 	add.w	r1, r7, #15
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2201      	movs	r2, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006fc:	f007 fd76 	bl	80081ec <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000700:	f7ff ff7c 	bl	80005fc <CS_UnSelect>

	return data;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	24000424 	.word	0x24000424

08000714 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000722:	f7ff ff5f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000726:	f107 010f 	add.w	r1, r7, #15
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	2201      	movs	r2, #1
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000730:	f007 fb6a 	bl	8007e08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b29a      	uxth	r2, r3
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000740:	f007 fd54 	bl	80081ec <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000744:	f7ff ff5a 	bl	80005fc <CS_UnSelect>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	24000424 	.word	0x24000424

08000754 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800075e:	f7ff ff41 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <nrfsendCmd+0x28>)
 800076a:	f007 fb4d 	bl	8007e08 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800076e:	f7ff ff45 	bl	80005fc <CS_UnSelect>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	24000424 	.word	0x24000424

08000780 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b07      	cmp	r3, #7
 800078e:	d104      	bne.n	800079a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000790:	2100      	movs	r1, #0
 8000792:	2007      	movs	r0, #7
 8000794:	f7ff ff56 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000798:	e090      	b.n	80008bc <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b17      	cmp	r3, #23
 800079e:	d104      	bne.n	80007aa <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80007a0:	2111      	movs	r1, #17
 80007a2:	2017      	movs	r0, #23
 80007a4:	f7ff ff4e 	bl	8000644 <nrf24_WriteReg>
}
 80007a8:	e088      	b.n	80008bc <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80007aa:	2108      	movs	r1, #8
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff49 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80007b2:	213f      	movs	r1, #63	; 0x3f
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff45 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80007ba:	2103      	movs	r1, #3
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ff41 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80007c2:	2103      	movs	r1, #3
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff ff3d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80007ca:	2103      	movs	r1, #3
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff ff39 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80007d2:	2102      	movs	r1, #2
 80007d4:	2005      	movs	r0, #5
 80007d6:	f7ff ff35 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80007da:	210e      	movs	r1, #14
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff ff31 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2007      	movs	r0, #7
 80007e6:	f7ff ff2d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff29 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2009      	movs	r0, #9
 80007f6:	f7ff ff25 	bl	8000644 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007fa:	4a32      	ldr	r2, [pc, #200]	; (80008c4 <nrf24_reset+0x144>)
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	3304      	adds	r3, #4
 8000808:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2205      	movs	r2, #5
 8000810:	4619      	mov	r1, r3
 8000812:	200a      	movs	r0, #10
 8000814:	f7ff ff38 	bl	8000688 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000818:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <nrf24_reset+0x148>)
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000822:	6018      	str	r0, [r3, #0]
 8000824:	3304      	adds	r3, #4
 8000826:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2205      	movs	r2, #5
 800082e:	4619      	mov	r1, r3
 8000830:	200b      	movs	r0, #11
 8000832:	f7ff ff29 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000836:	21c3      	movs	r1, #195	; 0xc3
 8000838:	200c      	movs	r0, #12
 800083a:	f7ff ff03 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800083e:	21c4      	movs	r1, #196	; 0xc4
 8000840:	200d      	movs	r0, #13
 8000842:	f7ff feff 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000846:	21c5      	movs	r1, #197	; 0xc5
 8000848:	200e      	movs	r0, #14
 800084a:	f7ff fefb 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800084e:	21c6      	movs	r1, #198	; 0xc6
 8000850:	200f      	movs	r0, #15
 8000852:	f7ff fef7 	bl	8000644 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000856:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <nrf24_reset+0x144>)
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000860:	6018      	str	r0, [r3, #0]
 8000862:	3304      	adds	r3, #4
 8000864:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2205      	movs	r2, #5
 800086c:	4619      	mov	r1, r3
 800086e:	2010      	movs	r0, #16
 8000870:	f7ff ff0a 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	2011      	movs	r0, #17
 8000878:	f7ff fee4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2012      	movs	r0, #18
 8000880:	f7ff fee0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2013      	movs	r0, #19
 8000888:	f7ff fedc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	2014      	movs	r0, #20
 8000890:	f7ff fed8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000894:	2100      	movs	r1, #0
 8000896:	2015      	movs	r0, #21
 8000898:	f7ff fed4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2016      	movs	r0, #22
 80008a0:	f7ff fed0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80008a4:	2111      	movs	r1, #17
 80008a6:	2017      	movs	r0, #23
 80008a8:	f7ff fecc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f7ff fec8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	201d      	movs	r0, #29
 80008b8:	f7ff fec4 	bl	8000644 <nrf24_WriteReg>
}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	0800b61c 	.word	0x0800b61c
 80008c8:	0800b624 	.word	0x0800b624

080008cc <NRF24_Init>:




void NRF24_Init (void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80008d0:	f7ff feac 	bl	800062c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff53 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80008da:	2100      	movs	r1, #0
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff feb1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80008e2:	2100      	movs	r1, #0
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fead 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80008ea:	2100      	movs	r1, #0
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff fea9 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80008f2:	2103      	movs	r1, #3
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff fea5 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80008fa:	2100      	movs	r1, #0
 80008fc:	2004      	movs	r0, #4
 80008fe:	f7ff fea1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000902:	2100      	movs	r1, #0
 8000904:	2005      	movs	r0, #5
 8000906:	f7ff fe9d 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800090a:	210e      	movs	r1, #14
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff fe99 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000912:	f7ff fe7f 	bl	8000614 <CE_Enable>

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000926:	f7ff fe81 	bl	800062c <CE_Disable>

	nrf24_reset (STATUS);
 800092a:	2007      	movs	r0, #7
 800092c:	f7ff ff28 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	4619      	mov	r1, r3
 8000934:	2005      	movs	r0, #5
 8000936:	f7ff fe85 	bl	8000644 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff feca 	bl	80006d4 <nrf24_ReadReg>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4619      	mov	r1, r3
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fe77 	bl	8000644 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000956:	2205      	movs	r2, #5
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	200b      	movs	r0, #11
 800095c:	f7ff fe94 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000960:	21ee      	movs	r1, #238	; 0xee
 8000962:	200c      	movs	r0, #12
 8000964:	f7ff fe6e 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000968:	2120      	movs	r1, #32
 800096a:	2013      	movs	r0, #19
 800096c:	f7ff fe6a 	bl	8000644 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff feaf 	bl	80006d4 <nrf24_ReadReg>
 8000976:	4603      	mov	r3, r0
 8000978:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	f043 0303 	orr.w	r3, r3, #3
 8000980:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	4619      	mov	r1, r3
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fe5c 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800098c:	f7ff fe42 	bl	8000614 <CE_Enable>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80009a0:	2007      	movs	r0, #7
 80009a2:	f7ff fe97 	bl	80006d4 <nrf24_ReadReg>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00b      	beq.n	80009cc <isDataAvailable+0x34>
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	2007      	movs	r0, #7
 80009c4:	f7ff fe3e 	bl	8000644 <nrf24_WriteReg>

		return 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <isDataAvailable+0x36>
	}

	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80009e4:	f7ff fdfe 	bl	80005e4 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80009e8:	2361      	movs	r3, #97	; 0x61
 80009ea:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80009ec:	f107 010f 	add.w	r1, r7, #15
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2201      	movs	r2, #1
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <NRF24_Receive+0x50>)
 80009f6:	f007 fa07 	bl	8007e08 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	2220      	movs	r2, #32
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <NRF24_Receive+0x50>)
 8000a04:	f007 fbf2 	bl	80081ec <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000a08:	f7ff fdf8 	bl	80005fc <CS_UnSelect>

	HAL_Delay(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f001 fd23 	bl	8002458 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000a12:	23e2      	movs	r3, #226	; 0xe2
 8000a14:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe9b 	bl	8000754 <nrfsendCmd>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000424 	.word	0x24000424

08000a2c <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e00c      	b.n	8000a54 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	b2d9      	uxtb	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	18d4      	adds	r4, r2, r3
 8000a44:	4608      	mov	r0, r1
 8000a46:	f7ff fe45 	bl	80006d4 <nrf24_ReadReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b09      	cmp	r3, #9
 8000a58:	ddef      	ble.n	8000a3a <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	330a      	adds	r3, #10
 8000a5e:	2205      	movs	r2, #5
 8000a60:	4619      	mov	r1, r3
 8000a62:	200a      	movs	r0, #10
 8000a64:	f7ff fe56 	bl	8000714 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	330f      	adds	r3, #15
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	4619      	mov	r1, r3
 8000a70:	200b      	movs	r0, #11
 8000a72:	f7ff fe4f 	bl	8000714 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0414 	add.w	r4, r3, #20
 8000a7c:	200c      	movs	r0, #12
 8000a7e:	f7ff fe29 	bl	80006d4 <nrf24_ReadReg>
 8000a82:	4603      	mov	r3, r0
 8000a84:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f103 0415 	add.w	r4, r3, #21
 8000a8c:	200d      	movs	r0, #13
 8000a8e:	f7ff fe21 	bl	80006d4 <nrf24_ReadReg>
 8000a92:	4603      	mov	r3, r0
 8000a94:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f103 0416 	add.w	r4, r3, #22
 8000a9c:	200e      	movs	r0, #14
 8000a9e:	f7ff fe19 	bl	80006d4 <nrf24_ReadReg>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f103 0417 	add.w	r4, r3, #23
 8000aac:	200f      	movs	r0, #15
 8000aae:	f7ff fe11 	bl	80006d4 <nrf24_ReadReg>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	2205      	movs	r2, #5
 8000abc:	4619      	mov	r1, r3
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f7ff fe28 	bl	8000714 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000ac4:	231d      	movs	r3, #29
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	e00e      	b.n	8000ae8 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	3b0c      	subs	r3, #12
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	18d4      	adds	r4, r2, r3
 8000ad8:	4608      	mov	r0, r1
 8000ada:	f7ff fdfb 	bl	80006d4 <nrf24_ReadReg>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b25      	cmp	r3, #37	; 0x25
 8000aec:	dded      	ble.n	8000aca <NRF24_ReadAll+0x9e>
	}

}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <buzzer>:
  D = 852,
  E = 758,
  F = 716,
  G = 638
};
void buzzer (void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

	  for(int i=0;i<11;i++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e00c      	b.n	8000b1e <buzzer+0x26>
	  {a[i]=RxData_From_Node3[i]-'0';}
 8000b04:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <buzzer+0xd4>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b10:	492f      	ldr	r1, [pc, #188]	; (8000bd0 <buzzer+0xd8>)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i=0;i<11;i++)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2b0a      	cmp	r3, #10
 8000b22:	ddef      	ble.n	8000b04 <buzzer+0xc>

	  int Distance1 = 100* a[1]  +10*a[2] +a[3];
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <buzzer+0xd8>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2264      	movs	r2, #100	; 0x64
 8000b2a:	fb02 f103 	mul.w	r1, r2, r3
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <buzzer+0xd8>)
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	4613      	mov	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4413      	add	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	18ca      	adds	r2, r1, r3
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <buzzer+0xd8>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
	  int Distance2 = 100* a[4]  +10*a[5] +a[6];
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <buzzer+0xd8>)
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	2264      	movs	r2, #100	; 0x64
 8000b4a:	fb02 f103 	mul.w	r1, r2, r3
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <buzzer+0xd8>)
 8000b50:	695a      	ldr	r2, [r3, #20]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	18ca      	adds	r2, r1, r3
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <buzzer+0xd8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4413      	add	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]
	  int Distance3 = 100* a[8]  +10*a[9] +a[10];
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <buzzer+0xd8>)
 8000b66:	6a1b      	ldr	r3, [r3, #32]
 8000b68:	2264      	movs	r2, #100	; 0x64
 8000b6a:	fb02 f103 	mul.w	r1, r2, r3
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <buzzer+0xd8>)
 8000b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	18ca      	adds	r2, r1, r3
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <buzzer+0xd8>)
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	4413      	add	r3, r2
 8000b82:	603b      	str	r3, [r7, #0]
    if (Distance1 <= 15 || Distance2 <= 15 || Distance3 <= 15)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2b0f      	cmp	r3, #15
 8000b88:	dd05      	ble.n	8000b96 <buzzer+0x9e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	dd02      	ble.n	8000b96 <buzzer+0x9e>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	dc15      	bgt.n	8000bc2 <buzzer+0xca>
    {
	 	  TIM2->ARR = C;
 8000b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9a:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
	 	  TIM2->CCR1 = TIM2->ARR / 2;
 8000ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000baa:	085b      	lsrs	r3, r3, #1
 8000bac:	6353      	str	r3, [r2, #52]	; 0x34
	 	  HAL_Delay(50);
 8000bae:	2032      	movs	r0, #50	; 0x32
 8000bb0:	f001 fc52 	bl	8002458 <HAL_Delay>
	 	  TIM2->CCR1 = 0;
 8000bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb8:	2200      	movs	r2, #0
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(50);
 8000bbc:	2032      	movs	r0, #50	; 0x32
 8000bbe:	f001 fc4b 	bl	8002458 <HAL_Delay>
	 	  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	240000b4 	.word	0x240000b4
 8000bd0:	24000110 	.word	0x24000110

08000bd4 <HAL_FDCAN_RxFifo0Callback>:
#include "canfd.h"



void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d10f      	bne.n	8000c08 <HAL_FDCAN_RxFifo0Callback+0x34>
   {
	  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00a      	beq.n	8000c08 <HAL_FDCAN_RxFifo0Callback+0x34>
	  {

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node3) != HAL_OK)
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f002 ff3f 	bl	8003a7c <HAL_FDCAN_GetRxMessage>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_FDCAN_RxFifo0Callback+0x34>
		{
		Error_Handler();
 8000c04:	f000 fe4e 	bl	80018a4 <Error_Handler>
		}

	  }
   }

 }//choumpa jodo
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	4000a000 	.word	0x4000a000
 8000c14:	240000b4 	.word	0x240000b4
 8000c18:	2400016c 	.word	0x2400016c

08000c1c <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_FDCAN_RxFifo1Callback+0x3c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d10f      	bne.n	8000c50 <HAL_FDCAN_RxFifo1Callback+0x34>
   {
	  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00a      	beq.n	8000c50 <HAL_FDCAN_RxFifo1Callback+0x34>
	  {
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData_From_Node1) != HAL_OK)
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_FDCAN_RxFifo1Callback+0x40>)
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_FDCAN_RxFifo1Callback+0x44>)
 8000c3e:	2141      	movs	r1, #65	; 0x41
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f002 ff1b 	bl	8003a7c <HAL_FDCAN_GetRxMessage>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_FDCAN_RxFifo1Callback+0x34>
		{
		Error_Handler();
 8000c4c:	f000 fe2a 	bl	80018a4 <Error_Handler>
		}

	  }
   }
 }//rider
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	4000a000 	.word	0x4000a000
 8000c5c:	240000a4 	.word	0x240000a4
 8000c60:	2400016c 	.word	0x2400016c

08000c64 <HAL_FDCAN_RxBufferNewMessageCallback>:
void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

    if (FDCAN1 == hfdcan->Instance)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_FDCAN_RxBufferNewMessageCallback+0x30>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10a      	bne.n	8000c8c <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
    {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_BUFFER0, &RxHeader, RxData_From_Node4) != HAL_OK)
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_FDCAN_RxBufferNewMessageCallback+0x34>)
 8000c78:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_FDCAN_RxBufferNewMessageCallback+0x38>)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f002 fefd 	bl	8003a7c <HAL_FDCAN_GetRxMessage>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
        {
            Error_Handler();
 8000c88:	f000 fe0c 	bl	80018a4 <Error_Handler>
        }
    }

}//raspi
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	4000a000 	.word	0x4000a000
 8000c98:	2400005c 	.word	0x2400005c
 8000c9c:	2400016c 	.word	0x2400016c

08000ca0 <light_sensor>:
#include "light_sensor.h"

void light_sensor (void){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0

	 for(int l=12;l<=14;l++)
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	e00c      	b.n	8000cc6 <light_sensor+0x26>
	 {a[l]=RxData_From_Node3[l]-'0';}
 8000cac:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <light_sensor+0x70>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000cb8:	4916      	ldr	r1, [pc, #88]	; (8000d14 <light_sensor+0x74>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 for(int l=12;l<=14;l++)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0e      	cmp	r3, #14
 8000cca:	ddef      	ble.n	8000cac <light_sensor+0xc>
	 int jodo = 100* a[12]  +10*a[13] +a[14];
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <light_sensor+0x74>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	2264      	movs	r2, #100	; 0x64
 8000cd2:	fb02 f103 	mul.w	r1, r2, r3
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <light_sensor+0x74>)
 8000cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	18ca      	adds	r2, r1, r3
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <light_sensor+0x74>)
 8000ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce8:	4413      	add	r3, r2
 8000cea:	603b      	str	r3, [r7, #0]
	      htim3.Instance->CCR1=jodo;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <light_sensor+0x78>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	635a      	str	r2, [r3, #52]	; 0x34
	      if (jodo<45)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b2c      	cmp	r3, #44	; 0x2c
 8000cf8:	dc03      	bgt.n	8000d02 <light_sensor+0x62>
	      {
	    	  htim3.Instance->CCR1=0;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <light_sensor+0x78>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
	      }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	240000b4 	.word	0x240000b4
 8000d14:	24000110 	.word	0x24000110
 8000d18:	240001b4 	.word	0x240001b4

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f001 fb08 	bl	8002334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f85e 	bl	8000de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f000 fcaa 	bl	8001680 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d2c:	f000 fa56 	bl	80011dc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000d30:	f000 fc5a 	bl	80015e8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000d34:	f000 faa8 	bl	8001288 <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000d38:	f000 f942 	bl	8000fc0 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000d3c:	f000 fb68 	bl	8001410 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000d40:	f000 f8c6 	bl	8000ed0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d44:	f000 fbda 	bl	80014fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//////////////nrf///////////
  NRF24_Init();
 8000d48:	f7ff fdc0 	bl	80008cc <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);//nrf rx
 8000d4c:	210a      	movs	r1, #10
 8000d4e:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <main+0xa8>)
 8000d50:	f7ff fde3 	bl	800091a <NRF24_RxMode>
  NRF24_ReadAll(data);//nrf rx
 8000d54:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <main+0xac>)
 8000d56:	f7ff fe69 	bl	8000a2c <NRF24_ReadAll>
////////////////////////////

////////////motor///////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//motor back1
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	481b      	ldr	r0, [pc, #108]	; (8000dcc <main+0xb0>)
 8000d5e:	f008 f8c5 	bl	8008eec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//motor back2
 8000d62:	2104      	movs	r1, #4
 8000d64:	4819      	ldr	r0, [pc, #100]	; (8000dcc <main+0xb0>)
 8000d66:	f008 f8c1 	bl	8008eec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//motor front
 8000d6a:	2108      	movs	r1, #8
 8000d6c:	4817      	ldr	r0, [pc, #92]	; (8000dcc <main+0xb0>)
 8000d6e:	f008 f8bd 	bl	8008eec <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,1);//motor enable1
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d78:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <main+0xb4>)
 8000d7a:	f003 fe91 	bl	8004aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//motor enable2
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <main+0xb8>)
 8000d86:	f003 fe8b 	bl	8004aa0 <HAL_GPIO_WritePin>
////////////////////////////

///////////jodo///////////
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//led jodo
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <main+0xbc>)
 8000d8e:	f008 f8ad 	bl	8008eec <HAL_TIM_PWM_Start>
//////////jodo////////////



//////////////buzzer/////////
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d92:	2100      	movs	r1, #0
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <main+0xc0>)
 8000d96:	f008 f8a9 	bl	8008eec <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isDataAvailable(2) == 1)
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f7ff fdfc 	bl	8000998 <isDataAvailable>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d102      	bne.n	8000dac <main+0x90>
	  {
		  NRF24_Receive(RxData);
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <main+0xc4>)
 8000da8:	f7ff fe16 	bl	80009d8 <NRF24_Receive>
	  }

	  go_back();
 8000dac:	f000 fd80 	bl	80018b0 <go_back>
	  buzzer();
 8000db0:	f7ff fea2 	bl	8000af8 <buzzer>
	  light_sensor();
 8000db4:	f7ff ff74 	bl	8000ca0 <light_sensor>
	  nrf_motor();
 8000db8:	f000 fdd8 	bl	800196c <nrf_motor>
	  rpi_motor();
 8000dbc:	f000 fe60 	bl	8001a80 <rpi_motor>
	  if (isDataAvailable(2) == 1)
 8000dc0:	e7eb      	b.n	8000d9a <main+0x7e>
 8000dc2:	bf00      	nop
 8000dc4:	24000000 	.word	0x24000000
 8000dc8:	240003a0 	.word	0x240003a0
 8000dcc:	240003d4 	.word	0x240003d4
 8000dd0:	58021400 	.word	0x58021400
 8000dd4:	58020000 	.word	0x58020000
 8000dd8:	240001b4 	.word	0x240001b4
 8000ddc:	240000c4 	.word	0x240000c4
 8000de0:	24000034 	.word	0x24000034

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09c      	sub	sp, #112	; 0x70
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	224c      	movs	r2, #76	; 0x4c
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f00a fbfe 	bl	800b5f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00a fbf8 	bl	800b5f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e04:	2004      	movs	r0, #4
 8000e06:	f003 fe65 	bl	8004ad4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <SystemClock_Config+0xe4>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a2d      	ldr	r2, [pc, #180]	; (8000ec8 <SystemClock_Config+0xe4>)
 8000e14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <SystemClock_Config+0xe4>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e26:	bf00      	nop
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <SystemClock_Config+0xe4>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e34:	d1f8      	bne.n	8000e28 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <SystemClock_Config+0xe8>)
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	4a24      	ldr	r2, [pc, #144]	; (8000ecc <SystemClock_Config+0xe8>)
 8000e3c:	f023 0303 	bic.w	r3, r3, #3
 8000e40:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e42:	2302      	movs	r3, #2
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e52:	2300      	movs	r3, #0
 8000e54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e56:	2304      	movs	r3, #4
 8000e58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8000e62:	2320      	movs	r3, #32
 8000e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fe84 	bl	8004b88 <HAL_RCC_OscConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e86:	f000 fd0d 	bl	80018a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8a:	233f      	movs	r3, #63	; 0x3f
 8000e8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e9a:	2340      	movs	r3, #64	; 0x40
 8000e9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e9e:	2340      	movs	r3, #64	; 0x40
 8000ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ea8:	2340      	movs	r3, #64	; 0x40
 8000eaa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 fa6d 	bl	8005390 <HAL_RCC_ClockConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ebc:	f000 fcf2 	bl	80018a4 <Error_Handler>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3770      	adds	r7, #112	; 0x70
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	58024800 	.word	0x58024800
 8000ecc:	58024400 	.word	0x58024400

08000ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000ef6:	4a30      	ldr	r2, [pc, #192]	; (8000fb8 <MX_ADC1_Init+0xe8>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f0e:	2204      	movs	r2, #4
 8000f10:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f52:	f001 fc31 	bl	80027b8 <HAL_ADC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f5c:	f000 fca2 	bl	80018a4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f6c:	f002 f956 	bl	800321c <HAL_ADCEx_MultiModeConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f76:	f000 fc95 	bl	80018a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_ADC1_Init+0xec>)
 8000f7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7e:	2306      	movs	r3, #6
 8000f80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f8a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f9e:	f001 fd65 	bl	8002a6c <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000fa8:	f000 fc7c 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000298 	.word	0x24000298
 8000fb8:	40022000 	.word	0x40022000
 8000fbc:	08600004 	.word	0x08600004

08000fc0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000fc4:	4b7f      	ldr	r3, [pc, #508]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fc6:	4a80      	ldr	r2, [pc, #512]	; (80011c8 <MX_FDCAN1_Init+0x208>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000fca:	4b7e      	ldr	r3, [pc, #504]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000fd2:	4b7c      	ldr	r3, [pc, #496]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000fd8:	4b7a      	ldr	r3, [pc, #488]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000fde:	4b79      	ldr	r3, [pc, #484]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000fe4:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000fea:	4b76      	ldr	r3, [pc, #472]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ff0:	4b74      	ldr	r3, [pc, #464]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000ff6:	4b73      	ldr	r3, [pc, #460]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ffc:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001002:	4b70      	ldr	r3, [pc, #448]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001004:	2201      	movs	r2, #1
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001008:	4b6e      	ldr	r3, [pc, #440]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800100a:	2204      	movs	r2, #4
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800100e:	4b6d      	ldr	r3, [pc, #436]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001010:	2205      	movs	r2, #5
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001014:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001016:	2204      	movs	r2, #4
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800101a:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 3;
 8001020:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001022:	2203      	movs	r2, #3
 8001024:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001026:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001028:	2200      	movs	r2, #0
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800102c:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800102e:	2201      	movs	r2, #1
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 8001032:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001034:	2206      	movs	r2, #6
 8001036:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 8001038:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800103a:	2201      	movs	r2, #1
 800103c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_16;
 800103e:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001040:	2206      	movs	r2, #6
 8001042:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001044:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001046:	2201      	movs	r2, #1
 8001048:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_16;
 800104a:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800104c:	2206      	movs	r2, #6
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001050:	4b5c      	ldr	r3, [pc, #368]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001052:	2200      	movs	r2, #0
 8001054:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001056:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001058:	2200      	movs	r2, #0
 800105a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800105c:	4b59      	ldr	r3, [pc, #356]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800105e:	2200      	movs	r2, #0
 8001060:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001062:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001064:	2200      	movs	r2, #0
 8001066:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 8001068:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800106a:	2206      	movs	r2, #6
 800106c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800106e:	4855      	ldr	r0, [pc, #340]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001070:	f002 fa80 	bl	8003574 <HAL_FDCAN_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800107a:	f000 fc13 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  	  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800107e:	4b53      	ldr	r3, [pc, #332]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
        sFilterConfig.FilterIndex = 1;
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 8001086:	2201      	movs	r2, #1
 8001088:	605a      	str	r2, [r3, #4]
        sFilterConfig.RxBufferIndex = 1;
 800108a:	4b50      	ldr	r3, [pc, #320]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 800108c:	2201      	movs	r2, #1
 800108e:	619a      	str	r2, [r3, #24]
        sFilterConfig.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8001090:	4b4e      	ldr	r3, [pc, #312]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 8001092:	2201      	movs	r2, #1
 8001094:	609a      	str	r2, [r3, #8]
        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 8001098:	2201      	movs	r2, #1
 800109a:	60da      	str	r2, [r3, #12]
        sFilterConfig.FilterID1 = 0x33; // ID Node2
 800109c:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 800109e:	2233      	movs	r2, #51	; 0x33
 80010a0:	611a      	str	r2, [r3, #16]
        sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80010a2:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 80010a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010a8:	615a      	str	r2, [r3, #20]
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80010aa:	4948      	ldr	r1, [pc, #288]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 80010ac:	4845      	ldr	r0, [pc, #276]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 80010ae:	f002 fc43 	bl	8003938 <HAL_FDCAN_ConfigFilter>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_FDCAN1_Init+0xfc>
               {
                  Error_Handler();
 80010b8:	f000 fbf4 	bl	80018a4 <Error_Handler>
               }
//
  	  	sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 80010bc:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
        sFilterConfig1.FilterIndex = 2;
 80010c2:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	605a      	str	r2, [r3, #4]
        sFilterConfig1.RxBufferIndex = 2;
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	619a      	str	r2, [r3, #24]
        sFilterConfig1.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 80010ce:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	609a      	str	r2, [r3, #8]
        sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80010d4:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	60da      	str	r2, [r3, #12]
        sFilterConfig1.FilterID1 = 0x11; // ID Node2
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010dc:	2211      	movs	r2, #17
 80010de:	611a      	str	r2, [r3, #16]
        sFilterConfig1.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80010e0:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010e6:	615a      	str	r2, [r3, #20]
//
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig1) != HAL_OK)
 80010e8:	4939      	ldr	r1, [pc, #228]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010ea:	4836      	ldr	r0, [pc, #216]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 80010ec:	f002 fc24 	bl	8003938 <HAL_FDCAN_ConfigFilter>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_FDCAN1_Init+0x13a>
        {
           Error_Handler();
 80010f6:	f000 fbd5 	bl	80018a4 <Error_Handler>
        }
  	  	sFilterConfig2.IdType = FDCAN_STANDARD_ID;
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
        sFilterConfig2.FilterIndex = 0;
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
        sFilterConfig2.RxBufferIndex = 0;
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
        sFilterConfig2.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 800110e:	2201      	movs	r2, #1
 8001110:	609a      	str	r2, [r3, #8]
        sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001114:	2207      	movs	r2, #7
 8001116:	60da      	str	r2, [r3, #12]
        sFilterConfig2.FilterID1 = 0x44; // ID Node2
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 800111a:	2244      	movs	r2, #68	; 0x44
 800111c:	611a      	str	r2, [r3, #16]
        sFilterConfig2.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001120:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001124:	615a      	str	r2, [r3, #20]

        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig2) != HAL_OK)
 8001126:	492b      	ldr	r1, [pc, #172]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001128:	4826      	ldr	r0, [pc, #152]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800112a:	f002 fc05 	bl	8003938 <HAL_FDCAN_ConfigFilter>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_FDCAN1_Init+0x178>
               {
                  Error_Handler();
 8001134:	f000 fbb6 	bl	80018a4 <Error_Handler>
               }

        if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001138:	4822      	ldr	r0, [pc, #136]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800113a:	f002 fc73 	bl	8003a24 <HAL_FDCAN_Start>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_FDCAN1_Init+0x188>
              {
                Error_Handler();
 8001144:	f000 fbae 	bl	80018a4 <Error_Handler>





        if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_BUFFER_NEW_MESSAGE, 0) != HAL_OK)
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800114e:	481d      	ldr	r0, [pc, #116]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001150:	f002 fe02 	bl	8003d58 <HAL_FDCAN_ActivateNotification>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_FDCAN1_Init+0x19e>
          {
            /* Notification Error */
            Error_Handler();
 800115a:	f000 fba3 	bl	80018a4 <Error_Handler>
          }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800115e:	2200      	movs	r2, #0
 8001160:	2101      	movs	r1, #1
 8001162:	4818      	ldr	r0, [pc, #96]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001164:	f002 fdf8 	bl	8003d58 <HAL_FDCAN_ActivateNotification>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_FDCAN1_Init+0x1b2>
              {
                Error_Handler();
 800116e:	f000 fb99 	bl	80018a4 <Error_Handler>
              }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8001172:	2200      	movs	r2, #0
 8001174:	2110      	movs	r1, #16
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001178:	f002 fdee 	bl	8003d58 <HAL_FDCAN_ActivateNotification>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_FDCAN1_Init+0x1c6>
              {
                Error_Handler();
 8001182:	f000 fb8f 	bl	80018a4 <Error_Handler>
              }

            TxHeader.Identifier = 0x22;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 8001188:	2222      	movs	r2, #34	; 0x22
 800118a:	601a      	str	r2, [r3, #0]
            TxHeader.IdType = FDCAN_STANDARD_ID;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
            TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
            TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 800119a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800119e:	60da      	str	r2, [r3, #12]
            TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
            TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
            TxHeader.FDFormat = FDCAN_FD_CAN;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011b2:	619a      	str	r2, [r3, #24]
            TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
            TxHeader.MessageMarker = 0x0;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]



  /* USER CODE END FDCAN1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000300 	.word	0x24000300
 80011c8:	4000a000 	.word	0x4000a000
 80011cc:	2400003c 	.word	0x2400003c
 80011d0:	24000084 	.word	0x24000084
 80011d4:	24000194 	.word	0x24000194
 80011d8:	24000148 	.word	0x24000148

080011dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011e2:	4a28      	ldr	r2, [pc, #160]	; (8001284 <MX_SPI1_Init+0xa8>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011f6:	2207      	movs	r2, #7
 80011f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001208:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800120c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001210:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001214:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_SPI1_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_SPI1_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_SPI1_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_SPI1_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_SPI1_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_SPI1_Init+0xa4>)
 800126e:	f006 fcc5 	bl	8007bfc <HAL_SPI_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001278:	f000 fb14 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	24000424 	.word	0x24000424
 8001284:	40013000 	.word	0x40013000

08001288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09c      	sub	sp, #112	; 0x70
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2234      	movs	r2, #52	; 0x34
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a f996 	bl	800b5f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <MX_TIM1_Init+0x180>)
 80012ca:	4a50      	ldr	r2, [pc, #320]	; (800140c <MX_TIM1_Init+0x184>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65;
 80012ce:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <MX_TIM1_Init+0x180>)
 80012d0:	2241      	movs	r2, #65	; 0x41
 80012d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <MX_TIM1_Init+0x180>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80012da:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <MX_TIM1_Init+0x180>)
 80012dc:	2264      	movs	r2, #100	; 0x64
 80012de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b49      	ldr	r3, [pc, #292]	; (8001408 <MX_TIM1_Init+0x180>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e6:	4b48      	ldr	r3, [pc, #288]	; (8001408 <MX_TIM1_Init+0x180>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b46      	ldr	r3, [pc, #280]	; (8001408 <MX_TIM1_Init+0x180>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f2:	4845      	ldr	r0, [pc, #276]	; (8001408 <MX_TIM1_Init+0x180>)
 80012f4:	f007 fd41 	bl	8008d7a <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012fe:	f000 fad1 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800130c:	4619      	mov	r1, r3
 800130e:	483e      	ldr	r0, [pc, #248]	; (8001408 <MX_TIM1_Init+0x180>)
 8001310:	f008 f92e 	bl	8009570 <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800131a:	f000 fac3 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131e:	483a      	ldr	r0, [pc, #232]	; (8001408 <MX_TIM1_Init+0x180>)
 8001320:	f007 fd82 	bl	8008e28 <HAL_TIM_PWM_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800132a:	f000 fabb 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800133e:	4619      	mov	r1, r3
 8001340:	4831      	ldr	r0, [pc, #196]	; (8001408 <MX_TIM1_Init+0x180>)
 8001342:	f008 fe73 	bl	800a02c <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800134c:	f000 faaa 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001350:	2360      	movs	r3, #96	; 0x60
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8001354:	2332      	movs	r3, #50	; 0x32
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001358:	2300      	movs	r3, #0
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800135c:	2300      	movs	r3, #0
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	4824      	ldr	r0, [pc, #144]	; (8001408 <MX_TIM1_Init+0x180>)
 8001376:	f007 ffe7 	bl	8009348 <HAL_TIM_PWM_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001380:	f000 fa90 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001384:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001388:	2204      	movs	r2, #4
 800138a:	4619      	mov	r1, r3
 800138c:	481e      	ldr	r0, [pc, #120]	; (8001408 <MX_TIM1_Init+0x180>)
 800138e:	f007 ffdb 	bl	8009348 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001398:	f000 fa84 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800139c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013a0:	2208      	movs	r2, #8
 80013a2:	4619      	mov	r1, r3
 80013a4:	4818      	ldr	r0, [pc, #96]	; (8001408 <MX_TIM1_Init+0x180>)
 80013a6:	f007 ffcf 	bl	8009348 <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80013b0:	f000 fa78 	bl	80018a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <MX_TIM1_Init+0x180>)
 80013ea:	f008 fead 	bl	800a148 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80013f4:	f000 fa56 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <MX_TIM1_Init+0x180>)
 80013fa:	f000 fdbf 	bl	8001f7c <HAL_TIM_MspPostInit>

}
 80013fe:	bf00      	nop
 8001400:	3770      	adds	r7, #112	; 0x70
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	240003d4 	.word	0x240003d4
 800140c:	40010000 	.word	0x40010000

08001410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	; 0x38
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	615a      	str	r2, [r3, #20]
 8001440:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001448:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128-1;
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_TIM2_Init+0xe8>)
 800144c:	227f      	movs	r2, #127	; 0x7f
 800144e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001452:	2210      	movs	r2, #16
 8001454:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001458:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800146a:	4823      	ldr	r0, [pc, #140]	; (80014f8 <MX_TIM2_Init+0xe8>)
 800146c:	f007 fc85 	bl	8008d7a <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001476:	f000 fa15 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001484:	4619      	mov	r1, r3
 8001486:	481c      	ldr	r0, [pc, #112]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001488:	f008 f872 	bl	8009570 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001492:	f000 fa07 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001498:	f007 fcc6 	bl	8008e28 <HAL_TIM_PWM_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014a2:	f000 f9ff 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4810      	ldr	r0, [pc, #64]	; (80014f8 <MX_TIM2_Init+0xe8>)
 80014b6:	f008 fdb9 	bl	800a02c <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014c0:	f000 f9f0 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c4:	2360      	movs	r3, #96	; 0x60
 80014c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM2_Init+0xe8>)
 80014dc:	f007 ff34 	bl	8009348 <HAL_TIM_PWM_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014e6:	f000 f9dd 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ea:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM2_Init+0xe8>)
 80014ec:	f000 fd46 	bl	8001f7c <HAL_TIM_MspPostInit>

}
 80014f0:	bf00      	nop
 80014f2:	3738      	adds	r7, #56	; 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	240000c4 	.word	0x240000c4

080014fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001530:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <MX_TIM3_Init+0xe8>)
 8001532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8001534:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001536:	2240      	movs	r2, #64	; 0x40
 8001538:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <MX_TIM3_Init+0xe4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001540:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001542:	2264      	movs	r2, #100	; 0x64
 8001544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <MX_TIM3_Init+0xe4>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001552:	4823      	ldr	r0, [pc, #140]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001554:	f007 fc11 	bl	8008d7a <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800155e:	f000 f9a1 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156c:	4619      	mov	r1, r3
 800156e:	481c      	ldr	r0, [pc, #112]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001570:	f007 fffe 	bl	8009570 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800157a:	f000 f993 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800157e:	4818      	ldr	r0, [pc, #96]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001580:	f007 fc52 	bl	8008e28 <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800158a:	f000 f98b 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4810      	ldr	r0, [pc, #64]	; (80015e0 <MX_TIM3_Init+0xe4>)
 800159e:	f008 fd45 	bl	800a02c <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015a8:	f000 f97c 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	; 0x60
 80015ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80015b0:	2332      	movs	r3, #50	; 0x32
 80015b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <MX_TIM3_Init+0xe4>)
 80015c4:	f007 fec0 	bl	8009348 <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015ce:	f000 f969 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <MX_TIM3_Init+0xe4>)
 80015d4:	f000 fcd2 	bl	8001f7c <HAL_TIM_MspPostInit>

}
 80015d8:	bf00      	nop
 80015da:	3738      	adds	r7, #56	; 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	240001b4 	.word	0x240001b4
 80015e4:	40000400 	.word	0x40000400

080015e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <MX_USART3_UART_Init+0x90>)
 80015ee:	4a23      	ldr	r2, [pc, #140]	; (800167c <MX_USART3_UART_Init+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <MX_USART3_UART_Init+0x90>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_USART3_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_USART3_UART_Init+0x90>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_USART3_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001630:	4811      	ldr	r0, [pc, #68]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001632:	f008 fe47 	bl	800a2c4 <HAL_UART_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800163c:	f000 f932 	bl	80018a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001644:	f009 feda 	bl	800b3fc <HAL_UARTEx_SetTxFifoThreshold>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800164e:	f000 f929 	bl	80018a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001656:	f009 ff0f 	bl	800b478 <HAL_UARTEx_SetRxFifoThreshold>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001660:	f000 f920 	bl	80018a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001666:	f009 fe90 	bl	800b38a <HAL_UARTEx_DisableFifoMode>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001670:	f000 f918 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	24000208 	.word	0x24000208
 800167c:	40004800 	.word	0x40004800

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	; 0x38
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001696:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <MX_GPIO_Init+0x208>)
 8001698:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800169c:	4a7a      	ldr	r2, [pc, #488]	; (8001888 <MX_GPIO_Init+0x208>)
 800169e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016a6:	4b78      	ldr	r3, [pc, #480]	; (8001888 <MX_GPIO_Init+0x208>)
 80016a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b74      	ldr	r3, [pc, #464]	; (8001888 <MX_GPIO_Init+0x208>)
 80016b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ba:	4a73      	ldr	r2, [pc, #460]	; (8001888 <MX_GPIO_Init+0x208>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016c4:	4b70      	ldr	r3, [pc, #448]	; (8001888 <MX_GPIO_Init+0x208>)
 80016c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b6d      	ldr	r3, [pc, #436]	; (8001888 <MX_GPIO_Init+0x208>)
 80016d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016d8:	4a6b      	ldr	r2, [pc, #428]	; (8001888 <MX_GPIO_Init+0x208>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016e2:	4b69      	ldr	r3, [pc, #420]	; (8001888 <MX_GPIO_Init+0x208>)
 80016e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f0:	4b65      	ldr	r3, [pc, #404]	; (8001888 <MX_GPIO_Init+0x208>)
 80016f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016f6:	4a64      	ldr	r2, [pc, #400]	; (8001888 <MX_GPIO_Init+0x208>)
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001700:	4b61      	ldr	r3, [pc, #388]	; (8001888 <MX_GPIO_Init+0x208>)
 8001702:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	4b5e      	ldr	r3, [pc, #376]	; (8001888 <MX_GPIO_Init+0x208>)
 8001710:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001714:	4a5c      	ldr	r2, [pc, #368]	; (8001888 <MX_GPIO_Init+0x208>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800171e:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <MX_GPIO_Init+0x208>)
 8001720:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	4b56      	ldr	r3, [pc, #344]	; (8001888 <MX_GPIO_Init+0x208>)
 800172e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001732:	4a55      	ldr	r2, [pc, #340]	; (8001888 <MX_GPIO_Init+0x208>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800173c:	4b52      	ldr	r3, [pc, #328]	; (8001888 <MX_GPIO_Init+0x208>)
 800173e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <MX_GPIO_Init+0x208>)
 800174c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001750:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <MX_GPIO_Init+0x208>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800175a:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <MX_GPIO_Init+0x208>)
 800175c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001768:	4b47      	ldr	r3, [pc, #284]	; (8001888 <MX_GPIO_Init+0x208>)
 800176a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800176e:	4a46      	ldr	r2, [pc, #280]	; (8001888 <MX_GPIO_Init+0x208>)
 8001770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001774:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <MX_GPIO_Init+0x208>)
 800177a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7184 	mov.w	r1, #264	; 0x108
 800178c:	483f      	ldr	r0, [pc, #252]	; (800188c <MX_GPIO_Init+0x20c>)
 800178e:	f003 f987 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2164      	movs	r1, #100	; 0x64
 8001796:	483e      	ldr	r0, [pc, #248]	; (8001890 <MX_GPIO_Init+0x210>)
 8001798:	f003 f982 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a2:	483c      	ldr	r0, [pc, #240]	; (8001894 <MX_GPIO_Init+0x214>)
 80017a4:	f003 f97c 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f24c 0101 	movw	r1, #49153	; 0xc001
 80017ae:	483a      	ldr	r0, [pc, #232]	; (8001898 <MX_GPIO_Init+0x218>)
 80017b0:	f003 f976 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ce_Pin|csn_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80017ba:	4838      	ldr	r0, [pc, #224]	; (800189c <MX_GPIO_Init+0x21c>)
 80017bc:	f003 f970 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IRQ_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80017c6:	4836      	ldr	r0, [pc, #216]	; (80018a0 <MX_GPIO_Init+0x220>)
 80017c8:	f003 f96a 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 80017cc:	f44f 7384 	mov.w	r3, #264	; 0x108
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4829      	ldr	r0, [pc, #164]	; (800188c <MX_GPIO_Init+0x20c>)
 80017e6:	f002 ffab 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80017ea:	2364      	movs	r3, #100	; 0x64
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	4823      	ldr	r0, [pc, #140]	; (8001890 <MX_GPIO_Init+0x210>)
 8001802:	f002 ff9d 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	481d      	ldr	r0, [pc, #116]	; (8001894 <MX_GPIO_Init+0x214>)
 8001820:	f002 ff8e 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8001824:	f24c 0301 	movw	r3, #49153	; 0xc001
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4816      	ldr	r0, [pc, #88]	; (8001898 <MX_GPIO_Init+0x218>)
 800183e:	f002 ff7f 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : ce_Pin csn_Pin */
  GPIO_InitStruct.Pin = ce_Pin|csn_Pin;
 8001842:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4810      	ldr	r0, [pc, #64]	; (800189c <MX_GPIO_Init+0x21c>)
 800185c:	f002 ff70 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin PG14 */
  GPIO_InitStruct.Pin = IRQ_Pin|GPIO_PIN_14;
 8001860:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_GPIO_Init+0x220>)
 800187a:	f002 ff61 	bl	8004740 <HAL_GPIO_Init>

}
 800187e:	bf00      	nop
 8001880:	3738      	adds	r7, #56	; 0x38
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	58024400 	.word	0x58024400
 800188c:	58020000 	.word	0x58020000
 8001890:	58020400 	.word	0x58020400
 8001894:	58021400 	.word	0x58021400
 8001898:	58021000 	.word	0x58021000
 800189c:	58020c00 	.word	0x58020c00
 80018a0:	58021800 	.word	0x58021800

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	e7fe      	b.n	80018ac <Error_Handler+0x8>
	...

080018b0 <go_back>:
  D = 852,
  E = 758,
  F = 716,
  G = 638
};
void go_back(void){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
		if(RxData[2]==0)
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <go_back+0xac>)
 80018b6:	789b      	ldrb	r3, [r3, #2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d124      	bne.n	8001906 <go_back+0x56>
			  {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c2:	4827      	ldr	r0, [pc, #156]	; (8001960 <go_back+0xb0>)
 80018c4:	f003 f8ec 	bl	8004aa0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2108      	movs	r1, #8
 80018cc:	4825      	ldr	r0, [pc, #148]	; (8001964 <go_back+0xb4>)
 80018ce:	f003 f8e7 	bl	8004aa0 <HAL_GPIO_WritePin>
			  htim1.Instance->CCR1=RxData[0];
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <go_back+0xac>)
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <go_back+0xb8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
			  htim1.Instance->CCR2=RxData[0];
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <go_back+0xac>)
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <go_back+0xb8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
			  if(RxData[0]>=100)
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <go_back+0xac>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b63      	cmp	r3, #99	; 0x63
 80018ec:	d907      	bls.n	80018fe <go_back+0x4e>
				  {
					  htim1.Instance->CCR1=99;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <go_back+0xb8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2263      	movs	r2, #99	; 0x63
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34
					  htim1.Instance->CCR2=99;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <go_back+0xb8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2263      	movs	r2, #99	; 0x63
 80018fc:	639a      	str	r2, [r3, #56]	; 0x38
				  }
			  light_sensor();
 80018fe:	f7ff f9cf 	bl	8000ca0 <light_sensor>
			  ridar();
 8001902:	f000 f945 	bl	8001b90 <ridar>
			  }
		if(RxData[2]==1)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <go_back+0xac>)
 8001908:	789b      	ldrb	r3, [r3, #2]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d124      	bne.n	8001958 <go_back+0xa8>
				{
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001914:	4812      	ldr	r0, [pc, #72]	; (8001960 <go_back+0xb0>)
 8001916:	f003 f8c3 	bl	8004aa0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 800191a:	2201      	movs	r2, #1
 800191c:	2108      	movs	r1, #8
 800191e:	4811      	ldr	r0, [pc, #68]	; (8001964 <go_back+0xb4>)
 8001920:	f003 f8be 	bl	8004aa0 <HAL_GPIO_WritePin>
				htim1.Instance->CCR1=RxData[0];
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <go_back+0xac>)
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <go_back+0xb8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	635a      	str	r2, [r3, #52]	; 0x34
			    htim1.Instance->CCR2=RxData[0];
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <go_back+0xac>)
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <go_back+0xb8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	639a      	str	r2, [r3, #56]	; 0x38
				if(RxData[0]>=100)
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <go_back+0xac>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b63      	cmp	r3, #99	; 0x63
 800193e:	d907      	bls.n	8001950 <go_back+0xa0>
					{
						htim1.Instance->CCR1=99;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <go_back+0xb8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2263      	movs	r2, #99	; 0x63
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
						htim1.Instance->CCR2=99;
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <go_back+0xb8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2263      	movs	r2, #99	; 0x63
 800194e:	639a      	str	r2, [r3, #56]	; 0x38
				    }
				light_sensor();
 8001950:	f7ff f9a6 	bl	8000ca0 <light_sensor>
				ridar();
 8001954:	f000 f91c 	bl	8001b90 <ridar>
			  }
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	24000034 	.word	0x24000034
 8001960:	58021000 	.word	0x58021000
 8001964:	58020000 	.word	0x58020000
 8001968:	240003d4 	.word	0x240003d4

0800196c <nrf_motor>:

void nrf_motor (void){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	if(RxData[3]==0)
 8001970:	4b40      	ldr	r3, [pc, #256]	; (8001a74 <nrf_motor+0x108>)
 8001972:	78db      	ldrb	r3, [r3, #3]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d17b      	bne.n	8001a70 <nrf_motor+0x104>
	{
			  if (RxData[1]  <=70)
 8001978:	4b3e      	ldr	r3, [pc, #248]	; (8001a74 <nrf_motor+0x108>)
 800197a:	785b      	ldrb	r3, [r3, #1]
 800197c:	2b46      	cmp	r3, #70	; 0x46
 800197e:	d839      	bhi.n	80019f4 <nrf_motor+0x88>
				  {
					  while (RxData[1]  <= 70)
 8001980:	e034      	b.n	80019ec <nrf_motor+0x80>
					  {

						  light_sensor();
 8001982:	f7ff f98d 	bl	8000ca0 <light_sensor>
						       buzzer();
 8001986:	f7ff f8b7 	bl	8000af8 <buzzer>
						  if (isDataAvailable(2) == 1)
 800198a:	2002      	movs	r0, #2
 800198c:	f7ff f804 	bl	8000998 <isDataAvailable>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	d102      	bne.n	800199c <nrf_motor+0x30>
						  {
							  NRF24_Receive(RxData);
 8001996:	4837      	ldr	r0, [pc, #220]	; (8001a74 <nrf_motor+0x108>)
 8001998:	f7ff f81e 	bl	80009d8 <NRF24_Receive>
						  }
						  htim1.Instance->CCR3 = 80;
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <nrf_motor+0x10c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2250      	movs	r2, #80	; 0x50
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
						  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019aa:	4834      	ldr	r0, [pc, #208]	; (8001a7c <nrf_motor+0x110>)
 80019ac:	f003 f878 	bl	8004aa0 <HAL_GPIO_WritePin>
						  HAL_Delay(100);
 80019b0:	2064      	movs	r0, #100	; 0x64
 80019b2:	f000 fd51 	bl	8002458 <HAL_Delay>
						  go_back();
 80019b6:	f7ff ff7b 	bl	80018b0 <go_back>

						  if(70<=RxData[1]&&RxData[1]<=110)
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <nrf_motor+0x108>)
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	2b45      	cmp	r3, #69	; 0x45
 80019c0:	d914      	bls.n	80019ec <nrf_motor+0x80>
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <nrf_motor+0x108>)
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	2b6e      	cmp	r3, #110	; 0x6e
 80019c8:	d810      	bhi.n	80019ec <nrf_motor+0x80>
						  {
							  htim1.Instance->CCR3 = 90;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <nrf_motor+0x10c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	225a      	movs	r2, #90	; 0x5a
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 80019d2:	2201      	movs	r2, #1
 80019d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d8:	4828      	ldr	r0, [pc, #160]	; (8001a7c <nrf_motor+0x110>)
 80019da:	f003 f861 	bl	8004aa0 <HAL_GPIO_WritePin>
							  HAL_Delay(200);
 80019de:	20c8      	movs	r0, #200	; 0xc8
 80019e0:	f000 fd3a 	bl	8002458 <HAL_Delay>
							  htim1.Instance->CCR3 = 0;
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <nrf_motor+0x10c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
					  while (RxData[1]  <= 70)
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <nrf_motor+0x108>)
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	2b46      	cmp	r3, #70	; 0x46
 80019f2:	d9c6      	bls.n	8001982 <nrf_motor+0x16>
						  }
					  }
				  }
			  if (RxData[1] > 110)
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <nrf_motor+0x108>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	2b6e      	cmp	r3, #110	; 0x6e
 80019fa:	d939      	bls.n	8001a70 <nrf_motor+0x104>
					  {
						  while (RxData[1] > 110)
 80019fc:	e034      	b.n	8001a68 <nrf_motor+0xfc>
						  {
							  light_sensor();
 80019fe:	f7ff f94f 	bl	8000ca0 <light_sensor>
							       buzzer();
 8001a02:	f7ff f879 	bl	8000af8 <buzzer>
							  if (isDataAvailable(2) == 1)
 8001a06:	2002      	movs	r0, #2
 8001a08:	f7fe ffc6 	bl	8000998 <isDataAvailable>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d102      	bne.n	8001a18 <nrf_motor+0xac>
							  {
								  NRF24_Receive(RxData);
 8001a12:	4818      	ldr	r0, [pc, #96]	; (8001a74 <nrf_motor+0x108>)
 8001a14:	f7fe ffe0 	bl	80009d8 <NRF24_Receive>
							  }
							  htim1.Instance->CCR3 = 80;
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <nrf_motor+0x10c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2250      	movs	r2, #80	; 0x50
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	4815      	ldr	r0, [pc, #84]	; (8001a7c <nrf_motor+0x110>)
 8001a28:	f003 f83a 	bl	8004aa0 <HAL_GPIO_WritePin>
							  HAL_Delay(100);
 8001a2c:	2064      	movs	r0, #100	; 0x64
 8001a2e:	f000 fd13 	bl	8002458 <HAL_Delay>
							  go_back();
 8001a32:	f7ff ff3d 	bl	80018b0 <go_back>
							  if(70<=RxData[1]&&RxData[1]<=110)
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <nrf_motor+0x108>)
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	2b45      	cmp	r3, #69	; 0x45
 8001a3c:	d914      	bls.n	8001a68 <nrf_motor+0xfc>
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <nrf_motor+0x108>)
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	2b6e      	cmp	r3, #110	; 0x6e
 8001a44:	d810      	bhi.n	8001a68 <nrf_motor+0xfc>
							  {
								  htim1.Instance->CCR3 = 90;
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <nrf_motor+0x10c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	225a      	movs	r2, #90	; 0x5a
 8001a4c:	63da      	str	r2, [r3, #60]	; 0x3c
								  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a54:	4809      	ldr	r0, [pc, #36]	; (8001a7c <nrf_motor+0x110>)
 8001a56:	f003 f823 	bl	8004aa0 <HAL_GPIO_WritePin>
								  HAL_Delay(200);
 8001a5a:	20c8      	movs	r0, #200	; 0xc8
 8001a5c:	f000 fcfc 	bl	8002458 <HAL_Delay>
								  htim1.Instance->CCR3 = 0;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <nrf_motor+0x10c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c
						  while (RxData[1] > 110)
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <nrf_motor+0x108>)
 8001a6a:	785b      	ldrb	r3, [r3, #1]
 8001a6c:	2b6e      	cmp	r3, #110	; 0x6e
 8001a6e:	d8c6      	bhi.n	80019fe <nrf_motor+0x92>
						  }
					  }


	  }
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	24000034 	.word	0x24000034
 8001a78:	240003d4 	.word	0x240003d4
 8001a7c:	58021800 	.word	0x58021800

08001a80 <rpi_motor>:

void rpi_motor (void){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	  if(RxData[3]==1)
 8001a84:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <rpi_motor+0x100>)
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d176      	bne.n	8001b7a <rpi_motor+0xfa>
	  {
		  if (RxData_From_Node4[0]=='L')
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <rpi_motor+0x104>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b4c      	cmp	r3, #76	; 0x4c
 8001a92:	d136      	bne.n	8001b02 <rpi_motor+0x82>
				  {
					  while (RxData_From_Node4[0]=='L')
 8001a94:	e031      	b.n	8001afa <rpi_motor+0x7a>
					  {
						  light_sensor();
 8001a96:	f7ff f903 	bl	8000ca0 <light_sensor>
						       buzzer();
 8001a9a:	f7ff f82d 	bl	8000af8 <buzzer>
						  if (isDataAvailable(2) == 1)
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f7fe ff7a 	bl	8000998 <isDataAvailable>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <rpi_motor+0x30>
						  {
							  NRF24_Receive(RxData);
 8001aaa:	4835      	ldr	r0, [pc, #212]	; (8001b80 <rpi_motor+0x100>)
 8001aac:	f7fe ff94 	bl	80009d8 <NRF24_Receive>
						  }
						  htim1.Instance->CCR3 = 80;
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <rpi_motor+0x108>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2250      	movs	r2, #80	; 0x50
 8001ab6:	63da      	str	r2, [r3, #60]	; 0x3c
						  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001abe:	4833      	ldr	r0, [pc, #204]	; (8001b8c <rpi_motor+0x10c>)
 8001ac0:	f002 ffee 	bl	8004aa0 <HAL_GPIO_WritePin>
						  HAL_Delay(100);
 8001ac4:	2064      	movs	r0, #100	; 0x64
 8001ac6:	f000 fcc7 	bl	8002458 <HAL_Delay>
						  go_back();
 8001aca:	f7ff fef1 	bl	80018b0 <go_back>

						  if(RxData_From_Node4[0]=='G')
 8001ace:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <rpi_motor+0x104>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b47      	cmp	r3, #71	; 0x47
 8001ad4:	d111      	bne.n	8001afa <rpi_motor+0x7a>
						  {
							  htim1.Instance->CCR3 = 90;
 8001ad6:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <rpi_motor+0x108>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	225a      	movs	r2, #90	; 0x5a
 8001adc:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae4:	4829      	ldr	r0, [pc, #164]	; (8001b8c <rpi_motor+0x10c>)
 8001ae6:	f002 ffdb 	bl	8004aa0 <HAL_GPIO_WritePin>
							  HAL_Delay(200);
 8001aea:	20c8      	movs	r0, #200	; 0xc8
 8001aec:	f000 fcb4 	bl	8002458 <HAL_Delay>
							  htim1.Instance->CCR3 = 0;
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <rpi_motor+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c
							break;
 8001af8:	e003      	b.n	8001b02 <rpi_motor+0x82>
					  while (RxData_From_Node4[0]=='L')
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <rpi_motor+0x104>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b4c      	cmp	r3, #76	; 0x4c
 8001b00:	d0c9      	beq.n	8001a96 <rpi_motor+0x16>
						  }

					  }
				  }

			  if (RxData_From_Node4[0]=='R')
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <rpi_motor+0x104>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b52      	cmp	r3, #82	; 0x52
 8001b08:	d137      	bne.n	8001b7a <rpi_motor+0xfa>
					  {
						  while (RxData_From_Node4[0]=='R')
 8001b0a:	e032      	b.n	8001b72 <rpi_motor+0xf2>
						  {
								   light_sensor();
 8001b0c:	f7ff f8c8 	bl	8000ca0 <light_sensor>
							       buzzer();
 8001b10:	f7fe fff2 	bl	8000af8 <buzzer>
							  if (isDataAvailable(2) == 1)
 8001b14:	2002      	movs	r0, #2
 8001b16:	f7fe ff3f 	bl	8000998 <isDataAvailable>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d102      	bne.n	8001b26 <rpi_motor+0xa6>
							  {
								  NRF24_Receive(RxData);
 8001b20:	4817      	ldr	r0, [pc, #92]	; (8001b80 <rpi_motor+0x100>)
 8001b22:	f7fe ff59 	bl	80009d8 <NRF24_Receive>
							  }
							  htim1.Instance->CCR3 = 80;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <rpi_motor+0x108>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2250      	movs	r2, #80	; 0x50
 8001b2c:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b34:	4815      	ldr	r0, [pc, #84]	; (8001b8c <rpi_motor+0x10c>)
 8001b36:	f002 ffb3 	bl	8004aa0 <HAL_GPIO_WritePin>
							  HAL_Delay(100);
 8001b3a:	2064      	movs	r0, #100	; 0x64
 8001b3c:	f000 fc8c 	bl	8002458 <HAL_Delay>
							  go_back();
 8001b40:	f7ff feb6 	bl	80018b0 <go_back>
							  if(RxData_From_Node4[0]=='G')
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <rpi_motor+0x104>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b47      	cmp	r3, #71	; 0x47
 8001b4a:	d112      	bne.n	8001b72 <rpi_motor+0xf2>
							  {
								  htim1.Instance->CCR3 = 90;
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <rpi_motor+0x108>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	225a      	movs	r2, #90	; 0x5a
 8001b52:	63da      	str	r2, [r3, #60]	; 0x3c
								  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	480c      	ldr	r0, [pc, #48]	; (8001b8c <rpi_motor+0x10c>)
 8001b5c:	f002 ffa0 	bl	8004aa0 <HAL_GPIO_WritePin>
								  HAL_Delay(200);
 8001b60:	20c8      	movs	r0, #200	; 0xc8
 8001b62:	f000 fc79 	bl	8002458 <HAL_Delay>
								  htim1.Instance->CCR3 = 0;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <rpi_motor+0x108>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	63da      	str	r2, [r3, #60]	; 0x3c
								break;
 8001b6e:	bf00      	nop


						  }
					  }
	  }
}
 8001b70:	e003      	b.n	8001b7a <rpi_motor+0xfa>
						  while (RxData_From_Node4[0]=='R')
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <rpi_motor+0x104>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b52      	cmp	r3, #82	; 0x52
 8001b78:	d0c8      	beq.n	8001b0c <rpi_motor+0x8c>
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	24000034 	.word	0x24000034
 8001b84:	2400005c 	.word	0x2400005c
 8001b88:	240003d4 	.word	0x240003d4
 8001b8c:	58021800 	.word	0x58021800

08001b90 <ridar>:
#include "ridar.h"


void ridar (void){
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0


	  for(int j=0;j<3;j++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	e00c      	b.n	8001bb6 <ridar+0x26>
	  {b[j]=RxData_From_Node1[j]-'0';}
 8001b9c:	4a18      	ldr	r2, [pc, #96]	; (8001c00 <ridar+0x70>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001ba8:	4916      	ldr	r1, [pc, #88]	; (8001c04 <ridar+0x74>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int j=0;j<3;j++)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	ddef      	ble.n	8001b9c <ridar+0xc>

	  int Distance4 = 100* b[0]  +10*b[1] +b[2];//rider
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <ridar+0x74>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2264      	movs	r2, #100	; 0x64
 8001bc2:	fb02 f103 	mul.w	r1, r2, r3
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <ridar+0x74>)
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	18ca      	adds	r2, r1, r3
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <ridar+0x74>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4413      	add	r3, r2
 8001bda:	603b      	str	r3, [r7, #0]
  	  if(Distance4<=20)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b14      	cmp	r3, #20
 8001be0:	dc07      	bgt.n	8001bf2 <ridar+0x62>
  	  {
  		  htim1.Instance->CCR1=0;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <ridar+0x78>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
  		  htim1.Instance->CCR2=0;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <ridar+0x78>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	639a      	str	r2, [r3, #56]	; 0x38
  	  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	240000a4 	.word	0x240000a4
 8001c04:	24000200 	.word	0x24000200
 8001c08:	240003d4 	.word	0x240003d4

08001c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_MspInit+0x30>)
 8001c14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c18:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_MspInit+0x30>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_MspInit+0x30>)
 8001c24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	58024400 	.word	0x58024400

08001c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0b8      	sub	sp, #224	; 0xe0
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	22b8      	movs	r2, #184	; 0xb8
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f009 fcc7 	bl	800b5f4 <memset>
  if(hadc->Instance==ADC1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2a      	ldr	r2, [pc, #168]	; (8001d14 <HAL_ADC_MspInit+0xd4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d14d      	bne.n	8001d0c <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8001c76:	2320      	movs	r3, #32
 8001c78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8001c7a:	2381      	movs	r3, #129	; 0x81
 8001c7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c82:	2302      	movs	r3, #2
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c86:	2302      	movs	r3, #2
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001c8a:	2340      	movs	r3, #64	; 0x40
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 ff01 	bl	8005aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001cac:	f7ff fdfa 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_ADC_MspInit+0xd8>)
 8001cb2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_ADC_MspInit+0xd8>)
 8001cb8:	f043 0320 	orr.w	r3, r3, #32
 8001cbc:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_ADC_MspInit+0xd8>)
 8001cc2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_ADC_MspInit+0xd8>)
 8001cd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cd4:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_ADC_MspInit+0xd8>)
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_ADC_MspInit+0xd8>)
 8001ce0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d04:	4619      	mov	r1, r3
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <HAL_ADC_MspInit+0xdc>)
 8001d08:	f002 fd1a 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d0c:	bf00      	nop
 8001d0e:	37e0      	adds	r7, #224	; 0xe0
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40022000 	.word	0x40022000
 8001d18:	58024400 	.word	0x58024400
 8001d1c:	58021400 	.word	0x58021400

08001d20 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0b8      	sub	sp, #224	; 0xe0
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	22b8      	movs	r2, #184	; 0xb8
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f009 fc57 	bl	800b5f4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2d      	ldr	r2, [pc, #180]	; (8001e00 <HAL_FDCAN_MspInit+0xe0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d153      	bne.n	8001df8 <HAL_FDCAN_MspInit+0xd8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fea0 	bl	8005aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001d6e:	f7ff fd99 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_FDCAN_MspInit+0xe4>)
 8001d74:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001d78:	4a22      	ldr	r2, [pc, #136]	; (8001e04 <HAL_FDCAN_MspInit+0xe4>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_FDCAN_MspInit+0xe4>)
 8001d84:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_FDCAN_MspInit+0xe4>)
 8001d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d96:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_FDCAN_MspInit+0xe4>)
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_FDCAN_MspInit+0xe4>)
 8001da2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dae:	2303      	movs	r3, #3
 8001db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001dc6:	2309      	movs	r3, #9
 8001dc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480d      	ldr	r0, [pc, #52]	; (8001e08 <HAL_FDCAN_MspInit+0xe8>)
 8001dd4:	f002 fcb4 	bl	8004740 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2013      	movs	r0, #19
 8001dde:	f001 fb94 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001de2:	2013      	movs	r0, #19
 8001de4:	f001 fbab 	bl	800353e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	2015      	movs	r0, #21
 8001dee:	f001 fb8c 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001df2:	2015      	movs	r0, #21
 8001df4:	f001 fba3 	bl	800353e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	37e0      	adds	r7, #224	; 0xe0
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	4000a000 	.word	0x4000a000
 8001e04:	58024400 	.word	0x58024400
 8001e08:	58020c00 	.word	0x58020c00

08001e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0b8      	sub	sp, #224	; 0xe0
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	22b8      	movs	r2, #184	; 0xb8
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f009 fbe1 	bl	800b5f4 <memset>
  if(hspi->Instance==SPI1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <HAL_SPI_MspInit+0xbc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d141      	bne.n	8001ec0 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fe2c 	bl	8005aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001e56:	f7ff fd25 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_SPI_MspInit+0xc0>)
 8001e5c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_SPI_MspInit+0xc0>)
 8001e62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e66:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_SPI_MspInit+0xc0>)
 8001e6c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_SPI_MspInit+0xc0>)
 8001e7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_SPI_MspInit+0xc0>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_SPI_MspInit+0xc0>)
 8001e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e96:	23e0      	movs	r3, #224	; 0xe0
 8001e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eae:	2305      	movs	r3, #5
 8001eb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001ebc:	f002 fc40 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	37e0      	adds	r7, #224	; 0xe0
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40013000 	.word	0x40013000
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	58020000 	.word	0x58020000

08001ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <HAL_TIM_Base_MspInit+0x9c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10f      	bne.n	8001f06 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_TIM_Base_MspInit+0xa0>)
 8001ee8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001eec:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <HAL_TIM_Base_MspInit+0xa0>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_TIM_Base_MspInit+0xa0>)
 8001ef8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f04:	e030      	b.n	8001f68 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0e:	d117      	bne.n	8001f40 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_TIM_Base_MspInit+0xa0>)
 8001f12:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001f16:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_TIM_Base_MspInit+0xa0>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_TIM_Base_MspInit+0xa0>)
 8001f22:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	201c      	movs	r0, #28
 8001f34:	f001 fae9 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f38:	201c      	movs	r0, #28
 8001f3a:	f001 fb00 	bl	800353e <HAL_NVIC_EnableIRQ>
}
 8001f3e:	e013      	b.n	8001f68 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <HAL_TIM_Base_MspInit+0xa4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_TIM_Base_MspInit+0xa0>)
 8001f4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_TIM_Base_MspInit+0xa0>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_TIM_Base_MspInit+0xa0>)
 8001f5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40010000 	.word	0x40010000
 8001f74:	58024400 	.word	0x58024400
 8001f78:	40000400 	.word	0x40000400

08001f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a38      	ldr	r2, [pc, #224]	; (800207c <HAL_TIM_MspPostInit+0x100>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d120      	bne.n	8001fe0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_TIM_MspPostInit+0x104>)
 8001fa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fa4:	4a36      	ldr	r2, [pc, #216]	; (8002080 <HAL_TIM_MspPostInit+0x104>)
 8001fa6:	f043 0310 	orr.w	r3, r3, #16
 8001faa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <HAL_TIM_MspPostInit+0x104>)
 8001fb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001fbc:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	482a      	ldr	r0, [pc, #168]	; (8002084 <HAL_TIM_MspPostInit+0x108>)
 8001fda:	f002 fbb1 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fde:	e048      	b.n	8002072 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d11f      	bne.n	800202a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_TIM_MspPostInit+0x104>)
 8001fec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_TIM_MspPostInit+0x104>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_TIM_MspPostInit+0x104>)
 8001ffc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002008:	2301      	movs	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002018:	2301      	movs	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4819      	ldr	r0, [pc, #100]	; (8002088 <HAL_TIM_MspPostInit+0x10c>)
 8002024:	f002 fb8c 	bl	8004740 <HAL_GPIO_Init>
}
 8002028:	e023      	b.n	8002072 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_TIM_MspPostInit+0x110>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d11e      	bne.n	8002072 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_TIM_MspPostInit+0x104>)
 8002036:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_TIM_MspPostInit+0x104>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_TIM_MspPostInit+0x104>)
 8002046:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002052:	2340      	movs	r3, #64	; 0x40
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002062:	2302      	movs	r3, #2
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4808      	ldr	r0, [pc, #32]	; (8002090 <HAL_TIM_MspPostInit+0x114>)
 800206e:	f002 fb67 	bl	8004740 <HAL_GPIO_Init>
}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40010000 	.word	0x40010000
 8002080:	58024400 	.word	0x58024400
 8002084:	58021000 	.word	0x58021000
 8002088:	58020000 	.word	0x58020000
 800208c:	40000400 	.word	0x40000400
 8002090:	58020800 	.word	0x58020800

08002094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0b8      	sub	sp, #224	; 0xe0
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	22b8      	movs	r2, #184	; 0xb8
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f009 fa9d 	bl	800b5f4 <memset>
  if(huart->Instance==USART3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a25      	ldr	r2, [pc, #148]	; (8002154 <HAL_UART_MspInit+0xc0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d142      	bne.n	800214a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020c4:	2302      	movs	r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fce8 	bl	8005aa8 <HAL_RCCEx_PeriphCLKConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020de:	f7ff fbe1 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_UART_MspInit+0xc4>)
 80020e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80020e8:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_UART_MspInit+0xc4>)
 80020ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_UART_MspInit+0xc4>)
 80020f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80020f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_UART_MspInit+0xc4>)
 8002102:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002106:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_UART_MspInit+0xc4>)
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_UART_MspInit+0xc4>)
 8002112:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800211e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002122:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002138:	2307      	movs	r3, #7
 800213a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800213e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_UART_MspInit+0xc8>)
 8002146:	f002 fafb 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	37e0      	adds	r7, #224	; 0xe0
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40004800 	.word	0x40004800
 8002158:	58024400 	.word	0x58024400
 800215c:	58020c00 	.word	0x58020c00

08002160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <NMI_Handler+0x4>

08002166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <HardFault_Handler+0x4>

0800216c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <MemManage_Handler+0x4>

08002172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <BusFault_Handler+0x4>

08002178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <UsageFault_Handler+0x4>

0800217e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ac:	f000 f934 	bl	8002418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <FDCAN1_IT0_IRQHandler+0x10>)
 80021ba:	f001 fe47 	bl	8003e4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	24000300 	.word	0x24000300

080021c8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <FDCAN1_IT1_IRQHandler+0x10>)
 80021ce:	f001 fe3d 	bl	8003e4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	24000300 	.word	0x24000300

080021dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <TIM2_IRQHandler+0x10>)
 80021e2:	f006 ff91 	bl	8009108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	240000c4 	.word	0x240000c4

080021f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <SystemInit+0xd0>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <SystemInit+0xd0>)
 80021fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <SystemInit+0xd4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	2b02      	cmp	r3, #2
 800220e:	d807      	bhi.n	8002220 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <SystemInit+0xd4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 030f 	bic.w	r3, r3, #15
 8002218:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <SystemInit+0xd4>)
 800221a:	f043 0303 	orr.w	r3, r3, #3
 800221e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <SystemInit+0xd8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <SystemInit+0xd8>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <SystemInit+0xd8>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <SystemInit+0xd8>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4924      	ldr	r1, [pc, #144]	; (80022c8 <SystemInit+0xd8>)
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <SystemInit+0xdc>)
 800223a:	4013      	ands	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <SystemInit+0xd4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <SystemInit+0xd4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 030f 	bic.w	r3, r3, #15
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <SystemInit+0xd4>)
 8002254:	f043 0303 	orr.w	r3, r3, #3
 8002258:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <SystemInit+0xd8>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <SystemInit+0xd8>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <SystemInit+0xd8>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <SystemInit+0xd8>)
 800226e:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <SystemInit+0xe0>)
 8002270:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <SystemInit+0xd8>)
 8002274:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <SystemInit+0xe4>)
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <SystemInit+0xd8>)
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <SystemInit+0xe8>)
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <SystemInit+0xd8>)
 8002280:	2200      	movs	r2, #0
 8002282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <SystemInit+0xd8>)
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <SystemInit+0xe8>)
 8002288:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <SystemInit+0xd8>)
 800228c:	2200      	movs	r2, #0
 800228e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <SystemInit+0xd8>)
 8002292:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <SystemInit+0xe8>)
 8002294:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <SystemInit+0xd8>)
 8002298:	2200      	movs	r2, #0
 800229a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <SystemInit+0xd8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <SystemInit+0xd8>)
 80022a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <SystemInit+0xd8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <SystemInit+0xec>)
 80022b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022b4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00
 80022c4:	52002000 	.word	0x52002000
 80022c8:	58024400 	.word	0x58024400
 80022cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80022d0:	02020200 	.word	0x02020200
 80022d4:	01ff0000 	.word	0x01ff0000
 80022d8:	01010280 	.word	0x01010280
 80022dc:	52004000 	.word	0x52004000

080022e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002318 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022e4:	f7ff ff84 	bl	80021f0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	; (8002320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	; (800232c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800230e:	f009 f93f 	bl	800b590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002312:	f7fe fd03 	bl	8000d1c <main>
  bx  lr
 8002316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002318:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800231c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002320:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8002324:	0800b6d0 	.word	0x0800b6d0
  ldr r2, =_sbss
 8002328:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 800232c:	240004b0 	.word	0x240004b0

08002330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC_IRQHandler>
	...

08002334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233a:	2003      	movs	r0, #3
 800233c:	f001 f8da 	bl	80034f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002340:	f003 f9dc 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_Init+0x68>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	4913      	ldr	r1, [pc, #76]	; (80023a0 <HAL_Init+0x6c>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_Init+0x68>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_Init+0x6c>)
 8002368:	5cd3      	ldrb	r3, [r2, r3]
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_Init+0x70>)
 8002376:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002378:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_Init+0x74>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800237e:	200f      	movs	r0, #15
 8002380:	f000 f814 	bl	80023ac <HAL_InitTick>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e002      	b.n	8002394 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800238e:	f7ff fc3d 	bl	8001c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	58024400 	.word	0x58024400
 80023a0:	0800b678 	.word	0x0800b678
 80023a4:	2400000c 	.word	0x2400000c
 80023a8:	24000008 	.word	0x24000008

080023ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_InitTick+0x60>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e021      	b.n	8002404 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_InitTick+0x64>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_InitTick+0x60>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 f8bf 	bl	800355a <HAL_SYSTICK_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00e      	b.n	8002404 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d80a      	bhi.n	8002402 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f001 f889 	bl	800350a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_InitTick+0x68>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	24000014 	.word	0x24000014
 8002410:	24000008 	.word	0x24000008
 8002414:	24000010 	.word	0x24000010

08002418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_IncTick+0x20>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_IncTick+0x24>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4413      	add	r3, r2
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <HAL_IncTick+0x24>)
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	24000014 	.word	0x24000014
 800243c:	240004ac 	.word	0x240004ac

08002440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return uwTick;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_GetTick+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	240004ac 	.word	0x240004ac

08002458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7ff ffee 	bl	8002440 <HAL_GetTick>
 8002464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d005      	beq.n	800247e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_Delay+0x44>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800247e:	bf00      	nop
 8002480:	f7ff ffde 	bl	8002440 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d8f7      	bhi.n	8002480 <HAL_Delay+0x28>
  {
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	24000014 	.word	0x24000014

080024a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	609a      	str	r2, [r3, #8]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3360      	adds	r3, #96	; 0x60
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	430b      	orrs	r3, r1
 8002536:	431a      	orrs	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	611a      	str	r2, [r3, #16]
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800257a:	b480      	push	{r7}
 800257c:	b087      	sub	sp, #28
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3360      	adds	r3, #96	; 0x60
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	431a      	orrs	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	601a      	str	r2, [r3, #0]
  }
}
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3330      	adds	r3, #48	; 0x30
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	4413      	add	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	211f      	movs	r1, #31
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0e9b      	lsrs	r3, r3, #26
 80025e8:	f003 011f 	and.w	r1, r3, #31
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	431a      	orrs	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025fc:	bf00      	nop
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3314      	adds	r3, #20
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	0e5b      	lsrs	r3, r3, #25
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	4413      	add	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	0d1b      	lsrs	r3, r3, #20
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2107      	movs	r1, #7
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0d1b      	lsrs	r3, r3, #20
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	431a      	orrs	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002678:	43db      	mvns	r3, r3
 800267a:	401a      	ands	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0318 	and.w	r3, r3, #24
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002684:	40d9      	lsrs	r1, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	400b      	ands	r3, r1
 800268a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	000fffff 	.word	0x000fffff

080026a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6093      	str	r3, [r2, #8]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	5fffffc0 	.word	0x5fffffc0

080026cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <LL_ADC_EnableInternalRegulator+0x24>)
 8002702:	4013      	ands	r3, r2
 8002704:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	6fffffc0 	.word	0x6fffffc0

0800271c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002730:	d101      	bne.n	8002736 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <LL_ADC_IsEnabled+0x18>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <LL_ADC_IsEnabled+0x1a>
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d101      	bne.n	8002782 <LL_ADC_REG_IsConversionOngoing+0x18>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d101      	bne.n	80027a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e138      	b.n	8002a44 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff fa2d 	bl	8001c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff67 	bl	80026cc <LL_ADC_IsDeepPowerDownEnabled>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff4d 	bl	80026a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff82 	bl	800271c <LL_ADC_IsInternalRegulatorEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d114      	bne.n	8002848 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ff66 	bl	80026f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002828:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_ADC_Init+0x294>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	4a88      	ldr	r2, [pc, #544]	; (8002a50 <HAL_ADC_Init+0x298>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	3301      	adds	r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800283a:	e002      	b.n	8002842 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3b01      	subs	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff65 	bl	800271c <LL_ADC_IsInternalRegulatorEnabled>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0210 	orr.w	r2, r3, #16
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff76 	bl	800276a <LL_ADC_REG_IsConversionOngoing>
 800287e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 80d2 	bne.w	8002a32 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 80ce 	bne.w	8002a32 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff4a 	bl	8002744 <LL_ADC_IsEnabled>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d110      	bne.n	80028d8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b6:	4867      	ldr	r0, [pc, #412]	; (8002a54 <HAL_ADC_Init+0x29c>)
 80028b8:	f7ff ff44 	bl	8002744 <LL_ADC_IsEnabled>
 80028bc:	4604      	mov	r4, r0
 80028be:	4866      	ldr	r0, [pc, #408]	; (8002a58 <HAL_ADC_Init+0x2a0>)
 80028c0:	f7ff ff40 	bl	8002744 <LL_ADC_IsEnabled>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4323      	orrs	r3, r4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4862      	ldr	r0, [pc, #392]	; (8002a5c <HAL_ADC_Init+0x2a4>)
 80028d4:	f7ff fde4 	bl	80024a0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7d5b      	ldrb	r3, [r3, #21]
 80028dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028e2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80028e8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7f1b      	ldrb	r3, [r3, #28]
 80028ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7f1b      	ldrb	r3, [r3, #28]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d106      	bne.n	800290a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	3b01      	subs	r3, #1
 8002902:	045b      	lsls	r3, r3, #17
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <HAL_ADC_Init+0x2a8>)
 800292e:	4013      	ands	r3, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	69b9      	ldr	r1, [r7, #24]
 8002936:	430b      	orrs	r3, r1
 8002938:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff13 	bl	800276a <LL_ADC_REG_IsConversionOngoing>
 8002944:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ff20 	bl	8002790 <LL_ADC_INJ_IsConversionOngoing>
 8002950:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d14a      	bne.n	80029ee <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d147      	bne.n	80029ee <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7d1b      	ldrb	r3, [r3, #20]
 8002962:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_ADC_Init+0x2ac>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	430b      	orrs	r3, r1
 800297e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002986:	2b01      	cmp	r3, #1
 8002988:	d11b      	bne.n	80029c2 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_ADC_Init+0x2b0>)
 8002998:	4013      	ands	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800299e:	3a01      	subs	r2, #1
 80029a0:	0411      	lsls	r1, r2, #16
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029ac:	4311      	orrs	r1, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029b2:	430a      	orrs	r2, r1
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	611a      	str	r2, [r3, #16]
 80029c0:	e007      	b.n	80029d2 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fb25 	bl	8003038 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d10c      	bne.n	8002a10 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	f023 010f 	bic.w	r1, r3, #15
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	1e5a      	subs	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0e:	e007      	b.n	8002a20 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 020f 	bic.w	r2, r2, #15
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f023 0303 	bic.w	r3, r3, #3
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
 8002a30:	e007      	b.n	8002a42 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f043 0210 	orr.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a42:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3724      	adds	r7, #36	; 0x24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd90      	pop	{r4, r7, pc}
 8002a4c:	24000008 	.word	0x24000008
 8002a50:	053e2d63 	.word	0x053e2d63
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40022100 	.word	0x40022100
 8002a5c:	40022300 	.word	0x40022300
 8002a60:	fff0c003 	.word	0xfff0c003
 8002a64:	ffffbffc 	.word	0xffffbffc
 8002a68:	fc00f81e 	.word	0xfc00f81e

08002a6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b0a1      	sub	sp, #132	; 0x84
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a9a      	ldr	r2, [pc, #616]	; (8002cf0 <HAL_ADC_ConfigChannel+0x284>)
 8002a86:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x2a>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e2bc      	b.n	8003010 <HAL_ADC_ConfigChannel+0x5a4>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fe61 	bl	800276a <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 82a1 	bne.w	8002ff2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d108      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x62>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	e016      	b.n	8002afc <HAL_ADC_ConfigChannel+0x90>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ade:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2201      	movs	r2, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	69d1      	ldr	r1, [r2, #28]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	430b      	orrs	r3, r1
 8002b08:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f7ff fd4a 	bl	80025b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fe22 	bl	800276a <LL_ADC_REG_IsConversionOngoing>
 8002b26:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fe2f 	bl	8002790 <LL_ADC_INJ_IsConversionOngoing>
 8002b32:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 80a0 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 809c 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f7ff fd59 	bl	8002608 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x110>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	e00a      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x126>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d027      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6919      	ldr	r1, [r3, #16]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002baa:	f7ff fcad 	bl	8002508 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6919      	ldr	r1, [r3, #16]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	7e5b      	ldrb	r3, [r3, #25]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d102      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x158>
 8002bbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bc2:	e000      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x15a>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f7ff fcd7 	bl	800257a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6919      	ldr	r1, [r3, #16]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	7e1b      	ldrb	r3, [r3, #24]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d102      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x176>
 8002bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002be0:	e000      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x178>
 8002be2:	2300      	movs	r3, #0
 8002be4:	461a      	mov	r2, r3
 8002be6:	f7ff fcaf 	bl	8002548 <LL_ADC_SetDataRightShift>
 8002bea:	e047      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	069b      	lsls	r3, r3, #26
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d107      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c0e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	069b      	lsls	r3, r3, #26
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c32:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	069b      	lsls	r3, r3, #26
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c56:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	069b      	lsls	r3, r3, #26
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c7a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fd5f 	bl	8002744 <LL_ADC_IsEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f040 81bb 	bne.w	8003004 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6819      	ldr	r1, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7ff fce0 	bl	8002660 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <HAL_ADC_ConfigChannel+0x284>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	f040 8130 	bne.w	8002f0c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x268>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2b09      	cmp	r3, #9
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e01b      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x2a0>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002cec:	2320      	movs	r3, #32
 8002cee:	e005      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x290>
 8002cf0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2b09      	cmp	r3, #9
 8002d04:	bf94      	ite	ls
 8002d06:	2301      	movls	r3, #1
 8002d08:	2300      	movhi	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d079      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x2c0>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	069b      	lsls	r3, r3, #26
 8002d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2a:	e015      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x2ec>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e003      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	069b      	lsls	r3, r3, #26
 8002d54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x30c>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0e9b      	lsrs	r3, r3, #26
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	e017      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x33c>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d88:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e003      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	ea42 0103 	orr.w	r1, r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x362>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	051b      	lsls	r3, r3, #20
 8002dcc:	e018      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x394>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002de6:	2320      	movs	r3, #32
 8002de8:	e003      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e00:	430b      	orrs	r3, r1
 8002e02:	e07e      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x3b4>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	3301      	adds	r3, #1
 8002e18:	069b      	lsls	r3, r3, #26
 8002e1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e1e:	e015      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x3e0>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	e003      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	069b      	lsls	r3, r3, #26
 8002e48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x400>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	e017      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x430>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	61bb      	str	r3, [r7, #24]
  return result;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x45c>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b1e      	subs	r3, #30
 8002ec0:	051b      	lsls	r3, r3, #20
 8002ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	e01b      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x494>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e003      	b.n	8002eec <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	3301      	adds	r3, #1
 8002eee:	f003 021f 	and.w	r2, r3, #31
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b1e      	subs	r3, #30
 8002efa:	051b      	lsls	r3, r3, #20
 8002efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f00:	430b      	orrs	r3, r1
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	4619      	mov	r1, r3
 8002f08:	f7ff fb7e 	bl	8002608 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da77      	bge.n	8003004 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f14:	4840      	ldr	r0, [pc, #256]	; (8003018 <HAL_ADC_ConfigChannel+0x5ac>)
 8002f16:	f7ff fae9 	bl	80024ec <LL_ADC_GetCommonPathInternalCh>
 8002f1a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f1c:	483f      	ldr	r0, [pc, #252]	; (800301c <HAL_ADC_ConfigChannel+0x5b0>)
 8002f1e:	f7ff fc11 	bl	8002744 <LL_ADC_IsEnabled>
 8002f22:	4604      	mov	r4, r0
 8002f24:	483e      	ldr	r0, [pc, #248]	; (8003020 <HAL_ADC_ConfigChannel+0x5b4>)
 8002f26:	f7ff fc0d 	bl	8002744 <LL_ADC_IsEnabled>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4323      	orrs	r3, r4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d155      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a3b      	ldr	r2, [pc, #236]	; (8003024 <HAL_ADC_ConfigChannel+0x5b8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d122      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x516>
 8002f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11d      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a35      	ldr	r2, [pc, #212]	; (8003020 <HAL_ADC_ConfigChannel+0x5b4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d159      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f56:	4619      	mov	r1, r3
 8002f58:	482f      	ldr	r0, [pc, #188]	; (8003018 <HAL_ADC_ConfigChannel+0x5ac>)
 8002f5a:	f7ff fab4 	bl	80024c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f5e:	4b32      	ldr	r3, [pc, #200]	; (8003028 <HAL_ADC_ConfigChannel+0x5bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	4a31      	ldr	r2, [pc, #196]	; (800302c <HAL_ADC_ConfigChannel+0x5c0>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	099b      	lsrs	r3, r3, #6
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f72:	e002      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f9      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f80:	e040      	b.n	8003004 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2a      	ldr	r2, [pc, #168]	; (8003030 <HAL_ADC_ConfigChannel+0x5c4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x544>
 8002f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a21      	ldr	r2, [pc, #132]	; (8003020 <HAL_ADC_ConfigChannel+0x5b4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d131      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	481b      	ldr	r0, [pc, #108]	; (8003018 <HAL_ADC_ConfigChannel+0x5ac>)
 8002faa:	f7ff fa8c 	bl	80024c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fae:	e029      	b.n	8003004 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <HAL_ADC_ConfigChannel+0x5c8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d124      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x598>
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11f      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a15      	ldr	r2, [pc, #84]	; (8003020 <HAL_ADC_ConfigChannel+0x5b4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d11a      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4810      	ldr	r0, [pc, #64]	; (8003018 <HAL_ADC_ConfigChannel+0x5ac>)
 8002fd8:	f7ff fa75 	bl	80024c6 <LL_ADC_SetCommonPathInternalCh>
 8002fdc:	e012      	b.n	8003004 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ff0:	e008      	b.n	8003004 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800300c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003010:	4618      	mov	r0, r3
 8003012:	3784      	adds	r7, #132	; 0x84
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}
 8003018:	40022300 	.word	0x40022300
 800301c:	40022000 	.word	0x40022000
 8003020:	40022100 	.word	0x40022100
 8003024:	cb840000 	.word	0xcb840000
 8003028:	24000008 	.word	0x24000008
 800302c:	053e2d63 	.word	0x053e2d63
 8003030:	bac04000 	.word	0xbac04000
 8003034:	cfb80000 	.word	0xcfb80000

08003038 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003040:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <ADC_ConfigureBoostMode+0x188>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01c      	beq.n	8003086 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800304c:	f002 fcd0 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8003050:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800305a:	d010      	beq.n	800307e <ADC_ConfigureBoostMode+0x46>
 800305c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003060:	d871      	bhi.n	8003146 <ADC_ConfigureBoostMode+0x10e>
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d002      	beq.n	800306e <ADC_ConfigureBoostMode+0x36>
 8003068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800306c:	d16b      	bne.n	8003146 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	0c1b      	lsrs	r3, r3, #16
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	60fb      	str	r3, [r7, #12]
        break;
 800307c:	e066      	b.n	800314c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	60fb      	str	r3, [r7, #12]
        break;
 8003084:	e062      	b.n	800314c <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003086:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800308a:	f003 fc19 	bl	80068c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800308e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003098:	d051      	beq.n	800313e <ADC_ConfigureBoostMode+0x106>
 800309a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800309e:	d854      	bhi.n	800314a <ADC_ConfigureBoostMode+0x112>
 80030a0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030a4:	d047      	beq.n	8003136 <ADC_ConfigureBoostMode+0xfe>
 80030a6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030aa:	d84e      	bhi.n	800314a <ADC_ConfigureBoostMode+0x112>
 80030ac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030b0:	d03d      	beq.n	800312e <ADC_ConfigureBoostMode+0xf6>
 80030b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030b6:	d848      	bhi.n	800314a <ADC_ConfigureBoostMode+0x112>
 80030b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030bc:	d033      	beq.n	8003126 <ADC_ConfigureBoostMode+0xee>
 80030be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030c2:	d842      	bhi.n	800314a <ADC_ConfigureBoostMode+0x112>
 80030c4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030c8:	d029      	beq.n	800311e <ADC_ConfigureBoostMode+0xe6>
 80030ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030ce:	d83c      	bhi.n	800314a <ADC_ConfigureBoostMode+0x112>
 80030d0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030d4:	d01a      	beq.n	800310c <ADC_ConfigureBoostMode+0xd4>
 80030d6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030da:	d836      	bhi.n	800314a <ADC_ConfigureBoostMode+0x112>
 80030dc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030e0:	d014      	beq.n	800310c <ADC_ConfigureBoostMode+0xd4>
 80030e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030e6:	d830      	bhi.n	800314a <ADC_ConfigureBoostMode+0x112>
 80030e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ec:	d00e      	beq.n	800310c <ADC_ConfigureBoostMode+0xd4>
 80030ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f2:	d82a      	bhi.n	800314a <ADC_ConfigureBoostMode+0x112>
 80030f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030f8:	d008      	beq.n	800310c <ADC_ConfigureBoostMode+0xd4>
 80030fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030fe:	d824      	bhi.n	800314a <ADC_ConfigureBoostMode+0x112>
 8003100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003104:	d002      	beq.n	800310c <ADC_ConfigureBoostMode+0xd4>
 8003106:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800310a:	d11e      	bne.n	800314a <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	0c9b      	lsrs	r3, r3, #18
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	60fb      	str	r3, [r7, #12]
        break;
 800311c:	e016      	b.n	800314c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	60fb      	str	r3, [r7, #12]
        break;
 8003124:	e012      	b.n	800314c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	60fb      	str	r3, [r7, #12]
        break;
 800312c:	e00e      	b.n	800314c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	60fb      	str	r3, [r7, #12]
        break;
 8003134:	e00a      	b.n	800314c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	09db      	lsrs	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]
        break;
 800313c:	e006      	b.n	800314c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	60fb      	str	r3, [r7, #12]
        break;
 8003144:	e002      	b.n	800314c <ADC_ConfigureBoostMode+0x114>
        break;
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 800314a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <ADC_ConfigureBoostMode+0x18c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d808      	bhi.n	800316c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003168:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800316a:	e025      	b.n	80031b8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <ADC_ConfigureBoostMode+0x190>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d80a      	bhi.n	800318a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003186:	609a      	str	r2, [r3, #8]
}
 8003188:	e016      	b.n	80031b8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a0f      	ldr	r2, [pc, #60]	; (80031cc <ADC_ConfigureBoostMode+0x194>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d80a      	bhi.n	80031a8 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a4:	609a      	str	r2, [r3, #8]
}
 80031a6:	e007      	b.n	80031b8 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80031b6:	609a      	str	r2, [r3, #8]
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40022300 	.word	0x40022300
 80031c4:	005f5e10 	.word	0x005f5e10
 80031c8:	00bebc20 	.word	0x00bebc20
 80031cc:	017d7840 	.word	0x017d7840

080031d0 <LL_ADC_IsEnabled>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <LL_ADC_IsEnabled+0x18>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <LL_ADC_IsEnabled+0x1a>
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b04      	cmp	r3, #4
 8003208:	d101      	bne.n	800320e <LL_ADC_REG_IsConversionOngoing+0x18>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800321c:	b590      	push	{r4, r7, lr}
 800321e:	b09f      	sub	sp, #124	; 0x7c
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003236:	2302      	movs	r3, #2
 8003238:	e080      	b.n	800333c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003246:	2300      	movs	r3, #0
 8003248:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a3d      	ldr	r2, [pc, #244]	; (8003344 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d102      	bne.n	800325a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003254:	4b3c      	ldr	r3, [pc, #240]	; (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	e001      	b.n	800325e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e05f      	b.n	800333c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ffb9 	bl	80031f6 <LL_ADC_REG_IsConversionOngoing>
 8003284:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ffb3 	bl	80031f6 <LL_ADC_REG_IsConversionOngoing>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d141      	bne.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003298:	2b00      	cmp	r3, #0
 800329a:	d13e      	bne.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800329e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ba:	4822      	ldr	r0, [pc, #136]	; (8003344 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80032bc:	f7ff ff88 	bl	80031d0 <LL_ADC_IsEnabled>
 80032c0:	4604      	mov	r4, r0
 80032c2:	4821      	ldr	r0, [pc, #132]	; (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80032c4:	f7ff ff84 	bl	80031d0 <LL_ADC_IsEnabled>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4323      	orrs	r3, r4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d12e      	bne.n	800332e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	6811      	ldr	r1, [r2, #0]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	6892      	ldr	r2, [r2, #8]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032e8:	e021      	b.n	800332e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80032ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032f6:	4813      	ldr	r0, [pc, #76]	; (8003344 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80032f8:	f7ff ff6a 	bl	80031d0 <LL_ADC_IsEnabled>
 80032fc:	4604      	mov	r4, r0
 80032fe:	4812      	ldr	r0, [pc, #72]	; (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003300:	f7ff ff66 	bl	80031d0 <LL_ADC_IsEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	4323      	orrs	r3, r4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d110      	bne.n	800332e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800330c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003312:	4013      	ands	r3, r2
 8003314:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003316:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003318:	e009      	b.n	800332e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800332c:	e000      	b.n	8003330 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800332e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003338:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800333c:	4618      	mov	r0, r3
 800333e:	377c      	adds	r7, #124	; 0x7c
 8003340:	46bd      	mov	sp, r7
 8003342:	bd90      	pop	{r4, r7, pc}
 8003344:	40022000 	.word	0x40022000
 8003348:	40022100 	.word	0x40022100
 800334c:	40022300 	.word	0x40022300
 8003350:	fffff0e0 	.word	0xfffff0e0

08003354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <__NVIC_SetPriorityGrouping+0x40>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 800337e:	4313      	orrs	r3, r2
 8003380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003382:	4a04      	ldr	r2, [pc, #16]	; (8003394 <__NVIC_SetPriorityGrouping+0x40>)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	60d3      	str	r3, [r2, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00
 8003398:	05fa0000 	.word	0x05fa0000

0800339c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__NVIC_GetPriorityGrouping+0x18>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 0307 	and.w	r3, r3, #7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <__NVIC_EnableIRQ+0x38>)
 80033d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100

080033f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	db0a      	blt.n	800341e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	490c      	ldr	r1, [pc, #48]	; (8003440 <__NVIC_SetPriority+0x4c>)
 800340e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	440b      	add	r3, r1
 8003418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800341c:	e00a      	b.n	8003434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4908      	ldr	r1, [pc, #32]	; (8003444 <__NVIC_SetPriority+0x50>)
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	3b04      	subs	r3, #4
 800342c:	0112      	lsls	r2, r2, #4
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	440b      	add	r3, r1
 8003432:	761a      	strb	r2, [r3, #24]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000e100 	.word	0xe000e100
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f1c3 0307 	rsb	r3, r3, #7
 8003462:	2b04      	cmp	r3, #4
 8003464:	bf28      	it	cs
 8003466:	2304      	movcs	r3, #4
 8003468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3304      	adds	r3, #4
 800346e:	2b06      	cmp	r3, #6
 8003470:	d902      	bls.n	8003478 <NVIC_EncodePriority+0x30>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3b03      	subs	r3, #3
 8003476:	e000      	b.n	800347a <NVIC_EncodePriority+0x32>
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	401a      	ands	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003490:	f04f 31ff 	mov.w	r1, #4294967295
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43d9      	mvns	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	4313      	orrs	r3, r2
         );
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c0:	d301      	bcc.n	80034c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c2:	2301      	movs	r3, #1
 80034c4:	e00f      	b.n	80034e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <SysTick_Config+0x40>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ce:	210f      	movs	r1, #15
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	f7ff ff8e 	bl	80033f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SysTick_Config+0x40>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <SysTick_Config+0x40>)
 80034e0:	2207      	movs	r2, #7
 80034e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	e000e010 	.word	0xe000e010

080034f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff29 	bl	8003354 <__NVIC_SetPriorityGrouping>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	4603      	mov	r3, r0
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003518:	f7ff ff40 	bl	800339c <__NVIC_GetPriorityGrouping>
 800351c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	6978      	ldr	r0, [r7, #20]
 8003524:	f7ff ff90 	bl	8003448 <NVIC_EncodePriority>
 8003528:	4602      	mov	r2, r0
 800352a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff5f 	bl	80033f4 <__NVIC_SetPriority>
}
 8003536:	bf00      	nop
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	4603      	mov	r3, r0
 8003546:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff33 	bl	80033b8 <__NVIC_EnableIRQ>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ffa4 	bl	80034b0 <SysTick_Config>
 8003568:	4603      	mov	r3, r0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b098      	sub	sp, #96	; 0x60
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800357c:	4a84      	ldr	r2, [pc, #528]	; (8003790 <HAL_FDCAN_Init+0x21c>)
 800357e:	f107 030c 	add.w	r3, r7, #12
 8003582:	4611      	mov	r1, r2
 8003584:	224c      	movs	r2, #76	; 0x4c
 8003586:	4618      	mov	r0, r3
 8003588:	f008 f826 	bl	800b5d8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e1ca      	b.n	800392c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a7e      	ldr	r2, [pc, #504]	; (8003794 <HAL_FDCAN_Init+0x220>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d106      	bne.n	80035ae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80035a8:	461a      	mov	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe fbac 	bl	8001d20 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0210 	bic.w	r2, r2, #16
 80035d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035d8:	f7fe ff32 	bl	8002440 <HAL_GetTick>
 80035dc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035de:	e014      	b.n	800360a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80035e0:	f7fe ff2e 	bl	8002440 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b0a      	cmp	r3, #10
 80035ec:	d90d      	bls.n	800360a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e190      	b.n	800392c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b08      	cmp	r3, #8
 8003616:	d0e3      	beq.n	80035e0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003628:	f7fe ff0a 	bl	8002440 <HAL_GetTick>
 800362c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800362e:	e014      	b.n	800365a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003630:	f7fe ff06 	bl	8002440 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b0a      	cmp	r3, #10
 800363c:	d90d      	bls.n	800365a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e168      	b.n	800392c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0e3      	beq.n	8003630 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0202 	orr.w	r2, r2, #2
 8003676:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7c1b      	ldrb	r3, [r3, #16]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d108      	bne.n	8003692 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	619a      	str	r2, [r3, #24]
 8003690:	e007      	b.n	80036a2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7c5b      	ldrb	r3, [r3, #17]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b8:	619a      	str	r2, [r3, #24]
 80036ba:	e007      	b.n	80036cc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7c9b      	ldrb	r3, [r3, #18]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d108      	bne.n	80036e6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036e2:	619a      	str	r2, [r3, #24]
 80036e4:	e007      	b.n	80036f6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036f4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800371a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0210 	bic.w	r2, r2, #16
 800372a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d108      	bne.n	8003746 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0204 	orr.w	r2, r2, #4
 8003742:	619a      	str	r2, [r3, #24]
 8003744:	e030      	b.n	80037a8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02c      	beq.n	80037a8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d020      	beq.n	8003798 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003764:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0210 	orr.w	r2, r2, #16
 8003774:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d114      	bne.n	80037a8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699a      	ldr	r2, [r3, #24]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0220 	orr.w	r2, r2, #32
 800378c:	619a      	str	r2, [r3, #24]
 800378e:	e00b      	b.n	80037a8 <HAL_FDCAN_Init+0x234>
 8003790:	0800b62c 	.word	0x0800b62c
 8003794:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0220 	orr.w	r2, r2, #32
 80037a6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037b8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037c0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037d0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037d2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037dc:	d115      	bne.n	800380a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	3b01      	subs	r3, #1
 80037ea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80037ec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	3b01      	subs	r3, #1
 80037f4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80037f6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	3b01      	subs	r3, #1
 8003800:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003806:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003808:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003830:	4413      	add	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800383e:	f023 0107 	bic.w	r1, r3, #7
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800384c:	4413      	add	r3, r2
 800384e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d012      	beq.n	800388a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800386c:	f023 0107 	bic.w	r1, r3, #7
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800387a:	4413      	add	r3, r2
 800387c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800389a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038a8:	4413      	add	r3, r2
 80038aa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80038ae:	011a      	lsls	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d013      	beq.n	80038ea <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80038ca:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038d8:	4413      	add	r3, r2
 80038da:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80038de:	021a      	lsls	r2, r3, #8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a11      	ldr	r2, [pc, #68]	; (8003934 <HAL_FDCAN_Init+0x3c0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d107      	bne.n	8003904 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f022 0203 	bic.w	r2, r2, #3
 8003902:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fd89 	bl	8004434 <FDCAN_CalcultateRamBlockAddresses>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003928:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800392c:	4618      	mov	r0, r3
 800392e:	3760      	adds	r7, #96	; 0x60
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	4000a000 	.word	0x4000a000

08003938 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003948:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d002      	beq.n	8003956 <HAL_FDCAN_ConfigFilter+0x1e>
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d157      	bne.n	8003a06 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d12b      	bne.n	80039b6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b07      	cmp	r3, #7
 8003964:	d10d      	bne.n	8003982 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003972:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003978:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800397a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e00e      	b.n	80039a0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800398e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003996:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e025      	b.n	8003a02 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	075a      	lsls	r2, r3, #29
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	d103      	bne.n	80039d4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e006      	b.n	80039e2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	079a      	lsls	r2, r3, #30
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3304      	adds	r3, #4
 80039fa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e008      	b.n	8003a18 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a0c:	f043 0202 	orr.w	r2, r3, #2
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d111      	bne.n	8003a5c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e008      	b.n	8003a6e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b08b      	sub	sp, #44	; 0x2c
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a94:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003a96:	7efb      	ldrb	r3, [r7, #27]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	f040 814b 	bne.w	8003d34 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d14d      	bne.n	8003b40 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003aac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aba:	f043 0220 	orr.w	r2, r3, #32
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e13e      	b.n	8003d46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ade:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e12c      	b.n	8003d46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003af4:	0e1b      	lsrs	r3, r3, #24
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d10b      	bne.n	8003b16 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b06:	0fdb      	lsrs	r3, r3, #31
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b10:	d101      	bne.n	8003b16 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	69f9      	ldr	r1, [r7, #28]
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	e069      	b.n	8003c14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b41      	cmp	r3, #65	; 0x41
 8003b44:	d14d      	bne.n	8003be2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0ed      	b.n	8003d46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e0db      	b.n	8003d46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b96:	0e1b      	lsrs	r3, r3, #24
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba8:	0fdb      	lsrs	r3, r3, #31
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bb2:	d101      	bne.n	8003bb8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	69f9      	ldr	r1, [r7, #28]
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
 8003be0:	e018      	b.n	8003c14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d309      	bcc.n	8003c00 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0a2      	b.n	8003d46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d107      	bne.n	8003c38 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	0c9b      	lsrs	r3, r3, #18
 8003c2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e005      	b.n	8003c44 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	3304      	adds	r3, #4
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	0fda      	lsrs	r2, r3, #31
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	3304      	adds	r3, #4
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	e00a      	b.n	8003cce <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	441a      	add	r2, r3
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	440b      	add	r3, r1
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	4a1f      	ldr	r2, [pc, #124]	; (8003d54 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003cd6:	5cd3      	ldrb	r3, [r2, r3]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d3eb      	bcc.n	8003cb8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	d105      	bne.n	8003cf2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003cf0:	e01e      	b.n	8003d30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b41      	cmp	r3, #65	; 0x41
 8003cf6:	d105      	bne.n	8003d04 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003d02:	e015      	b.n	8003d30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b1f      	cmp	r3, #31
 8003d08:	d808      	bhi.n	8003d1c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2101      	movs	r1, #1
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	fa01 f202 	lsl.w	r2, r1, r2
 8003d16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003d1a:	e009      	b.n	8003d30 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 021f 	and.w	r2, r3, #31
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e008      	b.n	8003d46 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d3a:	f043 0208 	orr.w	r2, r3, #8
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	372c      	adds	r7, #44	; 0x2c
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	0800b688 	.word	0x0800b688

08003d58 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003d6a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d002      	beq.n	8003d78 <HAL_FDCAN_ActivateNotification+0x20>
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d155      	bne.n	8003e24 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d96:	e014      	b.n	8003dc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4013      	ands	r3, r2
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d108      	bne.n	8003dba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0202 	orr.w	r2, r2, #2
 8003db6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003db8:	e003      	b.n	8003dc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_FDCAN_ActivateNotification+0xec>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	6553      	str	r3, [r2, #84]	; 0x54
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	0f9b      	lsrs	r3, r3, #30
 8003e1a:	490b      	ldr	r1, [pc, #44]	; (8003e48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e008      	b.n	8003e36 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e2a:	f043 0202 	orr.w	r2, r3, #2
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	3fcfffff 	.word	0x3fcfffff
 8003e48:	4000a800 	.word	0x4000a800

08003e4c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b092      	sub	sp, #72	; 0x48
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003e54:	4b90      	ldr	r3, [pc, #576]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	079b      	lsls	r3, r3, #30
 8003e5a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003e5c:	4b8e      	ldr	r3, [pc, #568]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	079b      	lsls	r3, r3, #30
 8003e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e64:	4013      	ands	r3, r2
 8003e66:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e72:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e94:	4013      	ands	r3, r2
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eac:	4013      	ands	r3, r2
 8003eae:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003edc:	4013      	ands	r3, r2
 8003ede:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d011      	beq.n	8003f12 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f04:	651a      	str	r2, [r3, #80]	; 0x50
 8003f06:	4b64      	ldr	r3, [pc, #400]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fa45 	bl	800439c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01e      	beq.n	8003f5e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d017      	beq.n	8003f5e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f42:	4013      	ands	r3, r2
 8003f44:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f4e:	651a      	str	r2, [r3, #80]	; 0x50
 8003f50:	4b51      	ldr	r3, [pc, #324]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fa00 	bl	800435e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00d      	beq.n	8003f80 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f6a:	4b4c      	ldr	r3, [pc, #304]	; (800409c <HAL_FDCAN_IRQHandler+0x250>)
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	6513      	str	r3, [r2, #80]	; 0x50
 8003f70:	4a49      	ldr	r2, [pc, #292]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f74:	0f9b      	lsrs	r3, r3, #30
 8003f76:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003f78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f9c4 	bl	8004308 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f8c:	4b43      	ldr	r3, [pc, #268]	; (800409c <HAL_FDCAN_IRQHandler+0x250>)
 8003f8e:	400b      	ands	r3, r1
 8003f90:	6513      	str	r3, [r2, #80]	; 0x50
 8003f92:	4a41      	ldr	r2, [pc, #260]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f96:	0f9b      	lsrs	r3, r3, #30
 8003f98:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f9be 	bl	800431e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fae:	4b3b      	ldr	r3, [pc, #236]	; (800409c <HAL_FDCAN_IRQHandler+0x250>)
 8003fb0:	400b      	ands	r3, r1
 8003fb2:	6513      	str	r3, [r2, #80]	; 0x50
 8003fb4:	4a38      	ldr	r2, [pc, #224]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 8003fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb8:	0f9b      	lsrs	r3, r3, #30
 8003fba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003fbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fc fe08 	bl	8000bd4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <HAL_FDCAN_IRQHandler+0x250>)
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	6513      	str	r3, [r2, #80]	; 0x50
 8003fd6:	4a30      	ldr	r2, [pc, #192]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	0f9b      	lsrs	r3, r3, #30
 8003fdc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003fde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fc fe1b 	bl	8000c1c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d011      	beq.n	8004018 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800400a:	651a      	str	r2, [r3, #80]	; 0x50
 800400c:	4b22      	ldr	r3, [pc, #136]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f98e 	bl	8004334 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01e      	beq.n	8004064 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004030:	2b00      	cmp	r3, #0
 8004032:	d017      	beq.n	8004064 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004048:	4013      	ands	r3, r2
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004054:	651a      	str	r2, [r3, #80]	; 0x50
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 8004058:	2200      	movs	r2, #0
 800405a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800405c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f972 	bl	8004348 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00f      	beq.n	80040a0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004088:	651a      	str	r2, [r3, #80]	; 0x50
 800408a:	4b03      	ldr	r3, [pc, #12]	; (8004098 <HAL_FDCAN_IRQHandler+0x24c>)
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fc fde7 	bl	8000c64 <HAL_FDCAN_RxBufferNewMessageCallback>
 8004096:	e003      	b.n	80040a0 <HAL_FDCAN_IRQHandler+0x254>
 8004098:	4000a800 	.word	0x4000a800
 800409c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040c4:	651a      	str	r2, [r3, #80]	; 0x50
 80040c6:	4b8d      	ldr	r3, [pc, #564]	; (80042fc <HAL_FDCAN_IRQHandler+0x4b0>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f951 	bl	8004374 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d011      	beq.n	8004104 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80040f6:	651a      	str	r2, [r3, #80]	; 0x50
 80040f8:	4b80      	ldr	r3, [pc, #512]	; (80042fc <HAL_FDCAN_IRQHandler+0x4b0>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f942 	bl	8004388 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00f      	beq.n	8004140 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004128:	651a      	str	r2, [r3, #80]	; 0x50
 800412a:	4b74      	ldr	r3, [pc, #464]	; (80042fc <HAL_FDCAN_IRQHandler+0x4b0>)
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004136:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414c:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <HAL_FDCAN_IRQHandler+0x4b4>)
 800414e:	400b      	ands	r3, r1
 8004150:	6513      	str	r3, [r2, #80]	; 0x50
 8004152:	4a6a      	ldr	r2, [pc, #424]	; (80042fc <HAL_FDCAN_IRQHandler+0x4b0>)
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	0f9b      	lsrs	r3, r3, #30
 8004158:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800415a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f931 	bl	80043c4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004164:	2b00      	cmp	r3, #0
 8004166:	d011      	beq.n	800418c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800416e:	4b64      	ldr	r3, [pc, #400]	; (8004300 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004170:	400b      	ands	r3, r1
 8004172:	6513      	str	r3, [r2, #80]	; 0x50
 8004174:	4a61      	ldr	r2, [pc, #388]	; (80042fc <HAL_FDCAN_IRQHandler+0x4b0>)
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	0f9b      	lsrs	r3, r3, #30
 800417a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a5c      	ldr	r2, [pc, #368]	; (8004304 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	f040 80a6 	bne.w	80042e4 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 809e 	beq.w	80042e4 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	4013      	ands	r3, r2
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041ca:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	6a3a      	ldr	r2, [r7, #32]
 80041d4:	4013      	ands	r3, r2
 80041d6:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80041e2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80041fa:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004212:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4013      	ands	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800422e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8d2 	bl	80043da <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004244:	6a39      	ldr	r1, [r7, #32]
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8d2 	bl	80043f0 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01b      	beq.n	8004292 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d014      	beq.n	8004292 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	b29b      	uxth	r3, r3
 8004272:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800427e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2240      	movs	r2, #64	; 0x40
 8004286:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	6939      	ldr	r1, [r7, #16]
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f8ba 	bl	8004406 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8bb 	bl	800441e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f85e 	bl	80043b0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80042f4:	bf00      	nop
 80042f6:	3748      	adds	r7, #72	; 0x48
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	4000a800 	.word	0x4000a800
 8004300:	3fcfffff 	.word	0x3fcfffff
 8004304:	4000a000 	.word	0x4000a000

08004308 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800444a:	4ba7      	ldr	r3, [pc, #668]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800444c:	4013      	ands	r3, r2
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0091      	lsls	r1, r2, #2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	430b      	orrs	r3, r1
 8004458:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004464:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	041a      	lsls	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4413      	add	r3, r2
 8004480:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800448a:	4b97      	ldr	r3, [pc, #604]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800448c:	4013      	ands	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	0091      	lsls	r1, r2, #2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	430b      	orrs	r3, r1
 8004498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	041a      	lsls	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80044cc:	4b86      	ldr	r3, [pc, #536]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	0091      	lsls	r1, r2, #2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	430b      	orrs	r3, r1
 80044da:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044e6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	041a      	lsls	r2, r3, #16
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	4413      	add	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004514:	4b74      	ldr	r3, [pc, #464]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	0091      	lsls	r1, r2, #2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	430b      	orrs	r3, r1
 8004522:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800452e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004536:	041a      	lsls	r2, r3, #16
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800455c:	4b62      	ldr	r3, [pc, #392]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800455e:	4013      	ands	r3, r2
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	0091      	lsls	r1, r2, #2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	430b      	orrs	r3, r1
 800456a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4413      	add	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004588:	4b57      	ldr	r3, [pc, #348]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800458a:	4013      	ands	r3, r2
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	0091      	lsls	r1, r2, #2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	430b      	orrs	r3, r1
 8004596:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045a2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	041a      	lsls	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	4413      	add	r3, r2
 80045c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	0091      	lsls	r1, r2, #2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	430b      	orrs	r3, r1
 80045d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045e4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	041a      	lsls	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004600:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004608:	061a      	lsls	r2, r3, #24
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004618:	4b34      	ldr	r3, [pc, #208]	; (80046ec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800461a:	4413      	add	r3, r2
 800461c:	009a      	lsls	r2, r3, #2
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d915      	bls.n	8004710 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80046e4:	e006      	b.n	80046f4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80046e6:	bf00      	nop
 80046e8:	ffff0003 	.word	0xffff0003
 80046ec:	10002b00 	.word	0x10002b00
 80046f0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2203      	movs	r2, #3
 8004708:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e010      	b.n	8004732 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e005      	b.n	8004724 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3304      	adds	r3, #4
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d3f3      	bcc.n	8004718 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800474e:	4b89      	ldr	r3, [pc, #548]	; (8004974 <HAL_GPIO_Init+0x234>)
 8004750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004752:	e194      	b.n	8004a7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2101      	movs	r1, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8186 	beq.w	8004a78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d005      	beq.n	8004784 <HAL_GPIO_Init+0x44>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d130      	bne.n	80047e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	2203      	movs	r2, #3
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047ba:	2201      	movs	r2, #1
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	f003 0201 	and.w	r2, r3, #1
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d017      	beq.n	8004822 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	2203      	movs	r2, #3
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d123      	bne.n	8004876 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	08da      	lsrs	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	220f      	movs	r2, #15
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	08da      	lsrs	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3208      	adds	r2, #8
 8004870:	69b9      	ldr	r1, [r7, #24]
 8004872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	2203      	movs	r2, #3
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0203 	and.w	r2, r3, #3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80e0 	beq.w	8004a78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b8:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <HAL_GPIO_Init+0x238>)
 80048ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80048be:	4a2e      	ldr	r2, [pc, #184]	; (8004978 <HAL_GPIO_Init+0x238>)
 80048c0:	f043 0302 	orr.w	r3, r3, #2
 80048c4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80048c8:	4b2b      	ldr	r3, [pc, #172]	; (8004978 <HAL_GPIO_Init+0x238>)
 80048ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d6:	4a29      	ldr	r2, [pc, #164]	; (800497c <HAL_GPIO_Init+0x23c>)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	3302      	adds	r3, #2
 80048de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a20      	ldr	r2, [pc, #128]	; (8004980 <HAL_GPIO_Init+0x240>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d052      	beq.n	80049a8 <HAL_GPIO_Init+0x268>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <HAL_GPIO_Init+0x244>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d031      	beq.n	800496e <HAL_GPIO_Init+0x22e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <HAL_GPIO_Init+0x248>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02b      	beq.n	800496a <HAL_GPIO_Init+0x22a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1d      	ldr	r2, [pc, #116]	; (800498c <HAL_GPIO_Init+0x24c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d025      	beq.n	8004966 <HAL_GPIO_Init+0x226>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <HAL_GPIO_Init+0x250>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01f      	beq.n	8004962 <HAL_GPIO_Init+0x222>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <HAL_GPIO_Init+0x254>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d019      	beq.n	800495e <HAL_GPIO_Init+0x21e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_GPIO_Init+0x258>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <HAL_GPIO_Init+0x21a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <HAL_GPIO_Init+0x25c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00d      	beq.n	8004956 <HAL_GPIO_Init+0x216>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <HAL_GPIO_Init+0x260>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <HAL_GPIO_Init+0x212>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <HAL_GPIO_Init+0x264>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_GPIO_Init+0x20e>
 800494a:	2309      	movs	r3, #9
 800494c:	e02d      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 800494e:	230a      	movs	r3, #10
 8004950:	e02b      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 8004952:	2308      	movs	r3, #8
 8004954:	e029      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 8004956:	2307      	movs	r3, #7
 8004958:	e027      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 800495a:	2306      	movs	r3, #6
 800495c:	e025      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 800495e:	2305      	movs	r3, #5
 8004960:	e023      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 8004962:	2304      	movs	r3, #4
 8004964:	e021      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 8004966:	2303      	movs	r3, #3
 8004968:	e01f      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 800496a:	2302      	movs	r3, #2
 800496c:	e01d      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 800496e:	2301      	movs	r3, #1
 8004970:	e01b      	b.n	80049aa <HAL_GPIO_Init+0x26a>
 8004972:	bf00      	nop
 8004974:	58000080 	.word	0x58000080
 8004978:	58024400 	.word	0x58024400
 800497c:	58000400 	.word	0x58000400
 8004980:	58020000 	.word	0x58020000
 8004984:	58020400 	.word	0x58020400
 8004988:	58020800 	.word	0x58020800
 800498c:	58020c00 	.word	0x58020c00
 8004990:	58021000 	.word	0x58021000
 8004994:	58021400 	.word	0x58021400
 8004998:	58021800 	.word	0x58021800
 800499c:	58021c00 	.word	0x58021c00
 80049a0:	58022000 	.word	0x58022000
 80049a4:	58022400 	.word	0x58022400
 80049a8:	2300      	movs	r3, #0
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	f002 0203 	and.w	r2, r2, #3
 80049b0:	0092      	lsls	r2, r2, #2
 80049b2:	4093      	lsls	r3, r2
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049ba:	4938      	ldr	r1, [pc, #224]	; (8004a9c <HAL_GPIO_Init+0x35c>)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	089b      	lsrs	r3, r3, #2
 80049c0:	3302      	adds	r3, #2
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4013      	ands	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f47f ae63 	bne.w	8004754 <HAL_GPIO_Init+0x14>
  }
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	3724      	adds	r7, #36	; 0x24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	58000400 	.word	0x58000400

08004aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	807b      	strh	r3, [r7, #2]
 8004aac:	4613      	mov	r3, r2
 8004aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ab0:	787b      	ldrb	r3, [r7, #1]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004abc:	e003      	b.n	8004ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004abe:	887b      	ldrh	r3, [r7, #2]
 8004ac0:	041a      	lsls	r2, r3, #16
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	619a      	str	r2, [r3, #24]
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004adc:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	2b06      	cmp	r3, #6
 8004ae6:	d00a      	beq.n	8004afe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ae8:	4b26      	ldr	r3, [pc, #152]	; (8004b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d001      	beq.n	8004afa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e040      	b.n	8004b7c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e03e      	b.n	8004b7c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004afe:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004b06:	491f      	ldr	r1, [pc, #124]	; (8004b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b0e:	f7fd fc97 	bl	8002440 <HAL_GetTick>
 8004b12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b14:	e009      	b.n	8004b2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b16:	f7fd fc93 	bl	8002440 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b24:	d901      	bls.n	8004b2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e028      	b.n	8004b7c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b36:	d1ee      	bne.n	8004b16 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b1e      	cmp	r3, #30
 8004b3c:	d008      	beq.n	8004b50 <HAL_PWREx_ConfigSupply+0x7c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b2e      	cmp	r3, #46	; 0x2e
 8004b42:	d005      	beq.n	8004b50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b1d      	cmp	r3, #29
 8004b48:	d002      	beq.n	8004b50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b2d      	cmp	r3, #45	; 0x2d
 8004b4e:	d114      	bne.n	8004b7a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004b50:	f7fd fc76 	bl	8002440 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b56:	e009      	b.n	8004b6c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b58:	f7fd fc72 	bl	8002440 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b66:	d901      	bls.n	8004b6c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e007      	b.n	8004b7c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d1ee      	bne.n	8004b58 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	58024800 	.word	0x58024800

08004b88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08c      	sub	sp, #48	; 0x30
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e3f3      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80b3 	beq.w	8004d0e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba8:	4b9e      	ldr	r3, [pc, #632]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bb2:	4b9c      	ldr	r3, [pc, #624]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d007      	beq.n	8004bce <HAL_RCC_OscConfig+0x46>
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	2b18      	cmp	r3, #24
 8004bc2:	d112      	bne.n	8004bea <HAL_RCC_OscConfig+0x62>
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d10d      	bne.n	8004bea <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bce:	4b95      	ldr	r3, [pc, #596]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8098 	beq.w	8004d0c <HAL_RCC_OscConfig+0x184>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f040 8093 	bne.w	8004d0c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e3cb      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x7a>
 8004bf4:	4b8b      	ldr	r3, [pc, #556]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a8a      	ldr	r2, [pc, #552]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	e058      	b.n	8004cb4 <HAL_RCC_OscConfig+0x12c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d112      	bne.n	8004c30 <HAL_RCC_OscConfig+0xa8>
 8004c0a:	4b86      	ldr	r3, [pc, #536]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a85      	ldr	r2, [pc, #532]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	4b83      	ldr	r3, [pc, #524]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a82      	ldr	r2, [pc, #520]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b80      	ldr	r3, [pc, #512]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a7f      	ldr	r2, [pc, #508]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e041      	b.n	8004cb4 <HAL_RCC_OscConfig+0x12c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c38:	d112      	bne.n	8004c60 <HAL_RCC_OscConfig+0xd8>
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a79      	ldr	r2, [pc, #484]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b77      	ldr	r3, [pc, #476]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a76      	ldr	r2, [pc, #472]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b74      	ldr	r3, [pc, #464]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a73      	ldr	r2, [pc, #460]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e029      	b.n	8004cb4 <HAL_RCC_OscConfig+0x12c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004c68:	d112      	bne.n	8004c90 <HAL_RCC_OscConfig+0x108>
 8004c6a:	4b6e      	ldr	r3, [pc, #440]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a6d      	ldr	r2, [pc, #436]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	4b6b      	ldr	r3, [pc, #428]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6a      	ldr	r2, [pc, #424]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b68      	ldr	r3, [pc, #416]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a67      	ldr	r2, [pc, #412]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e011      	b.n	8004cb4 <HAL_RCC_OscConfig+0x12c>
 8004c90:	4b64      	ldr	r3, [pc, #400]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a63      	ldr	r2, [pc, #396]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a60      	ldr	r2, [pc, #384]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b5e      	ldr	r3, [pc, #376]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a5d      	ldr	r2, [pc, #372]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004cae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d013      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fd fbc0 	bl	8002440 <HAL_GetTick>
 8004cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fd fbbc 	bl	8002440 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	; 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e355      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cd6:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x13c>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fd fbac 	bl	8002440 <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fd fba8 	bl	8002440 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	; 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e341      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cfe:	4b49      	ldr	r3, [pc, #292]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x164>
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 808c 	beq.w	8004e34 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1c:	4b41      	ldr	r3, [pc, #260]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d26:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <HAL_RCC_OscConfig+0x1ba>
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2b18      	cmp	r3, #24
 8004d36:	d137      	bne.n	8004da8 <HAL_RCC_OscConfig+0x220>
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d132      	bne.n	8004da8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d42:	4b38      	ldr	r3, [pc, #224]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_RCC_OscConfig+0x1d2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e313      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d5a:	4b32      	ldr	r3, [pc, #200]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 0219 	bic.w	r2, r3, #25
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	492f      	ldr	r1, [pc, #188]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d6c:	f7fd fb68 	bl	8002440 <HAL_GetTick>
 8004d70:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d74:	f7fd fb64 	bl	8002440 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e2fd      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d86:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d92:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	061b      	lsls	r3, r3, #24
 8004da0:	4920      	ldr	r1, [pc, #128]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da6:	e045      	b.n	8004e34 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d026      	beq.n	8004dfe <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f023 0219 	bic.w	r2, r3, #25
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4919      	ldr	r1, [pc, #100]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fd fb3d 	bl	8002440 <HAL_GetTick>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dca:	f7fd fb39 	bl	8002440 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e2d2      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	061b      	lsls	r3, r3, #24
 8004df6:	490b      	ldr	r1, [pc, #44]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	604b      	str	r3, [r1, #4]
 8004dfc:	e01a      	b.n	8004e34 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dfe:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <HAL_RCC_OscConfig+0x29c>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fd fb19 	bl	8002440 <HAL_GetTick>
 8004e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e10:	e00a      	b.n	8004e28 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e12:	f7fd fb15 	bl	8002440 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d903      	bls.n	8004e28 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e2ae      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
 8004e24:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e28:	4b99      	ldr	r3, [pc, #612]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1ee      	bne.n	8004e12 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d06a      	beq.n	8004f16 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e40:	4b93      	ldr	r3, [pc, #588]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e4a:	4b91      	ldr	r3, [pc, #580]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d007      	beq.n	8004e66 <HAL_RCC_OscConfig+0x2de>
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b18      	cmp	r3, #24
 8004e5a:	d11b      	bne.n	8004e94 <HAL_RCC_OscConfig+0x30c>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d116      	bne.n	8004e94 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e66:	4b8a      	ldr	r3, [pc, #552]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x2f6>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e281      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e7e:	4b84      	ldr	r3, [pc, #528]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	061b      	lsls	r3, r3, #24
 8004e8c:	4980      	ldr	r1, [pc, #512]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e92:	e040      	b.n	8004f16 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d023      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e9c:	4b7c      	ldr	r3, [pc, #496]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a7b      	ldr	r2, [pc, #492]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fd faca 	bl	8002440 <HAL_GetTick>
 8004eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004eb0:	f7fd fac6 	bl	8002440 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e25f      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ec2:	4b73      	ldr	r3, [pc, #460]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ece:	4b70      	ldr	r3, [pc, #448]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	061b      	lsls	r3, r3, #24
 8004edc:	496c      	ldr	r1, [pc, #432]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60cb      	str	r3, [r1, #12]
 8004ee2:	e018      	b.n	8004f16 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ee4:	4b6a      	ldr	r3, [pc, #424]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a69      	ldr	r2, [pc, #420]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fd faa6 	bl	8002440 <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ef8:	f7fd faa2 	bl	8002440 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e23b      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f0a:	4b61      	ldr	r3, [pc, #388]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d036      	beq.n	8004f90 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d019      	beq.n	8004f5e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2a:	4b59      	ldr	r3, [pc, #356]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2e:	4a58      	ldr	r2, [pc, #352]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f36:	f7fd fa83 	bl	8002440 <HAL_GetTick>
 8004f3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3e:	f7fd fa7f 	bl	8002440 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e218      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f50:	4b4f      	ldr	r3, [pc, #316]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0x3b6>
 8004f5c:	e018      	b.n	8004f90 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5e:	4b4c      	ldr	r3, [pc, #304]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f62:	4a4b      	ldr	r2, [pc, #300]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6a:	f7fd fa69 	bl	8002440 <HAL_GetTick>
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f72:	f7fd fa65 	bl	8002440 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e1fe      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f84:	4b42      	ldr	r3, [pc, #264]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f0      	bne.n	8004f72 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d036      	beq.n	800500a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d019      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a39      	ldr	r2, [pc, #228]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fb0:	f7fd fa46 	bl	8002440 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004fb8:	f7fd fa42 	bl	8002440 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e1db      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fca:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x430>
 8004fd6:	e018      	b.n	800500a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fd8:	4b2d      	ldr	r3, [pc, #180]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8004fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fe4:	f7fd fa2c 	bl	8002440 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004fec:	f7fd fa28 	bl	8002440 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e1c1      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ffe:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 80af 	beq.w	8005176 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCC_OscConfig+0x50c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <HAL_RCC_OscConfig+0x50c>)
 800501e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005024:	f7fd fa0c 	bl	8002440 <HAL_GetTick>
 8005028:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800502c:	f7fd fa08 	bl	8002440 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	; 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e1a1      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800503e:	4b15      	ldr	r3, [pc, #84]	; (8005094 <HAL_RCC_OscConfig+0x50c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d106      	bne.n	8005060 <HAL_RCC_OscConfig+0x4d8>
 8005052:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	4a0e      	ldr	r2, [pc, #56]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	6713      	str	r3, [r2, #112]	; 0x70
 800505e:	e05b      	b.n	8005118 <HAL_RCC_OscConfig+0x590>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d117      	bne.n	8005098 <HAL_RCC_OscConfig+0x510>
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	4a08      	ldr	r2, [pc, #32]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	6713      	str	r3, [r2, #112]	; 0x70
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	4a05      	ldr	r2, [pc, #20]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 800507a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507e:	6713      	str	r3, [r2, #112]	; 0x70
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	4a02      	ldr	r2, [pc, #8]	; (8005090 <HAL_RCC_OscConfig+0x508>)
 8005086:	f023 0304 	bic.w	r3, r3, #4
 800508a:	6713      	str	r3, [r2, #112]	; 0x70
 800508c:	e044      	b.n	8005118 <HAL_RCC_OscConfig+0x590>
 800508e:	bf00      	nop
 8005090:	58024400 	.word	0x58024400
 8005094:	58024800 	.word	0x58024800
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b05      	cmp	r3, #5
 800509e:	d112      	bne.n	80050c6 <HAL_RCC_OscConfig+0x53e>
 80050a0:	4b95      	ldr	r3, [pc, #596]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a4:	4a94      	ldr	r2, [pc, #592]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050a6:	f043 0304 	orr.w	r3, r3, #4
 80050aa:	6713      	str	r3, [r2, #112]	; 0x70
 80050ac:	4b92      	ldr	r3, [pc, #584]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b0:	4a91      	ldr	r2, [pc, #580]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b6:	6713      	str	r3, [r2, #112]	; 0x70
 80050b8:	4b8f      	ldr	r3, [pc, #572]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	4a8e      	ldr	r2, [pc, #568]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	6713      	str	r3, [r2, #112]	; 0x70
 80050c4:	e028      	b.n	8005118 <HAL_RCC_OscConfig+0x590>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b85      	cmp	r3, #133	; 0x85
 80050cc:	d112      	bne.n	80050f4 <HAL_RCC_OscConfig+0x56c>
 80050ce:	4b8a      	ldr	r3, [pc, #552]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	4a89      	ldr	r2, [pc, #548]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050d4:	f043 0304 	orr.w	r3, r3, #4
 80050d8:	6713      	str	r3, [r2, #112]	; 0x70
 80050da:	4b87      	ldr	r3, [pc, #540]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	4a86      	ldr	r2, [pc, #536]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e4:	6713      	str	r3, [r2, #112]	; 0x70
 80050e6:	4b84      	ldr	r3, [pc, #528]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a83      	ldr	r2, [pc, #524]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
 80050f2:	e011      	b.n	8005118 <HAL_RCC_OscConfig+0x590>
 80050f4:	4b80      	ldr	r3, [pc, #512]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	4a7f      	ldr	r2, [pc, #508]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005100:	4b7d      	ldr	r3, [pc, #500]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a7c      	ldr	r2, [pc, #496]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005106:	f023 0304 	bic.w	r3, r3, #4
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
 800510c:	4b7a      	ldr	r3, [pc, #488]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	4a79      	ldr	r2, [pc, #484]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fd f98e 	bl	8002440 <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005126:	e00a      	b.n	800513e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7fd f98a 	bl	8002440 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e121      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800513e:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0ee      	beq.n	8005128 <HAL_RCC_OscConfig+0x5a0>
 800514a:	e014      	b.n	8005176 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fd f978 	bl	8002440 <HAL_GetTick>
 8005150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005154:	f7fd f974 	bl	8002440 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e10b      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800516a:	4b63      	ldr	r3, [pc, #396]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1ee      	bne.n	8005154 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8100 	beq.w	8005380 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005180:	4b5d      	ldr	r3, [pc, #372]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005188:	2b18      	cmp	r3, #24
 800518a:	f000 80bb 	beq.w	8005304 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	2b02      	cmp	r3, #2
 8005194:	f040 8095 	bne.w	80052c2 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b57      	ldr	r3, [pc, #348]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a56      	ldr	r2, [pc, #344]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800519e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fd f94c 	bl	8002440 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fd f948 	bl	8002440 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0e1      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051be:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ca:	4b4b      	ldr	r3, [pc, #300]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80051cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ce:	4b4b      	ldr	r3, [pc, #300]	; (80052fc <HAL_RCC_OscConfig+0x774>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051da:	0112      	lsls	r2, r2, #4
 80051dc:	430a      	orrs	r2, r1
 80051de:	4946      	ldr	r1, [pc, #280]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	628b      	str	r3, [r1, #40]	; 0x28
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	3b01      	subs	r3, #1
 80051ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	3b01      	subs	r3, #1
 80051f4:	025b      	lsls	r3, r3, #9
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	3b01      	subs	r3, #1
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	3b01      	subs	r3, #1
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005214:	4938      	ldr	r1, [pc, #224]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005216:	4313      	orrs	r3, r2
 8005218:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800521a:	4b37      	ldr	r3, [pc, #220]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a36      	ldr	r2, [pc, #216]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005226:	4b34      	ldr	r3, [pc, #208]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800522a:	4b35      	ldr	r3, [pc, #212]	; (8005300 <HAL_RCC_OscConfig+0x778>)
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005232:	00d2      	lsls	r2, r2, #3
 8005234:	4930      	ldr	r1, [pc, #192]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005236:	4313      	orrs	r3, r2
 8005238:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800523a:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	f023 020c 	bic.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	492c      	ldr	r1, [pc, #176]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005248:	4313      	orrs	r3, r2
 800524a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800524c:	4b2a      	ldr	r3, [pc, #168]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	f023 0202 	bic.w	r2, r3, #2
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	4927      	ldr	r1, [pc, #156]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800525a:	4313      	orrs	r3, r2
 800525c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800525e:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	4a25      	ldr	r2, [pc, #148]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800526a:	4b23      	ldr	r3, [pc, #140]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005276:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 800527c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005280:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005282:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800528e:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a19      	ldr	r2, [pc, #100]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 8005294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529a:	f7fd f8d1 	bl	8002440 <HAL_GetTick>
 800529e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a2:	f7fd f8cd 	bl	8002440 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e066      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x71a>
 80052c0:	e05e      	b.n	8005380 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80052c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ce:	f7fd f8b7 	bl	8002440 <HAL_GetTick>
 80052d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d6:	f7fd f8b3 	bl	8002440 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e04c      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052e8:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f0      	bne.n	80052d6 <HAL_RCC_OscConfig+0x74e>
 80052f4:	e044      	b.n	8005380 <HAL_RCC_OscConfig+0x7f8>
 80052f6:	bf00      	nop
 80052f8:	58024400 	.word	0x58024400
 80052fc:	fffffc0c 	.word	0xfffffc0c
 8005300:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005304:	4b21      	ldr	r3, [pc, #132]	; (800538c <HAL_RCC_OscConfig+0x804>)
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800530a:	4b20      	ldr	r3, [pc, #128]	; (800538c <HAL_RCC_OscConfig+0x804>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2b01      	cmp	r3, #1
 8005316:	d031      	beq.n	800537c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f003 0203 	and.w	r2, r3, #3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005322:	429a      	cmp	r2, r3
 8005324:	d12a      	bne.n	800537c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d122      	bne.n	800537c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d11a      	bne.n	800537c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	0a5b      	lsrs	r3, r3, #9
 800534a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d111      	bne.n	800537c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d108      	bne.n	800537c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	0e1b      	lsrs	r3, r3, #24
 800536e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3730      	adds	r7, #48	; 0x30
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400

08005390 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e19c      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053a4:	4b8a      	ldr	r3, [pc, #552]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d910      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b87      	ldr	r3, [pc, #540]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 020f 	bic.w	r2, r3, #15
 80053ba:	4985      	ldr	r1, [pc, #532]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b83      	ldr	r3, [pc, #524]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e184      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d010      	beq.n	8005402 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	4b7b      	ldr	r3, [pc, #492]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d908      	bls.n	8005402 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053f0:	4b78      	ldr	r3, [pc, #480]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	4975      	ldr	r1, [pc, #468]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d010      	beq.n	8005430 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	4b70      	ldr	r3, [pc, #448]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800541a:	429a      	cmp	r2, r3
 800541c:	d908      	bls.n	8005430 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800541e:	4b6d      	ldr	r3, [pc, #436]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	496a      	ldr	r1, [pc, #424]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800542c:	4313      	orrs	r3, r2
 800542e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	d010      	beq.n	800545e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	4b64      	ldr	r3, [pc, #400]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005448:	429a      	cmp	r2, r3
 800544a:	d908      	bls.n	800545e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800544c:	4b61      	ldr	r3, [pc, #388]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	495e      	ldr	r1, [pc, #376]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800545a:	4313      	orrs	r3, r2
 800545c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d010      	beq.n	800548c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005476:	429a      	cmp	r2, r3
 8005478:	d908      	bls.n	800548c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800547a:	4b56      	ldr	r3, [pc, #344]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	4953      	ldr	r1, [pc, #332]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005488:	4313      	orrs	r3, r2
 800548a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	4b4d      	ldr	r3, [pc, #308]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d908      	bls.n	80054ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b4a      	ldr	r3, [pc, #296]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f023 020f 	bic.w	r2, r3, #15
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4947      	ldr	r1, [pc, #284]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d055      	beq.n	8005572 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054c6:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	4940      	ldr	r1, [pc, #256]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d107      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054e0:	4b3c      	ldr	r3, [pc, #240]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d121      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0f6      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054f8:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d115      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0ea      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d107      	bne.n	8005520 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005510:	4b30      	ldr	r3, [pc, #192]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0de      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005520:	4b2c      	ldr	r3, [pc, #176]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0d6      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005530:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f023 0207 	bic.w	r2, r3, #7
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	4925      	ldr	r1, [pc, #148]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800553e:	4313      	orrs	r3, r2
 8005540:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fc ff7d 	bl	8002440 <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005548:	e00a      	b.n	8005560 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554a:	f7fc ff79 	bl	8002440 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	; 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e0be      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005560:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	429a      	cmp	r2, r3
 8005570:	d1eb      	bne.n	800554a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	429a      	cmp	r2, r3
 800558c:	d208      	bcs.n	80055a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f023 020f 	bic.w	r2, r3, #15
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	490e      	ldr	r1, [pc, #56]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800559c:	4313      	orrs	r3, r2
 800559e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d214      	bcs.n	80055d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ae:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 020f 	bic.w	r2, r3, #15
 80055b6:	4906      	ldr	r1, [pc, #24]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055be:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d005      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e086      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
 80055d0:	52002000 	.word	0x52002000
 80055d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d010      	beq.n	8005606 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	4b3f      	ldr	r3, [pc, #252]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d208      	bcs.n	8005606 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055f4:	4b3c      	ldr	r3, [pc, #240]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	4939      	ldr	r1, [pc, #228]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005602:	4313      	orrs	r3, r2
 8005604:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d010      	beq.n	8005634 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	4b34      	ldr	r3, [pc, #208]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800561e:	429a      	cmp	r2, r3
 8005620:	d208      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005622:	4b31      	ldr	r3, [pc, #196]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	492e      	ldr	r1, [pc, #184]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005630:	4313      	orrs	r3, r2
 8005632:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d010      	beq.n	8005662 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	4b28      	ldr	r3, [pc, #160]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800564c:	429a      	cmp	r2, r3
 800564e:	d208      	bcs.n	8005662 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005650:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	4922      	ldr	r1, [pc, #136]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 800565e:	4313      	orrs	r3, r2
 8005660:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d010      	beq.n	8005690 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800567a:	429a      	cmp	r2, r3
 800567c:	d208      	bcs.n	8005690 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	4917      	ldr	r1, [pc, #92]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 800568c:	4313      	orrs	r3, r2
 800568e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005690:	f000 f834 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	0a1b      	lsrs	r3, r3, #8
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	4912      	ldr	r1, [pc, #72]	; (80056ec <HAL_RCC_ClockConfig+0x35c>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	4a0d      	ldr	r2, [pc, #52]	; (80056ec <HAL_RCC_ClockConfig+0x35c>)
 80056b8:	5cd3      	ldrb	r3, [r2, r3]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
 80056c4:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <HAL_RCC_ClockConfig+0x360>)
 80056c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056c8:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <HAL_RCC_ClockConfig+0x364>)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80056ce:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <HAL_RCC_ClockConfig+0x368>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fc fe6a 	bl	80023ac <HAL_InitTick>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	0800b678 	.word	0x0800b678
 80056f0:	2400000c 	.word	0x2400000c
 80056f4:	24000008 	.word	0x24000008
 80056f8:	24000010 	.word	0x24000010

080056fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005702:	4bb3      	ldr	r3, [pc, #716]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800570a:	2b18      	cmp	r3, #24
 800570c:	f200 8155 	bhi.w	80059ba <HAL_RCC_GetSysClockFreq+0x2be>
 8005710:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	0800577d 	.word	0x0800577d
 800571c:	080059bb 	.word	0x080059bb
 8005720:	080059bb 	.word	0x080059bb
 8005724:	080059bb 	.word	0x080059bb
 8005728:	080059bb 	.word	0x080059bb
 800572c:	080059bb 	.word	0x080059bb
 8005730:	080059bb 	.word	0x080059bb
 8005734:	080059bb 	.word	0x080059bb
 8005738:	080057a3 	.word	0x080057a3
 800573c:	080059bb 	.word	0x080059bb
 8005740:	080059bb 	.word	0x080059bb
 8005744:	080059bb 	.word	0x080059bb
 8005748:	080059bb 	.word	0x080059bb
 800574c:	080059bb 	.word	0x080059bb
 8005750:	080059bb 	.word	0x080059bb
 8005754:	080059bb 	.word	0x080059bb
 8005758:	080057a9 	.word	0x080057a9
 800575c:	080059bb 	.word	0x080059bb
 8005760:	080059bb 	.word	0x080059bb
 8005764:	080059bb 	.word	0x080059bb
 8005768:	080059bb 	.word	0x080059bb
 800576c:	080059bb 	.word	0x080059bb
 8005770:	080059bb 	.word	0x080059bb
 8005774:	080059bb 	.word	0x080059bb
 8005778:	080057af 	.word	0x080057af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800577c:	4b94      	ldr	r3, [pc, #592]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d009      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005788:	4b91      	ldr	r3, [pc, #580]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	08db      	lsrs	r3, r3, #3
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	4a90      	ldr	r2, [pc, #576]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800579a:	e111      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800579c:	4b8d      	ldr	r3, [pc, #564]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800579e:	61bb      	str	r3, [r7, #24]
    break;
 80057a0:	e10e      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80057a2:	4b8d      	ldr	r3, [pc, #564]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057a4:	61bb      	str	r3, [r7, #24]
    break;
 80057a6:	e10b      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80057a8:	4b8c      	ldr	r3, [pc, #560]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057aa:	61bb      	str	r3, [r7, #24]
    break;
 80057ac:	e108      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057ae:	4b88      	ldr	r3, [pc, #544]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80057b8:	4b85      	ldr	r3, [pc, #532]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057c4:	4b82      	ldr	r3, [pc, #520]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80057ce:	4b80      	ldr	r3, [pc, #512]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	08db      	lsrs	r3, r3, #3
 80057d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80e1 	beq.w	80059b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	f000 8083 	beq.w	8005900 <HAL_RCC_GetSysClockFreq+0x204>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	f200 80a1 	bhi.w	8005944 <HAL_RCC_GetSysClockFreq+0x248>
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x114>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d056      	beq.n	80058bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800580e:	e099      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005810:	4b6f      	ldr	r3, [pc, #444]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d02d      	beq.n	8005878 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800581c:	4b6c      	ldr	r3, [pc, #432]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	08db      	lsrs	r3, r3, #3
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	4a6b      	ldr	r2, [pc, #428]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	4b62      	ldr	r3, [pc, #392]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 6a02 	vldr	s12, [r7, #8]
 800585a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800585e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005876:	e087      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eddf 6a58 	vldr	s13, [pc, #352]	; 80059e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b51      	ldr	r3, [pc, #324]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a02 	vldr	s12, [r7, #8]
 800589e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ba:	e065      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80059e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058fe:	e043      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80059ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b2f      	ldr	r3, [pc, #188]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a02 	vldr	s12, [r7, #8]
 8005926:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005942:	e021      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80059e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a02 	vldr	s12, [r7, #8]
 800596a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005986:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005988:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	0a5b      	lsrs	r3, r3, #9
 800598e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005992:	3301      	adds	r3, #1
 8005994:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ac:	ee17 3a90 	vmov	r3, s15
 80059b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80059b2:	e005      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
    break;
 80059b8:	e002      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80059ba:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059bc:	61bb      	str	r3, [r7, #24]
    break;
 80059be:	bf00      	nop
  }

  return sysclockfreq;
 80059c0:	69bb      	ldr	r3, [r7, #24]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3724      	adds	r7, #36	; 0x24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	58024400 	.word	0x58024400
 80059d4:	03d09000 	.word	0x03d09000
 80059d8:	003d0900 	.word	0x003d0900
 80059dc:	016e3600 	.word	0x016e3600
 80059e0:	46000000 	.word	0x46000000
 80059e4:	4c742400 	.word	0x4c742400
 80059e8:	4a742400 	.word	0x4a742400
 80059ec:	4bb71b00 	.word	0x4bb71b00

080059f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80059f6:	f7ff fe81 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <HAL_RCC_GetHCLKFreq+0x50>)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	0a1b      	lsrs	r3, r3, #8
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	490f      	ldr	r1, [pc, #60]	; (8005a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a08:	5ccb      	ldrb	r3, [r1, r3]
 8005a0a:	f003 031f 	and.w	r3, r3, #31
 8005a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a12:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a1e:	5cd3      	ldrb	r3, [r2, r3]
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2a:	4a07      	ldr	r2, [pc, #28]	; (8005a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a2e:	4a07      	ldr	r2, [pc, #28]	; (8005a4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a36:	681b      	ldr	r3, [r3, #0]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	58024400 	.word	0x58024400
 8005a44:	0800b678 	.word	0x0800b678
 8005a48:	2400000c 	.word	0x2400000c
 8005a4c:	24000008 	.word	0x24000008

08005a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005a54:	f7ff ffcc 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	4904      	ldr	r1, [pc, #16]	; (8005a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a66:	5ccb      	ldrb	r3, [r1, r3]
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	58024400 	.word	0x58024400
 8005a78:	0800b678 	.word	0x0800b678

08005a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005a80:	f7ff ffb6 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4904      	ldr	r1, [pc, #16]	; (8005aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	0800b678 	.word	0x0800b678

08005aa8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d03f      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005acc:	d02a      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ace:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ad2:	d824      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad8:	d018      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ade:	d81e      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae8:	d007      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005aea:	e018      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4ba6      	ldr	r3, [pc, #664]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4aa5      	ldr	r2, [pc, #660]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005af8:	e015      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	2102      	movs	r1, #2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 ff17 	bl	8007934 <RCCEx_PLL2_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b0a:	e00c      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3324      	adds	r3, #36	; 0x24
 8005b10:	2102      	movs	r1, #2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 ffc0 	bl	8007a98 <RCCEx_PLL3_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b1c:	e003      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	75fb      	strb	r3, [r7, #23]
      break;
 8005b22:	e000      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b2c:	4b96      	ldr	r3, [pc, #600]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b38:	4993      	ldr	r1, [pc, #588]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	650b      	str	r3, [r1, #80]	; 0x50
 8005b3e:	e001      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d03d      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d826      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b58:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5e:	bf00      	nop
 8005b60:	08005b75 	.word	0x08005b75
 8005b64:	08005b83 	.word	0x08005b83
 8005b68:	08005b95 	.word	0x08005b95
 8005b6c:	08005bad 	.word	0x08005bad
 8005b70:	08005bad 	.word	0x08005bad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b74:	4b84      	ldr	r3, [pc, #528]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a83      	ldr	r2, [pc, #524]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b80:	e015      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fed3 	bl	8007934 <RCCEx_PLL2_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b92:	e00c      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3324      	adds	r3, #36	; 0x24
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 ff7c 	bl	8007a98 <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ba4:	e003      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bb4:	4b74      	ldr	r3, [pc, #464]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb8:	f023 0207 	bic.w	r2, r3, #7
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc0:	4971      	ldr	r1, [pc, #452]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8005bc6:	e001      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d04a      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005be0:	d031      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005be2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005be6:	d82b      	bhi.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bec:	d02d      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf2:	d825      	bhi.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005bf4:	2bc0      	cmp	r3, #192	; 0xc0
 8005bf6:	d02a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005bf8:	2bc0      	cmp	r3, #192	; 0xc0
 8005bfa:	d821      	bhi.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005bfc:	2b80      	cmp	r3, #128	; 0x80
 8005bfe:	d016      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005c00:	2b80      	cmp	r3, #128	; 0x80
 8005c02:	d81d      	bhi.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d007      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005c0c:	e018      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0e:	4b5e      	ldr	r3, [pc, #376]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	4a5d      	ldr	r2, [pc, #372]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005c1a:	e019      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 fe86 	bl	8007934 <RCCEx_PLL2_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005c2c:	e010      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3324      	adds	r3, #36	; 0x24
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 ff2f 	bl	8007a98 <RCCEx_PLL3_Config>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005c3e:	e007      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	75fb      	strb	r3, [r7, #23]
      break;
 8005c44:	e004      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005c46:	bf00      	nop
 8005c48:	e002      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e000      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005c56:	4b4c      	ldr	r3, [pc, #304]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c62:	4949      	ldr	r1, [pc, #292]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	650b      	str	r3, [r1, #80]	; 0x50
 8005c68:	e001      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d04f      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005c82:	d036      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005c84:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005c88:	d830      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8e:	d032      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c94:	d82a      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c96:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c9a:	d02e      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x252>
 8005c9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ca0:	d824      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca6:	d018      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cac:	d81e      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb6:	d007      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005cb8:	e018      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cba:	4b33      	ldr	r3, [pc, #204]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	4a32      	ldr	r2, [pc, #200]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005cc6:	e019      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 fe30 	bl	8007934 <RCCEx_PLL2_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005cd8:	e010      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3324      	adds	r3, #36	; 0x24
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 fed9 	bl	8007a98 <RCCEx_PLL3_Config>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005cea:	e007      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf0:	e004      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005cf2:	bf00      	nop
 8005cf4:	e002      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005cf6:	bf00      	nop
 8005cf8:	e000      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005d02:	4b21      	ldr	r3, [pc, #132]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d06:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0e:	491e      	ldr	r1, [pc, #120]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	650b      	str	r3, [r1, #80]	; 0x50
 8005d14:	e001      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d034      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2a:	2b30      	cmp	r3, #48	; 0x30
 8005d2c:	d01c      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005d2e:	2b30      	cmp	r3, #48	; 0x30
 8005d30:	d817      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d00c      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d813      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d10f      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d42:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	4a10      	ldr	r2, [pc, #64]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005d4e:	e00e      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3304      	adds	r3, #4
 8005d54:	2102      	movs	r1, #2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 fdec 	bl	8007934 <RCCEx_PLL2_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005d60:	e005      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	75fb      	strb	r3, [r7, #23]
      break;
 8005d66:	e002      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005d68:	bf00      	nop
 8005d6a:	e000      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d80:	4901      	ldr	r1, [pc, #4]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d86:	e003      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d047      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005da4:	d030      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005daa:	d82a      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005dac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005db0:	d02c      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005db2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005db6:	d824      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dbc:	d018      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc2:	d81e      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dcc:	d007      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005dce:	e018      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd0:	4bb0      	ldr	r3, [pc, #704]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4aaf      	ldr	r2, [pc, #700]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ddc:	e017      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fda5 	bl	8007934 <RCCEx_PLL2_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005dee:	e00e      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3324      	adds	r3, #36	; 0x24
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 fe4e 	bl	8007a98 <RCCEx_PLL3_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e00:	e005      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
      break;
 8005e06:	e002      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005e08:	bf00      	nop
 8005e0a:	e000      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e14:	4b9f      	ldr	r3, [pc, #636]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e20:	499c      	ldr	r1, [pc, #624]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	650b      	str	r3, [r1, #80]	; 0x50
 8005e26:	e001      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
 8005e2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d049      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e40:	d02e      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e46:	d828      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e4c:	d02a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e52:	d822      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e58:	d026      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005e5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e5e:	d81c      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e64:	d010      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e6a:	d816      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01d      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e74:	d111      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fd59 	bl	8007934 <RCCEx_PLL2_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e86:	e012      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3324      	adds	r3, #36	; 0x24
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fe02 	bl	8007a98 <RCCEx_PLL3_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e98:	e009      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e9e:	e006      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005ea0:	bf00      	nop
 8005ea2:	e004      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005ea4:	bf00      	nop
 8005ea6:	e002      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d109      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005eb4:	4b77      	ldr	r3, [pc, #476]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec0:	4974      	ldr	r1, [pc, #464]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ec6:	e001      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d053      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ede:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005ee2:	d034      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ee4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005ee8:	d82e      	bhi.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eee:	d030      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ef4:	d828      	bhi.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efa:	d02c      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d822      	bhi.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005f02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f06:	d028      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005f08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f0c:	d81c      	bhi.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f12:	d010      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f18:	d816      	bhi.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01f      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f22:	d111      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3304      	adds	r3, #4
 8005f28:	2101      	movs	r1, #1
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fd02 	bl	8007934 <RCCEx_PLL2_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f34:	e014      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3324      	adds	r3, #36	; 0x24
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 fdab 	bl	8007a98 <RCCEx_PLL3_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f46:	e00b      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4c:	e008      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f4e:	bf00      	nop
 8005f50:	e006      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f52:	bf00      	nop
 8005f54:	e004      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f56:	bf00      	nop
 8005f58:	e002      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e000      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f66:	4b4b      	ldr	r3, [pc, #300]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f74:	4947      	ldr	r1, [pc, #284]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	658b      	str	r3, [r1, #88]	; 0x58
 8005f7a:	e001      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d02f      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f94:	d00e      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9a:	d814      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d015      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fa4:	d10f      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa6:	4b3b      	ldr	r3, [pc, #236]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	4a3a      	ldr	r2, [pc, #232]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005fb2:	e00c      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	2101      	movs	r1, #1
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fcba 	bl	8007934 <RCCEx_PLL2_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005fc4:	e003      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fca:	e000      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d109      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fd4:	4b2f      	ldr	r3, [pc, #188]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe0:	492c      	ldr	r1, [pc, #176]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	650b      	str	r3, [r1, #80]	; 0x50
 8005fe6:	e001      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d032      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d81b      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8006000:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800603f 	.word	0x0800603f
 800600c:	08006019 	.word	0x08006019
 8006010:	08006027 	.word	0x08006027
 8006014:	0800603f 	.word	0x0800603f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006018:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800601e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006024:	e00c      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3304      	adds	r3, #4
 800602a:	2102      	movs	r1, #2
 800602c:	4618      	mov	r0, r3
 800602e:	f001 fc81 	bl	8007934 <RCCEx_PLL2_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006036:	e003      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	75fb      	strb	r3, [r7, #23]
      break;
 800603c:	e000      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 800603e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006040:	7dfb      	ldrb	r3, [r7, #23]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604a:	f023 0203 	bic.w	r2, r3, #3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	4910      	ldr	r1, [pc, #64]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006054:	4313      	orrs	r3, r2
 8006056:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006058:	e001      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 808a 	beq.w	8006180 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a09      	ldr	r2, [pc, #36]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006078:	f7fc f9e2 	bl	8002440 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800607e:	e00d      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006080:	f7fc f9de 	bl	8002440 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d906      	bls.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	75fb      	strb	r3, [r7, #23]
        break;
 8006092:	e009      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8006094:	58024400 	.word	0x58024400
 8006098:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800609c:	4bba      	ldr	r3, [pc, #744]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0eb      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d166      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060ae:	4bb7      	ldr	r3, [pc, #732]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060b8:	4053      	eors	r3, r2
 80060ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d013      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060c2:	4bb2      	ldr	r3, [pc, #712]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060cc:	4baf      	ldr	r3, [pc, #700]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	4aae      	ldr	r2, [pc, #696]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060d8:	4bac      	ldr	r3, [pc, #688]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	4aab      	ldr	r2, [pc, #684]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060e4:	4aa9      	ldr	r2, [pc, #676]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f4:	d115      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f6:	f7fc f9a3 	bl	8002440 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060fc:	e00b      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fc f99f 	bl	8002440 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d902      	bls.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	75fb      	strb	r3, [r7, #23]
            break;
 8006114:	e005      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006116:	4b9d      	ldr	r3, [pc, #628]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0ed      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d126      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800612e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006136:	d10d      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8006138:	4b94      	ldr	r3, [pc, #592]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006146:	0919      	lsrs	r1, r3, #4
 8006148:	4b91      	ldr	r3, [pc, #580]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800614a:	400b      	ands	r3, r1
 800614c:	498f      	ldr	r1, [pc, #572]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800614e:	4313      	orrs	r3, r2
 8006150:	610b      	str	r3, [r1, #16]
 8006152:	e005      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006154:	4b8d      	ldr	r3, [pc, #564]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	4a8c      	ldr	r2, [pc, #560]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800615a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800615e:	6113      	str	r3, [r2, #16]
 8006160:	4b8a      	ldr	r3, [pc, #552]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006162:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800616a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616e:	4987      	ldr	r1, [pc, #540]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006170:	4313      	orrs	r3, r2
 8006172:	670b      	str	r3, [r1, #112]	; 0x70
 8006174:	e004      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	75bb      	strb	r3, [r7, #22]
 800617a:	e001      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d07f      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006192:	2b28      	cmp	r3, #40	; 0x28
 8006194:	d866      	bhi.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8006196:	a201      	add	r2, pc, #4	; (adr r2, 800619c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	0800626b 	.word	0x0800626b
 80061a0:	08006265 	.word	0x08006265
 80061a4:	08006265 	.word	0x08006265
 80061a8:	08006265 	.word	0x08006265
 80061ac:	08006265 	.word	0x08006265
 80061b0:	08006265 	.word	0x08006265
 80061b4:	08006265 	.word	0x08006265
 80061b8:	08006265 	.word	0x08006265
 80061bc:	08006241 	.word	0x08006241
 80061c0:	08006265 	.word	0x08006265
 80061c4:	08006265 	.word	0x08006265
 80061c8:	08006265 	.word	0x08006265
 80061cc:	08006265 	.word	0x08006265
 80061d0:	08006265 	.word	0x08006265
 80061d4:	08006265 	.word	0x08006265
 80061d8:	08006265 	.word	0x08006265
 80061dc:	08006253 	.word	0x08006253
 80061e0:	08006265 	.word	0x08006265
 80061e4:	08006265 	.word	0x08006265
 80061e8:	08006265 	.word	0x08006265
 80061ec:	08006265 	.word	0x08006265
 80061f0:	08006265 	.word	0x08006265
 80061f4:	08006265 	.word	0x08006265
 80061f8:	08006265 	.word	0x08006265
 80061fc:	0800626b 	.word	0x0800626b
 8006200:	08006265 	.word	0x08006265
 8006204:	08006265 	.word	0x08006265
 8006208:	08006265 	.word	0x08006265
 800620c:	08006265 	.word	0x08006265
 8006210:	08006265 	.word	0x08006265
 8006214:	08006265 	.word	0x08006265
 8006218:	08006265 	.word	0x08006265
 800621c:	0800626b 	.word	0x0800626b
 8006220:	08006265 	.word	0x08006265
 8006224:	08006265 	.word	0x08006265
 8006228:	08006265 	.word	0x08006265
 800622c:	08006265 	.word	0x08006265
 8006230:	08006265 	.word	0x08006265
 8006234:	08006265 	.word	0x08006265
 8006238:	08006265 	.word	0x08006265
 800623c:	0800626b 	.word	0x0800626b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3304      	adds	r3, #4
 8006244:	2101      	movs	r1, #1
 8006246:	4618      	mov	r0, r3
 8006248:	f001 fb74 	bl	8007934 <RCCEx_PLL2_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006250:	e00c      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3324      	adds	r3, #36	; 0x24
 8006256:	2101      	movs	r1, #1
 8006258:	4618      	mov	r0, r3
 800625a:	f001 fc1d 	bl	8007a98 <RCCEx_PLL3_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006262:	e003      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	75fb      	strb	r3, [r7, #23]
      break;
 8006268:	e000      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800626a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006272:	4b46      	ldr	r3, [pc, #280]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006280:	4942      	ldr	r1, [pc, #264]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006282:	4313      	orrs	r3, r2
 8006284:	654b      	str	r3, [r1, #84]	; 0x54
 8006286:	e001      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d038      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629c:	2b05      	cmp	r3, #5
 800629e:	d821      	bhi.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80062a0:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	080062eb 	.word	0x080062eb
 80062ac:	080062c1 	.word	0x080062c1
 80062b0:	080062d3 	.word	0x080062d3
 80062b4:	080062eb 	.word	0x080062eb
 80062b8:	080062eb 	.word	0x080062eb
 80062bc:	080062eb 	.word	0x080062eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3304      	adds	r3, #4
 80062c4:	2101      	movs	r1, #1
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 fb34 	bl	8007934 <RCCEx_PLL2_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80062d0:	e00c      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3324      	adds	r3, #36	; 0x24
 80062d6:	2101      	movs	r1, #1
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fbdd 	bl	8007a98 <RCCEx_PLL3_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80062e2:	e003      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	75fb      	strb	r3, [r7, #23]
      break;
 80062e8:	e000      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80062ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80062f2:	4b26      	ldr	r3, [pc, #152]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	f023 0207 	bic.w	r2, r3, #7
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062fe:	4923      	ldr	r1, [pc, #140]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006300:	4313      	orrs	r3, r2
 8006302:	654b      	str	r3, [r1, #84]	; 0x54
 8006304:	e001      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d040      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800631c:	2b05      	cmp	r3, #5
 800631e:	d821      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800636b 	.word	0x0800636b
 800632c:	08006341 	.word	0x08006341
 8006330:	08006353 	.word	0x08006353
 8006334:	0800636b 	.word	0x0800636b
 8006338:	0800636b 	.word	0x0800636b
 800633c:	0800636b 	.word	0x0800636b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	2101      	movs	r1, #1
 8006346:	4618      	mov	r0, r3
 8006348:	f001 faf4 	bl	8007934 <RCCEx_PLL2_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006350:	e00c      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3324      	adds	r3, #36	; 0x24
 8006356:	2101      	movs	r1, #1
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fb9d 	bl	8007a98 <RCCEx_PLL3_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006362:	e003      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
      break;
 8006368:	e000      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800636a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d110      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006372:	4b06      	ldr	r3, [pc, #24]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006376:	f023 0207 	bic.w	r2, r3, #7
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006380:	4902      	ldr	r1, [pc, #8]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006382:	4313      	orrs	r3, r2
 8006384:	658b      	str	r3, [r1, #88]	; 0x58
 8006386:	e007      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006388:	58024800 	.word	0x58024800
 800638c:	58024400 	.word	0x58024400
 8006390:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d04b      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ae:	d02e      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80063b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063b4:	d828      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ba:	d02a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d822      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80063c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063c6:	d026      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80063c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063cc:	d81c      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80063ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d2:	d010      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80063d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d8:	d816      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01d      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x972>
 80063de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063e2:	d111      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 faa2 	bl	8007934 <RCCEx_PLL2_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063f4:	e012      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3324      	adds	r3, #36	; 0x24
 80063fa:	2102      	movs	r1, #2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 fb4b 	bl	8007a98 <RCCEx_PLL3_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006406:	e009      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	75fb      	strb	r3, [r7, #23]
      break;
 800640c:	e006      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800640e:	bf00      	nop
 8006410:	e004      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800641a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006422:	4bb3      	ldr	r3, [pc, #716]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006430:	49af      	ldr	r1, [pc, #700]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006432:	4313      	orrs	r3, r2
 8006434:	654b      	str	r3, [r1, #84]	; 0x54
 8006436:	e001      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d04b      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800644e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006452:	d02e      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006454:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006458:	d828      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645e:	d02a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006464:	d822      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800646a:	d026      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800646c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006470:	d81c      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006476:	d010      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647c:	d816      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d01d      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006486:	d111      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fa50 	bl	8007934 <RCCEx_PLL2_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006498:	e012      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3324      	adds	r3, #36	; 0x24
 800649e:	2102      	movs	r1, #2
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 faf9 	bl	8007a98 <RCCEx_PLL3_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064aa:	e009      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	75fb      	strb	r3, [r7, #23]
      break;
 80064b0:	e006      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80064b2:	bf00      	nop
 80064b4:	e004      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80064b6:	bf00      	nop
 80064b8:	e002      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80064be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064c6:	4b8a      	ldr	r3, [pc, #552]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064d4:	4986      	ldr	r1, [pc, #536]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	658b      	str	r3, [r1, #88]	; 0x58
 80064da:	e001      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d04b      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064f6:	d02e      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80064f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064fc:	d828      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80064fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006502:	d02a      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006508:	d822      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800650a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800650e:	d026      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006510:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006514:	d81c      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651a:	d010      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800651c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006520:	d816      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01d      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652a:	d111      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f001 f9fe 	bl	8007934 <RCCEx_PLL2_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800653c:	e012      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3324      	adds	r3, #36	; 0x24
 8006542:	2102      	movs	r1, #2
 8006544:	4618      	mov	r0, r3
 8006546:	f001 faa7 	bl	8007a98 <RCCEx_PLL3_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800654e:	e009      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	75fb      	strb	r3, [r7, #23]
      break;
 8006554:	e006      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006556:	bf00      	nop
 8006558:	e004      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800656a:	4b61      	ldr	r3, [pc, #388]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006578:	495d      	ldr	r1, [pc, #372]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800657a:	4313      	orrs	r3, r2
 800657c:	658b      	str	r3, [r1, #88]	; 0x58
 800657e:	e001      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006580:	7dfb      	ldrb	r3, [r7, #23]
 8006582:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01a      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	d10a      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3324      	adds	r3, #36	; 0x24
 80065a0:	2102      	movs	r1, #2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fa78 	bl	8007a98 <RCCEx_PLL3_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065b2:	4b4f      	ldr	r3, [pc, #316]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c0:	494b      	ldr	r1, [pc, #300]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065dc:	d10a      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3324      	adds	r3, #36	; 0x24
 80065e2:	2102      	movs	r1, #2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 fa57 	bl	8007a98 <RCCEx_PLL3_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065f4:	4b3e      	ldr	r3, [pc, #248]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80065f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006602:	493b      	ldr	r1, [pc, #236]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006604:	4313      	orrs	r3, r2
 8006606:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d034      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800661a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800661e:	d01d      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8006620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006624:	d817      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800662a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662e:	d009      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006630:	e011      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3304      	adds	r3, #4
 8006636:	2100      	movs	r1, #0
 8006638:	4618      	mov	r0, r3
 800663a:	f001 f97b 	bl	8007934 <RCCEx_PLL2_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006642:	e00c      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3324      	adds	r3, #36	; 0x24
 8006648:	2102      	movs	r1, #2
 800664a:	4618      	mov	r0, r3
 800664c:	f001 fa24 	bl	8007a98 <RCCEx_PLL3_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]
      break;
 800665a:	e000      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800665c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006664:	4b22      	ldr	r3, [pc, #136]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006672:	491f      	ldr	r1, [pc, #124]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006674:	4313      	orrs	r3, r2
 8006676:	658b      	str	r3, [r1, #88]	; 0x58
 8006678:	e001      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d036      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006690:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006694:	d01c      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006696:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800669a:	d816      	bhi.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800669c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a0:	d003      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80066a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066a6:	d007      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80066a8:	e00f      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066aa:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	4a10      	ldr	r2, [pc, #64]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80066b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80066b6:	e00c      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3324      	adds	r3, #36	; 0x24
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 f9ea 	bl	8007a98 <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80066c8:	e003      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]
      break;
 80066ce:	e000      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80066d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10d      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80066da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e6:	4902      	ldr	r1, [pc, #8]	; (80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	654b      	str	r3, [r1, #84]	; 0x54
 80066ec:	e004      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80066ee:	bf00      	nop
 80066f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d029      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006710:	d007      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8006712:	e00f      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4b69      	ldr	r3, [pc, #420]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a68      	ldr	r2, [pc, #416]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006720:	e00b      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3304      	adds	r3, #4
 8006726:	2102      	movs	r1, #2
 8006728:	4618      	mov	r0, r3
 800672a:	f001 f903 	bl	8007934 <RCCEx_PLL2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006732:	e002      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
      break;
 8006738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006740:	4b5e      	ldr	r3, [pc, #376]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674c:	495b      	ldr	r1, [pc, #364]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800674e:	4313      	orrs	r3, r2
 8006750:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006752:	e001      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3324      	adds	r3, #36	; 0x24
 8006768:	2102      	movs	r1, #2
 800676a:	4618      	mov	r0, r3
 800676c:	f001 f994 	bl	8007a98 <RCCEx_PLL3_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d032      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800678c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006790:	d017      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8006792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006796:	d811      	bhi.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800679c:	d013      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800679e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a2:	d80b      	bhi.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d010      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80067a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ac:	d106      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ae:	4b43      	ldr	r3, [pc, #268]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	4a42      	ldr	r2, [pc, #264]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80067ba:	e007      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	75fb      	strb	r3, [r7, #23]
      break;
 80067c0:	e004      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80067c2:	bf00      	nop
 80067c4:	e002      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80067c6:	bf00      	nop
 80067c8:	e000      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80067ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067d2:	4b3a      	ldr	r3, [pc, #232]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e0:	4936      	ldr	r1, [pc, #216]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	654b      	str	r3, [r1, #84]	; 0x54
 80067e6:	e001      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067f8:	4b30      	ldr	r3, [pc, #192]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006804:	492d      	ldr	r1, [pc, #180]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006806:	4313      	orrs	r3, r2
 8006808:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006816:	4b29      	ldr	r3, [pc, #164]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006822:	4926      	ldr	r1, [pc, #152]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006824:	4313      	orrs	r3, r2
 8006826:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006834:	4b21      	ldr	r3, [pc, #132]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006838:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	491e      	ldr	r1, [pc, #120]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006842:	4313      	orrs	r3, r2
 8006844:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00d      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006852:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	4a19      	ldr	r2, [pc, #100]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006858:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800685c:	6113      	str	r3, [r2, #16]
 800685e:	4b17      	ldr	r3, [pc, #92]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006868:	4914      	ldr	r1, [pc, #80]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800686a:	4313      	orrs	r3, r2
 800686c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	da08      	bge.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006882:	490e      	ldr	r1, [pc, #56]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006884:	4313      	orrs	r3, r2
 8006886:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d009      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006894:	4b09      	ldr	r3, [pc, #36]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006898:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a2:	4906      	ldr	r1, [pc, #24]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80068a8:	7dbb      	ldrb	r3, [r7, #22]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	58024400 	.word	0x58024400

080068c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b090      	sub	sp, #64	; 0x40
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ce:	f040 8089 	bne.w	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80068d2:	4ba8      	ldr	r3, [pc, #672]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	633b      	str	r3, [r7, #48]	; 0x30
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d87d      	bhi.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	080068fd 	.word	0x080068fd
 80068ec:	08006921 	.word	0x08006921
 80068f0:	08006945 	.word	0x08006945
 80068f4:	080069d9 	.word	0x080069d9
 80068f8:	08006969 	.word	0x08006969

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068fc:	4b9d      	ldr	r3, [pc, #628]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006904:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006908:	d107      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800690a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800690e:	4618      	mov	r0, r3
 8006910:	f000 febe 	bl	8007690 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006918:	e3f5      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691e:	e3f2      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006920:	4b94      	ldr	r3, [pc, #592]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800692c:	d107      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692e:	f107 0318 	add.w	r3, r7, #24
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fc04 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800693c:	e3e3      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006942:	e3e0      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006944:	4b8b      	ldr	r3, [pc, #556]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800694c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006950:	d107      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006952:	f107 030c 	add.w	r3, r7, #12
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fd46 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006960:	e3d1      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006966:	e3ce      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006968:	4b82      	ldr	r3, [pc, #520]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800696a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006970:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006972:	4b80      	ldr	r3, [pc, #512]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b04      	cmp	r3, #4
 800697c:	d10c      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006984:	4b7b      	ldr	r3, [pc, #492]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	08db      	lsrs	r3, r3, #3
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	4a7a      	ldr	r2, [pc, #488]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006990:	fa22 f303 	lsr.w	r3, r2, r3
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006996:	e01e      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006998:	4b76      	ldr	r3, [pc, #472]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a4:	d106      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80069a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ac:	d102      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80069ae:	4b73      	ldr	r3, [pc, #460]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b2:	e010      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069b4:	4b6f      	ldr	r3, [pc, #444]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069c0:	d106      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80069c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c8:	d102      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069ca:	4b6d      	ldr	r3, [pc, #436]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ce:	e002      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069d4:	e397      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80069d6:	e396      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069d8:	4b6a      	ldr	r3, [pc, #424]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069dc:	e393      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069e2:	e390      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ea:	f040 8095 	bne.w	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80069ee:	4b61      	ldr	r3, [pc, #388]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80069f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069fe:	d04d      	beq.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a06:	f200 8084 	bhi.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	2bc0      	cmp	r3, #192	; 0xc0
 8006a0e:	d07d      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	2bc0      	cmp	r3, #192	; 0xc0
 8006a14:	d87d      	bhi.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	2b80      	cmp	r3, #128	; 0x80
 8006a1a:	d02d      	beq.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	2b80      	cmp	r3, #128	; 0x80
 8006a20:	d877      	bhi.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d012      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006a2e:	e070      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a30:	4b50      	ldr	r3, [pc, #320]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fe24 	bl	8007690 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a4c:	e35b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a52:	e358      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a54:	4b47      	ldr	r3, [pc, #284]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a60:	d107      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a62:	f107 0318 	add.w	r3, r7, #24
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fb6a 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a70:	e349      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a76:	e346      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a78:	4b3e      	ldr	r3, [pc, #248]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a84:	d107      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a86:	f107 030c 	add.w	r3, r7, #12
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fcac 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a94:	e337      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a9a:	e334      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a9c:	4b35      	ldr	r3, [pc, #212]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006aa6:	4b33      	ldr	r3, [pc, #204]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d10c      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d109      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ab8:	4b2e      	ldr	r3, [pc, #184]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	4a2d      	ldr	r2, [pc, #180]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aca:	e01e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006acc:	4b29      	ldr	r3, [pc, #164]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad8:	d106      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8006ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ae0:	d102      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ae2:	4b26      	ldr	r3, [pc, #152]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae6:	e010      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ae8:	4b22      	ldr	r3, [pc, #136]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006af4:	d106      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006afc:	d102      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006afe:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b02:	e002      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b08:	e2fd      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006b0a:	e2fc      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b10:	e2f9      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b16:	e2f6      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1e:	f040 80a7 	bne.w	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006b22:	4b14      	ldr	r3, [pc, #80]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b26:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006b2a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b32:	d05f      	beq.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3a:	f200 8096 	bhi.w	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b44:	f000 808e 	beq.w	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b4e:	f200 808c 	bhi.w	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b58:	d03a      	beq.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b60:	f200 8083 	bhi.w	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00e      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b70:	d01c      	beq.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8006b72:	e07a      	b.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006b74:	58024400 	.word	0x58024400
 8006b78:	03d09000 	.word	0x03d09000
 8006b7c:	003d0900 	.word	0x003d0900
 8006b80:	016e3600 	.word	0x016e3600
 8006b84:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b88:	4ba8      	ldr	r3, [pc, #672]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fd78 	bl	8007690 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ba4:	e2af      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006baa:	e2ac      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bac:	4b9f      	ldr	r3, [pc, #636]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bb8:	d107      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bba:	f107 0318 	add.w	r3, r7, #24
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fabe 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bc8:	e29d      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bce:	e29a      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bd0:	4b96      	ldr	r3, [pc, #600]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bdc:	d107      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bde:	f107 030c 	add.w	r3, r7, #12
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fc00 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bec:	e28b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf2:	e288      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006bf4:	4b8d      	ldr	r3, [pc, #564]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bfe:	4b8b      	ldr	r3, [pc, #556]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d10c      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c10:	4b86      	ldr	r3, [pc, #536]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	08db      	lsrs	r3, r3, #3
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	4a85      	ldr	r2, [pc, #532]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c22:	e01e      	b.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c24:	4b81      	ldr	r3, [pc, #516]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c30:	d106      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8006c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c38:	d102      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c3a:	4b7e      	ldr	r3, [pc, #504]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c3e:	e010      	b.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c40:	4b7a      	ldr	r3, [pc, #488]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4c:	d106      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c54:	d102      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c56:	4b78      	ldr	r3, [pc, #480]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c5a:	e002      	b.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8006c60:	e251      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006c62:	e250      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c64:	4b75      	ldr	r3, [pc, #468]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c68:	e24d      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c6e:	e24a      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c76:	f040 809c 	bne.w	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006c7a:	4b6c      	ldr	r3, [pc, #432]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c8a:	d054      	beq.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c92:	f200 808b 	bhi.w	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c9c:	f000 8083 	beq.w	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ca6:	f200 8081 	bhi.w	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb0:	d02f      	beq.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb8:	d878      	bhi.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc6:	d012      	beq.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8006cc8:	e070      	b.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cca:	4b58      	ldr	r3, [pc, #352]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cd6:	d107      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fcd7 	bl	8007690 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ce6:	e20e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cec:	e20b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cee:	4b4f      	ldr	r3, [pc, #316]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cfc:	f107 0318 	add.w	r3, r7, #24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fa1d 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d0a:	e1fc      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d10:	e1f9      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d12:	4b46      	ldr	r3, [pc, #280]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d20:	f107 030c 	add.w	r3, r7, #12
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fb5f 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d2e:	e1ea      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d34:	e1e7      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d36:	4b3d      	ldr	r3, [pc, #244]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d40:	4b3a      	ldr	r3, [pc, #232]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d10c      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d109      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d52:	4b36      	ldr	r3, [pc, #216]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	08db      	lsrs	r3, r3, #3
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	4a34      	ldr	r2, [pc, #208]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d64:	e01e      	b.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d66:	4b31      	ldr	r3, [pc, #196]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d72:	d106      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d7a:	d102      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d7c:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d80:	e010      	b.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d82:	4b2a      	ldr	r3, [pc, #168]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d8e:	d106      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d96:	d102      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d98:	4b27      	ldr	r3, [pc, #156]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d9c:	e002      	b.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006da2:	e1b0      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006da4:	e1af      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006da6:	4b25      	ldr	r3, [pc, #148]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006daa:	e1ac      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006db0:	e1a9      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006db8:	d17d      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006dba:	4b1c      	ldr	r3, [pc, #112]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dc2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dca:	d039      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd2:	d86d      	bhi.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de0:	d012      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006de2:	e065      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006de4:	4b11      	ldr	r3, [pc, #68]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df0:	d107      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006df2:	f107 0318 	add.w	r3, r7, #24
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f9a2 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e00:	e181      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e06:	e17e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e08:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e14:	d107      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e16:	f107 030c 	add.w	r3, r7, #12
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fae4 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e24:	e16f      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e2a:	e16c      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	003d0900 	.word	0x003d0900
 8006e38:	016e3600 	.word	0x016e3600
 8006e3c:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e40:	4ba0      	ldr	r3, [pc, #640]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e4a:	4b9e      	ldr	r3, [pc, #632]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d109      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e5c:	4b99      	ldr	r3, [pc, #612]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	08db      	lsrs	r3, r3, #3
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	4a98      	ldr	r2, [pc, #608]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e6e:	e01e      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e70:	4b94      	ldr	r3, [pc, #592]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7c:	d106      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e84:	d102      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e86:	4b91      	ldr	r3, [pc, #580]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8a:	e010      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e8c:	4b8d      	ldr	r3, [pc, #564]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e98:	d106      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea0:	d102      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ea2:	4b8b      	ldr	r3, [pc, #556]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea6:	e002      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006eac:	e12b      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006eae:	e12a      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb4:	e127      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ebc:	d133      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006ebe:	4b81      	ldr	r3, [pc, #516]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed4:	d012      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006ed6:	e023      	b.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ed8:	4b7a      	ldr	r3, [pc, #488]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ee4:	d107      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fbd0 	bl	8007690 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ef4:	e107      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006efa:	e104      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006efc:	4b71      	ldr	r3, [pc, #452]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f08:	d107      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f0a:	f107 0318 	add.w	r3, r7, #24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 f916 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f18:	e0f5      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f1e:	e0f2      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f24:	e0ef      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f2c:	f040 8091 	bne.w	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006f30:	4b64      	ldr	r3, [pc, #400]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f34:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006f38:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f40:	f000 8081 	beq.w	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f4a:	d87f      	bhi.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f52:	d06b      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f5a:	d877      	bhi.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f62:	d056      	beq.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6a:	d86f      	bhi.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f72:	d03b      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f7a:	d867      	bhi.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f82:	d021      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f8a:	d85f      	bhi.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f98:	d004      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006f9a:	e057      	b.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f9c:	f000 f8ba 	bl	8007114 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fa0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006fa2:	e0b0      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fa4:	4b47      	ldr	r3, [pc, #284]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb0:	d107      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb2:	f107 0318 	add.w	r3, r7, #24
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f8c2 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fc0:	e0a1      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc6:	e09e      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fc8:	4b3e      	ldr	r3, [pc, #248]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd4:	d107      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd6:	f107 030c 	add.w	r3, r7, #12
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fa04 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fe4:	e08f      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fea:	e08c      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fec:	4b35      	ldr	r3, [pc, #212]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d109      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ff8:	4b32      	ldr	r3, [pc, #200]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	08db      	lsrs	r3, r3, #3
 8006ffe:	f003 0303 	and.w	r3, r3, #3
 8007002:	4a31      	ldr	r2, [pc, #196]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007004:	fa22 f303 	lsr.w	r3, r2, r3
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800700a:	e07c      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007010:	e079      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007012:	4b2c      	ldr	r3, [pc, #176]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701e:	d102      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8007020:	4b2a      	ldr	r3, [pc, #168]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007024:	e06f      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800702a:	e06c      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800702c:	4b25      	ldr	r3, [pc, #148]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007038:	d102      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 800703a:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800703e:	e062      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007044:	e05f      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007046:	4b23      	ldr	r3, [pc, #140]	; (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800704a:	e05c      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007050:	e059      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007058:	d153      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800705a:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800705c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007062:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706a:	d035      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007072:	d843      	bhi.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007080:	d00d      	beq.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8007082:	e03b      	b.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007084:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007090:	d102      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8007092:	4b0f      	ldr	r3, [pc, #60]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007096:	e036      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800709c:	e033      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800709e:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070aa:	d107      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 faed 	bl	8007690 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070ba:	e024      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070c0:	e021      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80070c2:	bf00      	nop
 80070c4:	58024400 	.word	0x58024400
 80070c8:	03d09000 	.word	0x03d09000
 80070cc:	003d0900 	.word	0x003d0900
 80070d0:	016e3600 	.word	0x016e3600
 80070d4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070e4:	d107      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e6:	f107 0318 	add.w	r3, r7, #24
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f828 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070f4:	e007      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fa:	e004      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007100:	e001      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007108:	4618      	mov	r0, r3
 800710a:	3740      	adds	r7, #64	; 0x40
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	58024400 	.word	0x58024400

08007114 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007118:	f7fe fc6a 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 800711c:	4602      	mov	r2, r0
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	091b      	lsrs	r3, r3, #4
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	4904      	ldr	r1, [pc, #16]	; (800713c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800712a:	5ccb      	ldrb	r3, [r1, r3]
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007134:	4618      	mov	r0, r3
 8007136:	bd80      	pop	{r7, pc}
 8007138:	58024400 	.word	0x58024400
 800713c:	0800b678 	.word	0x0800b678

08007140 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007140:	b480      	push	{r7}
 8007142:	b089      	sub	sp, #36	; 0x24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007148:	4ba1      	ldr	r3, [pc, #644]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007152:	4b9f      	ldr	r3, [pc, #636]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	0b1b      	lsrs	r3, r3, #12
 8007158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800715c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800715e:	4b9c      	ldr	r3, [pc, #624]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	091b      	lsrs	r3, r3, #4
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800716a:	4b99      	ldr	r3, [pc, #612]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800716c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716e:	08db      	lsrs	r3, r3, #3
 8007170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	fb02 f303 	mul.w	r3, r2, r3
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8111 	beq.w	80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b02      	cmp	r3, #2
 8007192:	f000 8083 	beq.w	800729c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b02      	cmp	r3, #2
 800719a:	f200 80a1 	bhi.w	80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d056      	beq.n	8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071aa:	e099      	b.n	80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ac:	4b88      	ldr	r3, [pc, #544]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d02d      	beq.n	8007214 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071b8:	4b85      	ldr	r3, [pc, #532]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	08db      	lsrs	r3, r3, #3
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	4a84      	ldr	r2, [pc, #528]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
 80071c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e2:	4b7b      	ldr	r3, [pc, #492]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007212:	e087      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007226:	4b6a      	ldr	r3, [pc, #424]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007236:	ed97 6a03 	vldr	s12, [r7, #12]
 800723a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007256:	e065      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726a:	4b59      	ldr	r3, [pc, #356]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727a:	ed97 6a03 	vldr	s12, [r7, #12]
 800727e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800729a:	e043      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ae:	4b48      	ldr	r3, [pc, #288]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072be:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072de:	e021      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f2:	4b37      	ldr	r3, [pc, #220]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007302:	ed97 6a03 	vldr	s12, [r7, #12]
 8007306:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800730a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007322:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007324:	4b2a      	ldr	r3, [pc, #168]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	0a5b      	lsrs	r3, r3, #9
 800732a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800733a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800733e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734a:	ee17 2a90 	vmov	r2, s15
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007352:	4b1f      	ldr	r3, [pc, #124]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	0c1b      	lsrs	r3, r3, #16
 8007358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800735c:	ee07 3a90 	vmov	s15, r3
 8007360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800736c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007378:	ee17 2a90 	vmov	r2, s15
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007380:	4b13      	ldr	r3, [pc, #76]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	0e1b      	lsrs	r3, r3, #24
 8007386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800739a:	edd7 6a07 	vldr	s13, [r7, #28]
 800739e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a6:	ee17 2a90 	vmov	r2, s15
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073ae:	e008      	b.n	80073c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	609a      	str	r2, [r3, #8]
}
 80073c2:	bf00      	nop
 80073c4:	3724      	adds	r7, #36	; 0x24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	58024400 	.word	0x58024400
 80073d4:	03d09000 	.word	0x03d09000
 80073d8:	46000000 	.word	0x46000000
 80073dc:	4c742400 	.word	0x4c742400
 80073e0:	4a742400 	.word	0x4a742400
 80073e4:	4bb71b00 	.word	0x4bb71b00

080073e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b089      	sub	sp, #36	; 0x24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073f0:	4ba1      	ldr	r3, [pc, #644]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80073fa:	4b9f      	ldr	r3, [pc, #636]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	0d1b      	lsrs	r3, r3, #20
 8007400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007404:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007406:	4b9c      	ldr	r3, [pc, #624]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	0a1b      	lsrs	r3, r3, #8
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007412:	4b99      	ldr	r3, [pc, #612]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	fb02 f303 	mul.w	r3, r2, r3
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 8111 	beq.w	8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b02      	cmp	r3, #2
 800743a:	f000 8083 	beq.w	8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2b02      	cmp	r3, #2
 8007442:	f200 80a1 	bhi.w	8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d056      	beq.n	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007452:	e099      	b.n	8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007454:	4b88      	ldr	r3, [pc, #544]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02d      	beq.n	80074bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007460:	4b85      	ldr	r3, [pc, #532]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	08db      	lsrs	r3, r3, #3
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	4a84      	ldr	r2, [pc, #528]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800746c:	fa22 f303 	lsr.w	r3, r2, r3
 8007470:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748a:	4b7b      	ldr	r3, [pc, #492]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749a:	ed97 6a03 	vldr	s12, [r7, #12]
 800749e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074ba:	e087      	b.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ce:	4b6a      	ldr	r3, [pc, #424]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074de:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074fe:	e065      	b.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007512:	4b59      	ldr	r3, [pc, #356]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a03 	vldr	s12, [r7, #12]
 8007526:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007542:	e043      	b.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800768c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007556:	4b48      	ldr	r3, [pc, #288]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007566:	ed97 6a03 	vldr	s12, [r7, #12]
 800756a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007586:	e021      	b.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b37      	ldr	r3, [pc, #220]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80075cc:	4b2a      	ldr	r3, [pc, #168]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	0a5b      	lsrs	r3, r3, #9
 80075d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f2:	ee17 2a90 	vmov	r2, s15
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80075fa:	4b1f      	ldr	r3, [pc, #124]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	0c1b      	lsrs	r3, r3, #16
 8007600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007604:	ee07 3a90 	vmov	s15, r3
 8007608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007610:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007614:	edd7 6a07 	vldr	s13, [r7, #28]
 8007618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007620:	ee17 2a90 	vmov	r2, s15
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007628:	4b13      	ldr	r3, [pc, #76]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	0e1b      	lsrs	r3, r3, #24
 800762e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800763e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007642:	edd7 6a07 	vldr	s13, [r7, #28]
 8007646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764e:	ee17 2a90 	vmov	r2, s15
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007656:	e008      	b.n	800766a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	609a      	str	r2, [r3, #8]
}
 800766a:	bf00      	nop
 800766c:	3724      	adds	r7, #36	; 0x24
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	58024400 	.word	0x58024400
 800767c:	03d09000 	.word	0x03d09000
 8007680:	46000000 	.word	0x46000000
 8007684:	4c742400 	.word	0x4c742400
 8007688:	4a742400 	.word	0x4a742400
 800768c:	4bb71b00 	.word	0x4bb71b00

08007690 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007690:	b480      	push	{r7}
 8007692:	b089      	sub	sp, #36	; 0x24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007698:	4ba0      	ldr	r3, [pc, #640]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80076a2:	4b9e      	ldr	r3, [pc, #632]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	091b      	lsrs	r3, r3, #4
 80076a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80076ae:	4b9b      	ldr	r3, [pc, #620]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076b8:	4b98      	ldr	r3, [pc, #608]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076bc:	08db      	lsrs	r3, r3, #3
 80076be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	fb02 f303 	mul.w	r3, r2, r3
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8111 	beq.w	80078fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	f000 8083 	beq.w	80077ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	f200 80a1 	bhi.w	800782e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d056      	beq.n	80077a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80076f8:	e099      	b.n	800782e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076fa:	4b88      	ldr	r3, [pc, #544]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d02d      	beq.n	8007762 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007706:	4b85      	ldr	r3, [pc, #532]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	08db      	lsrs	r3, r3, #3
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	4a83      	ldr	r2, [pc, #524]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007712:	fa22 f303 	lsr.w	r3, r2, r3
 8007716:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	ee07 3a90 	vmov	s15, r3
 8007728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007730:	4b7a      	ldr	r3, [pc, #488]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007740:	ed97 6a03 	vldr	s12, [r7, #12]
 8007744:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007748:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007760:	e087      	b.n	8007872 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007774:	4b69      	ldr	r3, [pc, #420]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007784:	ed97 6a03 	vldr	s12, [r7, #12]
 8007788:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800778c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077a4:	e065      	b.n	8007872 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800792c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80077b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b8:	4b58      	ldr	r3, [pc, #352]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077e8:	e043      	b.n	8007872 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	ee07 3a90 	vmov	s15, r3
 80077f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80077f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fc:	4b47      	ldr	r3, [pc, #284]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007804:	ee07 3a90 	vmov	s15, r3
 8007808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007810:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007828:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800782c:	e021      	b.n	8007872 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007838:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800783c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007840:	4b36      	ldr	r3, [pc, #216]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007848:	ee07 3a90 	vmov	s15, r3
 800784c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007850:	ed97 6a03 	vldr	s12, [r7, #12]
 8007854:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007870:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007872:	4b2a      	ldr	r3, [pc, #168]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007876:	0a5b      	lsrs	r3, r3, #9
 8007878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787c:	ee07 3a90 	vmov	s15, r3
 8007880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007884:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007888:	ee37 7a87 	vadd.f32	s14, s15, s14
 800788c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007898:	ee17 2a90 	vmov	r2, s15
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80078a0:	4b1e      	ldr	r3, [pc, #120]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80078be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c6:	ee17 2a90 	vmov	r2, s15
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	0e1b      	lsrs	r3, r3, #24
 80078d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d8:	ee07 3a90 	vmov	s15, r3
 80078dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f4:	ee17 2a90 	vmov	r2, s15
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80078fc:	e008      	b.n	8007910 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	609a      	str	r2, [r3, #8]
}
 8007910:	bf00      	nop
 8007912:	3724      	adds	r7, #36	; 0x24
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	58024400 	.word	0x58024400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	46000000 	.word	0x46000000
 8007928:	4c742400 	.word	0x4c742400
 800792c:	4a742400 	.word	0x4a742400
 8007930:	4bb71b00 	.word	0x4bb71b00

08007934 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007942:	4b53      	ldr	r3, [pc, #332]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d101      	bne.n	8007952 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e099      	b.n	8007a86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007952:	4b4f      	ldr	r3, [pc, #316]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a4e      	ldr	r2, [pc, #312]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007958:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800795c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795e:	f7fa fd6f 	bl	8002440 <HAL_GetTick>
 8007962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007964:	e008      	b.n	8007978 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007966:	f7fa fd6b 	bl	8002440 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e086      	b.n	8007a86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007978:	4b45      	ldr	r3, [pc, #276]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f0      	bne.n	8007966 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007984:	4b42      	ldr	r3, [pc, #264]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	031b      	lsls	r3, r3, #12
 8007992:	493f      	ldr	r1, [pc, #252]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	628b      	str	r3, [r1, #40]	; 0x28
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	025b      	lsls	r3, r3, #9
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	061b      	lsls	r3, r3, #24
 80079c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079c8:	4931      	ldr	r1, [pc, #196]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079ce:	4b30      	ldr	r3, [pc, #192]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	492d      	ldr	r1, [pc, #180]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079e0:	4b2b      	ldr	r3, [pc, #172]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	f023 0220 	bic.w	r2, r3, #32
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	4928      	ldr	r1, [pc, #160]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079f2:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	4a26      	ldr	r2, [pc, #152]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079f8:	f023 0310 	bic.w	r3, r3, #16
 80079fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079fe:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a02:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <RCCEx_PLL2_Config+0x160>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	69d2      	ldr	r2, [r2, #28]
 8007a0a:	00d2      	lsls	r2, r2, #3
 8007a0c:	4920      	ldr	r1, [pc, #128]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a12:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a18:	f043 0310 	orr.w	r3, r3, #16
 8007a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a24:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	4a19      	ldr	r2, [pc, #100]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a30:	e00f      	b.n	8007a52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d106      	bne.n	8007a46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4a14      	ldr	r2, [pc, #80]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a44:	e005      	b.n	8007a52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a46:	4b12      	ldr	r3, [pc, #72]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a52:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5e:	f7fa fcef 	bl	8002440 <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a64:	e008      	b.n	8007a78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a66:	f7fa fceb 	bl	8002440 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	58024400 	.word	0x58024400
 8007a94:	ffff0007 	.word	0xffff0007

08007a98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aa6:	4b53      	ldr	r3, [pc, #332]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d101      	bne.n	8007ab6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e099      	b.n	8007bea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ab6:	4b4f      	ldr	r3, [pc, #316]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a4e      	ldr	r2, [pc, #312]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac2:	f7fa fcbd 	bl	8002440 <HAL_GetTick>
 8007ac6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ac8:	e008      	b.n	8007adc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007aca:	f7fa fcb9 	bl	8002440 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e086      	b.n	8007bea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007adc:	4b45      	ldr	r3, [pc, #276]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f0      	bne.n	8007aca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ae8:	4b42      	ldr	r3, [pc, #264]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	051b      	lsls	r3, r3, #20
 8007af6:	493f      	ldr	r1, [pc, #252]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	628b      	str	r3, [r1, #40]	; 0x28
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	025b      	lsls	r3, r3, #9
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	041b      	lsls	r3, r3, #16
 8007b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	061b      	lsls	r3, r3, #24
 8007b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b2c:	4931      	ldr	r1, [pc, #196]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b32:	4b30      	ldr	r3, [pc, #192]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	492d      	ldr	r1, [pc, #180]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b44:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	4928      	ldr	r1, [pc, #160]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b56:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b66:	4b24      	ldr	r3, [pc, #144]	; (8007bf8 <RCCEx_PLL3_Config+0x160>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	69d2      	ldr	r2, [r2, #28]
 8007b6e:	00d2      	lsls	r2, r2, #3
 8007b70:	4920      	ldr	r1, [pc, #128]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b76:	4b1f      	ldr	r3, [pc, #124]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d106      	bne.n	8007b96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b88:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b94:	e00f      	b.n	8007bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d106      	bne.n	8007baa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b9c:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007ba2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ba8:	e005      	b.n	8007bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4a11      	ldr	r2, [pc, #68]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a0e      	ldr	r2, [pc, #56]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc2:	f7fa fc3d 	bl	8002440 <HAL_GetTick>
 8007bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bc8:	e008      	b.n	8007bdc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bca:	f7fa fc39 	bl	8002440 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e006      	b.n	8007bea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bdc:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f0      	beq.n	8007bca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	58024400 	.word	0x58024400
 8007bf8:	ffff0007 	.word	0xffff0007

08007bfc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e0f1      	b.n	8007df2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a78      	ldr	r2, [pc, #480]	; (8007dfc <HAL_SPI_Init+0x200>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00f      	beq.n	8007c3e <HAL_SPI_Init+0x42>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a77      	ldr	r2, [pc, #476]	; (8007e00 <HAL_SPI_Init+0x204>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00a      	beq.n	8007c3e <HAL_SPI_Init+0x42>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a75      	ldr	r2, [pc, #468]	; (8007e04 <HAL_SPI_Init+0x208>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d005      	beq.n	8007c3e <HAL_SPI_Init+0x42>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2b0f      	cmp	r3, #15
 8007c38:	d901      	bls.n	8007c3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e0d9      	b.n	8007df2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 f880 	bl	8008d44 <SPI_GetPacketSize>
 8007c44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a6c      	ldr	r2, [pc, #432]	; (8007dfc <HAL_SPI_Init+0x200>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00c      	beq.n	8007c6a <HAL_SPI_Init+0x6e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a6a      	ldr	r2, [pc, #424]	; (8007e00 <HAL_SPI_Init+0x204>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d007      	beq.n	8007c6a <HAL_SPI_Init+0x6e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a69      	ldr	r2, [pc, #420]	; (8007e04 <HAL_SPI_Init+0x208>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d002      	beq.n	8007c6a <HAL_SPI_Init+0x6e>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b08      	cmp	r3, #8
 8007c68:	d811      	bhi.n	8007c8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c6e:	4a63      	ldr	r2, [pc, #396]	; (8007dfc <HAL_SPI_Init+0x200>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d009      	beq.n	8007c88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a61      	ldr	r2, [pc, #388]	; (8007e00 <HAL_SPI_Init+0x204>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d004      	beq.n	8007c88 <HAL_SPI_Init+0x8c>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a60      	ldr	r2, [pc, #384]	; (8007e04 <HAL_SPI_Init+0x208>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d104      	bne.n	8007c92 <HAL_SPI_Init+0x96>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d901      	bls.n	8007c92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e0af      	b.n	8007df2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7fa f8b0 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0201 	bic.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007cce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cd8:	d119      	bne.n	8007d0e <HAL_SPI_Init+0x112>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ce2:	d103      	bne.n	8007cec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10c      	bne.n	8007d0e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cfc:	d107      	bne.n	8007d0e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69da      	ldr	r2, [r3, #28]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	431a      	orrs	r2, r3
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d20:	ea42 0103 	orr.w	r1, r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	431a      	orrs	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6e:	ea42 0103 	orr.w	r1, r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d113      	bne.n	8007dae <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0201 	bic.w	r2, r2, #1
 8007dbc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	40013000 	.word	0x40013000
 8007e00:	40003800 	.word	0x40003800
 8007e04:	40003c00 	.word	0x40003c00

08007e08 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	; 0x28
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	4613      	mov	r3, r2
 8007e16:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3320      	adds	r3, #32
 8007e1e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_SPI_Transmit+0x2a>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e1d7      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e3a:	f7fa fb01 	bl	8002440 <HAL_GetTick>
 8007e3e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d007      	beq.n	8007e5c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e58:	7efb      	ldrb	r3, [r7, #27]
 8007e5a:	e1c2      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_SPI_Transmit+0x60>
 8007e62:	88fb      	ldrh	r3, [r7, #6]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d107      	bne.n	8007e78 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e74:	7efb      	ldrb	r3, [r7, #27]
 8007e76:	e1b4      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	88fa      	ldrh	r2, [r7, #6]
 8007e92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	88fa      	ldrh	r2, [r7, #6]
 8007e9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007ec8:	d107      	bne.n	8007eda <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b96      	ldr	r3, [pc, #600]	; (800813c <HAL_SPI_Transmit+0x334>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	88f9      	ldrh	r1, [r7, #6]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	6812      	ldr	r2, [r2, #0]
 8007eea:	430b      	orrs	r3, r1
 8007eec:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0201 	orr.w	r2, r2, #1
 8007efc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f06:	d107      	bne.n	8007f18 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b0f      	cmp	r3, #15
 8007f1e:	d947      	bls.n	8007fb0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007f20:	e03f      	b.n	8007fa2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d114      	bne.n	8007f5a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f40:	1d1a      	adds	r2, r3, #4
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007f58:	e023      	b.n	8007fa2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f5a:	f7fa fa71 	bl	8002440 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d803      	bhi.n	8007f72 <HAL_SPI_Transmit+0x16a>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f70:	d102      	bne.n	8007f78 <HAL_SPI_Transmit+0x170>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d114      	bne.n	8007fa2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fe15 	bl	8008ba8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e11f      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1b9      	bne.n	8007f22 <HAL_SPI_Transmit+0x11a>
 8007fae:	e0f2      	b.n	8008196 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b07      	cmp	r3, #7
 8007fb6:	f240 80e7 	bls.w	8008188 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007fba:	e05d      	b.n	8008078 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d132      	bne.n	8008030 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d918      	bls.n	8008008 <HAL_SPI_Transmit+0x200>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d014      	beq.n	8008008 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6812      	ldr	r2, [r2, #0]
 8007fe8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fee:	1d1a      	adds	r2, r3, #4
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	3b02      	subs	r3, #2
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008006:	e037      	b.n	8008078 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800c:	881a      	ldrh	r2, [r3, #0]
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008016:	1c9a      	adds	r2, r3, #2
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800802e:	e023      	b.n	8008078 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008030:	f7fa fa06 	bl	8002440 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d803      	bhi.n	8008048 <HAL_SPI_Transmit+0x240>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008046:	d102      	bne.n	800804e <HAL_SPI_Transmit+0x246>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d114      	bne.n	8008078 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 fdaa 	bl	8008ba8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e0b4      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800807e:	b29b      	uxth	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d19b      	bne.n	8007fbc <HAL_SPI_Transmit+0x1b4>
 8008084:	e087      	b.n	8008196 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b02      	cmp	r3, #2
 8008092:	d155      	bne.n	8008140 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800809a:	b29b      	uxth	r3, r3
 800809c:	2b03      	cmp	r3, #3
 800809e:	d918      	bls.n	80080d2 <HAL_SPI_Transmit+0x2ca>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d914      	bls.n	80080d2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b8:	1d1a      	adds	r2, r3, #4
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b04      	subs	r3, #4
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80080d0:	e05a      	b.n	8008188 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d917      	bls.n	800810e <HAL_SPI_Transmit+0x306>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d013      	beq.n	800810e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ea:	881a      	ldrh	r2, [r3, #0]
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f4:	1c9a      	adds	r2, r3, #2
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b02      	subs	r3, #2
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800810c:	e03c      	b.n	8008188 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3320      	adds	r3, #32
 8008118:	7812      	ldrb	r2, [r2, #0]
 800811a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008138:	e026      	b.n	8008188 <HAL_SPI_Transmit+0x380>
 800813a:	bf00      	nop
 800813c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008140:	f7fa f97e 	bl	8002440 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	429a      	cmp	r2, r3
 800814e:	d803      	bhi.n	8008158 <HAL_SPI_Transmit+0x350>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008156:	d102      	bne.n	800815e <HAL_SPI_Transmit+0x356>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d114      	bne.n	8008188 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fd22 	bl	8008ba8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e02c      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800818e:	b29b      	uxth	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	f47f af78 	bne.w	8008086 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	2108      	movs	r1, #8
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fda1 	bl	8008ce8 <SPI_WaitOnFlagUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d007      	beq.n	80081bc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b2:	f043 0220 	orr.w	r2, r3, #32
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 fcf3 	bl	8008ba8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80081e0:	7efb      	ldrb	r3, [r7, #27]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3720      	adds	r7, #32
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop

080081ec <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3330      	adds	r3, #48	; 0x30
 8008206:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008210:	d112      	bne.n	8008238 <HAL_SPI_Receive+0x4c>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10e      	bne.n	8008238 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2204      	movs	r2, #4
 800821e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008222:	88fa      	ldrh	r2, [r7, #6]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	4613      	mov	r3, r2
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 f9ce 	bl	80085d0 <HAL_SPI_TransmitReceive>
 8008234:	4603      	mov	r3, r0
 8008236:	e1c7      	b.n	80085c8 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800823e:	2b01      	cmp	r3, #1
 8008240:	d101      	bne.n	8008246 <HAL_SPI_Receive+0x5a>
 8008242:	2302      	movs	r3, #2
 8008244:	e1c0      	b.n	80085c8 <HAL_SPI_Receive+0x3dc>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800824e:	f7fa f8f7 	bl	8002440 <HAL_GetTick>
 8008252:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	d007      	beq.n	8008270 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008260:	2302      	movs	r3, #2
 8008262:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800826c:	7ffb      	ldrb	r3, [r7, #31]
 800826e:	e1ab      	b.n	80085c8 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <HAL_SPI_Receive+0x90>
 8008276:	88fb      	ldrh	r3, [r7, #6]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d107      	bne.n	800828c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008288:	7ffb      	ldrb	r3, [r7, #31]
 800828a:	e19d      	b.n	80085c8 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2204      	movs	r2, #4
 8008290:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	88fa      	ldrh	r2, [r7, #6]
 80082a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80082dc:	d107      	bne.n	80082ee <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	4b94      	ldr	r3, [pc, #592]	; (8008548 <HAL_SPI_Receive+0x35c>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	88f9      	ldrh	r1, [r7, #6]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	430b      	orrs	r3, r1
 8008300:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0201 	orr.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800831a:	d107      	bne.n	800832c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800832a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	2b0f      	cmp	r3, #15
 8008332:	d948      	bls.n	80083c6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008334:	e040      	b.n	80083b8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695a      	ldr	r2, [r3, #20]
 800833c:	f248 0308 	movw	r3, #32776	; 0x8008
 8008340:	4013      	ands	r3, r2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d014      	beq.n	8008370 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800834e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008350:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008356:	1d1a      	adds	r2, r3, #4
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008362:	b29b      	uxth	r3, r3
 8008364:	3b01      	subs	r3, #1
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800836e:	e023      	b.n	80083b8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008370:	f7fa f866 	bl	8002440 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d803      	bhi.n	8008388 <HAL_SPI_Receive+0x19c>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008386:	d102      	bne.n	800838e <HAL_SPI_Receive+0x1a2>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d114      	bne.n	80083b8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fc0a 	bl	8008ba8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e107      	b.n	80085c8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1b8      	bne.n	8008336 <HAL_SPI_Receive+0x14a>
 80083c4:	e0ed      	b.n	80085a2 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	2b07      	cmp	r3, #7
 80083cc:	f240 80e2 	bls.w	8008594 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80083d0:	e05b      	b.n	800848a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d030      	beq.n	8008442 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d014      	beq.n	8008418 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80083f8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083fe:	1d1a      	adds	r2, r3, #4
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800840a:	b29b      	uxth	r3, r3
 800840c:	3b02      	subs	r3, #2
 800840e:	b29a      	uxth	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008416:	e038      	b.n	800848a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	8812      	ldrh	r2, [r2, #0]
 8008420:	b292      	uxth	r2, r2
 8008422:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008428:	1c9a      	adds	r2, r3, #2
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008440:	e023      	b.n	800848a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008442:	f7f9 fffd 	bl	8002440 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d803      	bhi.n	800845a <HAL_SPI_Receive+0x26e>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008458:	d102      	bne.n	8008460 <HAL_SPI_Receive+0x274>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d114      	bne.n	800848a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 fba1 	bl	8008ba8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008474:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e09e      	b.n	80085c8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008490:	b29b      	uxth	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d19d      	bne.n	80083d2 <HAL_SPI_Receive+0x1e6>
 8008496:	e084      	b.n	80085a2 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d052      	beq.n	800854c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d014      	beq.n	80084de <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80084be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c4:	1d1a      	adds	r2, r3, #4
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b04      	subs	r3, #4
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80084dc:	e05a      	b.n	8008594 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80084e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ec:	d914      	bls.n	8008518 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	8812      	ldrh	r2, [r2, #0]
 80084f6:	b292      	uxth	r2, r2
 80084f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084fe:	1c9a      	adds	r2, r3, #2
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b02      	subs	r3, #2
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008516:	e03d      	b.n	8008594 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008524:	7812      	ldrb	r2, [r2, #0]
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008546:	e025      	b.n	8008594 <HAL_SPI_Receive+0x3a8>
 8008548:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800854c:	f7f9 ff78 	bl	8002440 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d803      	bhi.n	8008564 <HAL_SPI_Receive+0x378>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	d102      	bne.n	800856a <HAL_SPI_Receive+0x37e>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d114      	bne.n	8008594 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 fb1c 	bl	8008ba8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800857e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e019      	b.n	80085c8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	f47f af7b 	bne.w	8008498 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 fb00 	bl	8008ba8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 80085c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3720      	adds	r7, #32
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08e      	sub	sp, #56	; 0x38
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3320      	adds	r3, #32
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3330      	adds	r3, #48	; 0x30
 80085f2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_SPI_TransmitReceive+0x32>
 80085fe:	2302      	movs	r3, #2
 8008600:	e2ce      	b.n	8008ba0 <HAL_SPI_TransmitReceive+0x5d0>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800860a:	f7f9 ff19 	bl	8002440 <HAL_GetTick>
 800860e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008610:	887b      	ldrh	r3, [r7, #2]
 8008612:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008614:	887b      	ldrh	r3, [r7, #2]
 8008616:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800861e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008626:	7efb      	ldrb	r3, [r7, #27]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d014      	beq.n	8008656 <HAL_SPI_TransmitReceive+0x86>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008632:	d106      	bne.n	8008642 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008638:	2b00      	cmp	r3, #0
 800863a:	d102      	bne.n	8008642 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800863c:	7efb      	ldrb	r3, [r7, #27]
 800863e:	2b04      	cmp	r3, #4
 8008640:	d009      	beq.n	8008656 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008642:	2302      	movs	r3, #2
 8008644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008654:	e2a4      	b.n	8008ba0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <HAL_SPI_TransmitReceive+0x98>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <HAL_SPI_TransmitReceive+0x98>
 8008662:	887b      	ldrh	r3, [r7, #2]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800867a:	e291      	b.n	8008ba0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b04      	cmp	r3, #4
 8008686:	d003      	beq.n	8008690 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2205      	movs	r2, #5
 800868c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	887a      	ldrh	r2, [r7, #2]
 80086a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	887a      	ldrh	r2, [r7, #2]
 80086aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	887a      	ldrh	r2, [r7, #2]
 80086b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	887a      	ldrh	r2, [r7, #2]
 80086c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	4b9f      	ldr	r3, [pc, #636]	; (8008954 <HAL_SPI_TransmitReceive+0x384>)
 80086d8:	4013      	ands	r3, r2
 80086da:	8879      	ldrh	r1, [r7, #2]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	6812      	ldr	r2, [r2, #0]
 80086e0:	430b      	orrs	r3, r1
 80086e2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0201 	orr.w	r2, r2, #1
 80086f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086fc:	d107      	bne.n	800870e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800870c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	2b0f      	cmp	r3, #15
 8008714:	d970      	bls.n	80087f8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008716:	e068      	b.n	80087ea <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b02      	cmp	r3, #2
 8008724:	d11a      	bne.n	800875c <HAL_SPI_TransmitReceive+0x18c>
 8008726:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008728:	2b00      	cmp	r3, #0
 800872a:	d017      	beq.n	800875c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800873c:	1d1a      	adds	r2, r3, #4
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008748:	b29b      	uxth	r3, r3
 800874a:	3b01      	subs	r3, #1
 800874c:	b29a      	uxth	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800875a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	f248 0308 	movw	r3, #32776	; 0x8008
 8008766:	4013      	ands	r3, r2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d01a      	beq.n	80087a2 <HAL_SPI_TransmitReceive+0x1d2>
 800876c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d017      	beq.n	80087a2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800877a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800877c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087a2:	f7f9 fe4d 	bl	8002440 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d803      	bhi.n	80087ba <HAL_SPI_TransmitReceive+0x1ea>
 80087b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b8:	d102      	bne.n	80087c0 <HAL_SPI_TransmitReceive+0x1f0>
 80087ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d114      	bne.n	80087ea <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f9f1 	bl	8008ba8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e1da      	b.n	8008ba0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d193      	bne.n	8008718 <HAL_SPI_TransmitReceive+0x148>
 80087f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d190      	bne.n	8008718 <HAL_SPI_TransmitReceive+0x148>
 80087f6:	e1ac      	b.n	8008b52 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	2b07      	cmp	r3, #7
 80087fe:	f240 81a0 	bls.w	8008b42 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008802:	e0a9      	b.n	8008958 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b02      	cmp	r3, #2
 8008810:	d139      	bne.n	8008886 <HAL_SPI_TransmitReceive+0x2b6>
 8008812:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008814:	2b00      	cmp	r3, #0
 8008816:	d036      	beq.n	8008886 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008818:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800881a:	2b01      	cmp	r3, #1
 800881c:	d91c      	bls.n	8008858 <HAL_SPI_TransmitReceive+0x288>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d018      	beq.n	8008858 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6812      	ldr	r2, [r2, #0]
 8008830:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008836:	1d1a      	adds	r2, r3, #4
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008842:	b29b      	uxth	r3, r3
 8008844:	3b02      	subs	r3, #2
 8008846:	b29a      	uxth	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008854:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008856:	e016      	b.n	8008886 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885c:	881a      	ldrh	r2, [r3, #0]
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008866:	1c9a      	adds	r2, r3, #2
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008872:	b29b      	uxth	r3, r3
 8008874:	3b01      	subs	r3, #1
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008884:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d03a      	beq.n	800890a <HAL_SPI_TransmitReceive+0x33a>
 8008894:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d037      	beq.n	800890a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d018      	beq.n	80088da <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80088b2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b8:	1d1a      	adds	r2, r3, #4
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b02      	subs	r3, #2
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80088d8:	e017      	b.n	800890a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088de:	6a3a      	ldr	r2, [r7, #32]
 80088e0:	8812      	ldrh	r2, [r2, #0]
 80088e2:	b292      	uxth	r2, r2
 80088e4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ea:	1c9a      	adds	r2, r3, #2
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	3b01      	subs	r3, #1
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008908:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800890a:	f7f9 fd99 	bl	8002440 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008916:	429a      	cmp	r2, r3
 8008918:	d803      	bhi.n	8008922 <HAL_SPI_TransmitReceive+0x352>
 800891a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d102      	bne.n	8008928 <HAL_SPI_TransmitReceive+0x358>
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	2b00      	cmp	r3, #0
 8008926:	d117      	bne.n	8008958 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 f93d 	bl	8008ba8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800893c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e126      	b.n	8008ba0 <HAL_SPI_TransmitReceive+0x5d0>
 8008952:	bf00      	nop
 8008954:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008958:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800895a:	2b00      	cmp	r3, #0
 800895c:	f47f af52 	bne.w	8008804 <HAL_SPI_TransmitReceive+0x234>
 8008960:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008962:	2b00      	cmp	r3, #0
 8008964:	f47f af4e 	bne.w	8008804 <HAL_SPI_TransmitReceive+0x234>
 8008968:	e0f3      	b.n	8008b52 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b02      	cmp	r3, #2
 8008976:	d15a      	bne.n	8008a2e <HAL_SPI_TransmitReceive+0x45e>
 8008978:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800897a:	2b00      	cmp	r3, #0
 800897c:	d057      	beq.n	8008a2e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800897e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008980:	2b03      	cmp	r3, #3
 8008982:	d91c      	bls.n	80089be <HAL_SPI_TransmitReceive+0x3ee>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	d918      	bls.n	80089be <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899c:	1d1a      	adds	r2, r3, #4
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	3b04      	subs	r3, #4
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80089bc:	e037      	b.n	8008a2e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80089be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d91b      	bls.n	80089fc <HAL_SPI_TransmitReceive+0x42c>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d017      	beq.n	80089fc <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d0:	881a      	ldrh	r2, [r3, #0]
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089da:	1c9a      	adds	r2, r3, #2
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b02      	subs	r3, #2
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80089fa:	e018      	b.n	8008a2e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3320      	adds	r3, #32
 8008a06:	7812      	ldrb	r2, [r2, #0]
 8008a08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d05e      	beq.n	8008afa <HAL_SPI_TransmitReceive+0x52a>
 8008a3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d05b      	beq.n	8008afa <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d018      	beq.n	8008a82 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a5a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	3b04      	subs	r3, #4
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a80:	e03b      	b.n	8008afa <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a90:	d918      	bls.n	8008ac4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a96:	6a3a      	ldr	r2, [r7, #32]
 8008a98:	8812      	ldrh	r2, [r2, #0]
 8008a9a:	b292      	uxth	r2, r2
 8008a9c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa2:	1c9a      	adds	r2, r3, #2
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3b02      	subs	r3, #2
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ac0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008ac2:	e01a      	b.n	8008afa <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ad0:	7812      	ldrb	r2, [r2, #0]
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008af8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008afa:	f7f9 fca1 	bl	8002440 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d803      	bhi.n	8008b12 <HAL_SPI_TransmitReceive+0x542>
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b10:	d102      	bne.n	8008b18 <HAL_SPI_TransmitReceive+0x548>
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d114      	bne.n	8008b42 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f845 	bl	8008ba8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e02e      	b.n	8008ba0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f47f af10 	bne.w	800896a <HAL_SPI_TransmitReceive+0x39a>
 8008b4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f47f af0c 	bne.w	800896a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2108      	movs	r1, #8
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 f8c3 	bl	8008ce8 <SPI_WaitOnFlagUntilTimeout>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d007      	beq.n	8008b78 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b6e:	f043 0220 	orr.w	r2, r3, #32
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f815 	bl	8008ba8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e001      	b.n	8008ba0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8008b9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3730      	adds	r7, #48	; 0x30
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0208 	orr.w	r2, r2, #8
 8008bc6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0210 	orr.w	r2, r2, #16
 8008bd6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0201 	bic.w	r2, r2, #1
 8008be6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6919      	ldr	r1, [r3, #16]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	4b3c      	ldr	r3, [pc, #240]	; (8008ce4 <SPI_CloseTransfer+0x13c>)
 8008bf4:	400b      	ands	r3, r1
 8008bf6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008c06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	d014      	beq.n	8008c3e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00f      	beq.n	8008c3e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	699a      	ldr	r2, [r3, #24]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f042 0220 	orr.w	r2, r2, #32
 8008c3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d014      	beq.n	8008c74 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00f      	beq.n	8008c74 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c5a:	f043 0204 	orr.w	r2, r3, #4
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	699a      	ldr	r2, [r3, #24]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00f      	beq.n	8008c9e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c84:	f043 0201 	orr.w	r2, r3, #1
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	699a      	ldr	r2, [r3, #24]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00f      	beq.n	8008cc8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cae:	f043 0208 	orr.w	r2, r3, #8
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cc6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008cd8:	bf00      	nop
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	fffffc90 	.word	0xfffffc90

08008ce8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	603b      	str	r3, [r7, #0]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008cf8:	e010      	b.n	8008d1c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cfa:	f7f9 fba1 	bl	8002440 <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d803      	bhi.n	8008d12 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d10:	d102      	bne.n	8008d18 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e00f      	b.n	8008d3c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	695a      	ldr	r2, [r3, #20]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	4013      	ands	r3, r2
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	bf0c      	ite	eq
 8008d2c:	2301      	moveq	r3, #1
 8008d2e:	2300      	movne	r3, #0
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	461a      	mov	r2, r3
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d0df      	beq.n	8008cfa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d50:	095b      	lsrs	r3, r3, #5
 8008d52:	3301      	adds	r3, #1
 8008d54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	3307      	adds	r3, #7
 8008d62:	08db      	lsrs	r3, r3, #3
 8008d64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e049      	b.n	8008e20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d106      	bne.n	8008da6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7f9 f897 	bl	8001ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2202      	movs	r2, #2
 8008daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3304      	adds	r3, #4
 8008db6:	4619      	mov	r1, r3
 8008db8:	4610      	mov	r0, r2
 8008dba:	f000 fd03 	bl	80097c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e049      	b.n	8008ece <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f841 	bl	8008ed6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3304      	adds	r3, #4
 8008e64:	4619      	mov	r1, r3
 8008e66:	4610      	mov	r0, r2
 8008e68:	f000 fcac 	bl	80097c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <HAL_TIM_PWM_Start+0x24>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	e03c      	b.n	8008f8a <HAL_TIM_PWM_Start+0x9e>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d109      	bne.n	8008f2a <HAL_TIM_PWM_Start+0x3e>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	bf14      	ite	ne
 8008f22:	2301      	movne	r3, #1
 8008f24:	2300      	moveq	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	e02f      	b.n	8008f8a <HAL_TIM_PWM_Start+0x9e>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d109      	bne.n	8008f44 <HAL_TIM_PWM_Start+0x58>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	bf14      	ite	ne
 8008f3c:	2301      	movne	r3, #1
 8008f3e:	2300      	moveq	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	e022      	b.n	8008f8a <HAL_TIM_PWM_Start+0x9e>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b0c      	cmp	r3, #12
 8008f48:	d109      	bne.n	8008f5e <HAL_TIM_PWM_Start+0x72>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	bf14      	ite	ne
 8008f56:	2301      	movne	r3, #1
 8008f58:	2300      	moveq	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	e015      	b.n	8008f8a <HAL_TIM_PWM_Start+0x9e>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b10      	cmp	r3, #16
 8008f62:	d109      	bne.n	8008f78 <HAL_TIM_PWM_Start+0x8c>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	bf14      	ite	ne
 8008f70:	2301      	movne	r3, #1
 8008f72:	2300      	moveq	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	e008      	b.n	8008f8a <HAL_TIM_PWM_Start+0x9e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	bf14      	ite	ne
 8008f84:	2301      	movne	r3, #1
 8008f86:	2300      	moveq	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e0a1      	b.n	80090d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <HAL_TIM_PWM_Start+0xb6>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fa0:	e023      	b.n	8008fea <HAL_TIM_PWM_Start+0xfe>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d104      	bne.n	8008fb2 <HAL_TIM_PWM_Start+0xc6>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fb0:	e01b      	b.n	8008fea <HAL_TIM_PWM_Start+0xfe>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	d104      	bne.n	8008fc2 <HAL_TIM_PWM_Start+0xd6>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fc0:	e013      	b.n	8008fea <HAL_TIM_PWM_Start+0xfe>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b0c      	cmp	r3, #12
 8008fc6:	d104      	bne.n	8008fd2 <HAL_TIM_PWM_Start+0xe6>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fd0:	e00b      	b.n	8008fea <HAL_TIM_PWM_Start+0xfe>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d104      	bne.n	8008fe2 <HAL_TIM_PWM_Start+0xf6>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fe0:	e003      	b.n	8008fea <HAL_TIM_PWM_Start+0xfe>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fff4 	bl	8009fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a38      	ldr	r2, [pc, #224]	; (80090e0 <HAL_TIM_PWM_Start+0x1f4>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d013      	beq.n	800902a <HAL_TIM_PWM_Start+0x13e>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a37      	ldr	r2, [pc, #220]	; (80090e4 <HAL_TIM_PWM_Start+0x1f8>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00e      	beq.n	800902a <HAL_TIM_PWM_Start+0x13e>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a35      	ldr	r2, [pc, #212]	; (80090e8 <HAL_TIM_PWM_Start+0x1fc>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d009      	beq.n	800902a <HAL_TIM_PWM_Start+0x13e>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a34      	ldr	r2, [pc, #208]	; (80090ec <HAL_TIM_PWM_Start+0x200>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d004      	beq.n	800902a <HAL_TIM_PWM_Start+0x13e>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a32      	ldr	r2, [pc, #200]	; (80090f0 <HAL_TIM_PWM_Start+0x204>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d101      	bne.n	800902e <HAL_TIM_PWM_Start+0x142>
 800902a:	2301      	movs	r3, #1
 800902c:	e000      	b.n	8009030 <HAL_TIM_PWM_Start+0x144>
 800902e:	2300      	movs	r3, #0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009042:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a25      	ldr	r2, [pc, #148]	; (80090e0 <HAL_TIM_PWM_Start+0x1f4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d022      	beq.n	8009094 <HAL_TIM_PWM_Start+0x1a8>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009056:	d01d      	beq.n	8009094 <HAL_TIM_PWM_Start+0x1a8>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a25      	ldr	r2, [pc, #148]	; (80090f4 <HAL_TIM_PWM_Start+0x208>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d018      	beq.n	8009094 <HAL_TIM_PWM_Start+0x1a8>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a24      	ldr	r2, [pc, #144]	; (80090f8 <HAL_TIM_PWM_Start+0x20c>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d013      	beq.n	8009094 <HAL_TIM_PWM_Start+0x1a8>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a22      	ldr	r2, [pc, #136]	; (80090fc <HAL_TIM_PWM_Start+0x210>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00e      	beq.n	8009094 <HAL_TIM_PWM_Start+0x1a8>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a1a      	ldr	r2, [pc, #104]	; (80090e4 <HAL_TIM_PWM_Start+0x1f8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d009      	beq.n	8009094 <HAL_TIM_PWM_Start+0x1a8>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1e      	ldr	r2, [pc, #120]	; (8009100 <HAL_TIM_PWM_Start+0x214>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d004      	beq.n	8009094 <HAL_TIM_PWM_Start+0x1a8>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a16      	ldr	r2, [pc, #88]	; (80090e8 <HAL_TIM_PWM_Start+0x1fc>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d115      	bne.n	80090c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	4b1a      	ldr	r3, [pc, #104]	; (8009104 <HAL_TIM_PWM_Start+0x218>)
 800909c:	4013      	ands	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b06      	cmp	r3, #6
 80090a4:	d015      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x1e6>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ac:	d011      	beq.n	80090d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f042 0201 	orr.w	r2, r2, #1
 80090bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090be:	e008      	b.n	80090d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0201 	orr.w	r2, r2, #1
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	e000      	b.n	80090d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	40010000 	.word	0x40010000
 80090e4:	40010400 	.word	0x40010400
 80090e8:	40014000 	.word	0x40014000
 80090ec:	40014400 	.word	0x40014400
 80090f0:	40014800 	.word	0x40014800
 80090f4:	40000400 	.word	0x40000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	40000c00 	.word	0x40000c00
 8009100:	40001800 	.word	0x40001800
 8009104:	00010007 	.word	0x00010007

08009108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b02      	cmp	r3, #2
 800911c:	d122      	bne.n	8009164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f003 0302 	and.w	r3, r3, #2
 8009128:	2b02      	cmp	r3, #2
 800912a:	d11b      	bne.n	8009164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f06f 0202 	mvn.w	r2, #2
 8009134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fb1c 	bl	8009788 <HAL_TIM_IC_CaptureCallback>
 8009150:	e005      	b.n	800915e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fb0e 	bl	8009774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fb1f 	bl	800979c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b04      	cmp	r3, #4
 8009170:	d122      	bne.n	80091b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b04      	cmp	r3, #4
 800917e:	d11b      	bne.n	80091b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f06f 0204 	mvn.w	r2, #4
 8009188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2202      	movs	r2, #2
 800918e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 faf2 	bl	8009788 <HAL_TIM_IC_CaptureCallback>
 80091a4:	e005      	b.n	80091b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fae4 	bl	8009774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 faf5 	bl	800979c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	f003 0308 	and.w	r3, r3, #8
 80091c2:	2b08      	cmp	r3, #8
 80091c4:	d122      	bne.n	800920c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d11b      	bne.n	800920c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f06f 0208 	mvn.w	r2, #8
 80091dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2204      	movs	r2, #4
 80091e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fac8 	bl	8009788 <HAL_TIM_IC_CaptureCallback>
 80091f8:	e005      	b.n	8009206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 faba 	bl	8009774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 facb 	bl	800979c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f003 0310 	and.w	r3, r3, #16
 8009216:	2b10      	cmp	r3, #16
 8009218:	d122      	bne.n	8009260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f003 0310 	and.w	r3, r3, #16
 8009224:	2b10      	cmp	r3, #16
 8009226:	d11b      	bne.n	8009260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f06f 0210 	mvn.w	r2, #16
 8009230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2208      	movs	r2, #8
 8009236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa9e 	bl	8009788 <HAL_TIM_IC_CaptureCallback>
 800924c:	e005      	b.n	800925a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fa90 	bl	8009774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 faa1 	bl	800979c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b01      	cmp	r3, #1
 800926c:	d10e      	bne.n	800928c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b01      	cmp	r3, #1
 800927a:	d107      	bne.n	800928c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f06f 0201 	mvn.w	r2, #1
 8009284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa6a 	bl	8009760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009296:	2b80      	cmp	r3, #128	; 0x80
 8009298:	d10e      	bne.n	80092b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a4:	2b80      	cmp	r3, #128	; 0x80
 80092a6:	d107      	bne.n	80092b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fff2 	bl	800a29c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c6:	d10e      	bne.n	80092e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d2:	2b80      	cmp	r3, #128	; 0x80
 80092d4:	d107      	bne.n	80092e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 ffe5 	bl	800a2b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f0:	2b40      	cmp	r3, #64	; 0x40
 80092f2:	d10e      	bne.n	8009312 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fe:	2b40      	cmp	r3, #64	; 0x40
 8009300:	d107      	bne.n	8009312 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800930a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fa4f 	bl	80097b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b20      	cmp	r3, #32
 800931e:	d10e      	bne.n	800933e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f003 0320 	and.w	r3, r3, #32
 800932a:	2b20      	cmp	r3, #32
 800932c:	d107      	bne.n	800933e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f06f 0220 	mvn.w	r2, #32
 8009336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 ffa5 	bl	800a288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800935e:	2b01      	cmp	r3, #1
 8009360:	d101      	bne.n	8009366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009362:	2302      	movs	r3, #2
 8009364:	e0ff      	b.n	8009566 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b14      	cmp	r3, #20
 8009372:	f200 80f0 	bhi.w	8009556 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009376:	a201      	add	r2, pc, #4	; (adr r2, 800937c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	080093d1 	.word	0x080093d1
 8009380:	08009557 	.word	0x08009557
 8009384:	08009557 	.word	0x08009557
 8009388:	08009557 	.word	0x08009557
 800938c:	08009411 	.word	0x08009411
 8009390:	08009557 	.word	0x08009557
 8009394:	08009557 	.word	0x08009557
 8009398:	08009557 	.word	0x08009557
 800939c:	08009453 	.word	0x08009453
 80093a0:	08009557 	.word	0x08009557
 80093a4:	08009557 	.word	0x08009557
 80093a8:	08009557 	.word	0x08009557
 80093ac:	08009493 	.word	0x08009493
 80093b0:	08009557 	.word	0x08009557
 80093b4:	08009557 	.word	0x08009557
 80093b8:	08009557 	.word	0x08009557
 80093bc:	080094d5 	.word	0x080094d5
 80093c0:	08009557 	.word	0x08009557
 80093c4:	08009557 	.word	0x08009557
 80093c8:	08009557 	.word	0x08009557
 80093cc:	08009515 	.word	0x08009515
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fa8e 	bl	80098f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f042 0208 	orr.w	r2, r2, #8
 80093ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699a      	ldr	r2, [r3, #24]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 0204 	bic.w	r2, r2, #4
 80093fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6999      	ldr	r1, [r3, #24]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	619a      	str	r2, [r3, #24]
      break;
 800940e:	e0a5      	b.n	800955c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	4618      	mov	r0, r3
 8009418:	f000 fafe 	bl	8009a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800942a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	699a      	ldr	r2, [r3, #24]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800943a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6999      	ldr	r1, [r3, #24]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	021a      	lsls	r2, r3, #8
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	619a      	str	r2, [r3, #24]
      break;
 8009450:	e084      	b.n	800955c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fb67 	bl	8009b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69da      	ldr	r2, [r3, #28]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f042 0208 	orr.w	r2, r2, #8
 800946c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	69da      	ldr	r2, [r3, #28]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 0204 	bic.w	r2, r2, #4
 800947c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69d9      	ldr	r1, [r3, #28]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	691a      	ldr	r2, [r3, #16]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	61da      	str	r2, [r3, #28]
      break;
 8009490:	e064      	b.n	800955c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68b9      	ldr	r1, [r7, #8]
 8009498:	4618      	mov	r0, r3
 800949a:	f000 fbcf 	bl	8009c3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69da      	ldr	r2, [r3, #28]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69da      	ldr	r2, [r3, #28]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69d9      	ldr	r1, [r3, #28]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	021a      	lsls	r2, r3, #8
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	61da      	str	r2, [r3, #28]
      break;
 80094d2:	e043      	b.n	800955c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68b9      	ldr	r1, [r7, #8]
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fc18 	bl	8009d10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0208 	orr.w	r2, r2, #8
 80094ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 0204 	bic.w	r2, r2, #4
 80094fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	691a      	ldr	r2, [r3, #16]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009512:	e023      	b.n	800955c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68b9      	ldr	r1, [r7, #8]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fc5c 	bl	8009dd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800952e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800953e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	021a      	lsls	r2, r3, #8
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009554:	e002      	b.n	800955c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	75fb      	strb	r3, [r7, #23]
      break;
 800955a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009564:	7dfb      	ldrb	r3, [r7, #23]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop

08009570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_TIM_ConfigClockSource+0x1c>
 8009588:	2302      	movs	r3, #2
 800958a:	e0dc      	b.n	8009746 <HAL_TIM_ConfigClockSource+0x1d6>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	4b6a      	ldr	r3, [pc, #424]	; (8009750 <HAL_TIM_ConfigClockSource+0x1e0>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a64      	ldr	r2, [pc, #400]	; (8009754 <HAL_TIM_ConfigClockSource+0x1e4>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	f000 80a9 	beq.w	800971a <HAL_TIM_ConfigClockSource+0x1aa>
 80095c8:	4a62      	ldr	r2, [pc, #392]	; (8009754 <HAL_TIM_ConfigClockSource+0x1e4>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	f200 80ae 	bhi.w	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 80095d0:	4a61      	ldr	r2, [pc, #388]	; (8009758 <HAL_TIM_ConfigClockSource+0x1e8>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	f000 80a1 	beq.w	800971a <HAL_TIM_ConfigClockSource+0x1aa>
 80095d8:	4a5f      	ldr	r2, [pc, #380]	; (8009758 <HAL_TIM_ConfigClockSource+0x1e8>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	f200 80a6 	bhi.w	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 80095e0:	4a5e      	ldr	r2, [pc, #376]	; (800975c <HAL_TIM_ConfigClockSource+0x1ec>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	f000 8099 	beq.w	800971a <HAL_TIM_ConfigClockSource+0x1aa>
 80095e8:	4a5c      	ldr	r2, [pc, #368]	; (800975c <HAL_TIM_ConfigClockSource+0x1ec>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	f200 809e 	bhi.w	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 80095f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095f4:	f000 8091 	beq.w	800971a <HAL_TIM_ConfigClockSource+0x1aa>
 80095f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095fc:	f200 8096 	bhi.w	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 8009600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009604:	f000 8089 	beq.w	800971a <HAL_TIM_ConfigClockSource+0x1aa>
 8009608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800960c:	f200 808e 	bhi.w	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 8009610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009614:	d03e      	beq.n	8009694 <HAL_TIM_ConfigClockSource+0x124>
 8009616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800961a:	f200 8087 	bhi.w	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 800961e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009622:	f000 8086 	beq.w	8009732 <HAL_TIM_ConfigClockSource+0x1c2>
 8009626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962a:	d87f      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 800962c:	2b70      	cmp	r3, #112	; 0x70
 800962e:	d01a      	beq.n	8009666 <HAL_TIM_ConfigClockSource+0xf6>
 8009630:	2b70      	cmp	r3, #112	; 0x70
 8009632:	d87b      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 8009634:	2b60      	cmp	r3, #96	; 0x60
 8009636:	d050      	beq.n	80096da <HAL_TIM_ConfigClockSource+0x16a>
 8009638:	2b60      	cmp	r3, #96	; 0x60
 800963a:	d877      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 800963c:	2b50      	cmp	r3, #80	; 0x50
 800963e:	d03c      	beq.n	80096ba <HAL_TIM_ConfigClockSource+0x14a>
 8009640:	2b50      	cmp	r3, #80	; 0x50
 8009642:	d873      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 8009644:	2b40      	cmp	r3, #64	; 0x40
 8009646:	d058      	beq.n	80096fa <HAL_TIM_ConfigClockSource+0x18a>
 8009648:	2b40      	cmp	r3, #64	; 0x40
 800964a:	d86f      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 800964c:	2b30      	cmp	r3, #48	; 0x30
 800964e:	d064      	beq.n	800971a <HAL_TIM_ConfigClockSource+0x1aa>
 8009650:	2b30      	cmp	r3, #48	; 0x30
 8009652:	d86b      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 8009654:	2b20      	cmp	r3, #32
 8009656:	d060      	beq.n	800971a <HAL_TIM_ConfigClockSource+0x1aa>
 8009658:	2b20      	cmp	r3, #32
 800965a:	d867      	bhi.n	800972c <HAL_TIM_ConfigClockSource+0x1bc>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d05c      	beq.n	800971a <HAL_TIM_ConfigClockSource+0x1aa>
 8009660:	2b10      	cmp	r3, #16
 8009662:	d05a      	beq.n	800971a <HAL_TIM_ConfigClockSource+0x1aa>
 8009664:	e062      	b.n	800972c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	6899      	ldr	r1, [r3, #8]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f000 fc93 	bl	8009fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	609a      	str	r2, [r3, #8]
      break;
 8009692:	e04f      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	6899      	ldr	r1, [r3, #8]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f000 fc7c 	bl	8009fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689a      	ldr	r2, [r3, #8]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096b6:	609a      	str	r2, [r3, #8]
      break;
 80096b8:	e03c      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6818      	ldr	r0, [r3, #0]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	6859      	ldr	r1, [r3, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	461a      	mov	r2, r3
 80096c8:	f000 fbec 	bl	8009ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2150      	movs	r1, #80	; 0x50
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fc46 	bl	8009f64 <TIM_ITRx_SetConfig>
      break;
 80096d8:	e02c      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	6859      	ldr	r1, [r3, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f000 fc0b 	bl	8009f02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2160      	movs	r1, #96	; 0x60
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fc36 	bl	8009f64 <TIM_ITRx_SetConfig>
      break;
 80096f8:	e01c      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6859      	ldr	r1, [r3, #4]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	461a      	mov	r2, r3
 8009708:	f000 fbcc 	bl	8009ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2140      	movs	r1, #64	; 0x40
 8009712:	4618      	mov	r0, r3
 8009714:	f000 fc26 	bl	8009f64 <TIM_ITRx_SetConfig>
      break;
 8009718:	e00c      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4619      	mov	r1, r3
 8009724:	4610      	mov	r0, r2
 8009726:	f000 fc1d 	bl	8009f64 <TIM_ITRx_SetConfig>
      break;
 800972a:	e003      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	73fb      	strb	r3, [r7, #15]
      break;
 8009730:	e000      	b.n	8009734 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009744:	7bfb      	ldrb	r3, [r7, #15]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	ffceff88 	.word	0xffceff88
 8009754:	00100040 	.word	0x00100040
 8009758:	00100030 	.word	0x00100030
 800975c:	00100020 	.word	0x00100020

08009760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a40      	ldr	r2, [pc, #256]	; (80098d8 <TIM_Base_SetConfig+0x114>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d013      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e2:	d00f      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a3d      	ldr	r2, [pc, #244]	; (80098dc <TIM_Base_SetConfig+0x118>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d00b      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a3c      	ldr	r2, [pc, #240]	; (80098e0 <TIM_Base_SetConfig+0x11c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d007      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a3b      	ldr	r2, [pc, #236]	; (80098e4 <TIM_Base_SetConfig+0x120>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d003      	beq.n	8009804 <TIM_Base_SetConfig+0x40>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a3a      	ldr	r2, [pc, #232]	; (80098e8 <TIM_Base_SetConfig+0x124>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d108      	bne.n	8009816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800980a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a2f      	ldr	r2, [pc, #188]	; (80098d8 <TIM_Base_SetConfig+0x114>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d01f      	beq.n	800985e <TIM_Base_SetConfig+0x9a>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009824:	d01b      	beq.n	800985e <TIM_Base_SetConfig+0x9a>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a2c      	ldr	r2, [pc, #176]	; (80098dc <TIM_Base_SetConfig+0x118>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d017      	beq.n	800985e <TIM_Base_SetConfig+0x9a>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a2b      	ldr	r2, [pc, #172]	; (80098e0 <TIM_Base_SetConfig+0x11c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d013      	beq.n	800985e <TIM_Base_SetConfig+0x9a>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a2a      	ldr	r2, [pc, #168]	; (80098e4 <TIM_Base_SetConfig+0x120>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d00f      	beq.n	800985e <TIM_Base_SetConfig+0x9a>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a29      	ldr	r2, [pc, #164]	; (80098e8 <TIM_Base_SetConfig+0x124>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d00b      	beq.n	800985e <TIM_Base_SetConfig+0x9a>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a28      	ldr	r2, [pc, #160]	; (80098ec <TIM_Base_SetConfig+0x128>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d007      	beq.n	800985e <TIM_Base_SetConfig+0x9a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a27      	ldr	r2, [pc, #156]	; (80098f0 <TIM_Base_SetConfig+0x12c>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d003      	beq.n	800985e <TIM_Base_SetConfig+0x9a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a26      	ldr	r2, [pc, #152]	; (80098f4 <TIM_Base_SetConfig+0x130>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d108      	bne.n	8009870 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	4313      	orrs	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	4313      	orrs	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a10      	ldr	r2, [pc, #64]	; (80098d8 <TIM_Base_SetConfig+0x114>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d00f      	beq.n	80098bc <TIM_Base_SetConfig+0xf8>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a12      	ldr	r2, [pc, #72]	; (80098e8 <TIM_Base_SetConfig+0x124>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00b      	beq.n	80098bc <TIM_Base_SetConfig+0xf8>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a11      	ldr	r2, [pc, #68]	; (80098ec <TIM_Base_SetConfig+0x128>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d007      	beq.n	80098bc <TIM_Base_SetConfig+0xf8>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a10      	ldr	r2, [pc, #64]	; (80098f0 <TIM_Base_SetConfig+0x12c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d003      	beq.n	80098bc <TIM_Base_SetConfig+0xf8>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a0f      	ldr	r2, [pc, #60]	; (80098f4 <TIM_Base_SetConfig+0x130>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d103      	bne.n	80098c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	691a      	ldr	r2, [r3, #16]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	615a      	str	r2, [r3, #20]
}
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	40010000 	.word	0x40010000
 80098dc:	40000400 	.word	0x40000400
 80098e0:	40000800 	.word	0x40000800
 80098e4:	40000c00 	.word	0x40000c00
 80098e8:	40010400 	.word	0x40010400
 80098ec:	40014000 	.word	0x40014000
 80098f0:	40014400 	.word	0x40014400
 80098f4:	40014800 	.word	0x40014800

080098f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f023 0201 	bic.w	r2, r3, #1
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	4b37      	ldr	r3, [pc, #220]	; (8009a00 <TIM_OC1_SetConfig+0x108>)
 8009924:	4013      	ands	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 0303 	bic.w	r3, r3, #3
 800992e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f023 0302 	bic.w	r3, r3, #2
 8009940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4313      	orrs	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a2d      	ldr	r2, [pc, #180]	; (8009a04 <TIM_OC1_SetConfig+0x10c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d00f      	beq.n	8009974 <TIM_OC1_SetConfig+0x7c>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a2c      	ldr	r2, [pc, #176]	; (8009a08 <TIM_OC1_SetConfig+0x110>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d00b      	beq.n	8009974 <TIM_OC1_SetConfig+0x7c>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a2b      	ldr	r2, [pc, #172]	; (8009a0c <TIM_OC1_SetConfig+0x114>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d007      	beq.n	8009974 <TIM_OC1_SetConfig+0x7c>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a2a      	ldr	r2, [pc, #168]	; (8009a10 <TIM_OC1_SetConfig+0x118>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d003      	beq.n	8009974 <TIM_OC1_SetConfig+0x7c>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a29      	ldr	r2, [pc, #164]	; (8009a14 <TIM_OC1_SetConfig+0x11c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d10c      	bne.n	800998e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f023 0308 	bic.w	r3, r3, #8
 800997a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	4313      	orrs	r3, r2
 8009984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f023 0304 	bic.w	r3, r3, #4
 800998c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a1c      	ldr	r2, [pc, #112]	; (8009a04 <TIM_OC1_SetConfig+0x10c>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d00f      	beq.n	80099b6 <TIM_OC1_SetConfig+0xbe>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a1b      	ldr	r2, [pc, #108]	; (8009a08 <TIM_OC1_SetConfig+0x110>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00b      	beq.n	80099b6 <TIM_OC1_SetConfig+0xbe>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a1a      	ldr	r2, [pc, #104]	; (8009a0c <TIM_OC1_SetConfig+0x114>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d007      	beq.n	80099b6 <TIM_OC1_SetConfig+0xbe>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a19      	ldr	r2, [pc, #100]	; (8009a10 <TIM_OC1_SetConfig+0x118>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d003      	beq.n	80099b6 <TIM_OC1_SetConfig+0xbe>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a18      	ldr	r2, [pc, #96]	; (8009a14 <TIM_OC1_SetConfig+0x11c>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d111      	bne.n	80099da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	621a      	str	r2, [r3, #32]
}
 80099f4:	bf00      	nop
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	fffeff8f 	.word	0xfffeff8f
 8009a04:	40010000 	.word	0x40010000
 8009a08:	40010400 	.word	0x40010400
 8009a0c:	40014000 	.word	0x40014000
 8009a10:	40014400 	.word	0x40014400
 8009a14:	40014800 	.word	0x40014800

08009a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	f023 0210 	bic.w	r2, r3, #16
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4b34      	ldr	r3, [pc, #208]	; (8009b14 <TIM_OC2_SetConfig+0xfc>)
 8009a44:	4013      	ands	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	021b      	lsls	r3, r3, #8
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f023 0320 	bic.w	r3, r3, #32
 8009a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a29      	ldr	r2, [pc, #164]	; (8009b18 <TIM_OC2_SetConfig+0x100>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d003      	beq.n	8009a80 <TIM_OC2_SetConfig+0x68>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a28      	ldr	r2, [pc, #160]	; (8009b1c <TIM_OC2_SetConfig+0x104>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d10d      	bne.n	8009a9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	011b      	lsls	r3, r3, #4
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <TIM_OC2_SetConfig+0x100>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d00f      	beq.n	8009ac4 <TIM_OC2_SetConfig+0xac>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a1d      	ldr	r2, [pc, #116]	; (8009b1c <TIM_OC2_SetConfig+0x104>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00b      	beq.n	8009ac4 <TIM_OC2_SetConfig+0xac>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a1c      	ldr	r2, [pc, #112]	; (8009b20 <TIM_OC2_SetConfig+0x108>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d007      	beq.n	8009ac4 <TIM_OC2_SetConfig+0xac>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a1b      	ldr	r2, [pc, #108]	; (8009b24 <TIM_OC2_SetConfig+0x10c>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d003      	beq.n	8009ac4 <TIM_OC2_SetConfig+0xac>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a1a      	ldr	r2, [pc, #104]	; (8009b28 <TIM_OC2_SetConfig+0x110>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d113      	bne.n	8009aec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	621a      	str	r2, [r3, #32]
}
 8009b06:	bf00      	nop
 8009b08:	371c      	adds	r7, #28
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	feff8fff 	.word	0xfeff8fff
 8009b18:	40010000 	.word	0x40010000
 8009b1c:	40010400 	.word	0x40010400
 8009b20:	40014000 	.word	0x40014000
 8009b24:	40014400 	.word	0x40014400
 8009b28:	40014800 	.word	0x40014800

08009b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	4b33      	ldr	r3, [pc, #204]	; (8009c24 <TIM_OC3_SetConfig+0xf8>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f023 0303 	bic.w	r3, r3, #3
 8009b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a28      	ldr	r2, [pc, #160]	; (8009c28 <TIM_OC3_SetConfig+0xfc>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d003      	beq.n	8009b92 <TIM_OC3_SetConfig+0x66>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a27      	ldr	r2, [pc, #156]	; (8009c2c <TIM_OC3_SetConfig+0x100>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d10d      	bne.n	8009bae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a1d      	ldr	r2, [pc, #116]	; (8009c28 <TIM_OC3_SetConfig+0xfc>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d00f      	beq.n	8009bd6 <TIM_OC3_SetConfig+0xaa>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a1c      	ldr	r2, [pc, #112]	; (8009c2c <TIM_OC3_SetConfig+0x100>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d00b      	beq.n	8009bd6 <TIM_OC3_SetConfig+0xaa>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a1b      	ldr	r2, [pc, #108]	; (8009c30 <TIM_OC3_SetConfig+0x104>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d007      	beq.n	8009bd6 <TIM_OC3_SetConfig+0xaa>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a1a      	ldr	r2, [pc, #104]	; (8009c34 <TIM_OC3_SetConfig+0x108>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d003      	beq.n	8009bd6 <TIM_OC3_SetConfig+0xaa>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a19      	ldr	r2, [pc, #100]	; (8009c38 <TIM_OC3_SetConfig+0x10c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d113      	bne.n	8009bfe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	621a      	str	r2, [r3, #32]
}
 8009c18:	bf00      	nop
 8009c1a:	371c      	adds	r7, #28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	fffeff8f 	.word	0xfffeff8f
 8009c28:	40010000 	.word	0x40010000
 8009c2c:	40010400 	.word	0x40010400
 8009c30:	40014000 	.word	0x40014000
 8009c34:	40014400 	.word	0x40014400
 8009c38:	40014800 	.word	0x40014800

08009c3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <TIM_OC4_SetConfig+0xbc>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	031b      	lsls	r3, r3, #12
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a19      	ldr	r2, [pc, #100]	; (8009cfc <TIM_OC4_SetConfig+0xc0>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d00f      	beq.n	8009cbc <TIM_OC4_SetConfig+0x80>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a18      	ldr	r2, [pc, #96]	; (8009d00 <TIM_OC4_SetConfig+0xc4>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d00b      	beq.n	8009cbc <TIM_OC4_SetConfig+0x80>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a17      	ldr	r2, [pc, #92]	; (8009d04 <TIM_OC4_SetConfig+0xc8>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d007      	beq.n	8009cbc <TIM_OC4_SetConfig+0x80>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a16      	ldr	r2, [pc, #88]	; (8009d08 <TIM_OC4_SetConfig+0xcc>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d003      	beq.n	8009cbc <TIM_OC4_SetConfig+0x80>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a15      	ldr	r2, [pc, #84]	; (8009d0c <TIM_OC4_SetConfig+0xd0>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d109      	bne.n	8009cd0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	019b      	lsls	r3, r3, #6
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	621a      	str	r2, [r3, #32]
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	feff8fff 	.word	0xfeff8fff
 8009cfc:	40010000 	.word	0x40010000
 8009d00:	40010400 	.word	0x40010400
 8009d04:	40014000 	.word	0x40014000
 8009d08:	40014400 	.word	0x40014400
 8009d0c:	40014800 	.word	0x40014800

08009d10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <TIM_OC5_SetConfig+0xb0>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	041b      	lsls	r3, r3, #16
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a18      	ldr	r2, [pc, #96]	; (8009dc4 <TIM_OC5_SetConfig+0xb4>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d00f      	beq.n	8009d86 <TIM_OC5_SetConfig+0x76>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <TIM_OC5_SetConfig+0xb8>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00b      	beq.n	8009d86 <TIM_OC5_SetConfig+0x76>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a16      	ldr	r2, [pc, #88]	; (8009dcc <TIM_OC5_SetConfig+0xbc>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d007      	beq.n	8009d86 <TIM_OC5_SetConfig+0x76>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a15      	ldr	r2, [pc, #84]	; (8009dd0 <TIM_OC5_SetConfig+0xc0>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d003      	beq.n	8009d86 <TIM_OC5_SetConfig+0x76>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a14      	ldr	r2, [pc, #80]	; (8009dd4 <TIM_OC5_SetConfig+0xc4>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d109      	bne.n	8009d9a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	021b      	lsls	r3, r3, #8
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	621a      	str	r2, [r3, #32]
}
 8009db4:	bf00      	nop
 8009db6:	371c      	adds	r7, #28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	fffeff8f 	.word	0xfffeff8f
 8009dc4:	40010000 	.word	0x40010000
 8009dc8:	40010400 	.word	0x40010400
 8009dcc:	40014000 	.word	0x40014000
 8009dd0:	40014400 	.word	0x40014400
 8009dd4:	40014800 	.word	0x40014800

08009dd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	4b22      	ldr	r3, [pc, #136]	; (8009e8c <TIM_OC6_SetConfig+0xb4>)
 8009e04:	4013      	ands	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	051b      	lsls	r3, r3, #20
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a19      	ldr	r2, [pc, #100]	; (8009e90 <TIM_OC6_SetConfig+0xb8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00f      	beq.n	8009e50 <TIM_OC6_SetConfig+0x78>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a18      	ldr	r2, [pc, #96]	; (8009e94 <TIM_OC6_SetConfig+0xbc>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00b      	beq.n	8009e50 <TIM_OC6_SetConfig+0x78>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a17      	ldr	r2, [pc, #92]	; (8009e98 <TIM_OC6_SetConfig+0xc0>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d007      	beq.n	8009e50 <TIM_OC6_SetConfig+0x78>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a16      	ldr	r2, [pc, #88]	; (8009e9c <TIM_OC6_SetConfig+0xc4>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d003      	beq.n	8009e50 <TIM_OC6_SetConfig+0x78>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a15      	ldr	r2, [pc, #84]	; (8009ea0 <TIM_OC6_SetConfig+0xc8>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d109      	bne.n	8009e64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	029b      	lsls	r3, r3, #10
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	621a      	str	r2, [r3, #32]
}
 8009e7e:	bf00      	nop
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	feff8fff 	.word	0xfeff8fff
 8009e90:	40010000 	.word	0x40010000
 8009e94:	40010400 	.word	0x40010400
 8009e98:	40014000 	.word	0x40014000
 8009e9c:	40014400 	.word	0x40014400
 8009ea0:	40014800 	.word	0x40014800

08009ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	f023 0201 	bic.w	r2, r3, #1
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	011b      	lsls	r3, r3, #4
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f023 030a 	bic.w	r3, r3, #10
 8009ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	621a      	str	r2, [r3, #32]
}
 8009ef6:	bf00      	nop
 8009ef8:	371c      	adds	r7, #28
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b087      	sub	sp, #28
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	f023 0210 	bic.w	r2, r3, #16
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	031b      	lsls	r3, r3, #12
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	621a      	str	r2, [r3, #32]
}
 8009f56:	bf00      	nop
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
	...

08009f64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <TIM_ITRx_SetConfig+0x38>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	f043 0307 	orr.w	r3, r3, #7
 8009f86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	609a      	str	r2, [r3, #8]
}
 8009f8e:	bf00      	nop
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	ffcfff8f 	.word	0xffcfff8f

08009fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	021a      	lsls	r2, r3, #8
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	431a      	orrs	r2, r3
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	609a      	str	r2, [r3, #8]
}
 8009fd4:	bf00      	nop
 8009fd6:	371c      	adds	r7, #28
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	f003 031f 	and.w	r3, r3, #31
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a1a      	ldr	r2, [r3, #32]
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	43db      	mvns	r3, r3
 800a002:	401a      	ands	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6a1a      	ldr	r2, [r3, #32]
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f003 031f 	and.w	r3, r3, #31
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	fa01 f303 	lsl.w	r3, r1, r3
 800a018:	431a      	orrs	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	621a      	str	r2, [r3, #32]
}
 800a01e:	bf00      	nop
 800a020:	371c      	adds	r7, #28
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
	...

0800a02c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d101      	bne.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a040:	2302      	movs	r3, #2
 800a042:	e06d      	b.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2202      	movs	r2, #2
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a30      	ldr	r2, [pc, #192]	; (800a12c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d004      	beq.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a2f      	ldr	r2, [pc, #188]	; (800a130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d108      	bne.n	800a08a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a07e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a090:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	4313      	orrs	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a20      	ldr	r2, [pc, #128]	; (800a12c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d022      	beq.n	800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b6:	d01d      	beq.n	800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d018      	beq.n	800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a1c      	ldr	r2, [pc, #112]	; (800a138 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d013      	beq.n	800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a1a      	ldr	r2, [pc, #104]	; (800a13c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d00e      	beq.n	800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a15      	ldr	r2, [pc, #84]	; (800a130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d009      	beq.n	800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a16      	ldr	r2, [pc, #88]	; (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d004      	beq.n	800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a15      	ldr	r2, [pc, #84]	; (800a144 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d10c      	bne.n	800a10e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	4313      	orrs	r3, r2
 800a104:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	40010000 	.word	0x40010000
 800a130:	40010400 	.word	0x40010400
 800a134:	40000400 	.word	0x40000400
 800a138:	40000800 	.word	0x40000800
 800a13c:	40000c00 	.word	0x40000c00
 800a140:	40001800 	.word	0x40001800
 800a144:	40014000 	.word	0x40014000

0800a148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d101      	bne.n	800a164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a160:	2302      	movs	r3, #2
 800a162:	e087      	b.n	800a274 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	4313      	orrs	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	041b      	lsls	r3, r3, #16
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a27      	ldr	r2, [pc, #156]	; (800a280 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d004      	beq.n	800a1f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a25      	ldr	r2, [pc, #148]	; (800a284 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d106      	bne.n	800a200 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a1e      	ldr	r2, [pc, #120]	; (800a280 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d004      	beq.n	800a214 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a1d      	ldr	r2, [pc, #116]	; (800a284 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d126      	bne.n	800a262 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21e:	051b      	lsls	r3, r3, #20
 800a220:	4313      	orrs	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	4313      	orrs	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a0e      	ldr	r2, [pc, #56]	; (800a280 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d004      	beq.n	800a254 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a0d      	ldr	r2, [pc, #52]	; (800a284 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d106      	bne.n	800a262 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25e:	4313      	orrs	r3, r2
 800a260:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	40010000 	.word	0x40010000
 800a284:	40010400 	.word	0x40010400

0800a288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e042      	b.n	800a35c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d106      	bne.n	800a2ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7f7 fed3 	bl	8002094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2224      	movs	r2, #36	; 0x24
 800a2f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 0201 	bic.w	r2, r2, #1
 800a304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f82c 	bl	800a364 <UART_SetConfig>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d101      	bne.n	800a316 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e022      	b.n	800a35c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fe7e 	bl	800b020 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	689a      	ldr	r2, [r3, #8]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f042 0201 	orr.w	r2, r2, #1
 800a352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 ff05 	bl	800b164 <UART_CheckIdleState>
 800a35a:	4603      	mov	r3, r0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a364:	b5b0      	push	{r4, r5, r7, lr}
 800a366:	b08e      	sub	sp, #56	; 0x38
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	431a      	orrs	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	4313      	orrs	r3, r2
 800a388:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	4bbf      	ldr	r3, [pc, #764]	; (800a690 <UART_SetConfig+0x32c>)
 800a392:	4013      	ands	r3, r2
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6812      	ldr	r2, [r2, #0]
 800a398:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a39a:	430b      	orrs	r3, r1
 800a39c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68da      	ldr	r2, [r3, #12]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4ab5      	ldr	r2, [pc, #724]	; (800a694 <UART_SetConfig+0x330>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d004      	beq.n	800a3ce <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	4bb0      	ldr	r3, [pc, #704]	; (800a698 <UART_SetConfig+0x334>)
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	6812      	ldr	r2, [r2, #0]
 800a3dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a3de:	430b      	orrs	r3, r1
 800a3e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	f023 010f 	bic.w	r1, r3, #15
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4aa7      	ldr	r2, [pc, #668]	; (800a69c <UART_SetConfig+0x338>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d176      	bne.n	800a4f0 <UART_SetConfig+0x18c>
 800a402:	4ba7      	ldr	r3, [pc, #668]	; (800a6a0 <UART_SetConfig+0x33c>)
 800a404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a40a:	2b28      	cmp	r3, #40	; 0x28
 800a40c:	d86c      	bhi.n	800a4e8 <UART_SetConfig+0x184>
 800a40e:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <UART_SetConfig+0xb0>)
 800a410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a414:	0800a4b9 	.word	0x0800a4b9
 800a418:	0800a4e9 	.word	0x0800a4e9
 800a41c:	0800a4e9 	.word	0x0800a4e9
 800a420:	0800a4e9 	.word	0x0800a4e9
 800a424:	0800a4e9 	.word	0x0800a4e9
 800a428:	0800a4e9 	.word	0x0800a4e9
 800a42c:	0800a4e9 	.word	0x0800a4e9
 800a430:	0800a4e9 	.word	0x0800a4e9
 800a434:	0800a4c1 	.word	0x0800a4c1
 800a438:	0800a4e9 	.word	0x0800a4e9
 800a43c:	0800a4e9 	.word	0x0800a4e9
 800a440:	0800a4e9 	.word	0x0800a4e9
 800a444:	0800a4e9 	.word	0x0800a4e9
 800a448:	0800a4e9 	.word	0x0800a4e9
 800a44c:	0800a4e9 	.word	0x0800a4e9
 800a450:	0800a4e9 	.word	0x0800a4e9
 800a454:	0800a4c9 	.word	0x0800a4c9
 800a458:	0800a4e9 	.word	0x0800a4e9
 800a45c:	0800a4e9 	.word	0x0800a4e9
 800a460:	0800a4e9 	.word	0x0800a4e9
 800a464:	0800a4e9 	.word	0x0800a4e9
 800a468:	0800a4e9 	.word	0x0800a4e9
 800a46c:	0800a4e9 	.word	0x0800a4e9
 800a470:	0800a4e9 	.word	0x0800a4e9
 800a474:	0800a4d1 	.word	0x0800a4d1
 800a478:	0800a4e9 	.word	0x0800a4e9
 800a47c:	0800a4e9 	.word	0x0800a4e9
 800a480:	0800a4e9 	.word	0x0800a4e9
 800a484:	0800a4e9 	.word	0x0800a4e9
 800a488:	0800a4e9 	.word	0x0800a4e9
 800a48c:	0800a4e9 	.word	0x0800a4e9
 800a490:	0800a4e9 	.word	0x0800a4e9
 800a494:	0800a4d9 	.word	0x0800a4d9
 800a498:	0800a4e9 	.word	0x0800a4e9
 800a49c:	0800a4e9 	.word	0x0800a4e9
 800a4a0:	0800a4e9 	.word	0x0800a4e9
 800a4a4:	0800a4e9 	.word	0x0800a4e9
 800a4a8:	0800a4e9 	.word	0x0800a4e9
 800a4ac:	0800a4e9 	.word	0x0800a4e9
 800a4b0:	0800a4e9 	.word	0x0800a4e9
 800a4b4:	0800a4e1 	.word	0x0800a4e1
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4be:	e326      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a4c0:	2304      	movs	r3, #4
 800a4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4c6:	e322      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a4c8:	2308      	movs	r3, #8
 800a4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ce:	e31e      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d6:	e31a      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a4d8:	2320      	movs	r3, #32
 800a4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4de:	e316      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a4e0:	2340      	movs	r3, #64	; 0x40
 800a4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e6:	e312      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a4e8:	2380      	movs	r3, #128	; 0x80
 800a4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ee:	e30e      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a6b      	ldr	r2, [pc, #428]	; (800a6a4 <UART_SetConfig+0x340>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d130      	bne.n	800a55c <UART_SetConfig+0x1f8>
 800a4fa:	4b69      	ldr	r3, [pc, #420]	; (800a6a0 <UART_SetConfig+0x33c>)
 800a4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	2b05      	cmp	r3, #5
 800a504:	d826      	bhi.n	800a554 <UART_SetConfig+0x1f0>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <UART_SetConfig+0x1a8>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a525 	.word	0x0800a525
 800a510:	0800a52d 	.word	0x0800a52d
 800a514:	0800a535 	.word	0x0800a535
 800a518:	0800a53d 	.word	0x0800a53d
 800a51c:	0800a545 	.word	0x0800a545
 800a520:	0800a54d 	.word	0x0800a54d
 800a524:	2300      	movs	r3, #0
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52a:	e2f0      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a52c:	2304      	movs	r3, #4
 800a52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a532:	e2ec      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a534:	2308      	movs	r3, #8
 800a536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53a:	e2e8      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a53c:	2310      	movs	r3, #16
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a542:	e2e4      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a544:	2320      	movs	r3, #32
 800a546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54a:	e2e0      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a54c:	2340      	movs	r3, #64	; 0x40
 800a54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a552:	e2dc      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a554:	2380      	movs	r3, #128	; 0x80
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e2d8      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a51      	ldr	r2, [pc, #324]	; (800a6a8 <UART_SetConfig+0x344>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d130      	bne.n	800a5c8 <UART_SetConfig+0x264>
 800a566:	4b4e      	ldr	r3, [pc, #312]	; (800a6a0 <UART_SetConfig+0x33c>)
 800a568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	2b05      	cmp	r3, #5
 800a570:	d826      	bhi.n	800a5c0 <UART_SetConfig+0x25c>
 800a572:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <UART_SetConfig+0x214>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a591 	.word	0x0800a591
 800a57c:	0800a599 	.word	0x0800a599
 800a580:	0800a5a1 	.word	0x0800a5a1
 800a584:	0800a5a9 	.word	0x0800a5a9
 800a588:	0800a5b1 	.word	0x0800a5b1
 800a58c:	0800a5b9 	.word	0x0800a5b9
 800a590:	2300      	movs	r3, #0
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e2ba      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a598:	2304      	movs	r3, #4
 800a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59e:	e2b6      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a5a0:	2308      	movs	r3, #8
 800a5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a6:	e2b2      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a5a8:	2310      	movs	r3, #16
 800a5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ae:	e2ae      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a5b0:	2320      	movs	r3, #32
 800a5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b6:	e2aa      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a5b8:	2340      	movs	r3, #64	; 0x40
 800a5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5be:	e2a6      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a5c0:	2380      	movs	r3, #128	; 0x80
 800a5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c6:	e2a2      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a37      	ldr	r2, [pc, #220]	; (800a6ac <UART_SetConfig+0x348>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d130      	bne.n	800a634 <UART_SetConfig+0x2d0>
 800a5d2:	4b33      	ldr	r3, [pc, #204]	; (800a6a0 <UART_SetConfig+0x33c>)
 800a5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	2b05      	cmp	r3, #5
 800a5dc:	d826      	bhi.n	800a62c <UART_SetConfig+0x2c8>
 800a5de:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <UART_SetConfig+0x280>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a5fd 	.word	0x0800a5fd
 800a5e8:	0800a605 	.word	0x0800a605
 800a5ec:	0800a60d 	.word	0x0800a60d
 800a5f0:	0800a615 	.word	0x0800a615
 800a5f4:	0800a61d 	.word	0x0800a61d
 800a5f8:	0800a625 	.word	0x0800a625
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e284      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a604:	2304      	movs	r3, #4
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60a:	e280      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a60c:	2308      	movs	r3, #8
 800a60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a612:	e27c      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a614:	2310      	movs	r3, #16
 800a616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a61a:	e278      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a61c:	2320      	movs	r3, #32
 800a61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a622:	e274      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a624:	2340      	movs	r3, #64	; 0x40
 800a626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62a:	e270      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a62c:	2380      	movs	r3, #128	; 0x80
 800a62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a632:	e26c      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a1d      	ldr	r2, [pc, #116]	; (800a6b0 <UART_SetConfig+0x34c>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d142      	bne.n	800a6c4 <UART_SetConfig+0x360>
 800a63e:	4b18      	ldr	r3, [pc, #96]	; (800a6a0 <UART_SetConfig+0x33c>)
 800a640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	2b05      	cmp	r3, #5
 800a648:	d838      	bhi.n	800a6bc <UART_SetConfig+0x358>
 800a64a:	a201      	add	r2, pc, #4	; (adr r2, 800a650 <UART_SetConfig+0x2ec>)
 800a64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a650:	0800a669 	.word	0x0800a669
 800a654:	0800a671 	.word	0x0800a671
 800a658:	0800a679 	.word	0x0800a679
 800a65c:	0800a681 	.word	0x0800a681
 800a660:	0800a689 	.word	0x0800a689
 800a664:	0800a6b5 	.word	0x0800a6b5
 800a668:	2300      	movs	r3, #0
 800a66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a66e:	e24e      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a670:	2304      	movs	r3, #4
 800a672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a676:	e24a      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a678:	2308      	movs	r3, #8
 800a67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67e:	e246      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a680:	2310      	movs	r3, #16
 800a682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a686:	e242      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a688:	2320      	movs	r3, #32
 800a68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68e:	e23e      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a690:	cfff69f3 	.word	0xcfff69f3
 800a694:	58000c00 	.word	0x58000c00
 800a698:	11fff4ff 	.word	0x11fff4ff
 800a69c:	40011000 	.word	0x40011000
 800a6a0:	58024400 	.word	0x58024400
 800a6a4:	40004400 	.word	0x40004400
 800a6a8:	40004800 	.word	0x40004800
 800a6ac:	40004c00 	.word	0x40004c00
 800a6b0:	40005000 	.word	0x40005000
 800a6b4:	2340      	movs	r3, #64	; 0x40
 800a6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ba:	e228      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a6bc:	2380      	movs	r3, #128	; 0x80
 800a6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c2:	e224      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4ab1      	ldr	r2, [pc, #708]	; (800a990 <UART_SetConfig+0x62c>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d176      	bne.n	800a7bc <UART_SetConfig+0x458>
 800a6ce:	4bb1      	ldr	r3, [pc, #708]	; (800a994 <UART_SetConfig+0x630>)
 800a6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6d6:	2b28      	cmp	r3, #40	; 0x28
 800a6d8:	d86c      	bhi.n	800a7b4 <UART_SetConfig+0x450>
 800a6da:	a201      	add	r2, pc, #4	; (adr r2, 800a6e0 <UART_SetConfig+0x37c>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a785 	.word	0x0800a785
 800a6e4:	0800a7b5 	.word	0x0800a7b5
 800a6e8:	0800a7b5 	.word	0x0800a7b5
 800a6ec:	0800a7b5 	.word	0x0800a7b5
 800a6f0:	0800a7b5 	.word	0x0800a7b5
 800a6f4:	0800a7b5 	.word	0x0800a7b5
 800a6f8:	0800a7b5 	.word	0x0800a7b5
 800a6fc:	0800a7b5 	.word	0x0800a7b5
 800a700:	0800a78d 	.word	0x0800a78d
 800a704:	0800a7b5 	.word	0x0800a7b5
 800a708:	0800a7b5 	.word	0x0800a7b5
 800a70c:	0800a7b5 	.word	0x0800a7b5
 800a710:	0800a7b5 	.word	0x0800a7b5
 800a714:	0800a7b5 	.word	0x0800a7b5
 800a718:	0800a7b5 	.word	0x0800a7b5
 800a71c:	0800a7b5 	.word	0x0800a7b5
 800a720:	0800a795 	.word	0x0800a795
 800a724:	0800a7b5 	.word	0x0800a7b5
 800a728:	0800a7b5 	.word	0x0800a7b5
 800a72c:	0800a7b5 	.word	0x0800a7b5
 800a730:	0800a7b5 	.word	0x0800a7b5
 800a734:	0800a7b5 	.word	0x0800a7b5
 800a738:	0800a7b5 	.word	0x0800a7b5
 800a73c:	0800a7b5 	.word	0x0800a7b5
 800a740:	0800a79d 	.word	0x0800a79d
 800a744:	0800a7b5 	.word	0x0800a7b5
 800a748:	0800a7b5 	.word	0x0800a7b5
 800a74c:	0800a7b5 	.word	0x0800a7b5
 800a750:	0800a7b5 	.word	0x0800a7b5
 800a754:	0800a7b5 	.word	0x0800a7b5
 800a758:	0800a7b5 	.word	0x0800a7b5
 800a75c:	0800a7b5 	.word	0x0800a7b5
 800a760:	0800a7a5 	.word	0x0800a7a5
 800a764:	0800a7b5 	.word	0x0800a7b5
 800a768:	0800a7b5 	.word	0x0800a7b5
 800a76c:	0800a7b5 	.word	0x0800a7b5
 800a770:	0800a7b5 	.word	0x0800a7b5
 800a774:	0800a7b5 	.word	0x0800a7b5
 800a778:	0800a7b5 	.word	0x0800a7b5
 800a77c:	0800a7b5 	.word	0x0800a7b5
 800a780:	0800a7ad 	.word	0x0800a7ad
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a78a:	e1c0      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a78c:	2304      	movs	r3, #4
 800a78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a792:	e1bc      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a794:	2308      	movs	r3, #8
 800a796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a79a:	e1b8      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a79c:	2310      	movs	r3, #16
 800a79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a2:	e1b4      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a7a4:	2320      	movs	r3, #32
 800a7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7aa:	e1b0      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a7ac:	2340      	movs	r3, #64	; 0x40
 800a7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7b2:	e1ac      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a7b4:	2380      	movs	r3, #128	; 0x80
 800a7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ba:	e1a8      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a75      	ldr	r2, [pc, #468]	; (800a998 <UART_SetConfig+0x634>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d130      	bne.n	800a828 <UART_SetConfig+0x4c4>
 800a7c6:	4b73      	ldr	r3, [pc, #460]	; (800a994 <UART_SetConfig+0x630>)
 800a7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ca:	f003 0307 	and.w	r3, r3, #7
 800a7ce:	2b05      	cmp	r3, #5
 800a7d0:	d826      	bhi.n	800a820 <UART_SetConfig+0x4bc>
 800a7d2:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <UART_SetConfig+0x474>)
 800a7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d8:	0800a7f1 	.word	0x0800a7f1
 800a7dc:	0800a7f9 	.word	0x0800a7f9
 800a7e0:	0800a801 	.word	0x0800a801
 800a7e4:	0800a809 	.word	0x0800a809
 800a7e8:	0800a811 	.word	0x0800a811
 800a7ec:	0800a819 	.word	0x0800a819
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7f6:	e18a      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a7f8:	2304      	movs	r3, #4
 800a7fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7fe:	e186      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a800:	2308      	movs	r3, #8
 800a802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a806:	e182      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a808:	2310      	movs	r3, #16
 800a80a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a80e:	e17e      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a810:	2320      	movs	r3, #32
 800a812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a816:	e17a      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a818:	2340      	movs	r3, #64	; 0x40
 800a81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a81e:	e176      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a820:	2380      	movs	r3, #128	; 0x80
 800a822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a826:	e172      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a5b      	ldr	r2, [pc, #364]	; (800a99c <UART_SetConfig+0x638>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d130      	bne.n	800a894 <UART_SetConfig+0x530>
 800a832:	4b58      	ldr	r3, [pc, #352]	; (800a994 <UART_SetConfig+0x630>)
 800a834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a836:	f003 0307 	and.w	r3, r3, #7
 800a83a:	2b05      	cmp	r3, #5
 800a83c:	d826      	bhi.n	800a88c <UART_SetConfig+0x528>
 800a83e:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <UART_SetConfig+0x4e0>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a85d 	.word	0x0800a85d
 800a848:	0800a865 	.word	0x0800a865
 800a84c:	0800a86d 	.word	0x0800a86d
 800a850:	0800a875 	.word	0x0800a875
 800a854:	0800a87d 	.word	0x0800a87d
 800a858:	0800a885 	.word	0x0800a885
 800a85c:	2300      	movs	r3, #0
 800a85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a862:	e154      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a864:	2304      	movs	r3, #4
 800a866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a86a:	e150      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a86c:	2308      	movs	r3, #8
 800a86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a872:	e14c      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a874:	2310      	movs	r3, #16
 800a876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a87a:	e148      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a87c:	2320      	movs	r3, #32
 800a87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a882:	e144      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a884:	2340      	movs	r3, #64	; 0x40
 800a886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88a:	e140      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a88c:	2380      	movs	r3, #128	; 0x80
 800a88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a892:	e13c      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a41      	ldr	r2, [pc, #260]	; (800a9a0 <UART_SetConfig+0x63c>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	f040 8082 	bne.w	800a9a4 <UART_SetConfig+0x640>
 800a8a0:	4b3c      	ldr	r3, [pc, #240]	; (800a994 <UART_SetConfig+0x630>)
 800a8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8a8:	2b28      	cmp	r3, #40	; 0x28
 800a8aa:	d86d      	bhi.n	800a988 <UART_SetConfig+0x624>
 800a8ac:	a201      	add	r2, pc, #4	; (adr r2, 800a8b4 <UART_SetConfig+0x550>)
 800a8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b2:	bf00      	nop
 800a8b4:	0800a959 	.word	0x0800a959
 800a8b8:	0800a989 	.word	0x0800a989
 800a8bc:	0800a989 	.word	0x0800a989
 800a8c0:	0800a989 	.word	0x0800a989
 800a8c4:	0800a989 	.word	0x0800a989
 800a8c8:	0800a989 	.word	0x0800a989
 800a8cc:	0800a989 	.word	0x0800a989
 800a8d0:	0800a989 	.word	0x0800a989
 800a8d4:	0800a961 	.word	0x0800a961
 800a8d8:	0800a989 	.word	0x0800a989
 800a8dc:	0800a989 	.word	0x0800a989
 800a8e0:	0800a989 	.word	0x0800a989
 800a8e4:	0800a989 	.word	0x0800a989
 800a8e8:	0800a989 	.word	0x0800a989
 800a8ec:	0800a989 	.word	0x0800a989
 800a8f0:	0800a989 	.word	0x0800a989
 800a8f4:	0800a969 	.word	0x0800a969
 800a8f8:	0800a989 	.word	0x0800a989
 800a8fc:	0800a989 	.word	0x0800a989
 800a900:	0800a989 	.word	0x0800a989
 800a904:	0800a989 	.word	0x0800a989
 800a908:	0800a989 	.word	0x0800a989
 800a90c:	0800a989 	.word	0x0800a989
 800a910:	0800a989 	.word	0x0800a989
 800a914:	0800a971 	.word	0x0800a971
 800a918:	0800a989 	.word	0x0800a989
 800a91c:	0800a989 	.word	0x0800a989
 800a920:	0800a989 	.word	0x0800a989
 800a924:	0800a989 	.word	0x0800a989
 800a928:	0800a989 	.word	0x0800a989
 800a92c:	0800a989 	.word	0x0800a989
 800a930:	0800a989 	.word	0x0800a989
 800a934:	0800a979 	.word	0x0800a979
 800a938:	0800a989 	.word	0x0800a989
 800a93c:	0800a989 	.word	0x0800a989
 800a940:	0800a989 	.word	0x0800a989
 800a944:	0800a989 	.word	0x0800a989
 800a948:	0800a989 	.word	0x0800a989
 800a94c:	0800a989 	.word	0x0800a989
 800a950:	0800a989 	.word	0x0800a989
 800a954:	0800a981 	.word	0x0800a981
 800a958:	2301      	movs	r3, #1
 800a95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95e:	e0d6      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a960:	2304      	movs	r3, #4
 800a962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a966:	e0d2      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a968:	2308      	movs	r3, #8
 800a96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a96e:	e0ce      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a970:	2310      	movs	r3, #16
 800a972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a976:	e0ca      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a978:	2320      	movs	r3, #32
 800a97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a97e:	e0c6      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a980:	2340      	movs	r3, #64	; 0x40
 800a982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a986:	e0c2      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a988:	2380      	movs	r3, #128	; 0x80
 800a98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a98e:	e0be      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800a990:	40011400 	.word	0x40011400
 800a994:	58024400 	.word	0x58024400
 800a998:	40007800 	.word	0x40007800
 800a99c:	40007c00 	.word	0x40007c00
 800a9a0:	40011800 	.word	0x40011800
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4aad      	ldr	r2, [pc, #692]	; (800ac60 <UART_SetConfig+0x8fc>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d176      	bne.n	800aa9c <UART_SetConfig+0x738>
 800a9ae:	4bad      	ldr	r3, [pc, #692]	; (800ac64 <UART_SetConfig+0x900>)
 800a9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9b6:	2b28      	cmp	r3, #40	; 0x28
 800a9b8:	d86c      	bhi.n	800aa94 <UART_SetConfig+0x730>
 800a9ba:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <UART_SetConfig+0x65c>)
 800a9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c0:	0800aa65 	.word	0x0800aa65
 800a9c4:	0800aa95 	.word	0x0800aa95
 800a9c8:	0800aa95 	.word	0x0800aa95
 800a9cc:	0800aa95 	.word	0x0800aa95
 800a9d0:	0800aa95 	.word	0x0800aa95
 800a9d4:	0800aa95 	.word	0x0800aa95
 800a9d8:	0800aa95 	.word	0x0800aa95
 800a9dc:	0800aa95 	.word	0x0800aa95
 800a9e0:	0800aa6d 	.word	0x0800aa6d
 800a9e4:	0800aa95 	.word	0x0800aa95
 800a9e8:	0800aa95 	.word	0x0800aa95
 800a9ec:	0800aa95 	.word	0x0800aa95
 800a9f0:	0800aa95 	.word	0x0800aa95
 800a9f4:	0800aa95 	.word	0x0800aa95
 800a9f8:	0800aa95 	.word	0x0800aa95
 800a9fc:	0800aa95 	.word	0x0800aa95
 800aa00:	0800aa75 	.word	0x0800aa75
 800aa04:	0800aa95 	.word	0x0800aa95
 800aa08:	0800aa95 	.word	0x0800aa95
 800aa0c:	0800aa95 	.word	0x0800aa95
 800aa10:	0800aa95 	.word	0x0800aa95
 800aa14:	0800aa95 	.word	0x0800aa95
 800aa18:	0800aa95 	.word	0x0800aa95
 800aa1c:	0800aa95 	.word	0x0800aa95
 800aa20:	0800aa7d 	.word	0x0800aa7d
 800aa24:	0800aa95 	.word	0x0800aa95
 800aa28:	0800aa95 	.word	0x0800aa95
 800aa2c:	0800aa95 	.word	0x0800aa95
 800aa30:	0800aa95 	.word	0x0800aa95
 800aa34:	0800aa95 	.word	0x0800aa95
 800aa38:	0800aa95 	.word	0x0800aa95
 800aa3c:	0800aa95 	.word	0x0800aa95
 800aa40:	0800aa85 	.word	0x0800aa85
 800aa44:	0800aa95 	.word	0x0800aa95
 800aa48:	0800aa95 	.word	0x0800aa95
 800aa4c:	0800aa95 	.word	0x0800aa95
 800aa50:	0800aa95 	.word	0x0800aa95
 800aa54:	0800aa95 	.word	0x0800aa95
 800aa58:	0800aa95 	.word	0x0800aa95
 800aa5c:	0800aa95 	.word	0x0800aa95
 800aa60:	0800aa8d 	.word	0x0800aa8d
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa6a:	e050      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aa6c:	2304      	movs	r3, #4
 800aa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa72:	e04c      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aa74:	2308      	movs	r3, #8
 800aa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa7a:	e048      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aa7c:	2310      	movs	r3, #16
 800aa7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa82:	e044      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aa84:	2320      	movs	r3, #32
 800aa86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa8a:	e040      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aa8c:	2340      	movs	r3, #64	; 0x40
 800aa8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa92:	e03c      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aa94:	2380      	movs	r3, #128	; 0x80
 800aa96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9a:	e038      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a71      	ldr	r2, [pc, #452]	; (800ac68 <UART_SetConfig+0x904>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d130      	bne.n	800ab08 <UART_SetConfig+0x7a4>
 800aaa6:	4b6f      	ldr	r3, [pc, #444]	; (800ac64 <UART_SetConfig+0x900>)
 800aaa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaaa:	f003 0307 	and.w	r3, r3, #7
 800aaae:	2b05      	cmp	r3, #5
 800aab0:	d826      	bhi.n	800ab00 <UART_SetConfig+0x79c>
 800aab2:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <UART_SetConfig+0x754>)
 800aab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab8:	0800aad1 	.word	0x0800aad1
 800aabc:	0800aad9 	.word	0x0800aad9
 800aac0:	0800aae1 	.word	0x0800aae1
 800aac4:	0800aae9 	.word	0x0800aae9
 800aac8:	0800aaf1 	.word	0x0800aaf1
 800aacc:	0800aaf9 	.word	0x0800aaf9
 800aad0:	2302      	movs	r3, #2
 800aad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aad6:	e01a      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aad8:	2304      	movs	r3, #4
 800aada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aade:	e016      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aae0:	2308      	movs	r3, #8
 800aae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aae6:	e012      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aae8:	2310      	movs	r3, #16
 800aaea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaee:	e00e      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aaf0:	2320      	movs	r3, #32
 800aaf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaf6:	e00a      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800aaf8:	2340      	movs	r3, #64	; 0x40
 800aafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aafe:	e006      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800ab00:	2380      	movs	r3, #128	; 0x80
 800ab02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab06:	e002      	b.n	800ab0e <UART_SetConfig+0x7aa>
 800ab08:	2380      	movs	r3, #128	; 0x80
 800ab0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a55      	ldr	r2, [pc, #340]	; (800ac68 <UART_SetConfig+0x904>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	f040 80f0 	bne.w	800acfa <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab1e:	2b20      	cmp	r3, #32
 800ab20:	dc46      	bgt.n	800abb0 <UART_SetConfig+0x84c>
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	db75      	blt.n	800ac12 <UART_SetConfig+0x8ae>
 800ab26:	3b02      	subs	r3, #2
 800ab28:	2b1e      	cmp	r3, #30
 800ab2a:	d872      	bhi.n	800ac12 <UART_SetConfig+0x8ae>
 800ab2c:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <UART_SetConfig+0x7d0>)
 800ab2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab32:	bf00      	nop
 800ab34:	0800abb7 	.word	0x0800abb7
 800ab38:	0800ac13 	.word	0x0800ac13
 800ab3c:	0800abbf 	.word	0x0800abbf
 800ab40:	0800ac13 	.word	0x0800ac13
 800ab44:	0800ac13 	.word	0x0800ac13
 800ab48:	0800ac13 	.word	0x0800ac13
 800ab4c:	0800abcf 	.word	0x0800abcf
 800ab50:	0800ac13 	.word	0x0800ac13
 800ab54:	0800ac13 	.word	0x0800ac13
 800ab58:	0800ac13 	.word	0x0800ac13
 800ab5c:	0800ac13 	.word	0x0800ac13
 800ab60:	0800ac13 	.word	0x0800ac13
 800ab64:	0800ac13 	.word	0x0800ac13
 800ab68:	0800ac13 	.word	0x0800ac13
 800ab6c:	0800abdf 	.word	0x0800abdf
 800ab70:	0800ac13 	.word	0x0800ac13
 800ab74:	0800ac13 	.word	0x0800ac13
 800ab78:	0800ac13 	.word	0x0800ac13
 800ab7c:	0800ac13 	.word	0x0800ac13
 800ab80:	0800ac13 	.word	0x0800ac13
 800ab84:	0800ac13 	.word	0x0800ac13
 800ab88:	0800ac13 	.word	0x0800ac13
 800ab8c:	0800ac13 	.word	0x0800ac13
 800ab90:	0800ac13 	.word	0x0800ac13
 800ab94:	0800ac13 	.word	0x0800ac13
 800ab98:	0800ac13 	.word	0x0800ac13
 800ab9c:	0800ac13 	.word	0x0800ac13
 800aba0:	0800ac13 	.word	0x0800ac13
 800aba4:	0800ac13 	.word	0x0800ac13
 800aba8:	0800ac13 	.word	0x0800ac13
 800abac:	0800ac05 	.word	0x0800ac05
 800abb0:	2b40      	cmp	r3, #64	; 0x40
 800abb2:	d02a      	beq.n	800ac0a <UART_SetConfig+0x8a6>
 800abb4:	e02d      	b.n	800ac12 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800abb6:	f7fc faad 	bl	8007114 <HAL_RCCEx_GetD3PCLK1Freq>
 800abba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800abbc:	e02f      	b.n	800ac1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abbe:	f107 0314 	add.w	r3, r7, #20
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fc fabc 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abcc:	e027      	b.n	800ac1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abce:	f107 0308 	add.w	r3, r7, #8
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fc fc08 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abdc:	e01f      	b.n	800ac1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abde:	4b21      	ldr	r3, [pc, #132]	; (800ac64 <UART_SetConfig+0x900>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0320 	and.w	r3, r3, #32
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d009      	beq.n	800abfe <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abea:	4b1e      	ldr	r3, [pc, #120]	; (800ac64 <UART_SetConfig+0x900>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	08db      	lsrs	r3, r3, #3
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	4a1d      	ldr	r2, [pc, #116]	; (800ac6c <UART_SetConfig+0x908>)
 800abf6:	fa22 f303 	lsr.w	r3, r2, r3
 800abfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abfc:	e00f      	b.n	800ac1e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800abfe:	4b1b      	ldr	r3, [pc, #108]	; (800ac6c <UART_SetConfig+0x908>)
 800ac00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac02:	e00c      	b.n	800ac1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac04:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <UART_SetConfig+0x90c>)
 800ac06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac08:	e009      	b.n	800ac1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac10:	e005      	b.n	800ac1e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ac1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 81e6 	beq.w	800aff2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	4a12      	ldr	r2, [pc, #72]	; (800ac74 <UART_SetConfig+0x910>)
 800ac2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac30:	461a      	mov	r2, r3
 800ac32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac38:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	4413      	add	r3, r2
 800ac44:	6a3a      	ldr	r2, [r7, #32]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d305      	bcc.n	800ac56 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac50:	6a3a      	ldr	r2, [r7, #32]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d910      	bls.n	800ac78 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ac5c:	e1c9      	b.n	800aff2 <UART_SetConfig+0xc8e>
 800ac5e:	bf00      	nop
 800ac60:	40011c00 	.word	0x40011c00
 800ac64:	58024400 	.word	0x58024400
 800ac68:	58000c00 	.word	0x58000c00
 800ac6c:	03d09000 	.word	0x03d09000
 800ac70:	003d0900 	.word	0x003d0900
 800ac74:	0800b698 	.word	0x0800b698
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f04f 0100 	mov.w	r1, #0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	4ac1      	ldr	r2, [pc, #772]	; (800af8c <UART_SetConfig+0xc28>)
 800ac86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	f04f 0300 	mov.w	r3, #0
 800ac90:	f7f5 fb2c 	bl	80002ec <__aeabi_uldivmod>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4610      	mov	r0, r2
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f04f 0200 	mov.w	r2, #0
 800aca0:	f04f 0300 	mov.w	r3, #0
 800aca4:	020b      	lsls	r3, r1, #8
 800aca6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acaa:	0202      	lsls	r2, r0, #8
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	6849      	ldr	r1, [r1, #4]
 800acb0:	0849      	lsrs	r1, r1, #1
 800acb2:	4608      	mov	r0, r1
 800acb4:	f04f 0100 	mov.w	r1, #0
 800acb8:	1814      	adds	r4, r2, r0
 800acba:	eb43 0501 	adc.w	r5, r3, r1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f04f 0300 	mov.w	r3, #0
 800acc8:	4620      	mov	r0, r4
 800acca:	4629      	mov	r1, r5
 800accc:	f7f5 fb0e 	bl	80002ec <__aeabi_uldivmod>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	4613      	mov	r3, r2
 800acd6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acde:	d308      	bcc.n	800acf2 <UART_SetConfig+0x98e>
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ace6:	d204      	bcs.n	800acf2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acee:	60da      	str	r2, [r3, #12]
 800acf0:	e17f      	b.n	800aff2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800acf8:	e17b      	b.n	800aff2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad02:	f040 80bd 	bne.w	800ae80 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800ad06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad0a:	2b20      	cmp	r3, #32
 800ad0c:	dc48      	bgt.n	800ada0 <UART_SetConfig+0xa3c>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	db7b      	blt.n	800ae0a <UART_SetConfig+0xaa6>
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	d879      	bhi.n	800ae0a <UART_SetConfig+0xaa6>
 800ad16:	a201      	add	r2, pc, #4	; (adr r2, 800ad1c <UART_SetConfig+0x9b8>)
 800ad18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1c:	0800ada7 	.word	0x0800ada7
 800ad20:	0800adaf 	.word	0x0800adaf
 800ad24:	0800ae0b 	.word	0x0800ae0b
 800ad28:	0800ae0b 	.word	0x0800ae0b
 800ad2c:	0800adb7 	.word	0x0800adb7
 800ad30:	0800ae0b 	.word	0x0800ae0b
 800ad34:	0800ae0b 	.word	0x0800ae0b
 800ad38:	0800ae0b 	.word	0x0800ae0b
 800ad3c:	0800adc7 	.word	0x0800adc7
 800ad40:	0800ae0b 	.word	0x0800ae0b
 800ad44:	0800ae0b 	.word	0x0800ae0b
 800ad48:	0800ae0b 	.word	0x0800ae0b
 800ad4c:	0800ae0b 	.word	0x0800ae0b
 800ad50:	0800ae0b 	.word	0x0800ae0b
 800ad54:	0800ae0b 	.word	0x0800ae0b
 800ad58:	0800ae0b 	.word	0x0800ae0b
 800ad5c:	0800add7 	.word	0x0800add7
 800ad60:	0800ae0b 	.word	0x0800ae0b
 800ad64:	0800ae0b 	.word	0x0800ae0b
 800ad68:	0800ae0b 	.word	0x0800ae0b
 800ad6c:	0800ae0b 	.word	0x0800ae0b
 800ad70:	0800ae0b 	.word	0x0800ae0b
 800ad74:	0800ae0b 	.word	0x0800ae0b
 800ad78:	0800ae0b 	.word	0x0800ae0b
 800ad7c:	0800ae0b 	.word	0x0800ae0b
 800ad80:	0800ae0b 	.word	0x0800ae0b
 800ad84:	0800ae0b 	.word	0x0800ae0b
 800ad88:	0800ae0b 	.word	0x0800ae0b
 800ad8c:	0800ae0b 	.word	0x0800ae0b
 800ad90:	0800ae0b 	.word	0x0800ae0b
 800ad94:	0800ae0b 	.word	0x0800ae0b
 800ad98:	0800ae0b 	.word	0x0800ae0b
 800ad9c:	0800adfd 	.word	0x0800adfd
 800ada0:	2b40      	cmp	r3, #64	; 0x40
 800ada2:	d02e      	beq.n	800ae02 <UART_SetConfig+0xa9e>
 800ada4:	e031      	b.n	800ae0a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ada6:	f7fa fe53 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 800adaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800adac:	e033      	b.n	800ae16 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adae:	f7fa fe65 	bl	8005a7c <HAL_RCC_GetPCLK2Freq>
 800adb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800adb4:	e02f      	b.n	800ae16 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adb6:	f107 0314 	add.w	r3, r7, #20
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fc f9c0 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adc4:	e027      	b.n	800ae16 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adc6:	f107 0308 	add.w	r3, r7, #8
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fc fb0c 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800add4:	e01f      	b.n	800ae16 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800add6:	4b6e      	ldr	r3, [pc, #440]	; (800af90 <UART_SetConfig+0xc2c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0320 	and.w	r3, r3, #32
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d009      	beq.n	800adf6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ade2:	4b6b      	ldr	r3, [pc, #428]	; (800af90 <UART_SetConfig+0xc2c>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	08db      	lsrs	r3, r3, #3
 800ade8:	f003 0303 	and.w	r3, r3, #3
 800adec:	4a69      	ldr	r2, [pc, #420]	; (800af94 <UART_SetConfig+0xc30>)
 800adee:	fa22 f303 	lsr.w	r3, r2, r3
 800adf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adf4:	e00f      	b.n	800ae16 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800adf6:	4b67      	ldr	r3, [pc, #412]	; (800af94 <UART_SetConfig+0xc30>)
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adfa:	e00c      	b.n	800ae16 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800adfc:	4b66      	ldr	r3, [pc, #408]	; (800af98 <UART_SetConfig+0xc34>)
 800adfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae00:	e009      	b.n	800ae16 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae08:	e005      	b.n	800ae16 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ae14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 80ea 	beq.w	800aff2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae22:	4a5a      	ldr	r2, [pc, #360]	; (800af8c <UART_SetConfig+0xc28>)
 800ae24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae30:	005a      	lsls	r2, r3, #1
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	085b      	lsrs	r3, r3, #1
 800ae38:	441a      	add	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae42:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	2b0f      	cmp	r3, #15
 800ae48:	d916      	bls.n	800ae78 <UART_SetConfig+0xb14>
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae50:	d212      	bcs.n	800ae78 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	f023 030f 	bic.w	r3, r3, #15
 800ae5a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	085b      	lsrs	r3, r3, #1
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	f003 0307 	and.w	r3, r3, #7
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae74:	60da      	str	r2, [r3, #12]
 800ae76:	e0bc      	b.n	800aff2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ae7e:	e0b8      	b.n	800aff2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	dc4b      	bgt.n	800af20 <UART_SetConfig+0xbbc>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f2c0 8087 	blt.w	800af9c <UART_SetConfig+0xc38>
 800ae8e:	2b20      	cmp	r3, #32
 800ae90:	f200 8084 	bhi.w	800af9c <UART_SetConfig+0xc38>
 800ae94:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <UART_SetConfig+0xb38>)
 800ae96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9a:	bf00      	nop
 800ae9c:	0800af27 	.word	0x0800af27
 800aea0:	0800af2f 	.word	0x0800af2f
 800aea4:	0800af9d 	.word	0x0800af9d
 800aea8:	0800af9d 	.word	0x0800af9d
 800aeac:	0800af37 	.word	0x0800af37
 800aeb0:	0800af9d 	.word	0x0800af9d
 800aeb4:	0800af9d 	.word	0x0800af9d
 800aeb8:	0800af9d 	.word	0x0800af9d
 800aebc:	0800af47 	.word	0x0800af47
 800aec0:	0800af9d 	.word	0x0800af9d
 800aec4:	0800af9d 	.word	0x0800af9d
 800aec8:	0800af9d 	.word	0x0800af9d
 800aecc:	0800af9d 	.word	0x0800af9d
 800aed0:	0800af9d 	.word	0x0800af9d
 800aed4:	0800af9d 	.word	0x0800af9d
 800aed8:	0800af9d 	.word	0x0800af9d
 800aedc:	0800af57 	.word	0x0800af57
 800aee0:	0800af9d 	.word	0x0800af9d
 800aee4:	0800af9d 	.word	0x0800af9d
 800aee8:	0800af9d 	.word	0x0800af9d
 800aeec:	0800af9d 	.word	0x0800af9d
 800aef0:	0800af9d 	.word	0x0800af9d
 800aef4:	0800af9d 	.word	0x0800af9d
 800aef8:	0800af9d 	.word	0x0800af9d
 800aefc:	0800af9d 	.word	0x0800af9d
 800af00:	0800af9d 	.word	0x0800af9d
 800af04:	0800af9d 	.word	0x0800af9d
 800af08:	0800af9d 	.word	0x0800af9d
 800af0c:	0800af9d 	.word	0x0800af9d
 800af10:	0800af9d 	.word	0x0800af9d
 800af14:	0800af9d 	.word	0x0800af9d
 800af18:	0800af9d 	.word	0x0800af9d
 800af1c:	0800af7d 	.word	0x0800af7d
 800af20:	2b40      	cmp	r3, #64	; 0x40
 800af22:	d02e      	beq.n	800af82 <UART_SetConfig+0xc1e>
 800af24:	e03a      	b.n	800af9c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af26:	f7fa fd93 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 800af2a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af2c:	e03c      	b.n	800afa8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af2e:	f7fa fda5 	bl	8005a7c <HAL_RCC_GetPCLK2Freq>
 800af32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af34:	e038      	b.n	800afa8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af36:	f107 0314 	add.w	r3, r7, #20
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fc f900 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af44:	e030      	b.n	800afa8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af46:	f107 0308 	add.w	r3, r7, #8
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fc fa4c 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af54:	e028      	b.n	800afa8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af56:	4b0e      	ldr	r3, [pc, #56]	; (800af90 <UART_SetConfig+0xc2c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d009      	beq.n	800af76 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af62:	4b0b      	ldr	r3, [pc, #44]	; (800af90 <UART_SetConfig+0xc2c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	08db      	lsrs	r3, r3, #3
 800af68:	f003 0303 	and.w	r3, r3, #3
 800af6c:	4a09      	ldr	r2, [pc, #36]	; (800af94 <UART_SetConfig+0xc30>)
 800af6e:	fa22 f303 	lsr.w	r3, r2, r3
 800af72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af74:	e018      	b.n	800afa8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800af76:	4b07      	ldr	r3, [pc, #28]	; (800af94 <UART_SetConfig+0xc30>)
 800af78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af7a:	e015      	b.n	800afa8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af7c:	4b06      	ldr	r3, [pc, #24]	; (800af98 <UART_SetConfig+0xc34>)
 800af7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af80:	e012      	b.n	800afa8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af88:	e00e      	b.n	800afa8 <UART_SetConfig+0xc44>
 800af8a:	bf00      	nop
 800af8c:	0800b698 	.word	0x0800b698
 800af90:	58024400 	.word	0x58024400
 800af94:	03d09000 	.word	0x03d09000
 800af98:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800af9c:	2300      	movs	r3, #0
 800af9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800afa6:	bf00      	nop
    }

    if (pclk != 0U)
 800afa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d021      	beq.n	800aff2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb2:	4a1a      	ldr	r2, [pc, #104]	; (800b01c <UART_SetConfig+0xcb8>)
 800afb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afb8:	461a      	mov	r2, r3
 800afba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbc:	fbb3 f2f2 	udiv	r2, r3, r2
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	085b      	lsrs	r3, r3, #1
 800afc6:	441a      	add	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	2b0f      	cmp	r3, #15
 800afd6:	d909      	bls.n	800afec <UART_SetConfig+0xc88>
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afde:	d205      	bcs.n	800afec <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	60da      	str	r2, [r3, #12]
 800afea:	e002      	b.n	800aff2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2201      	movs	r2, #1
 800affe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b00e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b012:	4618      	mov	r0, r3
 800b014:	3738      	adds	r7, #56	; 0x38
 800b016:	46bd      	mov	sp, r7
 800b018:	bdb0      	pop	{r4, r5, r7, pc}
 800b01a:	bf00      	nop
 800b01c:	0800b698 	.word	0x0800b698

0800b020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00a      	beq.n	800b04a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00a      	beq.n	800b06c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	430a      	orrs	r2, r1
 800b06a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b070:	f003 0304 	and.w	r3, r3, #4
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00a      	beq.n	800b08e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	430a      	orrs	r2, r1
 800b08c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b092:	f003 0308 	and.w	r3, r3, #8
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	430a      	orrs	r2, r1
 800b0ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	f003 0310 	and.w	r3, r3, #16
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00a      	beq.n	800b0d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00a      	beq.n	800b0f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01a      	beq.n	800b136 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b11e:	d10a      	bne.n	800b136 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	430a      	orrs	r2, r1
 800b156:	605a      	str	r2, [r3, #4]
  }
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af02      	add	r7, sp, #8
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b174:	f7f7 f964 	bl	8002440 <HAL_GetTick>
 800b178:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0308 	and.w	r3, r3, #8
 800b184:	2b08      	cmp	r3, #8
 800b186:	d10e      	bne.n	800b1a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f82f 	bl	800b1fa <UART_WaitOnFlagUntilTimeout>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e025      	b.n	800b1f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0304 	and.w	r3, r3, #4
 800b1b0:	2b04      	cmp	r3, #4
 800b1b2:	d10e      	bne.n	800b1d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f819 	bl	800b1fa <UART_WaitOnFlagUntilTimeout>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e00f      	b.n	800b1f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2220      	movs	r2, #32
 800b1de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b09c      	sub	sp, #112	; 0x70
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	60f8      	str	r0, [r7, #12]
 800b202:	60b9      	str	r1, [r7, #8]
 800b204:	603b      	str	r3, [r7, #0]
 800b206:	4613      	mov	r3, r2
 800b208:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b20a:	e0a9      	b.n	800b360 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b20c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b212:	f000 80a5 	beq.w	800b360 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b216:	f7f7 f913 	bl	8002440 <HAL_GetTick>
 800b21a:	4602      	mov	r2, r0
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b222:	429a      	cmp	r2, r3
 800b224:	d302      	bcc.n	800b22c <UART_WaitOnFlagUntilTimeout+0x32>
 800b226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d140      	bne.n	800b2ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b234:	e853 3f00 	ldrex	r3, [r3]
 800b238:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b23c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b240:	667b      	str	r3, [r7, #100]	; 0x64
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b24a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b24c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b252:	e841 2300 	strex	r3, r2, [r1]
 800b256:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1e6      	bne.n	800b22c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3308      	adds	r3, #8
 800b264:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b270:	f023 0301 	bic.w	r3, r3, #1
 800b274:	663b      	str	r3, [r7, #96]	; 0x60
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3308      	adds	r3, #8
 800b27c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b27e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b280:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b282:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b286:	e841 2300 	strex	r3, r2, [r1]
 800b28a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b28c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1e5      	bne.n	800b25e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2220      	movs	r2, #32
 800b296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2220      	movs	r2, #32
 800b29e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e069      	b.n	800b382 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d051      	beq.n	800b360 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2ca:	d149      	bne.n	800b360 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	e853 3f00 	ldrex	r3, [r3]
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b2f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e6      	bne.n	800b2d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3308      	adds	r3, #8
 800b30e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	e853 3f00 	ldrex	r3, [r3]
 800b316:	613b      	str	r3, [r7, #16]
   return(result);
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	f023 0301 	bic.w	r3, r3, #1
 800b31e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3308      	adds	r3, #8
 800b326:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b328:	623a      	str	r2, [r7, #32]
 800b32a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32c:	69f9      	ldr	r1, [r7, #28]
 800b32e:	6a3a      	ldr	r2, [r7, #32]
 800b330:	e841 2300 	strex	r3, r2, [r1]
 800b334:	61bb      	str	r3, [r7, #24]
   return(result);
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1e5      	bne.n	800b308 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2220      	movs	r2, #32
 800b340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2220      	movs	r2, #32
 800b348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2220      	movs	r2, #32
 800b350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e010      	b.n	800b382 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	69da      	ldr	r2, [r3, #28]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	4013      	ands	r3, r2
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	bf0c      	ite	eq
 800b370:	2301      	moveq	r3, #1
 800b372:	2300      	movne	r3, #0
 800b374:	b2db      	uxtb	r3, r3
 800b376:	461a      	mov	r2, r3
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	f43f af46 	beq.w	800b20c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3770      	adds	r7, #112	; 0x70
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d101      	bne.n	800b3a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b39c:	2302      	movs	r3, #2
 800b39e:	e027      	b.n	800b3f0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2224      	movs	r2, #36	; 0x24
 800b3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f022 0201 	bic.w	r2, r2, #1
 800b3c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d101      	bne.n	800b414 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b410:	2302      	movs	r3, #2
 800b412:	e02d      	b.n	800b470 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2224      	movs	r2, #36	; 0x24
 800b420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f022 0201 	bic.w	r2, r2, #1
 800b43a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	430a      	orrs	r2, r1
 800b44e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f84f 	bl	800b4f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2220      	movs	r2, #32
 800b462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d101      	bne.n	800b490 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b48c:	2302      	movs	r3, #2
 800b48e:	e02d      	b.n	800b4ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2224      	movs	r2, #36	; 0x24
 800b49c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f022 0201 	bic.w	r2, r2, #1
 800b4b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	430a      	orrs	r2, r1
 800b4ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f811 	bl	800b4f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2220      	movs	r2, #32
 800b4de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b500:	2b00      	cmp	r3, #0
 800b502:	d108      	bne.n	800b516 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b514:	e031      	b.n	800b57a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b516:	2310      	movs	r3, #16
 800b518:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b51a:	2310      	movs	r3, #16
 800b51c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	0e5b      	lsrs	r3, r3, #25
 800b526:	b2db      	uxtb	r3, r3
 800b528:	f003 0307 	and.w	r3, r3, #7
 800b52c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	0f5b      	lsrs	r3, r3, #29
 800b536:	b2db      	uxtb	r3, r3
 800b538:	f003 0307 	and.w	r3, r3, #7
 800b53c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	7b3a      	ldrb	r2, [r7, #12]
 800b542:	4911      	ldr	r1, [pc, #68]	; (800b588 <UARTEx_SetNbDataToProcess+0x94>)
 800b544:	5c8a      	ldrb	r2, [r1, r2]
 800b546:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b54a:	7b3a      	ldrb	r2, [r7, #12]
 800b54c:	490f      	ldr	r1, [pc, #60]	; (800b58c <UARTEx_SetNbDataToProcess+0x98>)
 800b54e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b550:	fb93 f3f2 	sdiv	r3, r3, r2
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	7b7a      	ldrb	r2, [r7, #13]
 800b560:	4909      	ldr	r1, [pc, #36]	; (800b588 <UARTEx_SetNbDataToProcess+0x94>)
 800b562:	5c8a      	ldrb	r2, [r1, r2]
 800b564:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b568:	7b7a      	ldrb	r2, [r7, #13]
 800b56a:	4908      	ldr	r1, [pc, #32]	; (800b58c <UARTEx_SetNbDataToProcess+0x98>)
 800b56c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b56e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b572:	b29a      	uxth	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b57a:	bf00      	nop
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	0800b6b0 	.word	0x0800b6b0
 800b58c:	0800b6b8 	.word	0x0800b6b8

0800b590 <__libc_init_array>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	4d0d      	ldr	r5, [pc, #52]	; (800b5c8 <__libc_init_array+0x38>)
 800b594:	4c0d      	ldr	r4, [pc, #52]	; (800b5cc <__libc_init_array+0x3c>)
 800b596:	1b64      	subs	r4, r4, r5
 800b598:	10a4      	asrs	r4, r4, #2
 800b59a:	2600      	movs	r6, #0
 800b59c:	42a6      	cmp	r6, r4
 800b59e:	d109      	bne.n	800b5b4 <__libc_init_array+0x24>
 800b5a0:	4d0b      	ldr	r5, [pc, #44]	; (800b5d0 <__libc_init_array+0x40>)
 800b5a2:	4c0c      	ldr	r4, [pc, #48]	; (800b5d4 <__libc_init_array+0x44>)
 800b5a4:	f000 f82e 	bl	800b604 <_init>
 800b5a8:	1b64      	subs	r4, r4, r5
 800b5aa:	10a4      	asrs	r4, r4, #2
 800b5ac:	2600      	movs	r6, #0
 800b5ae:	42a6      	cmp	r6, r4
 800b5b0:	d105      	bne.n	800b5be <__libc_init_array+0x2e>
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b8:	4798      	blx	r3
 800b5ba:	3601      	adds	r6, #1
 800b5bc:	e7ee      	b.n	800b59c <__libc_init_array+0xc>
 800b5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c2:	4798      	blx	r3
 800b5c4:	3601      	adds	r6, #1
 800b5c6:	e7f2      	b.n	800b5ae <__libc_init_array+0x1e>
 800b5c8:	0800b6c8 	.word	0x0800b6c8
 800b5cc:	0800b6c8 	.word	0x0800b6c8
 800b5d0:	0800b6c8 	.word	0x0800b6c8
 800b5d4:	0800b6cc 	.word	0x0800b6cc

0800b5d8 <memcpy>:
 800b5d8:	440a      	add	r2, r1
 800b5da:	4291      	cmp	r1, r2
 800b5dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5e0:	d100      	bne.n	800b5e4 <memcpy+0xc>
 800b5e2:	4770      	bx	lr
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ee:	4291      	cmp	r1, r2
 800b5f0:	d1f9      	bne.n	800b5e6 <memcpy+0xe>
 800b5f2:	bd10      	pop	{r4, pc}

0800b5f4 <memset>:
 800b5f4:	4402      	add	r2, r0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d100      	bne.n	800b5fe <memset+0xa>
 800b5fc:	4770      	bx	lr
 800b5fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b602:	e7f9      	b.n	800b5f8 <memset+0x4>

0800b604 <_init>:
 800b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b606:	bf00      	nop
 800b608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b60a:	bc08      	pop	{r3}
 800b60c:	469e      	mov	lr, r3
 800b60e:	4770      	bx	lr

0800b610 <_fini>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	bf00      	nop
 800b614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b616:	bc08      	pop	{r3}
 800b618:	469e      	mov	lr, r3
 800b61a:	4770      	bx	lr
