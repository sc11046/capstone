
nrf24l10p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c6c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008f18  08008f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008fbc  08008fbc  00018fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  08008fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d0  24000018  08008fe4  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002e8  08008fe4  000202e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002633a  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003451  00000000  00000000  00046380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001580  00000000  00000000  000497d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001498  00000000  00000000  0004ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000323db  00000000  00000000  0004c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000194c8  00000000  00000000  0007e5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e027  00000000  00000000  00097a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e5aba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005dec  00000000  00000000  001e5b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000018 	.word	0x24000018
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008f00 	.word	0x08008f00

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400001c 	.word	0x2400001c
 80002e8:	08008f00 	.word	0x08008f00

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <CS_Select>:
#define NRF24_CSN_PORT   GPIOD
#define NRF24_CSN_PIN    GPIO_PIN_15


void CS_Select (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <CS_Select+0x14>)
 80005f0:	f002 fdc0 	bl	8003174 <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	58020c00 	.word	0x58020c00

080005fc <CS_UnSelect>:

void CS_UnSelect (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <CS_UnSelect+0x14>)
 8000608:	f002 fdb4 	bl	8003174 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	58020c00 	.word	0x58020c00

08000614 <CE_Enable>:


void CE_Enable (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <CE_Enable+0x14>)
 8000620:	f002 fda8 	bl	8003174 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58020c00 	.word	0x58020c00

0800062c <CE_Disable>:

void CE_Disable (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <CE_Disable+0x14>)
 8000638:	f002 fd9c 	bl	8003174 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58020c00 	.word	0x58020c00

08000644 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	b2db      	uxtb	r3, r3
 800065c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000662:	f7ff ffbf 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	2202      	movs	r2, #2
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <nrf24_WriteReg+0x40>)
 8000672:	f005 f9b7 	bl	80059e4 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000676:	f7ff ffc1 	bl	80005fc <CS_UnSelect>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000214 	.word	0x24000214

08000688 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	b2db      	uxtb	r3, r3
 800069e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006a0:	f7ff ffa0 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80006a4:	f107 0114 	add.w	r1, r7, #20
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006ae:	f005 f999 	bl	80059e4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006be:	f005 f991 	bl	80059e4 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006c2:	f7ff ff9b 	bl	80005fc <CS_UnSelect>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	24000214 	.word	0x24000214

080006d4 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006e2:	f7ff ff7f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80006e6:	1df9      	adds	r1, r7, #7
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4808      	ldr	r0, [pc, #32]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006ee:	f005 f979 	bl	80059e4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80006f2:	f107 010f 	add.w	r1, r7, #15
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2201      	movs	r2, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006fc:	f005 fb64 	bl	8005dc8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000700:	f7ff ff7c 	bl	80005fc <CS_UnSelect>

	return data;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	24000214 	.word	0x24000214

08000714 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000722:	f7ff ff5f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000726:	f107 010f 	add.w	r1, r7, #15
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	2201      	movs	r2, #1
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000730:	f005 f958 	bl	80059e4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b29a      	uxth	r2, r3
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000740:	f005 fb42 	bl	8005dc8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000744:	f7ff ff5a 	bl	80005fc <CS_UnSelect>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	24000214 	.word	0x24000214

08000754 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800075e:	f7ff ff41 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <nrfsendCmd+0x28>)
 800076a:	f005 f93b 	bl	80059e4 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800076e:	f7ff ff45 	bl	80005fc <CS_UnSelect>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	24000214 	.word	0x24000214

08000780 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b07      	cmp	r3, #7
 800078e:	d104      	bne.n	800079a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000790:	2100      	movs	r1, #0
 8000792:	2007      	movs	r0, #7
 8000794:	f7ff ff56 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000798:	e090      	b.n	80008bc <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b17      	cmp	r3, #23
 800079e:	d104      	bne.n	80007aa <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80007a0:	2111      	movs	r1, #17
 80007a2:	2017      	movs	r0, #23
 80007a4:	f7ff ff4e 	bl	8000644 <nrf24_WriteReg>
}
 80007a8:	e088      	b.n	80008bc <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80007aa:	2108      	movs	r1, #8
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff49 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80007b2:	213f      	movs	r1, #63	; 0x3f
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff45 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80007ba:	2103      	movs	r1, #3
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ff41 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80007c2:	2103      	movs	r1, #3
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff ff3d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80007ca:	2103      	movs	r1, #3
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff ff39 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80007d2:	2102      	movs	r1, #2
 80007d4:	2005      	movs	r0, #5
 80007d6:	f7ff ff35 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80007da:	210e      	movs	r1, #14
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff ff31 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2007      	movs	r0, #7
 80007e6:	f7ff ff2d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff29 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2009      	movs	r0, #9
 80007f6:	f7ff ff25 	bl	8000644 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007fa:	4a32      	ldr	r2, [pc, #200]	; (80008c4 <nrf24_reset+0x144>)
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	3304      	adds	r3, #4
 8000808:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2205      	movs	r2, #5
 8000810:	4619      	mov	r1, r3
 8000812:	200a      	movs	r0, #10
 8000814:	f7ff ff38 	bl	8000688 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000818:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <nrf24_reset+0x148>)
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000822:	6018      	str	r0, [r3, #0]
 8000824:	3304      	adds	r3, #4
 8000826:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2205      	movs	r2, #5
 800082e:	4619      	mov	r1, r3
 8000830:	200b      	movs	r0, #11
 8000832:	f7ff ff29 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000836:	21c3      	movs	r1, #195	; 0xc3
 8000838:	200c      	movs	r0, #12
 800083a:	f7ff ff03 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800083e:	21c4      	movs	r1, #196	; 0xc4
 8000840:	200d      	movs	r0, #13
 8000842:	f7ff feff 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000846:	21c5      	movs	r1, #197	; 0xc5
 8000848:	200e      	movs	r0, #14
 800084a:	f7ff fefb 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800084e:	21c6      	movs	r1, #198	; 0xc6
 8000850:	200f      	movs	r0, #15
 8000852:	f7ff fef7 	bl	8000644 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000856:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <nrf24_reset+0x144>)
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000860:	6018      	str	r0, [r3, #0]
 8000862:	3304      	adds	r3, #4
 8000864:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2205      	movs	r2, #5
 800086c:	4619      	mov	r1, r3
 800086e:	2010      	movs	r0, #16
 8000870:	f7ff ff0a 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	2011      	movs	r0, #17
 8000878:	f7ff fee4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2012      	movs	r0, #18
 8000880:	f7ff fee0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2013      	movs	r0, #19
 8000888:	f7ff fedc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	2014      	movs	r0, #20
 8000890:	f7ff fed8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000894:	2100      	movs	r1, #0
 8000896:	2015      	movs	r0, #21
 8000898:	f7ff fed4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2016      	movs	r0, #22
 80008a0:	f7ff fed0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80008a4:	2111      	movs	r1, #17
 80008a6:	2017      	movs	r0, #23
 80008a8:	f7ff fecc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f7ff fec8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	201d      	movs	r0, #29
 80008b8:	f7ff fec4 	bl	8000644 <nrf24_WriteReg>
}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08008f18 	.word	0x08008f18
 80008c8:	08008f20 	.word	0x08008f20

080008cc <NRF24_Init>:




void NRF24_Init (void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80008d0:	f7ff feac 	bl	800062c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff53 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80008da:	2100      	movs	r1, #0
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff feb1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80008e2:	2100      	movs	r1, #0
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fead 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80008ea:	2100      	movs	r1, #0
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff fea9 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80008f2:	2103      	movs	r1, #3
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff fea5 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80008fa:	2100      	movs	r1, #0
 80008fc:	2004      	movs	r0, #4
 80008fe:	f7ff fea1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000902:	2100      	movs	r1, #0
 8000904:	2005      	movs	r0, #5
 8000906:	f7ff fe9d 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800090a:	210e      	movs	r1, #14
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff fe99 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000912:	f7ff fe7f 	bl	8000614 <CE_Enable>

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000926:	f7ff fe81 	bl	800062c <CE_Disable>

	nrf24_reset (STATUS);
 800092a:	2007      	movs	r0, #7
 800092c:	f7ff ff28 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	4619      	mov	r1, r3
 8000934:	2005      	movs	r0, #5
 8000936:	f7ff fe85 	bl	8000644 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff feca 	bl	80006d4 <nrf24_ReadReg>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4619      	mov	r1, r3
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fe77 	bl	8000644 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000956:	2205      	movs	r2, #5
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	200b      	movs	r0, #11
 800095c:	f7ff fe94 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000960:	21ee      	movs	r1, #238	; 0xee
 8000962:	200c      	movs	r0, #12
 8000964:	f7ff fe6e 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000968:	2120      	movs	r1, #32
 800096a:	2013      	movs	r0, #19
 800096c:	f7ff fe6a 	bl	8000644 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff feaf 	bl	80006d4 <nrf24_ReadReg>
 8000976:	4603      	mov	r3, r0
 8000978:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	f043 0303 	orr.w	r3, r3, #3
 8000980:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	4619      	mov	r1, r3
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fe5c 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800098c:	f7ff fe42 	bl	8000614 <CE_Enable>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80009a0:	2007      	movs	r0, #7
 80009a2:	f7ff fe97 	bl	80006d4 <nrf24_ReadReg>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00b      	beq.n	80009cc <isDataAvailable+0x34>
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	2007      	movs	r0, #7
 80009c4:	f7ff fe3e 	bl	8000644 <nrf24_WriteReg>

		return 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <isDataAvailable+0x36>
	}

	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80009e4:	f7ff fdfe 	bl	80005e4 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80009e8:	2361      	movs	r3, #97	; 0x61
 80009ea:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80009ec:	f107 010f 	add.w	r1, r7, #15
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2201      	movs	r2, #1
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <NRF24_Receive+0x50>)
 80009f6:	f004 fff5 	bl	80059e4 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	2220      	movs	r2, #32
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <NRF24_Receive+0x50>)
 8000a04:	f005 f9e0 	bl	8005dc8 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000a08:	f7ff fdf8 	bl	80005fc <CS_UnSelect>

	HAL_Delay(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f000 ffb9 	bl	8001984 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000a12:	23e2      	movs	r3, #226	; 0xe2
 8000a14:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe9b 	bl	8000754 <nrfsendCmd>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000214 	.word	0x24000214

08000a2c <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e00c      	b.n	8000a54 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	b2d9      	uxtb	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	18d4      	adds	r4, r2, r3
 8000a44:	4608      	mov	r0, r1
 8000a46:	f7ff fe45 	bl	80006d4 <nrf24_ReadReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b09      	cmp	r3, #9
 8000a58:	ddef      	ble.n	8000a3a <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	330a      	adds	r3, #10
 8000a5e:	2205      	movs	r2, #5
 8000a60:	4619      	mov	r1, r3
 8000a62:	200a      	movs	r0, #10
 8000a64:	f7ff fe56 	bl	8000714 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	330f      	adds	r3, #15
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	4619      	mov	r1, r3
 8000a70:	200b      	movs	r0, #11
 8000a72:	f7ff fe4f 	bl	8000714 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0414 	add.w	r4, r3, #20
 8000a7c:	200c      	movs	r0, #12
 8000a7e:	f7ff fe29 	bl	80006d4 <nrf24_ReadReg>
 8000a82:	4603      	mov	r3, r0
 8000a84:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f103 0415 	add.w	r4, r3, #21
 8000a8c:	200d      	movs	r0, #13
 8000a8e:	f7ff fe21 	bl	80006d4 <nrf24_ReadReg>
 8000a92:	4603      	mov	r3, r0
 8000a94:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f103 0416 	add.w	r4, r3, #22
 8000a9c:	200e      	movs	r0, #14
 8000a9e:	f7ff fe19 	bl	80006d4 <nrf24_ReadReg>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f103 0417 	add.w	r4, r3, #23
 8000aac:	200f      	movs	r0, #15
 8000aae:	f7ff fe11 	bl	80006d4 <nrf24_ReadReg>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	2205      	movs	r2, #5
 8000abc:	4619      	mov	r1, r3
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f7ff fe28 	bl	8000714 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000ac4:	231d      	movs	r3, #29
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	e00e      	b.n	8000ae8 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	3b0c      	subs	r3, #12
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	18d4      	adds	r4, r2, r3
 8000ad8:	4608      	mov	r0, r1
 8000ada:	f7ff fdfb 	bl	80006d4 <nrf24_ReadReg>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b25      	cmp	r3, #37	; 0x25
 8000aec:	dded      	ble.n	8000aca <NRF24_ReadAll+0x9e>
	}

}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <HAL_FDCAN_RxFifo0Callback>:
FDCAN_RxHeaderTypeDef RxHeader;

uint8_t RxData_From_Node2[8];
uint8_t RxData_From_Node1[8];
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d10f      	bne.n	8000b2c <HAL_FDCAN_RxFifo0Callback+0x34>
   {
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00a      	beq.n	8000b2c <HAL_FDCAN_RxFifo0Callback+0x34>
  {
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node2) != HAL_OK)
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000b18:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f001 fae9 	bl	80020f4 <HAL_FDCAN_GetRxMessage>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_FDCAN_RxFifo0Callback+0x34>
    {
    /* Reception Error */
    Error_Handler();
 8000b28:	f000 fc0e 	bl	8001348 <Error_Handler>
    }
   }
   }
 }
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	4000a000 	.word	0x4000a000
 8000b38:	2400018c 	.word	0x2400018c
 8000b3c:	240002bc 	.word	0x240002bc

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b44:	f000 fe8c 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b48:	f000 f890 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f000 fafa 	bl	8001144 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b50:	f000 f992 	bl	8000e78 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000b54:	f000 faaa 	bl	80010ac <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000b58:	f000 f9e4 	bl	8000f24 <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000b5c:	f000 f8f4 	bl	8000d48 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 8000b60:	f7ff feb4 	bl	80008cc <NRF24_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b64:	2100      	movs	r1, #0
 8000b66:	483a      	ldr	r0, [pc, #232]	; (8000c50 <main+0x110>)
 8000b68:	f005 ffae 	bl	8006ac8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4838      	ldr	r0, [pc, #224]	; (8000c50 <main+0x110>)
 8000b70:	f005 ffaa 	bl	8006ac8 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
//  htim1.Instance->CCR1=70;
//  htim1.Instance->CCR2=70;
//  htim1.Instance->CCR3=99;
   NRF24_RxMode(RxAddress, 10);
 8000b74:	210a      	movs	r1, #10
 8000b76:	4837      	ldr	r0, [pc, #220]	; (8000c54 <main+0x114>)
 8000b78:	f7ff fecf 	bl	800091a <NRF24_RxMode>
//   //  NRF24_TxMode(TxAddress, 10);
   NRF24_ReadAll(data);
 8000b7c:	4836      	ldr	r0, [pc, #216]	; (8000c58 <main+0x118>)
 8000b7e:	f7ff ff55 	bl	8000a2c <NRF24_ReadAll>
   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b88:	4834      	ldr	r0, [pc, #208]	; (8000c5c <main+0x11c>)
 8000b8a:	f002 faf3 	bl	8003174 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4832      	ldr	r0, [pc, #200]	; (8000c60 <main+0x120>)
 8000b96:	f002 faed 	bl	8003174 <HAL_GPIO_WritePin>

//	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
//	  HAL_Delay(1000);
//	  htim1.Instance->CCR2=RxData[0];

	  if (isDataAvailable(2) == 1)
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f7ff fefc 	bl	8000998 <isDataAvailable>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d102      	bne.n	8000bac <main+0x6c>
	 	  {
	 	  	NRF24_Receive(RxData);
 8000ba6:	482f      	ldr	r0, [pc, #188]	; (8000c64 <main+0x124>)
 8000ba8:	f7ff ff16 	bl	80009d8 <NRF24_Receive>
	 	  	}

//		   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,0);
//		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
//	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,1);
	  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==0)
 8000bac:	2101      	movs	r1, #1
 8000bae:	482e      	ldr	r0, [pc, #184]	; (8000c68 <main+0x128>)
 8000bb0:	f002 fac8 	bl	8003144 <HAL_GPIO_ReadPin>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d120      	bne.n	8000bfc <main+0xbc>
		  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc0:	4829      	ldr	r0, [pc, #164]	; (8000c68 <main+0x128>)
 8000bc2:	f002 fad7 	bl	8003174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4825      	ldr	r0, [pc, #148]	; (8000c60 <main+0x120>)
 8000bcc:	f002 fad2 	bl	8003174 <HAL_GPIO_WritePin>
		  htim1.Instance->CCR1=RxData[0];
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <main+0x124>)
 8000bd2:	781a      	ldrb	r2, [r3, #0]
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <main+0x110>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	635a      	str	r2, [r3, #52]	; 0x34
		  htim1.Instance->CCR2=RxData[0];
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <main+0x124>)
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <main+0x110>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	639a      	str	r2, [r3, #56]	; 0x38
		  if(RxData[0]>=100)
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <main+0x124>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b63      	cmp	r3, #99	; 0x63
 8000bea:	d907      	bls.n	8000bfc <main+0xbc>
		  	  {
		  		  htim1.Instance->CCR1=99;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <main+0x110>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2263      	movs	r2, #99	; 0x63
 8000bf2:	635a      	str	r2, [r3, #52]	; 0x34
		  		  htim1.Instance->CCR2=99;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <main+0x110>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2263      	movs	r2, #99	; 0x63
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
		  	  }
		  }
	  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==1)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	481a      	ldr	r0, [pc, #104]	; (8000c68 <main+0x128>)
 8000c00:	f002 faa0 	bl	8003144 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d1c7      	bne.n	8000b9a <main+0x5a>
		  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c10:	4815      	ldr	r0, [pc, #84]	; (8000c68 <main+0x128>)
 8000c12:	f002 faaf 	bl	8003174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <main+0x120>)
 8000c1c:	f002 faaa 	bl	8003174 <HAL_GPIO_WritePin>
		  htim1.Instance->CCR1=RxData[0];
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <main+0x124>)
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <main+0x110>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
		  htim1.Instance->CCR2=RxData[0];
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <main+0x124>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <main+0x110>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	639a      	str	r2, [r3, #56]	; 0x38
		  if(RxData[0]>=100)
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <main+0x124>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b63      	cmp	r3, #99	; 0x63
 8000c3a:	d9ae      	bls.n	8000b9a <main+0x5a>
		  	  {
		  		  htim1.Instance->CCR1=99;
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <main+0x110>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2263      	movs	r2, #99	; 0x63
 8000c42:	635a      	str	r2, [r3, #52]	; 0x34
		  		  htim1.Instance->CCR2=99;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <main+0x110>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2263      	movs	r2, #99	; 0x63
 8000c4a:	639a      	str	r2, [r3, #56]	; 0x38
	  if (isDataAvailable(2) == 1)
 8000c4c:	e7a5      	b.n	8000b9a <main+0x5a>
 8000c4e:	bf00      	nop
 8000c50:	240001c8 	.word	0x240001c8
 8000c54:	24000000 	.word	0x24000000
 8000c58:	24000194 	.word	0x24000194
 8000c5c:	58021400 	.word	0x58021400
 8000c60:	58020000 	.word	0x58020000
 8000c64:	2400029c 	.word	0x2400029c
 8000c68:	58021000 	.word	0x58021000

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b09c      	sub	sp, #112	; 0x70
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	224c      	movs	r2, #76	; 0x4c
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f008 f938 	bl	8008ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2220      	movs	r2, #32
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f008 f932 	bl	8008ef0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c8c:	2004      	movs	r0, #4
 8000c8e:	f002 fa8b 	bl	80031a8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <SystemClock_Config+0xd8>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a2a      	ldr	r2, [pc, #168]	; (8000d44 <SystemClock_Config+0xd8>)
 8000c9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <SystemClock_Config+0xd8>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cae:	bf00      	nop
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <SystemClock_Config+0xd8>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cbc:	d1f8      	bne.n	8000cb0 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8000cde:	2320      	movs	r3, #32
 8000ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fab0 	bl	800325c <HAL_RCC_OscConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d02:	f000 fb21 	bl	8001348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d06:	233f      	movs	r3, #63	; 0x3f
 8000d08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d1a:	2340      	movs	r3, #64	; 0x40
 8000d1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d24:	2340      	movs	r3, #64	; 0x40
 8000d26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fe99 	bl	8003a64 <HAL_RCC_ClockConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d38:	f000 fb06 	bl	8001348 <Error_Handler>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3770      	adds	r7, #112	; 0x70
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	58024800 	.word	0x58024800

08000d48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d4c:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d4e:	4a48      	ldr	r2, [pc, #288]	; (8000e70 <MX_FDCAN1_Init+0x128>)
 8000d50:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000d52:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d58:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000d60:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d66:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d80:	2205      	movs	r2, #5
 8000d82:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d84:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d86:	2202      	movs	r2, #2
 8000d88:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d98:	2205      	movs	r2, #5
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000dc8:	2204      	movs	r2, #4
 8000dca:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000df2:	2204      	movs	r2, #4
 8000df4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000df6:	481d      	ldr	r0, [pc, #116]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000df8:	f000 fef8 	bl	8001bec <HAL_FDCAN_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000e02:	f000 faa1 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_FDCAN1_Init+0x12c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
        sFilterConfig.FilterIndex = 0;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_FDCAN1_Init+0x12c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
        sFilterConfig.FilterType = FDCAN_FILTER_MASK; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_FDCAN1_Init+0x12c>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	609a      	str	r2, [r3, #8]
        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_FDCAN1_Init+0x12c>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	60da      	str	r2, [r3, #12]
        sFilterConfig.FilterID1 = 0x11; // ID Node2
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_FDCAN1_Init+0x12c>)
 8000e20:	2211      	movs	r2, #17
 8000e22:	611a      	str	r2, [r3, #16]
        sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_FDCAN1_Init+0x12c>)
 8000e26:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000e2a:	615a      	str	r2, [r3, #20]
        sFilterConfig.RxBufferIndex = 0;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_FDCAN1_Init+0x12c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
        //HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000e32:	4910      	ldr	r1, [pc, #64]	; (8000e74 <MX_FDCAN1_Init+0x12c>)
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000e36:	f001 f8bb 	bl	8001fb0 <HAL_FDCAN_ConfigFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_FDCAN1_Init+0xfc>
               {
                  Error_Handler();
 8000e40:	f000 fa82 	bl	8001348 <Error_Handler>
               }
        if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000e46:	f001 f929 	bl	800209c <HAL_FDCAN_Start>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_FDCAN1_Init+0x10c>
              {
                Error_Handler();
 8000e50:	f000 fa7a 	bl	8001348 <Error_Handler>
              }

            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_FDCAN1_Init+0x124>)
 8000e5a:	f001 fab9 	bl	80023d0 <HAL_FDCAN_ActivateNotification>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_FDCAN1_Init+0x120>
              {
                /* Notification Error */
                Error_Handler();
 8000e64:	f000 fa70 	bl	8001348 <Error_Handler>



  /* USER CODE END FDCAN1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	240000ec 	.word	0x240000ec
 8000e70:	4000a000 	.word	0x4000a000
 8000e74:	24000034 	.word	0x24000034

08000e78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000e7e:	4a28      	ldr	r2, [pc, #160]	; (8000f20 <MX_SPI1_Init+0xa8>)
 8000e80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000e84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000e92:	2207      	movs	r2, #7
 8000e94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000ea4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ea8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000eac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000eb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_SPI1_Init+0xa4>)
 8000f0a:	f004 fc65 	bl	80057d8 <HAL_SPI_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f14:	f000 fa18 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	24000214 	.word	0x24000214
 8000f20:	40013000 	.word	0x40013000

08000f24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09c      	sub	sp, #112	; 0x70
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2234      	movs	r2, #52	; 0x34
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 ffc6 	bl	8008ef0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f64:	4b4f      	ldr	r3, [pc, #316]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000f66:	4a50      	ldr	r2, [pc, #320]	; (80010a8 <MX_TIM1_Init+0x184>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65;
 8000f6a:	4b4e      	ldr	r3, [pc, #312]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000f6c:	2241      	movs	r2, #65	; 0x41
 8000f6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000f76:	4b4b      	ldr	r3, [pc, #300]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000f78:	2264      	movs	r2, #100	; 0x64
 8000f7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f82:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f8e:	4845      	ldr	r0, [pc, #276]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000f90:	f005 fce1 	bl	8006956 <HAL_TIM_Base_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f9a:	f000 f9d5 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fa8:	4619      	mov	r1, r3
 8000faa:	483e      	ldr	r0, [pc, #248]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000fac:	f005 ffae 	bl	8006f0c <HAL_TIM_ConfigClockSource>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fb6:	f000 f9c7 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fba:	483a      	ldr	r0, [pc, #232]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000fbc:	f005 fd22 	bl	8006a04 <HAL_TIM_PWM_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fc6:	f000 f9bf 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4831      	ldr	r0, [pc, #196]	; (80010a4 <MX_TIM1_Init+0x180>)
 8000fde:	f006 fcc1 	bl	8007964 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000fe8:	f000 f9ae 	bl	8001348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fec:	2360      	movs	r3, #96	; 0x60
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8000ff0:	2332      	movs	r3, #50	; 0x32
 8000ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001008:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4824      	ldr	r0, [pc, #144]	; (80010a4 <MX_TIM1_Init+0x180>)
 8001012:	f005 fe67 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800101c:	f000 f994 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001020:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001024:	2204      	movs	r2, #4
 8001026:	4619      	mov	r1, r3
 8001028:	481e      	ldr	r0, [pc, #120]	; (80010a4 <MX_TIM1_Init+0x180>)
 800102a:	f005 fe5b 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001034:	f000 f988 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001038:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800103c:	2208      	movs	r2, #8
 800103e:	4619      	mov	r1, r3
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <MX_TIM1_Init+0x180>)
 8001042:	f005 fe4f 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800104c:	f000 f97c 	bl	8001348 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001068:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM1_Init+0x180>)
 8001086:	f006 fcfb 	bl	8007a80 <HAL_TIMEx_ConfigBreakDeadTime>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001090:	f000 f95a 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM1_Init+0x180>)
 8001096:	f000 fa6b 	bl	8001570 <HAL_TIM_MspPostInit>

}
 800109a:	bf00      	nop
 800109c:	3770      	adds	r7, #112	; 0x70
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240001c8 	.word	0x240001c8
 80010a8:	40010000 	.word	0x40010000

080010ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010b2:	4a23      	ldr	r2, [pc, #140]	; (8001140 <MX_USART3_UART_Init+0x94>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010f4:	4811      	ldr	r0, [pc, #68]	; (800113c <MX_USART3_UART_Init+0x90>)
 80010f6:	f006 fd63 	bl	8007bc0 <HAL_UART_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001100:	f000 f922 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_USART3_UART_Init+0x90>)
 8001108:	f007 fdf6 	bl	8008cf8 <HAL_UARTEx_SetTxFifoThreshold>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001112:	f000 f919 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <MX_USART3_UART_Init+0x90>)
 800111a:	f007 fe2b 	bl	8008d74 <HAL_UARTEx_SetRxFifoThreshold>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001124:	f000 f910 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_USART3_UART_Init+0x90>)
 800112a:	f007 fdac 	bl	8008c86 <HAL_UARTEx_DisableFifoMode>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 f908 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	24000054 	.word	0x24000054
 8001140:	40004800 	.word	0x40004800

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	4b74      	ldr	r3, [pc, #464]	; (800132c <MX_GPIO_Init+0x1e8>)
 800115c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001160:	4a72      	ldr	r2, [pc, #456]	; (800132c <MX_GPIO_Init+0x1e8>)
 8001162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001166:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800116a:	4b70      	ldr	r3, [pc, #448]	; (800132c <MX_GPIO_Init+0x1e8>)
 800116c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b6c      	ldr	r3, [pc, #432]	; (800132c <MX_GPIO_Init+0x1e8>)
 800117a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800117e:	4a6b      	ldr	r2, [pc, #428]	; (800132c <MX_GPIO_Init+0x1e8>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001188:	4b68      	ldr	r3, [pc, #416]	; (800132c <MX_GPIO_Init+0x1e8>)
 800118a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b65      	ldr	r3, [pc, #404]	; (800132c <MX_GPIO_Init+0x1e8>)
 8001198:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800119c:	4a63      	ldr	r2, [pc, #396]	; (800132c <MX_GPIO_Init+0x1e8>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011a6:	4b61      	ldr	r3, [pc, #388]	; (800132c <MX_GPIO_Init+0x1e8>)
 80011a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b4:	4b5d      	ldr	r3, [pc, #372]	; (800132c <MX_GPIO_Init+0x1e8>)
 80011b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ba:	4a5c      	ldr	r2, [pc, #368]	; (800132c <MX_GPIO_Init+0x1e8>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011c4:	4b59      	ldr	r3, [pc, #356]	; (800132c <MX_GPIO_Init+0x1e8>)
 80011c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ca:	f003 0320 	and.w	r3, r3, #32
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d2:	4b56      	ldr	r3, [pc, #344]	; (800132c <MX_GPIO_Init+0x1e8>)
 80011d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011d8:	4a54      	ldr	r2, [pc, #336]	; (800132c <MX_GPIO_Init+0x1e8>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011e2:	4b52      	ldr	r3, [pc, #328]	; (800132c <MX_GPIO_Init+0x1e8>)
 80011e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f0:	4b4e      	ldr	r3, [pc, #312]	; (800132c <MX_GPIO_Init+0x1e8>)
 80011f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011f6:	4a4d      	ldr	r2, [pc, #308]	; (800132c <MX_GPIO_Init+0x1e8>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001200:	4b4a      	ldr	r3, [pc, #296]	; (800132c <MX_GPIO_Init+0x1e8>)
 8001202:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <MX_GPIO_Init+0x1e8>)
 8001210:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001214:	4a45      	ldr	r2, [pc, #276]	; (800132c <MX_GPIO_Init+0x1e8>)
 8001216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800121e:	4b43      	ldr	r3, [pc, #268]	; (800132c <MX_GPIO_Init+0x1e8>)
 8001220:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001232:	483f      	ldr	r0, [pc, #252]	; (8001330 <MX_GPIO_Init+0x1ec>)
 8001234:	f001 ff9e 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2164      	movs	r1, #100	; 0x64
 800123c:	483d      	ldr	r0, [pc, #244]	; (8001334 <MX_GPIO_Init+0x1f0>)
 800123e:	f001 ff99 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001248:	483b      	ldr	r0, [pc, #236]	; (8001338 <MX_GPIO_Init+0x1f4>)
 800124a:	f001 ff93 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_0, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f244 0101 	movw	r1, #16385	; 0x4001
 8001254:	4839      	ldr	r0, [pc, #228]	; (800133c <MX_GPIO_Init+0x1f8>)
 8001256:	f001 ff8d 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ce_Pin|csn_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001260:	4837      	ldr	r0, [pc, #220]	; (8001340 <MX_GPIO_Init+0x1fc>)
 8001262:	f001 ff87 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IRQ_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 800126c:	4835      	ldr	r0, [pc, #212]	; (8001344 <MX_GPIO_Init+0x200>)
 800126e:	f001 ff81 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 8001272:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4829      	ldr	r0, [pc, #164]	; (8001330 <MX_GPIO_Init+0x1ec>)
 800128c:	f001 fdaa 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001290:	2364      	movs	r3, #100	; 0x64
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4823      	ldr	r0, [pc, #140]	; (8001334 <MX_GPIO_Init+0x1f0>)
 80012a8:	f001 fd9c 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	481c      	ldr	r0, [pc, #112]	; (8001338 <MX_GPIO_Init+0x1f4>)
 80012c6:	f001 fd8d 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_0;
 80012ca:	f244 0301 	movw	r3, #16385	; 0x4001
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	4816      	ldr	r0, [pc, #88]	; (800133c <MX_GPIO_Init+0x1f8>)
 80012e4:	f001 fd7e 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ce_Pin csn_Pin */
  GPIO_InitStruct.Pin = ce_Pin|csn_Pin;
 80012e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <MX_GPIO_Init+0x1fc>)
 8001302:	f001 fd6f 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin PG14 */
  GPIO_InitStruct.Pin = IRQ_Pin|GPIO_PIN_14;
 8001306:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4809      	ldr	r0, [pc, #36]	; (8001344 <MX_GPIO_Init+0x200>)
 8001320:	f001 fd60 	bl	8002de4 <HAL_GPIO_Init>

}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	; 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	58024400 	.word	0x58024400
 8001330:	58020000 	.word	0x58020000
 8001334:	58020400 	.word	0x58020400
 8001338:	58021400 	.word	0x58021400
 800133c:	58021000 	.word	0x58021000
 8001340:	58020c00 	.word	0x58020c00
 8001344:	58021800 	.word	0x58021800

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>
	...

08001354 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_MspInit+0x30>)
 800135c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001360:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x30>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x30>)
 800136c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	58024400 	.word	0x58024400

08001388 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0b8      	sub	sp, #224	; 0xe0
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	22b8      	movs	r2, #184	; 0xb8
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f007 fda1 	bl	8008ef0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a29      	ldr	r2, [pc, #164]	; (8001458 <HAL_FDCAN_MspInit+0xd0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d14b      	bne.n	8001450 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80013be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fed6 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80013d6:	f7ff ffb7 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_FDCAN_MspInit+0xd4>)
 80013dc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80013e0:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_FDCAN_MspInit+0xd4>)
 80013e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e6:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_FDCAN_MspInit+0xd4>)
 80013ec:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_FDCAN_MspInit+0xd4>)
 80013fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_FDCAN_MspInit+0xd4>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_FDCAN_MspInit+0xd4>)
 800140a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001416:	2303      	movs	r3, #3
 8001418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800142e:	2309      	movs	r3, #9
 8001430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001438:	4619      	mov	r1, r3
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <HAL_FDCAN_MspInit+0xd8>)
 800143c:	f001 fcd2 	bl	8002de4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2013      	movs	r0, #19
 8001446:	f000 fb9c 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800144a:	2013      	movs	r0, #19
 800144c:	f000 fbb3 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	37e0      	adds	r7, #224	; 0xe0
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	4000a000 	.word	0x4000a000
 800145c:	58024400 	.word	0x58024400
 8001460:	58020c00 	.word	0x58020c00

08001464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0b8      	sub	sp, #224	; 0xe0
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	22b8      	movs	r2, #184	; 0xb8
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f007 fd33 	bl	8008ef0 <memset>
  if(hspi->Instance==SPI1)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a24      	ldr	r2, [pc, #144]	; (8001520 <HAL_SPI_MspInit+0xbc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d141      	bne.n	8001518 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800149a:	2300      	movs	r3, #0
 800149c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fe6a 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80014ae:	f7ff ff4b 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_SPI_MspInit+0xc0>)
 80014b4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <HAL_SPI_MspInit+0xc0>)
 80014ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014be:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_SPI_MspInit+0xc0>)
 80014c4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80014c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_SPI_MspInit+0xc0>)
 80014d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014d6:	4a13      	ldr	r2, [pc, #76]	; (8001524 <HAL_SPI_MspInit+0xc0>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_SPI_MspInit+0xc0>)
 80014e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014ee:	23e0      	movs	r3, #224	; 0xe0
 80014f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001506:	2305      	movs	r3, #5
 8001508:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_SPI_MspInit+0xc4>)
 8001514:	f001 fc66 	bl	8002de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	37e0      	adds	r7, #224	; 0xe0
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40013000 	.word	0x40013000
 8001524:	58024400 	.word	0x58024400
 8001528:	58020000 	.word	0x58020000

0800152c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <HAL_TIM_Base_MspInit+0x3c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10e      	bne.n	800155c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_TIM_Base_MspInit+0x40>)
 8001540:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001544:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_TIM_Base_MspInit+0x40>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_TIM_Base_MspInit+0x40>)
 8001550:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40010000 	.word	0x40010000
 800156c:	58024400 	.word	0x58024400

08001570 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <HAL_TIM_MspPostInit+0x6c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d11f      	bne.n	80015d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_TIM_MspPostInit+0x70>)
 8001594:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001598:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <HAL_TIM_MspPostInit+0x70>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_TIM_MspPostInit+0x70>)
 80015a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80015b0:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80015b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_TIM_MspPostInit+0x74>)
 80015ce:	f001 fc09 	bl	8002de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40010000 	.word	0x40010000
 80015e0:	58024400 	.word	0x58024400
 80015e4:	58021000 	.word	0x58021000

080015e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0b8      	sub	sp, #224	; 0xe0
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	22b8      	movs	r2, #184	; 0xb8
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f007 fc71 	bl	8008ef0 <memset>
  if(huart->Instance==USART3)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <HAL_UART_MspInit+0xc0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d142      	bne.n	800169e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001618:	2302      	movs	r3, #2
 800161a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fda8 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001632:	f7ff fe89 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_UART_MspInit+0xc4>)
 8001638:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_UART_MspInit+0xc4>)
 800163e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001642:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_UART_MspInit+0xc4>)
 8001648:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800164c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_UART_MspInit+0xc4>)
 8001656:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800165a:	4a14      	ldr	r2, [pc, #80]	; (80016ac <HAL_UART_MspInit+0xc4>)
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_UART_MspInit+0xc4>)
 8001666:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001672:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001676:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800168c:	2307      	movs	r3, #7
 800168e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001692:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <HAL_UART_MspInit+0xc8>)
 800169a:	f001 fba3 	bl	8002de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	37e0      	adds	r7, #224	; 0xe0
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40004800 	.word	0x40004800
 80016ac:	58024400 	.word	0x58024400
 80016b0:	58020c00 	.word	0x58020c00

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001700:	f000 f920 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <FDCAN1_IT0_IRQHandler+0x10>)
 800170e:	f000 fed9 	bl	80024c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	240000ec 	.word	0x240000ec

0800171c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <SystemInit+0xd0>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a31      	ldr	r2, [pc, #196]	; (80017ec <SystemInit+0xd0>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <SystemInit+0xd4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	2b02      	cmp	r3, #2
 800173a:	d807      	bhi.n	800174c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800173c:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <SystemInit+0xd4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 030f 	bic.w	r3, r3, #15
 8001744:	4a2a      	ldr	r2, [pc, #168]	; (80017f0 <SystemInit+0xd4>)
 8001746:	f043 0303 	orr.w	r3, r3, #3
 800174a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <SystemInit+0xd8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a28      	ldr	r2, [pc, #160]	; (80017f4 <SystemInit+0xd8>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <SystemInit+0xd8>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <SystemInit+0xd8>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4924      	ldr	r1, [pc, #144]	; (80017f4 <SystemInit+0xd8>)
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <SystemInit+0xdc>)
 8001766:	4013      	ands	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <SystemInit+0xd4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <SystemInit+0xd4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 030f 	bic.w	r3, r3, #15
 800177e:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <SystemInit+0xd4>)
 8001780:	f043 0303 	orr.w	r3, r3, #3
 8001784:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <SystemInit+0xd8>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <SystemInit+0xd8>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <SystemInit+0xd8>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <SystemInit+0xd8>)
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <SystemInit+0xe0>)
 800179c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <SystemInit+0xd8>)
 80017a0:	4a17      	ldr	r2, [pc, #92]	; (8001800 <SystemInit+0xe4>)
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <SystemInit+0xd8>)
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <SystemInit+0xe8>)
 80017a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <SystemInit+0xd8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <SystemInit+0xd8>)
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <SystemInit+0xe8>)
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <SystemInit+0xd8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <SystemInit+0xd8>)
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <SystemInit+0xe8>)
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <SystemInit+0xd8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <SystemInit+0xd8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <SystemInit+0xd8>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <SystemInit+0xd8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <SystemInit+0xec>)
 80017dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017e0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	52002000 	.word	0x52002000
 80017f4:	58024400 	.word	0x58024400
 80017f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017fc:	02020200 	.word	0x02020200
 8001800:	01ff0000 	.word	0x01ff0000
 8001804:	01010280 	.word	0x01010280
 8001808:	52004000 	.word	0x52004000

0800180c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001844 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001810:	f7ff ff84 	bl	800171c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	; (800184c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	; (8001858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800183a:	f007 fb27 	bl	8008e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7ff f97f 	bl	8000b40 <main>
  bx  lr
 8001842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001848:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800184c:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001850:	08008fcc 	.word	0x08008fcc
  ldr r2, =_sbss
 8001854:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001858:	240002e8 	.word	0x240002e8

0800185c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001866:	2003      	movs	r0, #3
 8001868:	f000 f980 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800186c:	f002 fab0 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_Init+0x68>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	4913      	ldr	r1, [pc, #76]	; (80018cc <HAL_Init+0x6c>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_Init+0x68>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_Init+0x6c>)
 8001894:	5cd3      	ldrb	r3, [r2, r3]
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_Init+0x70>)
 80018a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018a4:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <HAL_Init+0x74>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018aa:	200f      	movs	r0, #15
 80018ac:	f000 f814 	bl	80018d8 <HAL_InitTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e002      	b.n	80018c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018ba:	f7ff fd4b 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	58024400 	.word	0x58024400
 80018cc:	08008f74 	.word	0x08008f74
 80018d0:	2400000c 	.word	0x2400000c
 80018d4:	24000008 	.word	0x24000008

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_InitTick+0x60>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e021      	b.n	8001930 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_InitTick+0x64>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_InitTick+0x60>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f965 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00e      	b.n	8001930 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d80a      	bhi.n	800192e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f92f 	bl	8001b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_InitTick+0x68>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	24000014 	.word	0x24000014
 800193c:	24000008 	.word	0x24000008
 8001940:	24000010 	.word	0x24000010

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	24000014 	.word	0x24000014
 8001968:	240002e4 	.word	0x240002e4

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	240002e4 	.word	0x240002e4

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	24000014 	.word	0x24000014

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <__NVIC_SetPriorityGrouping+0x40>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x40>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	05fa0000 	.word	0x05fa0000

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff8e 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff29 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff40 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff90 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5f 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff33 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa4 	bl	8001b28 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b098      	sub	sp, #96	; 0x60
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001bf4:	4a84      	ldr	r2, [pc, #528]	; (8001e08 <HAL_FDCAN_Init+0x21c>)
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	224c      	movs	r2, #76	; 0x4c
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 f968 	bl	8008ed4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e1ca      	b.n	8001fa4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7e      	ldr	r2, [pc, #504]	; (8001e0c <HAL_FDCAN_Init+0x220>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d106      	bne.n	8001c26 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fba4 	bl	8001388 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0210 	bic.w	r2, r2, #16
 8001c4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c50:	f7ff fe8c 	bl	800196c <HAL_GetTick>
 8001c54:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001c56:	e014      	b.n	8001c82 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001c58:	f7ff fe88 	bl	800196c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b0a      	cmp	r3, #10
 8001c64:	d90d      	bls.n	8001c82 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2203      	movs	r2, #3
 8001c7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e190      	b.n	8001fa4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d0e3      	beq.n	8001c58 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca0:	f7ff fe64 	bl	800196c <HAL_GetTick>
 8001ca4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ca6:	e014      	b.n	8001cd2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ca8:	f7ff fe60 	bl	800196c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d90d      	bls.n	8001cd2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2203      	movs	r2, #3
 8001cca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e168      	b.n	8001fa4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0e3      	beq.n	8001ca8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0202 	orr.w	r2, r2, #2
 8001cee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7c1b      	ldrb	r3, [r3, #16]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d108      	bne.n	8001d0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699a      	ldr	r2, [r3, #24]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d06:	619a      	str	r2, [r3, #24]
 8001d08:	e007      	b.n	8001d1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7c5b      	ldrb	r3, [r3, #17]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d108      	bne.n	8001d34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d30:	619a      	str	r2, [r3, #24]
 8001d32:	e007      	b.n	8001d44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7c9b      	ldrb	r3, [r3, #18]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d108      	bne.n	8001d5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d5a:	619a      	str	r2, [r3, #24]
 8001d5c:	e007      	b.n	8001d6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001d92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0210 	bic.w	r2, r2, #16
 8001da2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d108      	bne.n	8001dbe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0204 	orr.w	r2, r2, #4
 8001dba:	619a      	str	r2, [r3, #24]
 8001dbc:	e030      	b.n	8001e20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d02c      	beq.n	8001e20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d020      	beq.n	8001e10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ddc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0210 	orr.w	r2, r2, #16
 8001dec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d114      	bne.n	8001e20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0220 	orr.w	r2, r2, #32
 8001e04:	619a      	str	r2, [r3, #24]
 8001e06:	e00b      	b.n	8001e20 <HAL_FDCAN_Init+0x234>
 8001e08:	08008f28 	.word	0x08008f28
 8001e0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0220 	orr.w	r2, r2, #32
 8001e1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001e30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001e38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001e48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001e4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e54:	d115      	bne.n	8001e82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	3b01      	subs	r3, #1
 8001e62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001e64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001e6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	3b01      	subs	r3, #1
 8001e78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001e7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001e80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00a      	beq.n	8001ea0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea8:	4413      	add	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001eb6:	f023 0107 	bic.w	r1, r3, #7
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d012      	beq.n	8001f02 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001ee4:	f023 0107 	bic.w	r1, r3, #7
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d013      	beq.n	8001f32 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001f12:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f20:	4413      	add	r3, r2
 8001f22:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001f26:	011a      	lsls	r2, r3, #4
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d013      	beq.n	8001f62 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001f42:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f50:	4413      	add	r3, r2
 8001f52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001f56:	021a      	lsls	r2, r3, #8
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a11      	ldr	r2, [pc, #68]	; (8001fac <HAL_FDCAN_Init+0x3c0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d107      	bne.n	8001f7c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f022 0203 	bic.w	r2, r2, #3
 8001f7a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fd9f 	bl	8002ad8 <FDCAN_CalcultateRamBlockAddresses>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001fa0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3760      	adds	r7, #96	; 0x60
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	4000a000 	.word	0x4000a000

08001fb0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001fc0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d002      	beq.n	8001fce <HAL_FDCAN_ConfigFilter+0x1e>
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d157      	bne.n	800207e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d12b      	bne.n	800202e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b07      	cmp	r3, #7
 8001fdc:	d10d      	bne.n	8001ffa <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001fea:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001ff0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001ff2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e00e      	b.n	8002018 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002006:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800200e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e025      	b.n	800207a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	075a      	lsls	r2, r3, #29
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b07      	cmp	r3, #7
 8002042:	d103      	bne.n	800204c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	e006      	b.n	800205a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	079a      	lsls	r2, r3, #30
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3304      	adds	r3, #4
 8002072:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e008      	b.n	8002090 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002084:	f043 0202 	orr.w	r2, r3, #2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d111      	bne.n	80020d4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e008      	b.n	80020e6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020da:	f043 0204 	orr.w	r2, r3, #4
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b08b      	sub	sp, #44	; 0x2c
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800210c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800210e:	7efb      	ldrb	r3, [r7, #27]
 8002110:	2b02      	cmp	r3, #2
 8002112:	f040 814b 	bne.w	80023ac <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b40      	cmp	r3, #64	; 0x40
 800211a:	d14d      	bne.n	80021b8 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002124:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e13e      	b.n	80023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002156:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e12c      	b.n	80023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800216c:	0e1b      	lsrs	r3, r3, #24
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10b      	bne.n	800218e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800217e:	0fdb      	lsrs	r3, r3, #31
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002188:	d101      	bne.n	800218e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800218a:	2301      	movs	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	4413      	add	r3, r2
 80021a0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	69f9      	ldr	r1, [r7, #28]
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
 80021b6:	e069      	b.n	800228c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b41      	cmp	r3, #65	; 0x41
 80021bc:	d14d      	bne.n	800225a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80021c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0ed      	b.n	80023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80021ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0db      	b.n	80023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800220e:	0e1b      	lsrs	r3, r3, #24
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d10b      	bne.n	8002230 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002220:	0fdb      	lsrs	r3, r3, #31
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800222a:	d101      	bne.n	8002230 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800222c:	2301      	movs	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	69f9      	ldr	r1, [r7, #28]
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
 8002258:	e018      	b.n	800228c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	d309      	bcc.n	8002278 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0a2      	b.n	80023be <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d107      	bne.n	80022b0 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e005      	b.n	80022bc <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	3304      	adds	r3, #4
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e1b      	lsrs	r3, r3, #24
 800230e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0fda      	lsrs	r2, r3, #31
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	3304      	adds	r3, #4
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
 800232e:	e00a      	b.n	8002346 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	441a      	add	r2, r3
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	440b      	add	r3, r1
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	3301      	adds	r3, #1
 8002344:	623b      	str	r3, [r7, #32]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_FDCAN_GetRxMessage+0x2d8>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	461a      	mov	r2, r3
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	4293      	cmp	r3, r2
 8002356:	d3eb      	bcc.n	8002330 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d105      	bne.n	800236a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002368:	e01e      	b.n	80023a8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b41      	cmp	r3, #65	; 0x41
 800236e:	d105      	bne.n	800237c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800237a:	e015      	b.n	80023a8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b1f      	cmp	r3, #31
 8002380:	d808      	bhi.n	8002394 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2101      	movs	r1, #1
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002392:	e009      	b.n	80023a8 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 021f 	and.w	r2, r3, #31
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	e008      	b.n	80023be <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023b2:	f043 0208 	orr.w	r2, r3, #8
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
  }
}
 80023be:	4618      	mov	r0, r3
 80023c0:	372c      	adds	r7, #44	; 0x2c
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	08008f84 	.word	0x08008f84

080023d0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80023e2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d002      	beq.n	80023f0 <HAL_FDCAN_ActivateNotification+0x20>
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d155      	bne.n	800249c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d108      	bne.n	8002410 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	65da      	str	r2, [r3, #92]	; 0x5c
 800240e:	e014      	b.n	800243a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	d108      	bne.n	8002432 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0202 	orr.w	r2, r2, #2
 800242e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002430:	e003      	b.n	800243a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2203      	movs	r2, #3
 8002438:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	430a      	orrs	r2, r1
 8002454:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	430a      	orrs	r2, r1
 8002472:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_FDCAN_ActivateNotification+0xec>)
 8002480:	4013      	ands	r3, r2
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	430b      	orrs	r3, r1
 8002488:	6553      	str	r3, [r2, #84]	; 0x54
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_FDCAN_ActivateNotification+0xf0>)
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	0f9b      	lsrs	r3, r3, #30
 8002492:	490b      	ldr	r1, [pc, #44]	; (80024c0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e008      	b.n	80024ae <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024a2:	f043 0202 	orr.w	r2, r3, #2
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	3fcfffff 	.word	0x3fcfffff
 80024c0:	4000a800 	.word	0x4000a800

080024c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b092      	sub	sp, #72	; 0x48
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80024cc:	4b90      	ldr	r3, [pc, #576]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	079b      	lsls	r3, r3, #30
 80024d2:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80024d4:	4b8e      	ldr	r3, [pc, #568]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	079b      	lsls	r3, r3, #30
 80024da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024dc:	4013      	ands	r3, r2
 80024de:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024f4:	4013      	ands	r3, r2
 80024f6:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800250c:	4013      	ands	r3, r2
 800250e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002524:	4013      	ands	r3, r2
 8002526:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253c:	4013      	ands	r3, r2
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002554:	4013      	ands	r3, r2
 8002556:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d011      	beq.n	800258a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257c:	651a      	str	r2, [r3, #80]	; 0x50
 800257e:	4b64      	ldr	r3, [pc, #400]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fa5a 	bl	8002a3e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01e      	beq.n	80025d6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d017      	beq.n	80025d6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80025b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ba:	4013      	ands	r3, r2
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c6:	651a      	str	r2, [r3, #80]	; 0x50
 80025c8:	4b51      	ldr	r3, [pc, #324]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80025ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fa0b 	bl	80029ec <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80025d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00d      	beq.n	80025f8 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80025e2:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_FDCAN_IRQHandler+0x250>)
 80025e4:	400b      	ands	r3, r1
 80025e6:	6513      	str	r3, [r2, #80]	; 0x50
 80025e8:	4a49      	ldr	r2, [pc, #292]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 80025ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ec:	0f9b      	lsrs	r3, r3, #30
 80025ee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80025f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f9c4 	bl	8002980 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80025f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_FDCAN_IRQHandler+0x250>)
 8002606:	400b      	ands	r3, r1
 8002608:	6513      	str	r3, [r2, #80]	; 0x50
 800260a:	4a41      	ldr	r2, [pc, #260]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 800260c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260e:	0f9b      	lsrs	r3, r3, #30
 8002610:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002612:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f9be 	bl	8002996 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800261a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002626:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_FDCAN_IRQHandler+0x250>)
 8002628:	400b      	ands	r3, r1
 800262a:	6513      	str	r3, [r2, #80]	; 0x50
 800262c:	4a38      	ldr	r2, [pc, #224]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	0f9b      	lsrs	r3, r3, #30
 8002632:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002634:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fa5e 	bl	8000af8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002648:	4b32      	ldr	r3, [pc, #200]	; (8002714 <HAL_FDCAN_IRQHandler+0x250>)
 800264a:	400b      	ands	r3, r1
 800264c:	6513      	str	r3, [r2, #80]	; 0x50
 800264e:	4a30      	ldr	r2, [pc, #192]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	0f9b      	lsrs	r3, r3, #30
 8002654:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002656:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f9a7 	bl	80029ac <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002668:	2b00      	cmp	r3, #0
 800266a:	d011      	beq.n	8002690 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002682:	651a      	str	r2, [r3, #80]	; 0x50
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f999 	bl	80029c2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01e      	beq.n	80026dc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d017      	beq.n	80026dc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026c0:	4013      	ands	r3, r2
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026cc:	651a      	str	r2, [r3, #80]	; 0x50
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80026d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f97d 	bl	80029d6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00f      	beq.n	8002718 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002700:	651a      	str	r2, [r3, #80]	; 0x50
 8002702:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_FDCAN_IRQHandler+0x24c>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f97a 	bl	8002a02 <HAL_FDCAN_RxBufferNewMessageCallback>
 800270e:	e003      	b.n	8002718 <HAL_FDCAN_IRQHandler+0x254>
 8002710:	4000a800 	.word	0x4000a800
 8002714:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d011      	beq.n	800274a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800273c:	651a      	str	r2, [r3, #80]	; 0x50
 800273e:	4b8d      	ldr	r3, [pc, #564]	; (8002974 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f966 	bl	8002a16 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d011      	beq.n	800277c <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800276e:	651a      	str	r2, [r3, #80]	; 0x50
 8002770:	4b80      	ldr	r3, [pc, #512]	; (8002974 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f957 	bl	8002a2a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00f      	beq.n	80027b8 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a0:	651a      	str	r2, [r3, #80]	; 0x50
 80027a2:	4b74      	ldr	r3, [pc, #464]	; (8002974 <HAL_FDCAN_IRQHandler+0x4b0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027c4:	4b6c      	ldr	r3, [pc, #432]	; (8002978 <HAL_FDCAN_IRQHandler+0x4b4>)
 80027c6:	400b      	ands	r3, r1
 80027c8:	6513      	str	r3, [r2, #80]	; 0x50
 80027ca:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_FDCAN_IRQHandler+0x4b0>)
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	0f9b      	lsrs	r3, r3, #30
 80027d0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80027d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f946 	bl	8002a66 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80027da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d011      	beq.n	8002804 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027e6:	4b64      	ldr	r3, [pc, #400]	; (8002978 <HAL_FDCAN_IRQHandler+0x4b4>)
 80027e8:	400b      	ands	r3, r1
 80027ea:	6513      	str	r3, [r2, #80]	; 0x50
 80027ec:	4a61      	ldr	r2, [pc, #388]	; (8002974 <HAL_FDCAN_IRQHandler+0x4b0>)
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	0f9b      	lsrs	r3, r3, #30
 80027f2:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a5c      	ldr	r2, [pc, #368]	; (800297c <HAL_FDCAN_IRQHandler+0x4b8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	f040 80a6 	bne.w	800295c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 809e 	beq.w	800295c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	4013      	ands	r3, r2
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002842:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	6a3a      	ldr	r2, [r7, #32]
 800284c:	4013      	ands	r3, r2
 800284e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800285a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	4013      	ands	r3, r2
 8002866:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002872:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800288a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4013      	ands	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80028a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8e7 	bl	8002a7c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	6a3a      	ldr	r2, [r7, #32]
 80028ba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80028bc:	6a39      	ldr	r1, [r7, #32]
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f8e7 	bl	8002a92 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01b      	beq.n	800290a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d014      	beq.n	800290a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	0c1b      	lsrs	r3, r3, #16
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f6:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	6939      	ldr	r1, [r7, #16]
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f8cf 	bl	8002aa8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002918:	69f9      	ldr	r1, [r7, #28]
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8d0 	bl	8002ac0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00b      	beq.n	800295c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f873 	bl	8002a52 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800296c:	bf00      	nop
 800296e:	3748      	adds	r7, #72	; 0x48
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	4000a800 	.word	0x4000a800
 8002978:	3fcfffff 	.word	0x3fcfffff
 800297c:	4000a000 	.word	0x4000a000

08002980 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002aee:	4ba7      	ldr	r3, [pc, #668]	; (8002d8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	0091      	lsls	r1, r2, #2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	430b      	orrs	r3, r1
 8002afc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b08:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	4413      	add	r3, r2
 8002b24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b2e:	4b97      	ldr	r3, [pc, #604]	; (8002d8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	0091      	lsls	r1, r2, #2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	041a      	lsls	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	4413      	add	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002b70:	4b86      	ldr	r3, [pc, #536]	; (8002d8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	0091      	lsls	r1, r2, #2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b8a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	041a      	lsls	r2, r3, #16
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	4413      	add	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bb8:	4b74      	ldr	r3, [pc, #464]	; (8002d8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	0091      	lsls	r1, r2, #2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bd2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bda:	041a      	lsls	r2, r3, #16
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002c00:	4b62      	ldr	r3, [pc, #392]	; (8002d8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	0091      	lsls	r1, r2, #2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002c2c:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	0091      	lsls	r1, r2, #2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c46:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	041a      	lsls	r2, r3, #16
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	4413      	add	r3, r2
 8002c64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	0091      	lsls	r1, r2, #2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c88:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ca4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cac:	061a      	lsls	r2, r3, #24
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cbc:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009a      	lsls	r2, r3, #2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	441a      	add	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	441a      	add	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	441a      	add	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d915      	bls.n	8002db4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002d88:	e006      	b.n	8002d98 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002d8a:	bf00      	nop
 8002d8c:	ffff0003 	.word	0xffff0003
 8002d90:	10002b00 	.word	0x10002b00
 8002d94:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2203      	movs	r2, #3
 8002dac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e010      	b.n	8002dd6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e005      	b.n	8002dc8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d3f3      	bcc.n	8002dbc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002df2:	4b89      	ldr	r3, [pc, #548]	; (8003018 <HAL_GPIO_Init+0x234>)
 8002df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002df6:	e194      	b.n	8003122 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8186 	beq.w	800311c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d005      	beq.n	8002e28 <HAL_GPIO_Init+0x44>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d130      	bne.n	8002e8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e5e:	2201      	movs	r2, #1
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f003 0201 	and.w	r2, r3, #1
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d017      	beq.n	8002ec6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d123      	bne.n	8002f1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	08da      	lsrs	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3208      	adds	r2, #8
 8002eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	69b9      	ldr	r1, [r7, #24]
 8002f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0203 	and.w	r2, r3, #3
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80e0 	beq.w	800311c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <HAL_GPIO_Init+0x238>)
 8002f5e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f62:	4a2e      	ldr	r2, [pc, #184]	; (800301c <HAL_GPIO_Init+0x238>)
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002f6c:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_GPIO_Init+0x238>)
 8002f6e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f7a:	4a29      	ldr	r2, [pc, #164]	; (8003020 <HAL_GPIO_Init+0x23c>)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a20      	ldr	r2, [pc, #128]	; (8003024 <HAL_GPIO_Init+0x240>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d052      	beq.n	800304c <HAL_GPIO_Init+0x268>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_GPIO_Init+0x244>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_GPIO_Init+0x22e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_GPIO_Init+0x248>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <HAL_GPIO_Init+0x22a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <HAL_GPIO_Init+0x24c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d025      	beq.n	800300a <HAL_GPIO_Init+0x226>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_GPIO_Init+0x250>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01f      	beq.n	8003006 <HAL_GPIO_Init+0x222>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_GPIO_Init+0x254>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d019      	beq.n	8003002 <HAL_GPIO_Init+0x21e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1a      	ldr	r2, [pc, #104]	; (800303c <HAL_GPIO_Init+0x258>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0x21a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <HAL_GPIO_Init+0x25c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_GPIO_Init+0x216>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_GPIO_Init+0x260>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x212>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_GPIO_Init+0x264>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_GPIO_Init+0x20e>
 8002fee:	2309      	movs	r3, #9
 8002ff0:	e02d      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8002ff2:	230a      	movs	r3, #10
 8002ff4:	e02b      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	e029      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	e027      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8002ffe:	2306      	movs	r3, #6
 8003000:	e025      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8003002:	2305      	movs	r3, #5
 8003004:	e023      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8003006:	2304      	movs	r3, #4
 8003008:	e021      	b.n	800304e <HAL_GPIO_Init+0x26a>
 800300a:	2303      	movs	r3, #3
 800300c:	e01f      	b.n	800304e <HAL_GPIO_Init+0x26a>
 800300e:	2302      	movs	r3, #2
 8003010:	e01d      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8003012:	2301      	movs	r3, #1
 8003014:	e01b      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8003016:	bf00      	nop
 8003018:	58000080 	.word	0x58000080
 800301c:	58024400 	.word	0x58024400
 8003020:	58000400 	.word	0x58000400
 8003024:	58020000 	.word	0x58020000
 8003028:	58020400 	.word	0x58020400
 800302c:	58020800 	.word	0x58020800
 8003030:	58020c00 	.word	0x58020c00
 8003034:	58021000 	.word	0x58021000
 8003038:	58021400 	.word	0x58021400
 800303c:	58021800 	.word	0x58021800
 8003040:	58021c00 	.word	0x58021c00
 8003044:	58022000 	.word	0x58022000
 8003048:	58022400 	.word	0x58022400
 800304c:	2300      	movs	r3, #0
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	f002 0203 	and.w	r2, r2, #3
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	4093      	lsls	r3, r2
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800305e:	4938      	ldr	r1, [pc, #224]	; (8003140 <HAL_GPIO_Init+0x35c>)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	3302      	adds	r3, #2
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800309a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f ae63 	bne.w	8002df8 <HAL_GPIO_Init+0x14>
  }
}
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	3724      	adds	r7, #36	; 0x24
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	58000400 	.word	0x58000400

08003144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
 8003160:	e001      	b.n	8003166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
 8003180:	4613      	mov	r3, r2
 8003182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003184:	787b      	ldrb	r3, [r7, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003190:	e003      	b.n	800319a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003192:	887b      	ldrh	r3, [r7, #2]
 8003194:	041a      	lsls	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	619a      	str	r2, [r3, #24]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_PWREx_ConfigSupply+0xb0>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	2b06      	cmp	r3, #6
 80031ba:	d00a      	beq.n	80031d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031bc:	4b26      	ldr	r3, [pc, #152]	; (8003258 <HAL_PWREx_ConfigSupply+0xb0>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e040      	b.n	8003250 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e03e      	b.n	8003250 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_PWREx_ConfigSupply+0xb0>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80031da:	491f      	ldr	r1, [pc, #124]	; (8003258 <HAL_PWREx_ConfigSupply+0xb0>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031e2:	f7fe fbc3 	bl	800196c <HAL_GetTick>
 80031e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031e8:	e009      	b.n	80031fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031ea:	f7fe fbbf 	bl	800196c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031f8:	d901      	bls.n	80031fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e028      	b.n	8003250 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <HAL_PWREx_ConfigSupply+0xb0>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320a:	d1ee      	bne.n	80031ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b1e      	cmp	r3, #30
 8003210:	d008      	beq.n	8003224 <HAL_PWREx_ConfigSupply+0x7c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b2e      	cmp	r3, #46	; 0x2e
 8003216:	d005      	beq.n	8003224 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b1d      	cmp	r3, #29
 800321c:	d002      	beq.n	8003224 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b2d      	cmp	r3, #45	; 0x2d
 8003222:	d114      	bne.n	800324e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003224:	f7fe fba2 	bl	800196c <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800322a:	e009      	b.n	8003240 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800322c:	f7fe fb9e 	bl	800196c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800323a:	d901      	bls.n	8003240 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_PWREx_ConfigSupply+0xb0>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d1ee      	bne.n	800322c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	58024800 	.word	0x58024800

0800325c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e3f3      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80b3 	beq.w	80033e2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327c:	4b9e      	ldr	r3, [pc, #632]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003286:	4b9c      	ldr	r3, [pc, #624]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328e:	2b10      	cmp	r3, #16
 8003290:	d007      	beq.n	80032a2 <HAL_RCC_OscConfig+0x46>
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	2b18      	cmp	r3, #24
 8003296:	d112      	bne.n	80032be <HAL_RCC_OscConfig+0x62>
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d10d      	bne.n	80032be <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a2:	4b95      	ldr	r3, [pc, #596]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8098 	beq.w	80033e0 <HAL_RCC_OscConfig+0x184>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f040 8093 	bne.w	80033e0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e3cb      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x7a>
 80032c8:	4b8b      	ldr	r3, [pc, #556]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a8a      	ldr	r2, [pc, #552]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	e058      	b.n	8003388 <HAL_RCC_OscConfig+0x12c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d112      	bne.n	8003304 <HAL_RCC_OscConfig+0xa8>
 80032de:	4b86      	ldr	r3, [pc, #536]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a85      	ldr	r2, [pc, #532]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80032e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b83      	ldr	r3, [pc, #524]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a82      	ldr	r2, [pc, #520]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80032f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b80      	ldr	r3, [pc, #512]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7f      	ldr	r2, [pc, #508]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80032fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e041      	b.n	8003388 <HAL_RCC_OscConfig+0x12c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800330c:	d112      	bne.n	8003334 <HAL_RCC_OscConfig+0xd8>
 800330e:	4b7a      	ldr	r3, [pc, #488]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a79      	ldr	r2, [pc, #484]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b77      	ldr	r3, [pc, #476]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a76      	ldr	r2, [pc, #472]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003320:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b74      	ldr	r3, [pc, #464]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a73      	ldr	r2, [pc, #460]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e029      	b.n	8003388 <HAL_RCC_OscConfig+0x12c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x108>
 800333e:	4b6e      	ldr	r3, [pc, #440]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6d      	ldr	r2, [pc, #436]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b6b      	ldr	r3, [pc, #428]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6a      	ldr	r2, [pc, #424]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a67      	ldr	r2, [pc, #412]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e011      	b.n	8003388 <HAL_RCC_OscConfig+0x12c>
 8003364:	4b64      	ldr	r3, [pc, #400]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a63      	ldr	r2, [pc, #396]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b61      	ldr	r3, [pc, #388]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a60      	ldr	r2, [pc, #384]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b5e      	ldr	r3, [pc, #376]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5d      	ldr	r2, [pc, #372]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003382:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe faec 	bl	800196c <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003398:	f7fe fae8 	bl	800196c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e355      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033aa:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x13c>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fad8 	bl	800196c <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe fad4 	bl	800196c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e341      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033d2:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x164>
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 808c 	beq.w	8003508 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f0:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033fa:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_RCC_OscConfig+0x1ba>
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	2b18      	cmp	r3, #24
 800340a:	d137      	bne.n	800347c <HAL_RCC_OscConfig+0x220>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d132      	bne.n	800347c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_RCC_OscConfig+0x1d2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e313      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800342e:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 0219 	bic.w	r2, r3, #25
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	492f      	ldr	r1, [pc, #188]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003440:	f7fe fa94 	bl	800196c <HAL_GetTick>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003448:	f7fe fa90 	bl	800196c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e2fd      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	061b      	lsls	r3, r3, #24
 8003474:	4920      	ldr	r1, [pc, #128]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347a:	e045      	b.n	8003508 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d026      	beq.n	80034d2 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 0219 	bic.w	r2, r3, #25
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4919      	ldr	r1, [pc, #100]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe fa69 	bl	800196c <HAL_GetTick>
 800349a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800349e:	f7fe fa65 	bl	800196c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e2d2      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	061b      	lsls	r3, r3, #24
 80034ca:	490b      	ldr	r1, [pc, #44]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
 80034d0:	e01a      	b.n	8003508 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <HAL_RCC_OscConfig+0x29c>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fe fa45 	bl	800196c <HAL_GetTick>
 80034e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fe fa41 	bl	800196c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d903      	bls.n	80034fc <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e2ae      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
 80034f8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034fc:	4b99      	ldr	r3, [pc, #612]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ee      	bne.n	80034e6 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d06a      	beq.n	80035ea <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003514:	4b93      	ldr	r3, [pc, #588]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800351c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800351e:	4b91      	ldr	r3, [pc, #580]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b08      	cmp	r3, #8
 8003528:	d007      	beq.n	800353a <HAL_RCC_OscConfig+0x2de>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b18      	cmp	r3, #24
 800352e:	d11b      	bne.n	8003568 <HAL_RCC_OscConfig+0x30c>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d116      	bne.n	8003568 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800353a:	4b8a      	ldr	r3, [pc, #552]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x2f6>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b80      	cmp	r3, #128	; 0x80
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e281      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003552:	4b84      	ldr	r3, [pc, #528]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	4980      	ldr	r1, [pc, #512]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003562:	4313      	orrs	r3, r2
 8003564:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003566:	e040      	b.n	80035ea <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d023      	beq.n	80035b8 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003570:	4b7c      	ldr	r3, [pc, #496]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a7b      	ldr	r2, [pc, #492]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe f9f6 	bl	800196c <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003584:	f7fe f9f2 	bl	800196c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e25f      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003596:	4b73      	ldr	r3, [pc, #460]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035a2:	4b70      	ldr	r3, [pc, #448]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	061b      	lsls	r3, r3, #24
 80035b0:	496c      	ldr	r1, [pc, #432]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60cb      	str	r3, [r1, #12]
 80035b6:	e018      	b.n	80035ea <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035b8:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a69      	ldr	r2, [pc, #420]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80035be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe f9d2 	bl	800196c <HAL_GetTick>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035cc:	f7fe f9ce 	bl	800196c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e23b      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035de:	4b61      	ldr	r3, [pc, #388]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d036      	beq.n	8003664 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d019      	beq.n	8003632 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fe:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003602:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360a:	f7fe f9af 	bl	800196c <HAL_GetTick>
 800360e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003612:	f7fe f9ab 	bl	800196c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e218      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003624:	4b4f      	ldr	r3, [pc, #316]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x3b6>
 8003630:	e018      	b.n	8003664 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003632:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003636:	4a4b      	ldr	r2, [pc, #300]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fe f995 	bl	800196c <HAL_GetTick>
 8003642:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003646:	f7fe f991 	bl	800196c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1fe      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003658:	4b42      	ldr	r3, [pc, #264]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 800365a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d036      	beq.n	80036de <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d019      	beq.n	80036ac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003678:	4b3a      	ldr	r3, [pc, #232]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a39      	ldr	r2, [pc, #228]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 800367e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003682:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003684:	f7fe f972 	bl	800196c <HAL_GetTick>
 8003688:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800368c:	f7fe f96e 	bl	800196c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e1db      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800369e:	4b31      	ldr	r3, [pc, #196]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x430>
 80036aa:	e018      	b.n	80036de <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ac:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80036b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036b8:	f7fe f958 	bl	800196c <HAL_GetTick>
 80036bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036c0:	f7fe f954 	bl	800196c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1c1      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80af 	beq.w	800384a <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <HAL_RCC_OscConfig+0x50c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_RCC_OscConfig+0x50c>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036f8:	f7fe f938 	bl	800196c <HAL_GetTick>
 80036fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003700:	f7fe f934 	bl	800196c <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	; 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e1a1      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_RCC_OscConfig+0x50c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d106      	bne.n	8003734 <HAL_RCC_OscConfig+0x4d8>
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
 8003732:	e05b      	b.n	80037ec <HAL_RCC_OscConfig+0x590>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d117      	bne.n	800376c <HAL_RCC_OscConfig+0x510>
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a08      	ldr	r2, [pc, #32]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4a05      	ldr	r2, [pc, #20]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 800374e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003752:	6713      	str	r3, [r2, #112]	; 0x70
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4a02      	ldr	r2, [pc, #8]	; (8003764 <HAL_RCC_OscConfig+0x508>)
 800375a:	f023 0304 	bic.w	r3, r3, #4
 800375e:	6713      	str	r3, [r2, #112]	; 0x70
 8003760:	e044      	b.n	80037ec <HAL_RCC_OscConfig+0x590>
 8003762:	bf00      	nop
 8003764:	58024400 	.word	0x58024400
 8003768:	58024800 	.word	0x58024800
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d112      	bne.n	800379a <HAL_RCC_OscConfig+0x53e>
 8003774:	4b95      	ldr	r3, [pc, #596]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a94      	ldr	r2, [pc, #592]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
 8003780:	4b92      	ldr	r3, [pc, #584]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a91      	ldr	r2, [pc, #580]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
 800378c:	4b8f      	ldr	r3, [pc, #572]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a8e      	ldr	r2, [pc, #568]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	e028      	b.n	80037ec <HAL_RCC_OscConfig+0x590>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b85      	cmp	r3, #133	; 0x85
 80037a0:	d112      	bne.n	80037c8 <HAL_RCC_OscConfig+0x56c>
 80037a2:	4b8a      	ldr	r3, [pc, #552]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a89      	ldr	r2, [pc, #548]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037a8:	f043 0304 	orr.w	r3, r3, #4
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
 80037ae:	4b87      	ldr	r3, [pc, #540]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a86      	ldr	r2, [pc, #536]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ba:	4b84      	ldr	r3, [pc, #528]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	4a83      	ldr	r2, [pc, #524]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6713      	str	r3, [r2, #112]	; 0x70
 80037c6:	e011      	b.n	80037ec <HAL_RCC_OscConfig+0x590>
 80037c8:	4b80      	ldr	r3, [pc, #512]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a7f      	ldr	r2, [pc, #508]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037da:	f023 0304 	bic.w	r3, r3, #4
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	4b7a      	ldr	r3, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a79      	ldr	r2, [pc, #484]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80037e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fe f8ba 	bl	800196c <HAL_GetTick>
 80037f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037fc:	f7fe f8b6 	bl	800196c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e121      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003812:	4b6e      	ldr	r3, [pc, #440]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0ee      	beq.n	80037fc <HAL_RCC_OscConfig+0x5a0>
 800381e:	e014      	b.n	800384a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fe f8a4 	bl	800196c <HAL_GetTick>
 8003824:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fe f8a0 	bl	800196c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e10b      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800383e:	4b63      	ldr	r3, [pc, #396]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1ee      	bne.n	8003828 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8100 	beq.w	8003a54 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003854:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800385c:	2b18      	cmp	r3, #24
 800385e:	f000 80bb 	beq.w	80039d8 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	2b02      	cmp	r3, #2
 8003868:	f040 8095 	bne.w	8003996 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b57      	ldr	r3, [pc, #348]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a56      	ldr	r2, [pc, #344]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fe f878 	bl	800196c <HAL_GetTick>
 800387c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003880:	f7fe f874 	bl	800196c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0e1      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003892:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389e:	4b4b      	ldr	r3, [pc, #300]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80038a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a2:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <HAL_RCC_OscConfig+0x774>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	430a      	orrs	r2, r1
 80038b2:	4946      	ldr	r1, [pc, #280]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	628b      	str	r3, [r1, #40]	; 0x28
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	3b01      	subs	r3, #1
 80038be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	3b01      	subs	r3, #1
 80038c8:	025b      	lsls	r3, r3, #9
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	3b01      	subs	r3, #1
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	3b01      	subs	r3, #1
 80038e2:	061b      	lsls	r3, r3, #24
 80038e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038e8:	4938      	ldr	r1, [pc, #224]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80038ee:	4b37      	ldr	r3, [pc, #220]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	4a36      	ldr	r2, [pc, #216]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80038fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038fe:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <HAL_RCC_OscConfig+0x778>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003906:	00d2      	lsls	r2, r2, #3
 8003908:	4930      	ldr	r1, [pc, #192]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800390a:	4313      	orrs	r3, r2
 800390c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	f023 020c 	bic.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	492c      	ldr	r1, [pc, #176]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800391c:	4313      	orrs	r3, r2
 800391e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	f023 0202 	bic.w	r2, r3, #2
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	4927      	ldr	r1, [pc, #156]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800392e:	4313      	orrs	r3, r2
 8003930:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	4a25      	ldr	r2, [pc, #148]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	4a22      	ldr	r2, [pc, #136]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003948:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003954:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003956:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003968:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800396c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fd fffd 	bl	800196c <HAL_GetTick>
 8003972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003976:	f7fd fff9 	bl	800196c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e066      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x71a>
 8003994:	e05e      	b.n	8003a54 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 800399c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fd ffe3 	bl	800196c <HAL_GetTick>
 80039a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fd ffdf 	bl	800196c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e04c      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCC_OscConfig+0x770>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x74e>
 80039c8:	e044      	b.n	8003a54 <HAL_RCC_OscConfig+0x7f8>
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
 80039d0:	fffffc0c 	.word	0xfffffc0c
 80039d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039d8:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <HAL_RCC_OscConfig+0x804>)
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCC_OscConfig+0x804>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d031      	beq.n	8003a50 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f003 0203 	and.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d12a      	bne.n	8003a50 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d122      	bne.n	8003a50 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d11a      	bne.n	8003a50 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	0a5b      	lsrs	r3, r3, #9
 8003a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d111      	bne.n	8003a50 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d108      	bne.n	8003a50 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	0e1b      	lsrs	r3, r3, #24
 8003a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3730      	adds	r7, #48	; 0x30
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	58024400 	.word	0x58024400

08003a64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e19c      	b.n	8003db2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b8a      	ldr	r3, [pc, #552]	; (8003ca4 <HAL_RCC_ClockConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d910      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b87      	ldr	r3, [pc, #540]	; (8003ca4 <HAL_RCC_ClockConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 020f 	bic.w	r2, r3, #15
 8003a8e:	4985      	ldr	r1, [pc, #532]	; (8003ca4 <HAL_RCC_ClockConfig+0x240>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b83      	ldr	r3, [pc, #524]	; (8003ca4 <HAL_RCC_ClockConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e184      	b.n	8003db2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	4b7b      	ldr	r3, [pc, #492]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d908      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ac4:	4b78      	ldr	r3, [pc, #480]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	4975      	ldr	r1, [pc, #468]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d010      	beq.n	8003b04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	4b70      	ldr	r3, [pc, #448]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d908      	bls.n	8003b04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003af2:	4b6d      	ldr	r3, [pc, #436]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	496a      	ldr	r1, [pc, #424]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d010      	beq.n	8003b32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	4b64      	ldr	r3, [pc, #400]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d908      	bls.n	8003b32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b20:	4b61      	ldr	r3, [pc, #388]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	495e      	ldr	r1, [pc, #376]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d010      	beq.n	8003b60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	4b59      	ldr	r3, [pc, #356]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d908      	bls.n	8003b60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b4e:	4b56      	ldr	r3, [pc, #344]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4953      	ldr	r1, [pc, #332]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d010      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4b4d      	ldr	r3, [pc, #308]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d908      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f023 020f 	bic.w	r2, r3, #15
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4947      	ldr	r1, [pc, #284]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d055      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b9a:	4b43      	ldr	r3, [pc, #268]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	4940      	ldr	r1, [pc, #256]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bb4:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d121      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0f6      	b.n	8003db2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bcc:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d115      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0ea      	b.n	8003db2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003be4:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0de      	b.n	8003db2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0d6      	b.n	8003db2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c04:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f023 0207 	bic.w	r2, r3, #7
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4925      	ldr	r1, [pc, #148]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fd fea9 	bl	800196c <HAL_GetTick>
 8003c1a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1e:	f7fd fea5 	bl	800196c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0be      	b.n	8003db2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c34:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d1eb      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d208      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f023 020f 	bic.w	r2, r3, #15
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	490e      	ldr	r1, [pc, #56]	; (8003ca8 <HAL_RCC_ClockConfig+0x244>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_ClockConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d214      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <HAL_RCC_ClockConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 020f 	bic.w	r2, r3, #15
 8003c8a:	4906      	ldr	r1, [pc, #24]	; (8003ca4 <HAL_RCC_ClockConfig+0x240>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <HAL_RCC_ClockConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e086      	b.n	8003db2 <HAL_RCC_ClockConfig+0x34e>
 8003ca4:	52002000 	.word	0x52002000
 8003ca8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d010      	beq.n	8003cda <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d208      	bcs.n	8003cda <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cc8:	4b3c      	ldr	r3, [pc, #240]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	4939      	ldr	r1, [pc, #228]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d010      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d208      	bcs.n	8003d08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cf6:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	492e      	ldr	r1, [pc, #184]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d010      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d208      	bcs.n	8003d36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	4922      	ldr	r1, [pc, #136]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d010      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d208      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d52:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4917      	ldr	r1, [pc, #92]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003d64:	f000 f834 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	4912      	ldr	r1, [pc, #72]	; (8003dc0 <HAL_RCC_ClockConfig+0x35c>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_RCC_ClockConfig+0x358>)
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a0d      	ldr	r2, [pc, #52]	; (8003dc0 <HAL_RCC_ClockConfig+0x35c>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
 8003d98:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <HAL_RCC_ClockConfig+0x360>)
 8003d9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d9c:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <HAL_RCC_ClockConfig+0x364>)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_RCC_ClockConfig+0x368>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd fd96 	bl	80018d8 <HAL_InitTick>
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	58024400 	.word	0x58024400
 8003dc0:	08008f74 	.word	0x08008f74
 8003dc4:	2400000c 	.word	0x2400000c
 8003dc8:	24000008 	.word	0x24000008
 8003dcc:	24000010 	.word	0x24000010

08003dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b089      	sub	sp, #36	; 0x24
 8003dd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd6:	4bb3      	ldr	r3, [pc, #716]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dde:	2b18      	cmp	r3, #24
 8003de0:	f200 8155 	bhi.w	800408e <HAL_RCC_GetSysClockFreq+0x2be>
 8003de4:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_RCC_GetSysClockFreq+0x1c>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003e51 	.word	0x08003e51
 8003df0:	0800408f 	.word	0x0800408f
 8003df4:	0800408f 	.word	0x0800408f
 8003df8:	0800408f 	.word	0x0800408f
 8003dfc:	0800408f 	.word	0x0800408f
 8003e00:	0800408f 	.word	0x0800408f
 8003e04:	0800408f 	.word	0x0800408f
 8003e08:	0800408f 	.word	0x0800408f
 8003e0c:	08003e77 	.word	0x08003e77
 8003e10:	0800408f 	.word	0x0800408f
 8003e14:	0800408f 	.word	0x0800408f
 8003e18:	0800408f 	.word	0x0800408f
 8003e1c:	0800408f 	.word	0x0800408f
 8003e20:	0800408f 	.word	0x0800408f
 8003e24:	0800408f 	.word	0x0800408f
 8003e28:	0800408f 	.word	0x0800408f
 8003e2c:	08003e7d 	.word	0x08003e7d
 8003e30:	0800408f 	.word	0x0800408f
 8003e34:	0800408f 	.word	0x0800408f
 8003e38:	0800408f 	.word	0x0800408f
 8003e3c:	0800408f 	.word	0x0800408f
 8003e40:	0800408f 	.word	0x0800408f
 8003e44:	0800408f 	.word	0x0800408f
 8003e48:	0800408f 	.word	0x0800408f
 8003e4c:	08003e83 	.word	0x08003e83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e50:	4b94      	ldr	r3, [pc, #592]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d009      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e5c:	4b91      	ldr	r3, [pc, #580]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	08db      	lsrs	r3, r3, #3
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	4a90      	ldr	r2, [pc, #576]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003e6e:	e111      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e70:	4b8d      	ldr	r3, [pc, #564]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e72:	61bb      	str	r3, [r7, #24]
    break;
 8003e74:	e10e      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e76:	4b8d      	ldr	r3, [pc, #564]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e78:	61bb      	str	r3, [r7, #24]
    break;
 8003e7a:	e10b      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003e7c:	4b8c      	ldr	r3, [pc, #560]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e7e:	61bb      	str	r3, [r7, #24]
    break;
 8003e80:	e108      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e82:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003e8c:	4b85      	ldr	r3, [pc, #532]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e98:	4b82      	ldr	r3, [pc, #520]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003ea2:	4b80      	ldr	r3, [pc, #512]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	08db      	lsrs	r3, r3, #3
 8003ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80e1 	beq.w	8004088 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	f000 8083 	beq.w	8003fd4 <HAL_RCC_GetSysClockFreq+0x204>
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	f200 80a1 	bhi.w	8004018 <HAL_RCC_GetSysClockFreq+0x248>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x114>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d056      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ee2:	e099      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ee4:	4b6f      	ldr	r3, [pc, #444]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02d      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ef0:	4b6c      	ldr	r3, [pc, #432]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	08db      	lsrs	r3, r3, #3
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	4a6b      	ldr	r2, [pc, #428]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
 8003f00:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b62      	ldr	r3, [pc, #392]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80040b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003f4a:	e087      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	eddf 6a58 	vldr	s13, [pc, #352]	; 80040b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5e:	4b51      	ldr	r3, [pc, #324]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f72:	eddf 5a50 	vldr	s11, [pc, #320]	; 80040b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f8e:	e065      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80040bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa2:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fb6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80040b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fd2:	e043      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ffa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80040b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800400a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004016:	e021      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004022:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403a:	ed97 6a02 	vldr	s12, [r7, #8]
 800403e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80040b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800404e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800405a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	0a5b      	lsrs	r3, r3, #9
 8004062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004066:	3301      	adds	r3, #1
 8004068:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004074:	edd7 6a07 	vldr	s13, [r7, #28]
 8004078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004080:	ee17 3a90 	vmov	r3, s15
 8004084:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004086:	e005      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]
    break;
 800408c:	e002      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004090:	61bb      	str	r3, [r7, #24]
    break;
 8004092:	bf00      	nop
  }

  return sysclockfreq;
 8004094:	69bb      	ldr	r3, [r7, #24]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3724      	adds	r7, #36	; 0x24
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	58024400 	.word	0x58024400
 80040a8:	03d09000 	.word	0x03d09000
 80040ac:	003d0900 	.word	0x003d0900
 80040b0:	016e3600 	.word	0x016e3600
 80040b4:	46000000 	.word	0x46000000
 80040b8:	4c742400 	.word	0x4c742400
 80040bc:	4a742400 	.word	0x4a742400
 80040c0:	4bb71b00 	.word	0x4bb71b00

080040c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80040ca:	f7ff fe81 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 80040ce:	4602      	mov	r2, r0
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <HAL_RCC_GetHCLKFreq+0x50>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	490f      	ldr	r1, [pc, #60]	; (8004118 <HAL_RCC_GetHCLKFreq+0x54>)
 80040dc:	5ccb      	ldrb	r3, [r1, r3]
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	fa22 f303 	lsr.w	r3, r2, r3
 80040e6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_GetHCLKFreq+0x50>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	4a09      	ldr	r2, [pc, #36]	; (8004118 <HAL_RCC_GetHCLKFreq+0x54>)
 80040f2:	5cd3      	ldrb	r3, [r2, r3]
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	fa22 f303 	lsr.w	r3, r2, r3
 80040fe:	4a07      	ldr	r2, [pc, #28]	; (800411c <HAL_RCC_GetHCLKFreq+0x58>)
 8004100:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004102:	4a07      	ldr	r2, [pc, #28]	; (8004120 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004108:	4b04      	ldr	r3, [pc, #16]	; (800411c <HAL_RCC_GetHCLKFreq+0x58>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	58024400 	.word	0x58024400
 8004118:	08008f74 	.word	0x08008f74
 800411c:	2400000c 	.word	0x2400000c
 8004120:	24000008 	.word	0x24000008

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004128:	f7ff ffcc 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4904      	ldr	r1, [pc, #16]	; (800414c <HAL_RCC_GetPCLK1Freq+0x28>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	58024400 	.word	0x58024400
 800414c:	08008f74 	.word	0x08008f74

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004154:	f7ff ffb6 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4904      	ldr	r1, [pc, #16]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	58024400 	.word	0x58024400
 8004178:	08008f74 	.word	0x08008f74

0800417c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004184:	2300      	movs	r3, #0
 8004186:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004188:	2300      	movs	r3, #0
 800418a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d03f      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041a0:	d02a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041a6:	d824      	bhi.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ac:	d018      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b2:	d81e      	bhi.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041bc:	d007      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041be:	e018      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c0:	4ba6      	ldr	r3, [pc, #664]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	4aa5      	ldr	r2, [pc, #660]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041cc:	e015      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3304      	adds	r3, #4
 80041d2:	2102      	movs	r1, #2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 f99b 	bl	8005510 <RCCEx_PLL2_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041de:	e00c      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3324      	adds	r3, #36	; 0x24
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fa44 	bl	8005674 <RCCEx_PLL3_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
      break;
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004200:	4b96      	ldr	r3, [pc, #600]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800420c:	4993      	ldr	r1, [pc, #588]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	650b      	str	r3, [r1, #80]	; 0x50
 8004212:	e001      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d03d      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004228:	2b04      	cmp	r3, #4
 800422a:	d826      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004249 	.word	0x08004249
 8004238:	08004257 	.word	0x08004257
 800423c:	08004269 	.word	0x08004269
 8004240:	08004281 	.word	0x08004281
 8004244:	08004281 	.word	0x08004281
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004248:	4b84      	ldr	r3, [pc, #528]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	4a83      	ldr	r2, [pc, #524]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800424e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004254:	e015      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3304      	adds	r3, #4
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f957 	bl	8005510 <RCCEx_PLL2_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004266:	e00c      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3324      	adds	r3, #36	; 0x24
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fa00 	bl	8005674 <RCCEx_PLL3_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004278:	e003      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
      break;
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004288:	4b74      	ldr	r3, [pc, #464]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	f023 0207 	bic.w	r2, r3, #7
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	4971      	ldr	r1, [pc, #452]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004296:	4313      	orrs	r3, r2
 8004298:	650b      	str	r3, [r1, #80]	; 0x50
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d04a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042b4:	d031      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80042b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042ba:	d82b      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c0:	d02d      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d825      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042c8:	2bc0      	cmp	r3, #192	; 0xc0
 80042ca:	d02a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80042cc:	2bc0      	cmp	r3, #192	; 0xc0
 80042ce:	d821      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d016      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d81d      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d007      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80042e0:	e018      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e2:	4b5e      	ldr	r3, [pc, #376]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	4a5d      	ldr	r2, [pc, #372]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80042ee:	e019      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 f90a 	bl	8005510 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004300:	e010      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f9b3 	bl	8005674 <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004312:	e007      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
      break;
 8004318:	e004      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800432a:	4b4c      	ldr	r3, [pc, #304]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800432c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	4949      	ldr	r1, [pc, #292]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004338:	4313      	orrs	r3, r2
 800433a:	650b      	str	r3, [r1, #80]	; 0x50
 800433c:	e001      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434a:	2b00      	cmp	r3, #0
 800434c:	d04f      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004356:	d036      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004358:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800435c:	d830      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800435e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004362:	d032      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004368:	d82a      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800436a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800436e:	d02e      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004370:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004374:	d824      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d018      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x232>
 800437c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004380:	d81e      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438a:	d007      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800438c:	e018      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	4a32      	ldr	r2, [pc, #200]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004398:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800439a:	e019      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 f8b4 	bl	8005510 <RCCEx_PLL2_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80043ac:	e010      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3324      	adds	r3, #36	; 0x24
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f001 f95d 	bl	8005674 <RCCEx_PLL3_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80043be:	e007      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
      break;
 80043c4:	e004      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80043ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80043d6:	4b21      	ldr	r3, [pc, #132]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e2:	491e      	ldr	r1, [pc, #120]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	650b      	str	r3, [r1, #80]	; 0x50
 80043e8:	e001      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
 80043ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d034      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fe:	2b30      	cmp	r3, #48	; 0x30
 8004400:	d01c      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004402:	2b30      	cmp	r3, #48	; 0x30
 8004404:	d817      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004406:	2b20      	cmp	r3, #32
 8004408:	d00c      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800440a:	2b20      	cmp	r3, #32
 800440c:	d813      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d016      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004412:	2b10      	cmp	r3, #16
 8004414:	d10f      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	4a10      	ldr	r2, [pc, #64]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800441c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004420:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004422:	e00e      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f001 f870 	bl	8005510 <RCCEx_PLL2_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004434:	e005      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
      break;
 800443a:	e002      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800444a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004454:	4901      	ldr	r1, [pc, #4]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	64cb      	str	r3, [r1, #76]	; 0x4c
 800445a:	e003      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800445c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d047      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004478:	d030      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800447a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800447e:	d82a      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004484:	d02c      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004486:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800448a:	d824      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800448c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004490:	d018      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004496:	d81e      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a0:	d007      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80044a2:	e018      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a4:	4bb0      	ldr	r3, [pc, #704]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4aaf      	ldr	r2, [pc, #700]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044b0:	e017      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f829 	bl	8005510 <RCCEx_PLL2_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044c2:	e00e      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3324      	adds	r3, #36	; 0x24
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 f8d2 	bl	8005674 <RCCEx_PLL3_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044d4:	e005      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
      break;
 80044da:	e002      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80044dc:	bf00      	nop
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80044e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044e8:	4b9f      	ldr	r3, [pc, #636]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f4:	499c      	ldr	r1, [pc, #624]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	650b      	str	r3, [r1, #80]	; 0x50
 80044fa:	e001      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d049      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004514:	d02e      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800451a:	d828      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800451c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004520:	d02a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004522:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004526:	d822      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004528:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800452c:	d026      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800452e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004532:	d81c      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004538:	d010      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800453a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800453e:	d816      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01d      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004548:	d111      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3304      	adds	r3, #4
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f000 ffdd 	bl	8005510 <RCCEx_PLL2_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800455a:	e012      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3324      	adds	r3, #36	; 0x24
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f001 f886 	bl	8005674 <RCCEx_PLL3_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800456c:	e009      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
      break;
 8004572:	e006      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004574:	bf00      	nop
 8004576:	e004      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004588:	4b77      	ldr	r3, [pc, #476]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004594:	4974      	ldr	r1, [pc, #464]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004596:	4313      	orrs	r3, r2
 8004598:	650b      	str	r3, [r1, #80]	; 0x50
 800459a:	e001      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d053      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80045b6:	d034      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80045b8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80045bc:	d82e      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c2:	d030      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80045c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c8:	d828      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ce:	d02c      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d822      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045da:	d028      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80045dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045e0:	d81c      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e6:	d010      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80045e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ec:	d816      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01f      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80045f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f6:	d111      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 ff86 	bl	8005510 <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004608:	e014      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3324      	adds	r3, #36	; 0x24
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f001 f82f 	bl	8005674 <RCCEx_PLL3_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800461a:	e00b      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
      break;
 8004620:	e008      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004622:	bf00      	nop
 8004624:	e006      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004626:	bf00      	nop
 8004628:	e004      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800463a:	4b4b      	ldr	r3, [pc, #300]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004648:	4947      	ldr	r1, [pc, #284]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800464a:	4313      	orrs	r3, r2
 800464c:	658b      	str	r3, [r1, #88]	; 0x58
 800464e:	e001      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d02f      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004668:	d00e      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800466a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800466e:	d814      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d015      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004678:	d10f      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467a:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	4a3a      	ldr	r2, [pc, #232]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004684:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004686:	e00c      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f000 ff3e 	bl	8005510 <RCCEx_PLL2_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004698:	e003      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
      break;
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80046a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046a8:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b4:	492c      	ldr	r1, [pc, #176]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	650b      	str	r3, [r1, #80]	; 0x50
 80046ba:	e001      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d032      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d81b      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x590>
 80046d4:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	08004713 	.word	0x08004713
 80046e0:	080046ed 	.word	0x080046ed
 80046e4:	080046fb 	.word	0x080046fb
 80046e8:	08004713 	.word	0x08004713
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ec:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046f8:	e00c      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3304      	adds	r3, #4
 80046fe:	2102      	movs	r1, #2
 8004700:	4618      	mov	r0, r3
 8004702:	f000 ff05 	bl	8005510 <RCCEx_PLL2_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800470a:	e003      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	75fb      	strb	r3, [r7, #23]
      break;
 8004710:	e000      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8004712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004714:	7dfb      	ldrb	r3, [r7, #23]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800471a:	4b13      	ldr	r3, [pc, #76]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	f023 0203 	bic.w	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	4910      	ldr	r1, [pc, #64]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800472c:	e001      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
 8004730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 808a 	beq.w	8004854 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004740:	4b0a      	ldr	r3, [pc, #40]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a09      	ldr	r2, [pc, #36]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800474c:	f7fd f90e 	bl	800196c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004752:	e00d      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7fd f90a 	bl	800196c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d906      	bls.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	75fb      	strb	r3, [r7, #23]
        break;
 8004766:	e009      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8004768:	58024400 	.word	0x58024400
 800476c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004770:	4bba      	ldr	r3, [pc, #744]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0eb      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d166      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004782:	4bb7      	ldr	r3, [pc, #732]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004784:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800478c:	4053      	eors	r3, r2
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d013      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004796:	4bb2      	ldr	r3, [pc, #712]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047a0:	4baf      	ldr	r3, [pc, #700]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	4aae      	ldr	r2, [pc, #696]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047ac:	4bac      	ldr	r3, [pc, #688]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	4aab      	ldr	r2, [pc, #684]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80047b8:	4aa9      	ldr	r2, [pc, #676]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c8:	d115      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ca:	f7fd f8cf 	bl	800196c <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047d0:	e00b      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fd f8cb 	bl	800196c <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d902      	bls.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	75fb      	strb	r3, [r7, #23]
            break;
 80047e8:	e005      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ea:	4b9d      	ldr	r3, [pc, #628]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0ed      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d126      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480a:	d10d      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800480c:	4b94      	ldr	r3, [pc, #592]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800481a:	0919      	lsrs	r1, r3, #4
 800481c:	4b91      	ldr	r3, [pc, #580]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800481e:	400b      	ands	r3, r1
 8004820:	498f      	ldr	r1, [pc, #572]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004822:	4313      	orrs	r3, r2
 8004824:	610b      	str	r3, [r1, #16]
 8004826:	e005      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004828:	4b8d      	ldr	r3, [pc, #564]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	4a8c      	ldr	r2, [pc, #560]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800482e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004832:	6113      	str	r3, [r2, #16]
 8004834:	4b8a      	ldr	r3, [pc, #552]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800483e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004842:	4987      	ldr	r1, [pc, #540]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004844:	4313      	orrs	r3, r2
 8004846:	670b      	str	r3, [r1, #112]	; 0x70
 8004848:	e004      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	75bb      	strb	r3, [r7, #22]
 800484e:	e001      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004850:	7dfb      	ldrb	r3, [r7, #23]
 8004852:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d07f      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004866:	2b28      	cmp	r3, #40	; 0x28
 8004868:	d866      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	0800493f 	.word	0x0800493f
 8004874:	08004939 	.word	0x08004939
 8004878:	08004939 	.word	0x08004939
 800487c:	08004939 	.word	0x08004939
 8004880:	08004939 	.word	0x08004939
 8004884:	08004939 	.word	0x08004939
 8004888:	08004939 	.word	0x08004939
 800488c:	08004939 	.word	0x08004939
 8004890:	08004915 	.word	0x08004915
 8004894:	08004939 	.word	0x08004939
 8004898:	08004939 	.word	0x08004939
 800489c:	08004939 	.word	0x08004939
 80048a0:	08004939 	.word	0x08004939
 80048a4:	08004939 	.word	0x08004939
 80048a8:	08004939 	.word	0x08004939
 80048ac:	08004939 	.word	0x08004939
 80048b0:	08004927 	.word	0x08004927
 80048b4:	08004939 	.word	0x08004939
 80048b8:	08004939 	.word	0x08004939
 80048bc:	08004939 	.word	0x08004939
 80048c0:	08004939 	.word	0x08004939
 80048c4:	08004939 	.word	0x08004939
 80048c8:	08004939 	.word	0x08004939
 80048cc:	08004939 	.word	0x08004939
 80048d0:	0800493f 	.word	0x0800493f
 80048d4:	08004939 	.word	0x08004939
 80048d8:	08004939 	.word	0x08004939
 80048dc:	08004939 	.word	0x08004939
 80048e0:	08004939 	.word	0x08004939
 80048e4:	08004939 	.word	0x08004939
 80048e8:	08004939 	.word	0x08004939
 80048ec:	08004939 	.word	0x08004939
 80048f0:	0800493f 	.word	0x0800493f
 80048f4:	08004939 	.word	0x08004939
 80048f8:	08004939 	.word	0x08004939
 80048fc:	08004939 	.word	0x08004939
 8004900:	08004939 	.word	0x08004939
 8004904:	08004939 	.word	0x08004939
 8004908:	08004939 	.word	0x08004939
 800490c:	08004939 	.word	0x08004939
 8004910:	0800493f 	.word	0x0800493f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fdf8 	bl	8005510 <RCCEx_PLL2_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004924:	e00c      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3324      	adds	r3, #36	; 0x24
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fea1 	bl	8005674 <RCCEx_PLL3_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004936:	e003      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	75fb      	strb	r3, [r7, #23]
      break;
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800493e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004946:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004954:	4942      	ldr	r1, [pc, #264]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	654b      	str	r3, [r1, #84]	; 0x54
 800495a:	e001      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d038      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004970:	2b05      	cmp	r3, #5
 8004972:	d821      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049bf 	.word	0x080049bf
 8004980:	08004995 	.word	0x08004995
 8004984:	080049a7 	.word	0x080049a7
 8004988:	080049bf 	.word	0x080049bf
 800498c:	080049bf 	.word	0x080049bf
 8004990:	080049bf 	.word	0x080049bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	2101      	movs	r1, #1
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fdb8 	bl	8005510 <RCCEx_PLL2_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80049a4:	e00c      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3324      	adds	r3, #36	; 0x24
 80049aa:	2101      	movs	r1, #1
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fe61 	bl	8005674 <RCCEx_PLL3_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80049b6:	e003      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
      break;
 80049bc:	e000      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80049be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049c6:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f023 0207 	bic.w	r2, r3, #7
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d2:	4923      	ldr	r1, [pc, #140]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	654b      	str	r3, [r1, #84]	; 0x54
 80049d8:	e001      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d040      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	d821      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a3f 	.word	0x08004a3f
 8004a00:	08004a15 	.word	0x08004a15
 8004a04:	08004a27 	.word	0x08004a27
 8004a08:	08004a3f 	.word	0x08004a3f
 8004a0c:	08004a3f 	.word	0x08004a3f
 8004a10:	08004a3f 	.word	0x08004a3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fd78 	bl	8005510 <RCCEx_PLL2_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a24:	e00c      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3324      	adds	r3, #36	; 0x24
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fe21 	bl	8005674 <RCCEx_PLL3_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a36:	e003      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3c:	e000      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d110      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	f023 0207 	bic.w	r2, r3, #7
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a54:	4902      	ldr	r1, [pc, #8]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	658b      	str	r3, [r1, #88]	; 0x58
 8004a5a:	e007      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004a5c:	58024800 	.word	0x58024800
 8004a60:	58024400 	.word	0x58024400
 8004a64:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d04b      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a82:	d02e      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a88:	d828      	bhi.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8e:	d02a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a94:	d822      	bhi.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004a96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a9a:	d026      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004a9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aa0:	d81c      	bhi.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa6:	d010      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aac:	d816      	bhi.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01d      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab6:	d111      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	2100      	movs	r1, #0
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fd26 	bl	8005510 <RCCEx_PLL2_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ac8:	e012      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3324      	adds	r3, #36	; 0x24
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fdcf 	bl	8005674 <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ada:	e009      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae0:	e006      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e004      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e002      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004aea:	bf00      	nop
 8004aec:	e000      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004af6:	4bb3      	ldr	r3, [pc, #716]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b04:	49af      	ldr	r1, [pc, #700]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	654b      	str	r3, [r1, #84]	; 0x54
 8004b0a:	e001      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d04b      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b26:	d02e      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004b28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b2c:	d828      	bhi.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b32:	d02a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b38:	d822      	bhi.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b3e:	d026      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b44:	d81c      	bhi.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4a:	d010      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b50:	d816      	bhi.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01d      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	2100      	movs	r1, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fcd4 	bl	8005510 <RCCEx_PLL2_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b6c:	e012      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3324      	adds	r3, #36	; 0x24
 8004b72:	2102      	movs	r1, #2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fd7d 	bl	8005674 <RCCEx_PLL3_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b7e:	e009      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	75fb      	strb	r3, [r7, #23]
      break;
 8004b84:	e006      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b9a:	4b8a      	ldr	r3, [pc, #552]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ba8:	4986      	ldr	r1, [pc, #536]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	658b      	str	r3, [r1, #88]	; 0x58
 8004bae:	e001      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
 8004bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d04b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bca:	d02e      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004bcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bd0:	d828      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd6:	d02a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bdc:	d822      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004be2:	d026      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004be4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004be8:	d81c      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bee:	d010      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf4:	d816      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01d      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfe:	d111      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	2100      	movs	r1, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fc82 	bl	8005510 <RCCEx_PLL2_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c10:	e012      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3324      	adds	r3, #36	; 0x24
 8004c16:	2102      	movs	r1, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fd2b 	bl	8005674 <RCCEx_PLL3_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c22:	e009      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
      break;
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e004      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e002      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c3e:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c4c:	495d      	ldr	r1, [pc, #372]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	658b      	str	r3, [r1, #88]	; 0x58
 8004c52:	e001      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	d10a      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3324      	adds	r3, #36	; 0x24
 8004c74:	2102      	movs	r1, #2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fcfc 	bl	8005674 <RCCEx_PLL3_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c86:	4b4f      	ldr	r3, [pc, #316]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	494b      	ldr	r1, [pc, #300]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb0:	d10a      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3324      	adds	r3, #36	; 0x24
 8004cb6:	2102      	movs	r1, #2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fcdb 	bl	8005674 <RCCEx_PLL3_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cc8:	4b3e      	ldr	r3, [pc, #248]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cd6:	493b      	ldr	r1, [pc, #236]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d034      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cf2:	d01d      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cf8:	d817      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d02:	d009      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004d04:	e011      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fbff 	bl	8005510 <RCCEx_PLL2_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d16:	e00c      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3324      	adds	r3, #36	; 0x24
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fca8 	bl	8005674 <RCCEx_PLL3_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d38:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d46:	491f      	ldr	r1, [pc, #124]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8004d4c:	e001      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d036      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d68:	d01c      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d6e:	d816      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d74:	d003      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d7a:	d007      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004d7c:	e00f      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d8a:	e00c      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3324      	adds	r3, #36	; 0x24
 8004d90:	2101      	movs	r1, #1
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fc6e 	bl	8005674 <RCCEx_PLL3_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d9c:	e003      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	75fb      	strb	r3, [r7, #23]
      break;
 8004da2:	e000      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dba:	4902      	ldr	r1, [pc, #8]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	654b      	str	r3, [r1, #84]	; 0x54
 8004dc0:	e004      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d029      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de4:	d007      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004de6:	e00f      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de8:	4b69      	ldr	r3, [pc, #420]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4a68      	ldr	r2, [pc, #416]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004df4:	e00b      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	2102      	movs	r1, #2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fb87 	bl	8005510 <RCCEx_PLL2_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e14:	4b5e      	ldr	r3, [pc, #376]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e20:	495b      	ldr	r1, [pc, #364]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e26:	e001      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3324      	adds	r3, #36	; 0x24
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fc18 	bl	8005674 <RCCEx_PLL3_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d032      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e64:	d017      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6a:	d811      	bhi.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e70:	d013      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e76:	d80b      	bhi.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d010      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e80:	d106      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e82:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	4a42      	ldr	r2, [pc, #264]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004e8e:	e007      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
      break;
 8004e94:	e004      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004e96:	bf00      	nop
 8004e98:	e002      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ea6:	4b3a      	ldr	r3, [pc, #232]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb4:	4936      	ldr	r1, [pc, #216]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	654b      	str	r3, [r1, #84]	; 0x54
 8004eba:	e001      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
 8004ebe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ecc:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed8:	492d      	ldr	r1, [pc, #180]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eea:	4b29      	ldr	r3, [pc, #164]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef6:	4926      	ldr	r1, [pc, #152]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004f08:	4b21      	ldr	r3, [pc, #132]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	491e      	ldr	r1, [pc, #120]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f26:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f30:	6113      	str	r3, [r2, #16]
 8004f32:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f3c:	4914      	ldr	r1, [pc, #80]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	da08      	bge.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f56:	490e      	ldr	r1, [pc, #56]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d009      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f68:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	4906      	ldr	r1, [pc, #24]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004f7c:	7dbb      	ldrb	r3, [r7, #22]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	58024400 	.word	0x58024400

08004f94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004f98:	f7ff f894 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4904      	ldr	r1, [pc, #16]	; (8004fbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	08008f74 	.word	0x08008f74

08004fc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	; 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fc8:	4ba1      	ldr	r3, [pc, #644]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004fd2:	4b9f      	ldr	r3, [pc, #636]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	0b1b      	lsrs	r3, r3, #12
 8004fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fde:	4b9c      	ldr	r3, [pc, #624]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004fea:	4b99      	ldr	r3, [pc, #612]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	08db      	lsrs	r3, r3, #3
 8004ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8111 	beq.w	8005230 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b02      	cmp	r3, #2
 8005012:	f000 8083 	beq.w	800511c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b02      	cmp	r3, #2
 800501a:	f200 80a1 	bhi.w	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d056      	beq.n	80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800502a:	e099      	b.n	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800502c:	4b88      	ldr	r3, [pc, #544]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d02d      	beq.n	8005094 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005038:	4b85      	ldr	r3, [pc, #532]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	08db      	lsrs	r3, r3, #3
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	4a84      	ldr	r2, [pc, #528]	; (8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
 8005048:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	ee07 3a90 	vmov	s15, r3
 8005050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005062:	4b7b      	ldr	r3, [pc, #492]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005072:	ed97 6a03 	vldr	s12, [r7, #12]
 8005076:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800507a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005092:	e087      	b.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800525c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a6:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050d6:	e065      	b.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b59      	ldr	r3, [pc, #356]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800511a:	e043      	b.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800512a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512e:	4b48      	ldr	r3, [pc, #288]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005142:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800515e:	e021      	b.n	80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800516e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005172:	4b37      	ldr	r3, [pc, #220]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	ed97 6a03 	vldr	s12, [r7, #12]
 8005186:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800518a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80051a4:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	0a5b      	lsrs	r3, r3, #9
 80051aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051be:	edd7 6a07 	vldr	s13, [r7, #28]
 80051c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ca:	ee17 2a90 	vmov	r2, s15
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80051d2:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	0c1b      	lsrs	r3, r3, #16
 80051d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051dc:	ee07 3a90 	vmov	s15, r3
 80051e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f8:	ee17 2a90 	vmov	r2, s15
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005200:	4b13      	ldr	r3, [pc, #76]	; (8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	0e1b      	lsrs	r3, r3, #24
 8005206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521a:	edd7 6a07 	vldr	s13, [r7, #28]
 800521e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005226:	ee17 2a90 	vmov	r2, s15
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800522e:	e008      	b.n	8005242 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	609a      	str	r2, [r3, #8]
}
 8005242:	bf00      	nop
 8005244:	3724      	adds	r7, #36	; 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	58024400 	.word	0x58024400
 8005254:	03d09000 	.word	0x03d09000
 8005258:	46000000 	.word	0x46000000
 800525c:	4c742400 	.word	0x4c742400
 8005260:	4a742400 	.word	0x4a742400
 8005264:	4bb71b00 	.word	0x4bb71b00

08005268 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005270:	4ba1      	ldr	r3, [pc, #644]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800527a:	4b9f      	ldr	r3, [pc, #636]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	0d1b      	lsrs	r3, r3, #20
 8005280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005284:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005286:	4b9c      	ldr	r3, [pc, #624]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005292:	4b99      	ldr	r3, [pc, #612]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005296:	08db      	lsrs	r3, r3, #3
 8005298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8111 	beq.w	80054d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	f000 8083 	beq.w	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	f200 80a1 	bhi.w	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d056      	beq.n	8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052d2:	e099      	b.n	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052d4:	4b88      	ldr	r3, [pc, #544]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d02d      	beq.n	800533c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052e0:	4b85      	ldr	r3, [pc, #532]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	4a84      	ldr	r2, [pc, #528]	; (80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
 80052f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	ee07 3a90 	vmov	s15, r3
 80052f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b7b      	ldr	r3, [pc, #492]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a03 	vldr	s12, [r7, #12]
 800531e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800533a:	e087      	b.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b6a      	ldr	r3, [pc, #424]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005362:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800537e:	e065      	b.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b59      	ldr	r3, [pc, #356]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053c2:	e043      	b.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800550c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b48      	ldr	r3, [pc, #288]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005406:	e021      	b.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541a:	4b37      	ldr	r3, [pc, #220]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542a:	ed97 6a03 	vldr	s12, [r7, #12]
 800542e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800544a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800544c:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	0a5b      	lsrs	r3, r3, #9
 8005452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005466:	edd7 6a07 	vldr	s13, [r7, #28]
 800546a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800546e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005472:	ee17 2a90 	vmov	r2, s15
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800547a:	4b1f      	ldr	r3, [pc, #124]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	0c1b      	lsrs	r3, r3, #16
 8005480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005494:	edd7 6a07 	vldr	s13, [r7, #28]
 8005498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800549c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a0:	ee17 2a90 	vmov	r2, s15
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	0e1b      	lsrs	r3, r3, #24
 80054ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ce:	ee17 2a90 	vmov	r2, s15
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054d6:	e008      	b.n	80054ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	609a      	str	r2, [r3, #8]
}
 80054ea:	bf00      	nop
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	58024400 	.word	0x58024400
 80054fc:	03d09000 	.word	0x03d09000
 8005500:	46000000 	.word	0x46000000
 8005504:	4c742400 	.word	0x4c742400
 8005508:	4a742400 	.word	0x4a742400
 800550c:	4bb71b00 	.word	0x4bb71b00

08005510 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800551e:	4b53      	ldr	r3, [pc, #332]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b03      	cmp	r3, #3
 8005528:	d101      	bne.n	800552e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e099      	b.n	8005662 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800552e:	4b4f      	ldr	r3, [pc, #316]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a4e      	ldr	r2, [pc, #312]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005534:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553a:	f7fc fa17 	bl	800196c <HAL_GetTick>
 800553e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005540:	e008      	b.n	8005554 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005542:	f7fc fa13 	bl	800196c <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e086      	b.n	8005662 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005554:	4b45      	ldr	r3, [pc, #276]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005560:	4b42      	ldr	r3, [pc, #264]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	031b      	lsls	r3, r3, #12
 800556e:	493f      	ldr	r1, [pc, #252]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005570:	4313      	orrs	r3, r2
 8005572:	628b      	str	r3, [r1, #40]	; 0x28
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	3b01      	subs	r3, #1
 800557a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	3b01      	subs	r3, #1
 8005584:	025b      	lsls	r3, r3, #9
 8005586:	b29b      	uxth	r3, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	3b01      	subs	r3, #1
 8005590:	041b      	lsls	r3, r3, #16
 8005592:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	3b01      	subs	r3, #1
 800559e:	061b      	lsls	r3, r3, #24
 80055a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055a4:	4931      	ldr	r1, [pc, #196]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055aa:	4b30      	ldr	r3, [pc, #192]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	492d      	ldr	r1, [pc, #180]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055bc:	4b2b      	ldr	r3, [pc, #172]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	f023 0220 	bic.w	r2, r3, #32
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	4928      	ldr	r1, [pc, #160]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055ce:	4b27      	ldr	r3, [pc, #156]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	4a26      	ldr	r2, [pc, #152]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055d4:	f023 0310 	bic.w	r3, r3, #16
 80055d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055da:	4b24      	ldr	r3, [pc, #144]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055de:	4b24      	ldr	r3, [pc, #144]	; (8005670 <RCCEx_PLL2_Config+0x160>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	69d2      	ldr	r2, [r2, #28]
 80055e6:	00d2      	lsls	r2, r2, #3
 80055e8:	4920      	ldr	r1, [pc, #128]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055ee:	4b1f      	ldr	r3, [pc, #124]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	4a1e      	ldr	r2, [pc, #120]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 80055f4:	f043 0310 	orr.w	r3, r3, #16
 80055f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005600:	4b1a      	ldr	r3, [pc, #104]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	4a19      	ldr	r2, [pc, #100]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800560a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800560c:	e00f      	b.n	800562e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d106      	bne.n	8005622 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	4a14      	ldr	r2, [pc, #80]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 800561a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800561e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005620:	e005      	b.n	800562e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	4a11      	ldr	r2, [pc, #68]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800562c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800562e:	4b0f      	ldr	r3, [pc, #60]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a0e      	ldr	r2, [pc, #56]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563a:	f7fc f997 	bl	800196c <HAL_GetTick>
 800563e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005640:	e008      	b.n	8005654 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005642:	f7fc f993 	bl	800196c <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <RCCEx_PLL2_Config+0x15c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
 8005670:	ffff0007 	.word	0xffff0007

08005674 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005682:	4b53      	ldr	r3, [pc, #332]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b03      	cmp	r3, #3
 800568c:	d101      	bne.n	8005692 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e099      	b.n	80057c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005692:	4b4f      	ldr	r3, [pc, #316]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4e      	ldr	r2, [pc, #312]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800569c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800569e:	f7fc f965 	bl	800196c <HAL_GetTick>
 80056a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056a4:	e008      	b.n	80056b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056a6:	f7fc f961 	bl	800196c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e086      	b.n	80057c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056b8:	4b45      	ldr	r3, [pc, #276]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f0      	bne.n	80056a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056c4:	4b42      	ldr	r3, [pc, #264]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	051b      	lsls	r3, r3, #20
 80056d2:	493f      	ldr	r1, [pc, #252]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	628b      	str	r3, [r1, #40]	; 0x28
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	3b01      	subs	r3, #1
 80056de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	025b      	lsls	r3, r3, #9
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	3b01      	subs	r3, #1
 8005702:	061b      	lsls	r3, r3, #24
 8005704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005708:	4931      	ldr	r1, [pc, #196]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800570a:	4313      	orrs	r3, r2
 800570c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800570e:	4b30      	ldr	r3, [pc, #192]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	492d      	ldr	r1, [pc, #180]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800571c:	4313      	orrs	r3, r2
 800571e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005720:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	4928      	ldr	r1, [pc, #160]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005732:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800573c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800573e:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005742:	4b24      	ldr	r3, [pc, #144]	; (80057d4 <RCCEx_PLL3_Config+0x160>)
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	69d2      	ldr	r2, [r2, #28]
 800574a:	00d2      	lsls	r2, r2, #3
 800574c:	4920      	ldr	r1, [pc, #128]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005752:	4b1f      	ldr	r3, [pc, #124]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4a19      	ldr	r2, [pc, #100]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800576a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800576e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005770:	e00f      	b.n	8005792 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d106      	bne.n	8005786 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005778:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800577e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005782:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005784:	e005      	b.n	8005792 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005786:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	4a11      	ldr	r2, [pc, #68]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 800578c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005790:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0e      	ldr	r2, [pc, #56]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 8005798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579e:	f7fc f8e5 	bl	800196c <HAL_GetTick>
 80057a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057a4:	e008      	b.n	80057b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057a6:	f7fc f8e1 	bl	800196c <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e006      	b.n	80057c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <RCCEx_PLL3_Config+0x15c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	58024400 	.word	0x58024400
 80057d4:	ffff0007 	.word	0xffff0007

080057d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e0f1      	b.n	80059ce <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a78      	ldr	r2, [pc, #480]	; (80059d8 <HAL_SPI_Init+0x200>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <HAL_SPI_Init+0x42>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a77      	ldr	r2, [pc, #476]	; (80059dc <HAL_SPI_Init+0x204>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00a      	beq.n	800581a <HAL_SPI_Init+0x42>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a75      	ldr	r2, [pc, #468]	; (80059e0 <HAL_SPI_Init+0x208>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d005      	beq.n	800581a <HAL_SPI_Init+0x42>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	2b0f      	cmp	r3, #15
 8005814:	d901      	bls.n	800581a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e0d9      	b.n	80059ce <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 f880 	bl	8006920 <SPI_GetPacketSize>
 8005820:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a6c      	ldr	r2, [pc, #432]	; (80059d8 <HAL_SPI_Init+0x200>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00c      	beq.n	8005846 <HAL_SPI_Init+0x6e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a6a      	ldr	r2, [pc, #424]	; (80059dc <HAL_SPI_Init+0x204>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <HAL_SPI_Init+0x6e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a69      	ldr	r2, [pc, #420]	; (80059e0 <HAL_SPI_Init+0x208>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d002      	beq.n	8005846 <HAL_SPI_Init+0x6e>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b08      	cmp	r3, #8
 8005844:	d811      	bhi.n	800586a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800584a:	4a63      	ldr	r2, [pc, #396]	; (80059d8 <HAL_SPI_Init+0x200>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d009      	beq.n	8005864 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a61      	ldr	r2, [pc, #388]	; (80059dc <HAL_SPI_Init+0x204>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_SPI_Init+0x8c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a60      	ldr	r2, [pc, #384]	; (80059e0 <HAL_SPI_Init+0x208>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d104      	bne.n	800586e <HAL_SPI_Init+0x96>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b10      	cmp	r3, #16
 8005868:	d901      	bls.n	800586e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e0af      	b.n	80059ce <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fb fdee 	bl	8001464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80058aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058b4:	d119      	bne.n	80058ea <HAL_SPI_Init+0x112>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058be:	d103      	bne.n	80058c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d008      	beq.n	80058da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10c      	bne.n	80058ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058d8:	d107      	bne.n	80058ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69da      	ldr	r2, [r3, #28]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	431a      	orrs	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	ea42 0103 	orr.w	r1, r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594a:	ea42 0103 	orr.w	r1, r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d113      	bne.n	800598a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005974:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005988:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40013000 	.word	0x40013000
 80059dc:	40003800 	.word	0x40003800
 80059e0:	40003c00 	.word	0x40003c00

080059e4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3320      	adds	r3, #32
 80059fa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_SPI_Transmit+0x2a>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e1d7      	b.n	8005dbe <HAL_SPI_Transmit+0x3da>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a16:	f7fb ffa9 	bl	800196c <HAL_GetTick>
 8005a1a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d007      	beq.n	8005a38 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a34:	7efb      	ldrb	r3, [r7, #27]
 8005a36:	e1c2      	b.n	8005dbe <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_SPI_Transmit+0x60>
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005a50:	7efb      	ldrb	r3, [r7, #27]
 8005a52:	e1b4      	b.n	8005dbe <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2203      	movs	r2, #3
 8005a58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	88fa      	ldrh	r2, [r7, #6]
 8005a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005aa4:	d107      	bne.n	8005ab6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	4b96      	ldr	r3, [pc, #600]	; (8005d18 <HAL_SPI_Transmit+0x334>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	88f9      	ldrh	r1, [r7, #6]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae2:	d107      	bne.n	8005af4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2b0f      	cmp	r3, #15
 8005afa:	d947      	bls.n	8005b8c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005afc:	e03f      	b.n	8005b7e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d114      	bne.n	8005b36 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1c:	1d1a      	adds	r2, r3, #4
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005b34:	e023      	b.n	8005b7e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b36:	f7fb ff19 	bl	800196c <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d803      	bhi.n	8005b4e <HAL_SPI_Transmit+0x16a>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_Transmit+0x170>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d114      	bne.n	8005b7e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fe15 	bl	8006784 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e11f      	b.n	8005dbe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1b9      	bne.n	8005afe <HAL_SPI_Transmit+0x11a>
 8005b8a:	e0f2      	b.n	8005d72 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b07      	cmp	r3, #7
 8005b92:	f240 80e7 	bls.w	8005d64 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005b96:	e05d      	b.n	8005c54 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d132      	bne.n	8005c0c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d918      	bls.n	8005be4 <HAL_SPI_Transmit+0x200>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d014      	beq.n	8005be4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bca:	1d1a      	adds	r2, r3, #4
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b02      	subs	r3, #2
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005be2:	e037      	b.n	8005c54 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	881a      	ldrh	r2, [r3, #0]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf2:	1c9a      	adds	r2, r3, #2
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005c0a:	e023      	b.n	8005c54 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0c:	f7fb feae 	bl	800196c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d803      	bhi.n	8005c24 <HAL_SPI_Transmit+0x240>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	d102      	bne.n	8005c2a <HAL_SPI_Transmit+0x246>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d114      	bne.n	8005c54 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fdaa 	bl	8006784 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e0b4      	b.n	8005dbe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d19b      	bne.n	8005b98 <HAL_SPI_Transmit+0x1b4>
 8005c60:	e087      	b.n	8005d72 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d155      	bne.n	8005d1c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d918      	bls.n	8005cae <HAL_SPI_Transmit+0x2ca>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d914      	bls.n	8005cae <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c94:	1d1a      	adds	r2, r3, #4
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b04      	subs	r3, #4
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005cac:	e05a      	b.n	8005d64 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d917      	bls.n	8005cea <HAL_SPI_Transmit+0x306>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d013      	beq.n	8005cea <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	881a      	ldrh	r2, [r3, #0]
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	1c9a      	adds	r2, r3, #2
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b02      	subs	r3, #2
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005ce8:	e03c      	b.n	8005d64 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3320      	adds	r3, #32
 8005cf4:	7812      	ldrb	r2, [r2, #0]
 8005cf6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005d14:	e026      	b.n	8005d64 <HAL_SPI_Transmit+0x380>
 8005d16:	bf00      	nop
 8005d18:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d1c:	f7fb fe26 	bl	800196c <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d803      	bhi.n	8005d34 <HAL_SPI_Transmit+0x350>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d102      	bne.n	8005d3a <HAL_SPI_Transmit+0x356>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d114      	bne.n	8005d64 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fd22 	bl	8006784 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e02c      	b.n	8005dbe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f47f af78 	bne.w	8005c62 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2108      	movs	r1, #8
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fda1 	bl	80068c4 <SPI_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fcf3 	bl	8006784 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005dbc:	7efb      	ldrb	r3, [r7, #27]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop

08005dc8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3330      	adds	r3, #48	; 0x30
 8005de2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dec:	d112      	bne.n	8005e14 <HAL_SPI_Receive+0x4c>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10e      	bne.n	8005e14 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2204      	movs	r2, #4
 8005dfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005dfe:	88fa      	ldrh	r2, [r7, #6]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f9ce 	bl	80061ac <HAL_SPI_TransmitReceive>
 8005e10:	4603      	mov	r3, r0
 8005e12:	e1c7      	b.n	80061a4 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_SPI_Receive+0x5a>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e1c0      	b.n	80061a4 <HAL_SPI_Receive+0x3dc>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e2a:	f7fb fd9f 	bl	800196c <HAL_GetTick>
 8005e2e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d007      	beq.n	8005e4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e48:	7ffb      	ldrb	r3, [r7, #31]
 8005e4a:	e1ab      	b.n	80061a4 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_SPI_Receive+0x90>
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d107      	bne.n	8005e68 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e64:	7ffb      	ldrb	r3, [r7, #31]
 8005e66:	e19d      	b.n	80061a4 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	88fa      	ldrh	r2, [r7, #6]
 8005e8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005eb8:	d107      	bne.n	8005eca <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	4b94      	ldr	r3, [pc, #592]	; (8006124 <HAL_SPI_Receive+0x35c>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	88f9      	ldrh	r1, [r7, #6]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	430b      	orrs	r3, r1
 8005edc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef6:	d107      	bne.n	8005f08 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2b0f      	cmp	r3, #15
 8005f0e:	d948      	bls.n	8005fa2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005f10:	e040      	b.n	8005f94 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	f248 0308 	movw	r3, #32776	; 0x8008
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d014      	beq.n	8005f4c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f2c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f32:	1d1a      	adds	r2, r3, #4
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005f4a:	e023      	b.n	8005f94 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f4c:	f7fb fd0e 	bl	800196c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d803      	bhi.n	8005f64 <HAL_SPI_Receive+0x19c>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f62:	d102      	bne.n	8005f6a <HAL_SPI_Receive+0x1a2>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d114      	bne.n	8005f94 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 fc0a 	bl	8006784 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e107      	b.n	80061a4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1b8      	bne.n	8005f12 <HAL_SPI_Receive+0x14a>
 8005fa0:	e0ed      	b.n	800617e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b07      	cmp	r3, #7
 8005fa8:	f240 80e2 	bls.w	8006170 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005fac:	e05b      	b.n	8006066 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d030      	beq.n	800601e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d014      	beq.n	8005ff4 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005fd4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b02      	subs	r3, #2
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005ff2:	e038      	b.n	8006066 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	8812      	ldrh	r2, [r2, #0]
 8005ffc:	b292      	uxth	r2, r2
 8005ffe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006004:	1c9a      	adds	r2, r3, #2
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800601c:	e023      	b.n	8006066 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800601e:	f7fb fca5 	bl	800196c <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d803      	bhi.n	8006036 <HAL_SPI_Receive+0x26e>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d102      	bne.n	800603c <HAL_SPI_Receive+0x274>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d114      	bne.n	8006066 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fba1 	bl	8006784 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e09e      	b.n	80061a4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d19d      	bne.n	8005fae <HAL_SPI_Receive+0x1e6>
 8006072:	e084      	b.n	800617e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d052      	beq.n	8006128 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d014      	beq.n	80060ba <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006098:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800609a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a0:	1d1a      	adds	r2, r3, #4
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b04      	subs	r3, #4
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80060b8:	e05a      	b.n	8006170 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80060c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c8:	d914      	bls.n	80060f4 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	8812      	ldrh	r2, [r2, #0]
 80060d2:	b292      	uxth	r2, r2
 80060d4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b02      	subs	r3, #2
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80060f2:	e03d      	b.n	8006170 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006122:	e025      	b.n	8006170 <HAL_SPI_Receive+0x3a8>
 8006124:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006128:	f7fb fc20 	bl	800196c <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d803      	bhi.n	8006140 <HAL_SPI_Receive+0x378>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d102      	bne.n	8006146 <HAL_SPI_Receive+0x37e>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d114      	bne.n	8006170 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fb1c 	bl	8006784 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e019      	b.n	80061a4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	f47f af7b 	bne.w	8006074 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fb00 	bl	8006784 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 80061a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08e      	sub	sp, #56	; 0x38
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3320      	adds	r3, #32
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3330      	adds	r3, #48	; 0x30
 80061ce:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_SPI_TransmitReceive+0x32>
 80061da:	2302      	movs	r3, #2
 80061dc:	e2ce      	b.n	800677c <HAL_SPI_TransmitReceive+0x5d0>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061e6:	f7fb fbc1 	bl	800196c <HAL_GetTick>
 80061ea:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80061ec:	887b      	ldrh	r3, [r7, #2]
 80061ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80061f0:	887b      	ldrh	r3, [r7, #2]
 80061f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80061fa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006202:	7efb      	ldrb	r3, [r7, #27]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d014      	beq.n	8006232 <HAL_SPI_TransmitReceive+0x86>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800620e:	d106      	bne.n	800621e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006218:	7efb      	ldrb	r3, [r7, #27]
 800621a:	2b04      	cmp	r3, #4
 800621c:	d009      	beq.n	8006232 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800621e:	2302      	movs	r3, #2
 8006220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800622c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006230:	e2a4      	b.n	800677c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x98>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_SPI_TransmitReceive+0x98>
 800623e:	887b      	ldrh	r3, [r7, #2]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006252:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006256:	e291      	b.n	800677c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b04      	cmp	r3, #4
 8006262:	d003      	beq.n	800626c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2205      	movs	r2, #5
 8006268:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	887a      	ldrh	r2, [r7, #2]
 800627e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	887a      	ldrh	r2, [r7, #2]
 8006294:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	887a      	ldrh	r2, [r7, #2]
 800629c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	4b9f      	ldr	r3, [pc, #636]	; (8006530 <HAL_SPI_TransmitReceive+0x384>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	8879      	ldrh	r1, [r7, #2]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	430b      	orrs	r3, r1
 80062be:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d8:	d107      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b0f      	cmp	r3, #15
 80062f0:	d970      	bls.n	80063d4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80062f2:	e068      	b.n	80063c6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d11a      	bne.n	8006338 <HAL_SPI_TransmitReceive+0x18c>
 8006302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006304:	2b00      	cmp	r3, #0
 8006306:	d017      	beq.n	8006338 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006318:	1d1a      	adds	r2, r3, #4
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006336:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695a      	ldr	r2, [r3, #20]
 800633e:	f248 0308 	movw	r3, #32776	; 0x8008
 8006342:	4013      	ands	r3, r2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01a      	beq.n	800637e <HAL_SPI_TransmitReceive+0x1d2>
 8006348:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d017      	beq.n	800637e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006356:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006358:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800635e:	1d1a      	adds	r2, r3, #4
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800637c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800637e:	f7fb faf5 	bl	800196c <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800638a:	429a      	cmp	r2, r3
 800638c:	d803      	bhi.n	8006396 <HAL_SPI_TransmitReceive+0x1ea>
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d102      	bne.n	800639c <HAL_SPI_TransmitReceive+0x1f0>
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	2b00      	cmp	r3, #0
 800639a:	d114      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f9f1 	bl	8006784 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e1da      	b.n	800677c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80063c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d193      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x148>
 80063cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d190      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x148>
 80063d2:	e1ac      	b.n	800672e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b07      	cmp	r3, #7
 80063da:	f240 81a0 	bls.w	800671e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80063de:	e0a9      	b.n	8006534 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d139      	bne.n	8006462 <HAL_SPI_TransmitReceive+0x2b6>
 80063ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d036      	beq.n	8006462 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80063f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d91c      	bls.n	8006434 <HAL_SPI_TransmitReceive+0x288>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d018      	beq.n	8006434 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006412:	1d1a      	adds	r2, r3, #4
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b02      	subs	r3, #2
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006430:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006432:	e016      	b.n	8006462 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006438:	881a      	ldrh	r2, [r3, #0]
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006442:	1c9a      	adds	r2, r3, #2
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006460:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d03a      	beq.n	80064e6 <HAL_SPI_TransmitReceive+0x33a>
 8006470:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d037      	beq.n	80064e6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d018      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800648c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800648e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b02      	subs	r3, #2
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80064b4:	e017      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	8812      	ldrh	r2, [r2, #0]
 80064be:	b292      	uxth	r2, r2
 80064c0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c6:	1c9a      	adds	r2, r3, #2
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e6:	f7fb fa41 	bl	800196c <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d803      	bhi.n	80064fe <HAL_SPI_TransmitReceive+0x352>
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x358>
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	2b00      	cmp	r3, #0
 8006502:	d117      	bne.n	8006534 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f93d 	bl	8006784 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006518:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e126      	b.n	800677c <HAL_SPI_TransmitReceive+0x5d0>
 800652e:	bf00      	nop
 8006530:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006534:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006536:	2b00      	cmp	r3, #0
 8006538:	f47f af52 	bne.w	80063e0 <HAL_SPI_TransmitReceive+0x234>
 800653c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800653e:	2b00      	cmp	r3, #0
 8006540:	f47f af4e 	bne.w	80063e0 <HAL_SPI_TransmitReceive+0x234>
 8006544:	e0f3      	b.n	800672e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b02      	cmp	r3, #2
 8006552:	d15a      	bne.n	800660a <HAL_SPI_TransmitReceive+0x45e>
 8006554:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006556:	2b00      	cmp	r3, #0
 8006558:	d057      	beq.n	800660a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800655a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800655c:	2b03      	cmp	r3, #3
 800655e:	d91c      	bls.n	800659a <HAL_SPI_TransmitReceive+0x3ee>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006564:	2b40      	cmp	r3, #64	; 0x40
 8006566:	d918      	bls.n	800659a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006578:	1d1a      	adds	r2, r3, #4
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b04      	subs	r3, #4
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006596:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006598:	e037      	b.n	800660a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800659a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800659c:	2b01      	cmp	r3, #1
 800659e:	d91b      	bls.n	80065d8 <HAL_SPI_TransmitReceive+0x42c>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d017      	beq.n	80065d8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ac:	881a      	ldrh	r2, [r3, #0]
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b02      	subs	r3, #2
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80065d6:	e018      	b.n	800660a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3320      	adds	r3, #32
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006608:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d05e      	beq.n	80066d6 <HAL_SPI_TransmitReceive+0x52a>
 8006618:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d05b      	beq.n	80066d6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d018      	beq.n	800665e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006634:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006636:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b04      	subs	r3, #4
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800665a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800665c:	e03b      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d918      	bls.n	80066a0 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006672:	6a3a      	ldr	r2, [r7, #32]
 8006674:	8812      	ldrh	r2, [r2, #0]
 8006676:	b292      	uxth	r2, r2
 8006678:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b02      	subs	r3, #2
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800669c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800669e:	e01a      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ac:	7812      	ldrb	r2, [r2, #0]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d6:	f7fb f949 	bl	800196c <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d803      	bhi.n	80066ee <HAL_SPI_TransmitReceive+0x542>
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d102      	bne.n	80066f4 <HAL_SPI_TransmitReceive+0x548>
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d114      	bne.n	800671e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f845 	bl	8006784 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006708:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e02e      	b.n	800677c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800671e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006720:	2b00      	cmp	r3, #0
 8006722:	f47f af10 	bne.w	8006546 <HAL_SPI_TransmitReceive+0x39a>
 8006726:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	f47f af0c 	bne.w	8006546 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	2200      	movs	r2, #0
 8006736:	2108      	movs	r1, #8
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f8c3 	bl	80068c4 <SPI_WaitOnFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f815 	bl	8006784 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e001      	b.n	800677c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8006778:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800677c:	4618      	mov	r0, r3
 800677e:	3730      	adds	r7, #48	; 0x30
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0208 	orr.w	r2, r2, #8
 80067a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0210 	orr.w	r2, r2, #16
 80067b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6919      	ldr	r1, [r3, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <SPI_CloseTransfer+0x13c>)
 80067d0:	400b      	ands	r3, r1
 80067d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80067e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d014      	beq.n	800681a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00f      	beq.n	800681a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006800:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0220 	orr.w	r2, r2, #32
 8006818:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b03      	cmp	r3, #3
 8006824:	d014      	beq.n	8006850 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00f      	beq.n	8006850 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006836:	f043 0204 	orr.w	r2, r3, #4
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800684e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00f      	beq.n	800687a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006860:	f043 0201 	orr.w	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699a      	ldr	r2, [r3, #24]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006878:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00f      	beq.n	80068a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800688a:	f043 0208 	orr.w	r2, r3, #8
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	fffffc90 	.word	0xfffffc90

080068c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80068d4:	e010      	b.n	80068f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d6:	f7fb f849 	bl	800196c <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d803      	bhi.n	80068ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d102      	bne.n	80068f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e00f      	b.n	8006918 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4013      	ands	r3, r2
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	429a      	cmp	r2, r3
 8006906:	bf0c      	ite	eq
 8006908:	2301      	moveq	r3, #1
 800690a:	2300      	movne	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	429a      	cmp	r2, r3
 8006914:	d0df      	beq.n	80068d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	3307      	adds	r3, #7
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e049      	b.n	80069fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d106      	bne.n	8006982 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7fa fdd5 	bl	800152c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3304      	adds	r3, #4
 8006992:	4619      	mov	r1, r3
 8006994:	4610      	mov	r0, r2
 8006996:	f000 fbb1 	bl	80070fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e049      	b.n	8006aaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f841 	bl	8006ab2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f000 fb5a 	bl	80070fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <HAL_TIM_PWM_Start+0x24>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	e03c      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d109      	bne.n	8006b06 <HAL_TIM_PWM_Start+0x3e>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	bf14      	ite	ne
 8006afe:	2301      	movne	r3, #1
 8006b00:	2300      	moveq	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	e02f      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d109      	bne.n	8006b20 <HAL_TIM_PWM_Start+0x58>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	e022      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b0c      	cmp	r3, #12
 8006b24:	d109      	bne.n	8006b3a <HAL_TIM_PWM_Start+0x72>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	bf14      	ite	ne
 8006b32:	2301      	movne	r3, #1
 8006b34:	2300      	moveq	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	e015      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d109      	bne.n	8006b54 <HAL_TIM_PWM_Start+0x8c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	bf14      	ite	ne
 8006b4c:	2301      	movne	r3, #1
 8006b4e:	2300      	moveq	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	e008      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	bf14      	ite	ne
 8006b60:	2301      	movne	r3, #1
 8006b62:	2300      	moveq	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e0a1      	b.n	8006cb2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <HAL_TIM_PWM_Start+0xb6>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7c:	e023      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d104      	bne.n	8006b8e <HAL_TIM_PWM_Start+0xc6>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b8c:	e01b      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d104      	bne.n	8006b9e <HAL_TIM_PWM_Start+0xd6>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b9c:	e013      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b0c      	cmp	r3, #12
 8006ba2:	d104      	bne.n	8006bae <HAL_TIM_PWM_Start+0xe6>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bac:	e00b      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d104      	bne.n	8006bbe <HAL_TIM_PWM_Start+0xf6>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bbc:	e003      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fea2 	bl	8007918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a38      	ldr	r2, [pc, #224]	; (8006cbc <HAL_TIM_PWM_Start+0x1f4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x13e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a37      	ldr	r2, [pc, #220]	; (8006cc0 <HAL_TIM_PWM_Start+0x1f8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x13e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a35      	ldr	r2, [pc, #212]	; (8006cc4 <HAL_TIM_PWM_Start+0x1fc>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x13e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a34      	ldr	r2, [pc, #208]	; (8006cc8 <HAL_TIM_PWM_Start+0x200>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x13e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a32      	ldr	r2, [pc, #200]	; (8006ccc <HAL_TIM_PWM_Start+0x204>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d101      	bne.n	8006c0a <HAL_TIM_PWM_Start+0x142>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <HAL_TIM_PWM_Start+0x144>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a25      	ldr	r2, [pc, #148]	; (8006cbc <HAL_TIM_PWM_Start+0x1f4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d022      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x1a8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d01d      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x1a8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a25      	ldr	r2, [pc, #148]	; (8006cd0 <HAL_TIM_PWM_Start+0x208>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d018      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x1a8>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <HAL_TIM_PWM_Start+0x20c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d013      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x1a8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a22      	ldr	r2, [pc, #136]	; (8006cd8 <HAL_TIM_PWM_Start+0x210>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00e      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x1a8>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1a      	ldr	r2, [pc, #104]	; (8006cc0 <HAL_TIM_PWM_Start+0x1f8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x1a8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1e      	ldr	r2, [pc, #120]	; (8006cdc <HAL_TIM_PWM_Start+0x214>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x1a8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <HAL_TIM_PWM_Start+0x1fc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d115      	bne.n	8006c9c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <HAL_TIM_PWM_Start+0x218>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b06      	cmp	r3, #6
 8006c80:	d015      	beq.n	8006cae <HAL_TIM_PWM_Start+0x1e6>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c88:	d011      	beq.n	8006cae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0201 	orr.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9a:	e008      	b.n	8006cae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e000      	b.n	8006cb0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40010000 	.word	0x40010000
 8006cc0:	40010400 	.word	0x40010400
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	40014400 	.word	0x40014400
 8006ccc:	40014800 	.word	0x40014800
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	40000c00 	.word	0x40000c00
 8006cdc:	40001800 	.word	0x40001800
 8006ce0:	00010007 	.word	0x00010007

08006ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e0ff      	b.n	8006f02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b14      	cmp	r3, #20
 8006d0e:	f200 80f0 	bhi.w	8006ef2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d12:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d6d 	.word	0x08006d6d
 8006d1c:	08006ef3 	.word	0x08006ef3
 8006d20:	08006ef3 	.word	0x08006ef3
 8006d24:	08006ef3 	.word	0x08006ef3
 8006d28:	08006dad 	.word	0x08006dad
 8006d2c:	08006ef3 	.word	0x08006ef3
 8006d30:	08006ef3 	.word	0x08006ef3
 8006d34:	08006ef3 	.word	0x08006ef3
 8006d38:	08006def 	.word	0x08006def
 8006d3c:	08006ef3 	.word	0x08006ef3
 8006d40:	08006ef3 	.word	0x08006ef3
 8006d44:	08006ef3 	.word	0x08006ef3
 8006d48:	08006e2f 	.word	0x08006e2f
 8006d4c:	08006ef3 	.word	0x08006ef3
 8006d50:	08006ef3 	.word	0x08006ef3
 8006d54:	08006ef3 	.word	0x08006ef3
 8006d58:	08006e71 	.word	0x08006e71
 8006d5c:	08006ef3 	.word	0x08006ef3
 8006d60:	08006ef3 	.word	0x08006ef3
 8006d64:	08006ef3 	.word	0x08006ef3
 8006d68:	08006eb1 	.word	0x08006eb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fa5c 	bl	8007230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0208 	orr.w	r2, r2, #8
 8006d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	699a      	ldr	r2, [r3, #24]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0204 	bic.w	r2, r2, #4
 8006d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6999      	ldr	r1, [r3, #24]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	691a      	ldr	r2, [r3, #16]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	619a      	str	r2, [r3, #24]
      break;
 8006daa:	e0a5      	b.n	8006ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 facc 	bl	8007350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6999      	ldr	r1, [r3, #24]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	021a      	lsls	r2, r3, #8
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	619a      	str	r2, [r3, #24]
      break;
 8006dec:	e084      	b.n	8006ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68b9      	ldr	r1, [r7, #8]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fb35 	bl	8007464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69da      	ldr	r2, [r3, #28]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0208 	orr.w	r2, r2, #8
 8006e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0204 	bic.w	r2, r2, #4
 8006e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69d9      	ldr	r1, [r3, #28]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	61da      	str	r2, [r3, #28]
      break;
 8006e2c:	e064      	b.n	8006ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68b9      	ldr	r1, [r7, #8]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 fb9d 	bl	8007574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69da      	ldr	r2, [r3, #28]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69d9      	ldr	r1, [r3, #28]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	021a      	lsls	r2, r3, #8
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	61da      	str	r2, [r3, #28]
      break;
 8006e6e:	e043      	b.n	8006ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68b9      	ldr	r1, [r7, #8]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fbe6 	bl	8007648 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0208 	orr.w	r2, r2, #8
 8006e8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0204 	bic.w	r2, r2, #4
 8006e9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006eae:	e023      	b.n	8006ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 fc2a 	bl	8007710 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	021a      	lsls	r2, r3, #8
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ef0:	e002      	b.n	8006ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop

08006f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_TIM_ConfigClockSource+0x1c>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e0dc      	b.n	80070e2 <HAL_TIM_ConfigClockSource+0x1d6>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	4b6a      	ldr	r3, [pc, #424]	; (80070ec <HAL_TIM_ConfigClockSource+0x1e0>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a64      	ldr	r2, [pc, #400]	; (80070f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	f000 80a9 	beq.w	80070b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f64:	4a62      	ldr	r2, [pc, #392]	; (80070f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	f200 80ae 	bhi.w	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f6c:	4a61      	ldr	r2, [pc, #388]	; (80070f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	f000 80a1 	beq.w	80070b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f74:	4a5f      	ldr	r2, [pc, #380]	; (80070f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	f200 80a6 	bhi.w	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f7c:	4a5e      	ldr	r2, [pc, #376]	; (80070f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	f000 8099 	beq.w	80070b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f84:	4a5c      	ldr	r2, [pc, #368]	; (80070f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	f200 809e 	bhi.w	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006f90:	f000 8091 	beq.w	80070b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006f98:	f200 8096 	bhi.w	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa0:	f000 8089 	beq.w	80070b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa8:	f200 808e 	bhi.w	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb0:	d03e      	beq.n	8007030 <HAL_TIM_ConfigClockSource+0x124>
 8006fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb6:	f200 8087 	bhi.w	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fbe:	f000 8086 	beq.w	80070ce <HAL_TIM_ConfigClockSource+0x1c2>
 8006fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc6:	d87f      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fc8:	2b70      	cmp	r3, #112	; 0x70
 8006fca:	d01a      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0xf6>
 8006fcc:	2b70      	cmp	r3, #112	; 0x70
 8006fce:	d87b      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fd0:	2b60      	cmp	r3, #96	; 0x60
 8006fd2:	d050      	beq.n	8007076 <HAL_TIM_ConfigClockSource+0x16a>
 8006fd4:	2b60      	cmp	r3, #96	; 0x60
 8006fd6:	d877      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fd8:	2b50      	cmp	r3, #80	; 0x50
 8006fda:	d03c      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x14a>
 8006fdc:	2b50      	cmp	r3, #80	; 0x50
 8006fde:	d873      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	d058      	beq.n	8007096 <HAL_TIM_ConfigClockSource+0x18a>
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d86f      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fe8:	2b30      	cmp	r3, #48	; 0x30
 8006fea:	d064      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d86b      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	d060      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d867      	bhi.n	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d05c      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d05a      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007000:	e062      	b.n	80070c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	6899      	ldr	r1, [r3, #8]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f000 fc61 	bl	80078d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	609a      	str	r2, [r3, #8]
      break;
 800702e:	e04f      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	6899      	ldr	r1, [r3, #8]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f000 fc4a 	bl	80078d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007052:	609a      	str	r2, [r3, #8]
      break;
 8007054:	e03c      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6859      	ldr	r1, [r3, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	461a      	mov	r2, r3
 8007064:	f000 fbba 	bl	80077dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2150      	movs	r1, #80	; 0x50
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fc14 	bl	800789c <TIM_ITRx_SetConfig>
      break;
 8007074:	e02c      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6859      	ldr	r1, [r3, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	461a      	mov	r2, r3
 8007084:	f000 fbd9 	bl	800783a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2160      	movs	r1, #96	; 0x60
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fc04 	bl	800789c <TIM_ITRx_SetConfig>
      break;
 8007094:	e01c      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6818      	ldr	r0, [r3, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6859      	ldr	r1, [r3, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f000 fb9a 	bl	80077dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2140      	movs	r1, #64	; 0x40
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fbf4 	bl	800789c <TIM_ITRx_SetConfig>
      break;
 80070b4:	e00c      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4619      	mov	r1, r3
 80070c0:	4610      	mov	r0, r2
 80070c2:	f000 fbeb 	bl	800789c <TIM_ITRx_SetConfig>
      break;
 80070c6:	e003      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
      break;
 80070cc:	e000      	b.n	80070d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80070ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	ffceff88 	.word	0xffceff88
 80070f0:	00100040 	.word	0x00100040
 80070f4:	00100030 	.word	0x00100030
 80070f8:	00100020 	.word	0x00100020

080070fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a40      	ldr	r2, [pc, #256]	; (8007210 <TIM_Base_SetConfig+0x114>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d013      	beq.n	800713c <TIM_Base_SetConfig+0x40>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711a:	d00f      	beq.n	800713c <TIM_Base_SetConfig+0x40>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a3d      	ldr	r2, [pc, #244]	; (8007214 <TIM_Base_SetConfig+0x118>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00b      	beq.n	800713c <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a3c      	ldr	r2, [pc, #240]	; (8007218 <TIM_Base_SetConfig+0x11c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_Base_SetConfig+0x40>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a3b      	ldr	r2, [pc, #236]	; (800721c <TIM_Base_SetConfig+0x120>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_Base_SetConfig+0x40>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a3a      	ldr	r2, [pc, #232]	; (8007220 <TIM_Base_SetConfig+0x124>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d108      	bne.n	800714e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <TIM_Base_SetConfig+0x114>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d01f      	beq.n	8007196 <TIM_Base_SetConfig+0x9a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715c:	d01b      	beq.n	8007196 <TIM_Base_SetConfig+0x9a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2c      	ldr	r2, [pc, #176]	; (8007214 <TIM_Base_SetConfig+0x118>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d017      	beq.n	8007196 <TIM_Base_SetConfig+0x9a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a2b      	ldr	r2, [pc, #172]	; (8007218 <TIM_Base_SetConfig+0x11c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <TIM_Base_SetConfig+0x9a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2a      	ldr	r2, [pc, #168]	; (800721c <TIM_Base_SetConfig+0x120>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00f      	beq.n	8007196 <TIM_Base_SetConfig+0x9a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a29      	ldr	r2, [pc, #164]	; (8007220 <TIM_Base_SetConfig+0x124>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00b      	beq.n	8007196 <TIM_Base_SetConfig+0x9a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a28      	ldr	r2, [pc, #160]	; (8007224 <TIM_Base_SetConfig+0x128>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d007      	beq.n	8007196 <TIM_Base_SetConfig+0x9a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a27      	ldr	r2, [pc, #156]	; (8007228 <TIM_Base_SetConfig+0x12c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d003      	beq.n	8007196 <TIM_Base_SetConfig+0x9a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a26      	ldr	r2, [pc, #152]	; (800722c <TIM_Base_SetConfig+0x130>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d108      	bne.n	80071a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a10      	ldr	r2, [pc, #64]	; (8007210 <TIM_Base_SetConfig+0x114>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00f      	beq.n	80071f4 <TIM_Base_SetConfig+0xf8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a12      	ldr	r2, [pc, #72]	; (8007220 <TIM_Base_SetConfig+0x124>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00b      	beq.n	80071f4 <TIM_Base_SetConfig+0xf8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a11      	ldr	r2, [pc, #68]	; (8007224 <TIM_Base_SetConfig+0x128>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d007      	beq.n	80071f4 <TIM_Base_SetConfig+0xf8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a10      	ldr	r2, [pc, #64]	; (8007228 <TIM_Base_SetConfig+0x12c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d003      	beq.n	80071f4 <TIM_Base_SetConfig+0xf8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a0f      	ldr	r2, [pc, #60]	; (800722c <TIM_Base_SetConfig+0x130>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d103      	bne.n	80071fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	691a      	ldr	r2, [r3, #16]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	615a      	str	r2, [r3, #20]
}
 8007202:	bf00      	nop
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40010000 	.word	0x40010000
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40010400 	.word	0x40010400
 8007224:	40014000 	.word	0x40014000
 8007228:	40014400 	.word	0x40014400
 800722c:	40014800 	.word	0x40014800

08007230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f023 0201 	bic.w	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4b37      	ldr	r3, [pc, #220]	; (8007338 <TIM_OC1_SetConfig+0x108>)
 800725c:	4013      	ands	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f023 0302 	bic.w	r3, r3, #2
 8007278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a2d      	ldr	r2, [pc, #180]	; (800733c <TIM_OC1_SetConfig+0x10c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00f      	beq.n	80072ac <TIM_OC1_SetConfig+0x7c>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a2c      	ldr	r2, [pc, #176]	; (8007340 <TIM_OC1_SetConfig+0x110>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00b      	beq.n	80072ac <TIM_OC1_SetConfig+0x7c>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a2b      	ldr	r2, [pc, #172]	; (8007344 <TIM_OC1_SetConfig+0x114>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d007      	beq.n	80072ac <TIM_OC1_SetConfig+0x7c>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a2a      	ldr	r2, [pc, #168]	; (8007348 <TIM_OC1_SetConfig+0x118>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC1_SetConfig+0x7c>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a29      	ldr	r2, [pc, #164]	; (800734c <TIM_OC1_SetConfig+0x11c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d10c      	bne.n	80072c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f023 0308 	bic.w	r3, r3, #8
 80072b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f023 0304 	bic.w	r3, r3, #4
 80072c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a1c      	ldr	r2, [pc, #112]	; (800733c <TIM_OC1_SetConfig+0x10c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00f      	beq.n	80072ee <TIM_OC1_SetConfig+0xbe>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a1b      	ldr	r2, [pc, #108]	; (8007340 <TIM_OC1_SetConfig+0x110>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00b      	beq.n	80072ee <TIM_OC1_SetConfig+0xbe>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a1a      	ldr	r2, [pc, #104]	; (8007344 <TIM_OC1_SetConfig+0x114>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d007      	beq.n	80072ee <TIM_OC1_SetConfig+0xbe>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a19      	ldr	r2, [pc, #100]	; (8007348 <TIM_OC1_SetConfig+0x118>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_OC1_SetConfig+0xbe>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a18      	ldr	r2, [pc, #96]	; (800734c <TIM_OC1_SetConfig+0x11c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d111      	bne.n	8007312 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	621a      	str	r2, [r3, #32]
}
 800732c:	bf00      	nop
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	fffeff8f 	.word	0xfffeff8f
 800733c:	40010000 	.word	0x40010000
 8007340:	40010400 	.word	0x40010400
 8007344:	40014000 	.word	0x40014000
 8007348:	40014400 	.word	0x40014400
 800734c:	40014800 	.word	0x40014800

08007350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	f023 0210 	bic.w	r2, r3, #16
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	4b34      	ldr	r3, [pc, #208]	; (800744c <TIM_OC2_SetConfig+0xfc>)
 800737c:	4013      	ands	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0320 	bic.w	r3, r3, #32
 800739a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a29      	ldr	r2, [pc, #164]	; (8007450 <TIM_OC2_SetConfig+0x100>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_OC2_SetConfig+0x68>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a28      	ldr	r2, [pc, #160]	; (8007454 <TIM_OC2_SetConfig+0x104>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d10d      	bne.n	80073d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a1e      	ldr	r2, [pc, #120]	; (8007450 <TIM_OC2_SetConfig+0x100>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00f      	beq.n	80073fc <TIM_OC2_SetConfig+0xac>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a1d      	ldr	r2, [pc, #116]	; (8007454 <TIM_OC2_SetConfig+0x104>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00b      	beq.n	80073fc <TIM_OC2_SetConfig+0xac>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <TIM_OC2_SetConfig+0x108>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d007      	beq.n	80073fc <TIM_OC2_SetConfig+0xac>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a1b      	ldr	r2, [pc, #108]	; (800745c <TIM_OC2_SetConfig+0x10c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d003      	beq.n	80073fc <TIM_OC2_SetConfig+0xac>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a1a      	ldr	r2, [pc, #104]	; (8007460 <TIM_OC2_SetConfig+0x110>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d113      	bne.n	8007424 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800740a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	feff8fff 	.word	0xfeff8fff
 8007450:	40010000 	.word	0x40010000
 8007454:	40010400 	.word	0x40010400
 8007458:	40014000 	.word	0x40014000
 800745c:	40014400 	.word	0x40014400
 8007460:	40014800 	.word	0x40014800

08007464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4b33      	ldr	r3, [pc, #204]	; (800755c <TIM_OC3_SetConfig+0xf8>)
 8007490:	4013      	ands	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0303 	bic.w	r3, r3, #3
 800749a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a28      	ldr	r2, [pc, #160]	; (8007560 <TIM_OC3_SetConfig+0xfc>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_OC3_SetConfig+0x66>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a27      	ldr	r2, [pc, #156]	; (8007564 <TIM_OC3_SetConfig+0x100>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d10d      	bne.n	80074e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	021b      	lsls	r3, r3, #8
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a1d      	ldr	r2, [pc, #116]	; (8007560 <TIM_OC3_SetConfig+0xfc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00f      	beq.n	800750e <TIM_OC3_SetConfig+0xaa>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a1c      	ldr	r2, [pc, #112]	; (8007564 <TIM_OC3_SetConfig+0x100>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_OC3_SetConfig+0xaa>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a1b      	ldr	r2, [pc, #108]	; (8007568 <TIM_OC3_SetConfig+0x104>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_OC3_SetConfig+0xaa>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1a      	ldr	r2, [pc, #104]	; (800756c <TIM_OC3_SetConfig+0x108>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_OC3_SetConfig+0xaa>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a19      	ldr	r2, [pc, #100]	; (8007570 <TIM_OC3_SetConfig+0x10c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d113      	bne.n	8007536 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800751c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	621a      	str	r2, [r3, #32]
}
 8007550:	bf00      	nop
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	fffeff8f 	.word	0xfffeff8f
 8007560:	40010000 	.word	0x40010000
 8007564:	40010400 	.word	0x40010400
 8007568:	40014000 	.word	0x40014000
 800756c:	40014400 	.word	0x40014400
 8007570:	40014800 	.word	0x40014800

08007574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4b24      	ldr	r3, [pc, #144]	; (8007630 <TIM_OC4_SetConfig+0xbc>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	021b      	lsls	r3, r3, #8
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	031b      	lsls	r3, r3, #12
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a19      	ldr	r2, [pc, #100]	; (8007634 <TIM_OC4_SetConfig+0xc0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00f      	beq.n	80075f4 <TIM_OC4_SetConfig+0x80>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a18      	ldr	r2, [pc, #96]	; (8007638 <TIM_OC4_SetConfig+0xc4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00b      	beq.n	80075f4 <TIM_OC4_SetConfig+0x80>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a17      	ldr	r2, [pc, #92]	; (800763c <TIM_OC4_SetConfig+0xc8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d007      	beq.n	80075f4 <TIM_OC4_SetConfig+0x80>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a16      	ldr	r2, [pc, #88]	; (8007640 <TIM_OC4_SetConfig+0xcc>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d003      	beq.n	80075f4 <TIM_OC4_SetConfig+0x80>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a15      	ldr	r2, [pc, #84]	; (8007644 <TIM_OC4_SetConfig+0xd0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d109      	bne.n	8007608 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	019b      	lsls	r3, r3, #6
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	621a      	str	r2, [r3, #32]
}
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	feff8fff 	.word	0xfeff8fff
 8007634:	40010000 	.word	0x40010000
 8007638:	40010400 	.word	0x40010400
 800763c:	40014000 	.word	0x40014000
 8007640:	40014400 	.word	0x40014400
 8007644:	40014800 	.word	0x40014800

08007648 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4b21      	ldr	r3, [pc, #132]	; (80076f8 <TIM_OC5_SetConfig+0xb0>)
 8007674:	4013      	ands	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007688:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	041b      	lsls	r3, r3, #16
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a18      	ldr	r2, [pc, #96]	; (80076fc <TIM_OC5_SetConfig+0xb4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00f      	beq.n	80076be <TIM_OC5_SetConfig+0x76>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a17      	ldr	r2, [pc, #92]	; (8007700 <TIM_OC5_SetConfig+0xb8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00b      	beq.n	80076be <TIM_OC5_SetConfig+0x76>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a16      	ldr	r2, [pc, #88]	; (8007704 <TIM_OC5_SetConfig+0xbc>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d007      	beq.n	80076be <TIM_OC5_SetConfig+0x76>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a15      	ldr	r2, [pc, #84]	; (8007708 <TIM_OC5_SetConfig+0xc0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d003      	beq.n	80076be <TIM_OC5_SetConfig+0x76>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a14      	ldr	r2, [pc, #80]	; (800770c <TIM_OC5_SetConfig+0xc4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d109      	bne.n	80076d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	621a      	str	r2, [r3, #32]
}
 80076ec:	bf00      	nop
 80076ee:	371c      	adds	r7, #28
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	fffeff8f 	.word	0xfffeff8f
 80076fc:	40010000 	.word	0x40010000
 8007700:	40010400 	.word	0x40010400
 8007704:	40014000 	.word	0x40014000
 8007708:	40014400 	.word	0x40014400
 800770c:	40014800 	.word	0x40014800

08007710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4b22      	ldr	r3, [pc, #136]	; (80077c4 <TIM_OC6_SetConfig+0xb4>)
 800773c:	4013      	ands	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	051b      	lsls	r3, r3, #20
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	4313      	orrs	r3, r2
 800775e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a19      	ldr	r2, [pc, #100]	; (80077c8 <TIM_OC6_SetConfig+0xb8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00f      	beq.n	8007788 <TIM_OC6_SetConfig+0x78>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a18      	ldr	r2, [pc, #96]	; (80077cc <TIM_OC6_SetConfig+0xbc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00b      	beq.n	8007788 <TIM_OC6_SetConfig+0x78>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a17      	ldr	r2, [pc, #92]	; (80077d0 <TIM_OC6_SetConfig+0xc0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d007      	beq.n	8007788 <TIM_OC6_SetConfig+0x78>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a16      	ldr	r2, [pc, #88]	; (80077d4 <TIM_OC6_SetConfig+0xc4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC6_SetConfig+0x78>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a15      	ldr	r2, [pc, #84]	; (80077d8 <TIM_OC6_SetConfig+0xc8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d109      	bne.n	800779c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800778e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	621a      	str	r2, [r3, #32]
}
 80077b6:	bf00      	nop
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	feff8fff 	.word	0xfeff8fff
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40010400 	.word	0x40010400
 80077d0:	40014000 	.word	0x40014000
 80077d4:	40014400 	.word	0x40014400
 80077d8:	40014800 	.word	0x40014800

080077dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	f023 0201 	bic.w	r2, r3, #1
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f023 030a 	bic.w	r3, r3, #10
 8007818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	621a      	str	r2, [r3, #32]
}
 800782e:	bf00      	nop
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800783a:	b480      	push	{r7}
 800783c:	b087      	sub	sp, #28
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	f023 0210 	bic.w	r2, r3, #16
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	031b      	lsls	r3, r3, #12
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	4313      	orrs	r3, r2
 800786e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	621a      	str	r2, [r3, #32]
}
 800788e:	bf00      	nop
 8007890:	371c      	adds	r7, #28
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <TIM_ITRx_SetConfig+0x38>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	f043 0307 	orr.w	r3, r3, #7
 80078be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	609a      	str	r2, [r3, #8]
}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	ffcfff8f 	.word	0xffcfff8f

080078d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	021a      	lsls	r2, r3, #8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4313      	orrs	r3, r2
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	609a      	str	r2, [r3, #8]
}
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 031f 	and.w	r3, r3, #31
 800792a:	2201      	movs	r2, #1
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a1a      	ldr	r2, [r3, #32]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	43db      	mvns	r3, r3
 800793a:	401a      	ands	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a1a      	ldr	r2, [r3, #32]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	fa01 f303 	lsl.w	r3, r1, r3
 8007950:	431a      	orrs	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	621a      	str	r2, [r3, #32]
}
 8007956:	bf00      	nop
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
	...

08007964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007978:	2302      	movs	r3, #2
 800797a:	e06d      	b.n	8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a30      	ldr	r2, [pc, #192]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a2f      	ldr	r2, [pc, #188]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d108      	bne.n	80079c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a20      	ldr	r2, [pc, #128]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d022      	beq.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ee:	d01d      	beq.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1d      	ldr	r2, [pc, #116]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d018      	beq.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1c      	ldr	r2, [pc, #112]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00e      	beq.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a16      	ldr	r2, [pc, #88]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d10c      	bne.n	8007a46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40010400 	.word	0x40010400
 8007a6c:	40000400 	.word	0x40000400
 8007a70:	40000800 	.word	0x40000800
 8007a74:	40000c00 	.word	0x40000c00
 8007a78:	40001800 	.word	0x40001800
 8007a7c:	40014000 	.word	0x40014000

08007a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e087      	b.n	8007bac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	041b      	lsls	r3, r3, #16
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a27      	ldr	r2, [pc, #156]	; (8007bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a25      	ldr	r2, [pc, #148]	; (8007bbc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d106      	bne.n	8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d004      	beq.n	8007b4c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1d      	ldr	r2, [pc, #116]	; (8007bbc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d126      	bne.n	8007b9a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b56:	051b      	lsls	r3, r3, #20
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a0e      	ldr	r2, [pc, #56]	; (8007bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d004      	beq.n	8007b8c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a0d      	ldr	r2, [pc, #52]	; (8007bbc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d106      	bne.n	8007b9a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	40010000 	.word	0x40010000
 8007bbc:	40010400 	.word	0x40010400

08007bc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e042      	b.n	8007c58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d106      	bne.n	8007bea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7f9 fcff 	bl	80015e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2224      	movs	r2, #36	; 0x24
 8007bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0201 	bic.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f82c 	bl	8007c60 <UART_SetConfig>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e022      	b.n	8007c58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fe7e 	bl	800891c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0201 	orr.w	r2, r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 ff05 	bl	8008a60 <UART_CheckIdleState>
 8007c56:	4603      	mov	r3, r0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c60:	b5b0      	push	{r4, r5, r7, lr}
 8007c62:	b08e      	sub	sp, #56	; 0x38
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	4bbf      	ldr	r3, [pc, #764]	; (8007f8c <UART_SetConfig+0x32c>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c96:	430b      	orrs	r3, r1
 8007c98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4ab5      	ldr	r2, [pc, #724]	; (8007f90 <UART_SetConfig+0x330>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d004      	beq.n	8007cca <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	4bb0      	ldr	r3, [pc, #704]	; (8007f94 <UART_SetConfig+0x334>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	f023 010f 	bic.w	r1, r3, #15
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4aa7      	ldr	r2, [pc, #668]	; (8007f98 <UART_SetConfig+0x338>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d176      	bne.n	8007dec <UART_SetConfig+0x18c>
 8007cfe:	4ba7      	ldr	r3, [pc, #668]	; (8007f9c <UART_SetConfig+0x33c>)
 8007d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d06:	2b28      	cmp	r3, #40	; 0x28
 8007d08:	d86c      	bhi.n	8007de4 <UART_SetConfig+0x184>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <UART_SetConfig+0xb0>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007db5 	.word	0x08007db5
 8007d14:	08007de5 	.word	0x08007de5
 8007d18:	08007de5 	.word	0x08007de5
 8007d1c:	08007de5 	.word	0x08007de5
 8007d20:	08007de5 	.word	0x08007de5
 8007d24:	08007de5 	.word	0x08007de5
 8007d28:	08007de5 	.word	0x08007de5
 8007d2c:	08007de5 	.word	0x08007de5
 8007d30:	08007dbd 	.word	0x08007dbd
 8007d34:	08007de5 	.word	0x08007de5
 8007d38:	08007de5 	.word	0x08007de5
 8007d3c:	08007de5 	.word	0x08007de5
 8007d40:	08007de5 	.word	0x08007de5
 8007d44:	08007de5 	.word	0x08007de5
 8007d48:	08007de5 	.word	0x08007de5
 8007d4c:	08007de5 	.word	0x08007de5
 8007d50:	08007dc5 	.word	0x08007dc5
 8007d54:	08007de5 	.word	0x08007de5
 8007d58:	08007de5 	.word	0x08007de5
 8007d5c:	08007de5 	.word	0x08007de5
 8007d60:	08007de5 	.word	0x08007de5
 8007d64:	08007de5 	.word	0x08007de5
 8007d68:	08007de5 	.word	0x08007de5
 8007d6c:	08007de5 	.word	0x08007de5
 8007d70:	08007dcd 	.word	0x08007dcd
 8007d74:	08007de5 	.word	0x08007de5
 8007d78:	08007de5 	.word	0x08007de5
 8007d7c:	08007de5 	.word	0x08007de5
 8007d80:	08007de5 	.word	0x08007de5
 8007d84:	08007de5 	.word	0x08007de5
 8007d88:	08007de5 	.word	0x08007de5
 8007d8c:	08007de5 	.word	0x08007de5
 8007d90:	08007dd5 	.word	0x08007dd5
 8007d94:	08007de5 	.word	0x08007de5
 8007d98:	08007de5 	.word	0x08007de5
 8007d9c:	08007de5 	.word	0x08007de5
 8007da0:	08007de5 	.word	0x08007de5
 8007da4:	08007de5 	.word	0x08007de5
 8007da8:	08007de5 	.word	0x08007de5
 8007dac:	08007de5 	.word	0x08007de5
 8007db0:	08007ddd 	.word	0x08007ddd
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dba:	e326      	b.n	800840a <UART_SetConfig+0x7aa>
 8007dbc:	2304      	movs	r3, #4
 8007dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc2:	e322      	b.n	800840a <UART_SetConfig+0x7aa>
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dca:	e31e      	b.n	800840a <UART_SetConfig+0x7aa>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd2:	e31a      	b.n	800840a <UART_SetConfig+0x7aa>
 8007dd4:	2320      	movs	r3, #32
 8007dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dda:	e316      	b.n	800840a <UART_SetConfig+0x7aa>
 8007ddc:	2340      	movs	r3, #64	; 0x40
 8007dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de2:	e312      	b.n	800840a <UART_SetConfig+0x7aa>
 8007de4:	2380      	movs	r3, #128	; 0x80
 8007de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dea:	e30e      	b.n	800840a <UART_SetConfig+0x7aa>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a6b      	ldr	r2, [pc, #428]	; (8007fa0 <UART_SetConfig+0x340>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d130      	bne.n	8007e58 <UART_SetConfig+0x1f8>
 8007df6:	4b69      	ldr	r3, [pc, #420]	; (8007f9c <UART_SetConfig+0x33c>)
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	2b05      	cmp	r3, #5
 8007e00:	d826      	bhi.n	8007e50 <UART_SetConfig+0x1f0>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0x1a8>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e21 	.word	0x08007e21
 8007e0c:	08007e29 	.word	0x08007e29
 8007e10:	08007e31 	.word	0x08007e31
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e41 	.word	0x08007e41
 8007e1c:	08007e49 	.word	0x08007e49
 8007e20:	2300      	movs	r3, #0
 8007e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e26:	e2f0      	b.n	800840a <UART_SetConfig+0x7aa>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e2e:	e2ec      	b.n	800840a <UART_SetConfig+0x7aa>
 8007e30:	2308      	movs	r3, #8
 8007e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e36:	e2e8      	b.n	800840a <UART_SetConfig+0x7aa>
 8007e38:	2310      	movs	r3, #16
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e2e4      	b.n	800840a <UART_SetConfig+0x7aa>
 8007e40:	2320      	movs	r3, #32
 8007e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e46:	e2e0      	b.n	800840a <UART_SetConfig+0x7aa>
 8007e48:	2340      	movs	r3, #64	; 0x40
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e2dc      	b.n	800840a <UART_SetConfig+0x7aa>
 8007e50:	2380      	movs	r3, #128	; 0x80
 8007e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e56:	e2d8      	b.n	800840a <UART_SetConfig+0x7aa>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a51      	ldr	r2, [pc, #324]	; (8007fa4 <UART_SetConfig+0x344>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d130      	bne.n	8007ec4 <UART_SetConfig+0x264>
 8007e62:	4b4e      	ldr	r3, [pc, #312]	; (8007f9c <UART_SetConfig+0x33c>)
 8007e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d826      	bhi.n	8007ebc <UART_SetConfig+0x25c>
 8007e6e:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <UART_SetConfig+0x214>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007e8d 	.word	0x08007e8d
 8007e78:	08007e95 	.word	0x08007e95
 8007e7c:	08007e9d 	.word	0x08007e9d
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ead 	.word	0x08007ead
 8007e88:	08007eb5 	.word	0x08007eb5
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e92:	e2ba      	b.n	800840a <UART_SetConfig+0x7aa>
 8007e94:	2304      	movs	r3, #4
 8007e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e9a:	e2b6      	b.n	800840a <UART_SetConfig+0x7aa>
 8007e9c:	2308      	movs	r3, #8
 8007e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea2:	e2b2      	b.n	800840a <UART_SetConfig+0x7aa>
 8007ea4:	2310      	movs	r3, #16
 8007ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eaa:	e2ae      	b.n	800840a <UART_SetConfig+0x7aa>
 8007eac:	2320      	movs	r3, #32
 8007eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb2:	e2aa      	b.n	800840a <UART_SetConfig+0x7aa>
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eba:	e2a6      	b.n	800840a <UART_SetConfig+0x7aa>
 8007ebc:	2380      	movs	r3, #128	; 0x80
 8007ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec2:	e2a2      	b.n	800840a <UART_SetConfig+0x7aa>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a37      	ldr	r2, [pc, #220]	; (8007fa8 <UART_SetConfig+0x348>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d130      	bne.n	8007f30 <UART_SetConfig+0x2d0>
 8007ece:	4b33      	ldr	r3, [pc, #204]	; (8007f9c <UART_SetConfig+0x33c>)
 8007ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	2b05      	cmp	r3, #5
 8007ed8:	d826      	bhi.n	8007f28 <UART_SetConfig+0x2c8>
 8007eda:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <UART_SetConfig+0x280>)
 8007edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee0:	08007ef9 	.word	0x08007ef9
 8007ee4:	08007f01 	.word	0x08007f01
 8007ee8:	08007f09 	.word	0x08007f09
 8007eec:	08007f11 	.word	0x08007f11
 8007ef0:	08007f19 	.word	0x08007f19
 8007ef4:	08007f21 	.word	0x08007f21
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007efe:	e284      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f00:	2304      	movs	r3, #4
 8007f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f06:	e280      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f08:	2308      	movs	r3, #8
 8007f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f0e:	e27c      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f10:	2310      	movs	r3, #16
 8007f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f16:	e278      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f18:	2320      	movs	r3, #32
 8007f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f1e:	e274      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f20:	2340      	movs	r3, #64	; 0x40
 8007f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f26:	e270      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f28:	2380      	movs	r3, #128	; 0x80
 8007f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f2e:	e26c      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a1d      	ldr	r2, [pc, #116]	; (8007fac <UART_SetConfig+0x34c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d142      	bne.n	8007fc0 <UART_SetConfig+0x360>
 8007f3a:	4b18      	ldr	r3, [pc, #96]	; (8007f9c <UART_SetConfig+0x33c>)
 8007f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	d838      	bhi.n	8007fb8 <UART_SetConfig+0x358>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x2ec>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f65 	.word	0x08007f65
 8007f50:	08007f6d 	.word	0x08007f6d
 8007f54:	08007f75 	.word	0x08007f75
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007fb1 	.word	0x08007fb1
 8007f64:	2300      	movs	r3, #0
 8007f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f6a:	e24e      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f72:	e24a      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f74:	2308      	movs	r3, #8
 8007f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f7a:	e246      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f82:	e242      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f84:	2320      	movs	r3, #32
 8007f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f8a:	e23e      	b.n	800840a <UART_SetConfig+0x7aa>
 8007f8c:	cfff69f3 	.word	0xcfff69f3
 8007f90:	58000c00 	.word	0x58000c00
 8007f94:	11fff4ff 	.word	0x11fff4ff
 8007f98:	40011000 	.word	0x40011000
 8007f9c:	58024400 	.word	0x58024400
 8007fa0:	40004400 	.word	0x40004400
 8007fa4:	40004800 	.word	0x40004800
 8007fa8:	40004c00 	.word	0x40004c00
 8007fac:	40005000 	.word	0x40005000
 8007fb0:	2340      	movs	r3, #64	; 0x40
 8007fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fb6:	e228      	b.n	800840a <UART_SetConfig+0x7aa>
 8007fb8:	2380      	movs	r3, #128	; 0x80
 8007fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fbe:	e224      	b.n	800840a <UART_SetConfig+0x7aa>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4ab1      	ldr	r2, [pc, #708]	; (800828c <UART_SetConfig+0x62c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d176      	bne.n	80080b8 <UART_SetConfig+0x458>
 8007fca:	4bb1      	ldr	r3, [pc, #708]	; (8008290 <UART_SetConfig+0x630>)
 8007fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fd2:	2b28      	cmp	r3, #40	; 0x28
 8007fd4:	d86c      	bhi.n	80080b0 <UART_SetConfig+0x450>
 8007fd6:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <UART_SetConfig+0x37c>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	08008081 	.word	0x08008081
 8007fe0:	080080b1 	.word	0x080080b1
 8007fe4:	080080b1 	.word	0x080080b1
 8007fe8:	080080b1 	.word	0x080080b1
 8007fec:	080080b1 	.word	0x080080b1
 8007ff0:	080080b1 	.word	0x080080b1
 8007ff4:	080080b1 	.word	0x080080b1
 8007ff8:	080080b1 	.word	0x080080b1
 8007ffc:	08008089 	.word	0x08008089
 8008000:	080080b1 	.word	0x080080b1
 8008004:	080080b1 	.word	0x080080b1
 8008008:	080080b1 	.word	0x080080b1
 800800c:	080080b1 	.word	0x080080b1
 8008010:	080080b1 	.word	0x080080b1
 8008014:	080080b1 	.word	0x080080b1
 8008018:	080080b1 	.word	0x080080b1
 800801c:	08008091 	.word	0x08008091
 8008020:	080080b1 	.word	0x080080b1
 8008024:	080080b1 	.word	0x080080b1
 8008028:	080080b1 	.word	0x080080b1
 800802c:	080080b1 	.word	0x080080b1
 8008030:	080080b1 	.word	0x080080b1
 8008034:	080080b1 	.word	0x080080b1
 8008038:	080080b1 	.word	0x080080b1
 800803c:	08008099 	.word	0x08008099
 8008040:	080080b1 	.word	0x080080b1
 8008044:	080080b1 	.word	0x080080b1
 8008048:	080080b1 	.word	0x080080b1
 800804c:	080080b1 	.word	0x080080b1
 8008050:	080080b1 	.word	0x080080b1
 8008054:	080080b1 	.word	0x080080b1
 8008058:	080080b1 	.word	0x080080b1
 800805c:	080080a1 	.word	0x080080a1
 8008060:	080080b1 	.word	0x080080b1
 8008064:	080080b1 	.word	0x080080b1
 8008068:	080080b1 	.word	0x080080b1
 800806c:	080080b1 	.word	0x080080b1
 8008070:	080080b1 	.word	0x080080b1
 8008074:	080080b1 	.word	0x080080b1
 8008078:	080080b1 	.word	0x080080b1
 800807c:	080080a9 	.word	0x080080a9
 8008080:	2301      	movs	r3, #1
 8008082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008086:	e1c0      	b.n	800840a <UART_SetConfig+0x7aa>
 8008088:	2304      	movs	r3, #4
 800808a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800808e:	e1bc      	b.n	800840a <UART_SetConfig+0x7aa>
 8008090:	2308      	movs	r3, #8
 8008092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008096:	e1b8      	b.n	800840a <UART_SetConfig+0x7aa>
 8008098:	2310      	movs	r3, #16
 800809a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809e:	e1b4      	b.n	800840a <UART_SetConfig+0x7aa>
 80080a0:	2320      	movs	r3, #32
 80080a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a6:	e1b0      	b.n	800840a <UART_SetConfig+0x7aa>
 80080a8:	2340      	movs	r3, #64	; 0x40
 80080aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ae:	e1ac      	b.n	800840a <UART_SetConfig+0x7aa>
 80080b0:	2380      	movs	r3, #128	; 0x80
 80080b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b6:	e1a8      	b.n	800840a <UART_SetConfig+0x7aa>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a75      	ldr	r2, [pc, #468]	; (8008294 <UART_SetConfig+0x634>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d130      	bne.n	8008124 <UART_SetConfig+0x4c4>
 80080c2:	4b73      	ldr	r3, [pc, #460]	; (8008290 <UART_SetConfig+0x630>)
 80080c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	2b05      	cmp	r3, #5
 80080cc:	d826      	bhi.n	800811c <UART_SetConfig+0x4bc>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <UART_SetConfig+0x474>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080ed 	.word	0x080080ed
 80080d8:	080080f5 	.word	0x080080f5
 80080dc:	080080fd 	.word	0x080080fd
 80080e0:	08008105 	.word	0x08008105
 80080e4:	0800810d 	.word	0x0800810d
 80080e8:	08008115 	.word	0x08008115
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080f2:	e18a      	b.n	800840a <UART_SetConfig+0x7aa>
 80080f4:	2304      	movs	r3, #4
 80080f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fa:	e186      	b.n	800840a <UART_SetConfig+0x7aa>
 80080fc:	2308      	movs	r3, #8
 80080fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008102:	e182      	b.n	800840a <UART_SetConfig+0x7aa>
 8008104:	2310      	movs	r3, #16
 8008106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810a:	e17e      	b.n	800840a <UART_SetConfig+0x7aa>
 800810c:	2320      	movs	r3, #32
 800810e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008112:	e17a      	b.n	800840a <UART_SetConfig+0x7aa>
 8008114:	2340      	movs	r3, #64	; 0x40
 8008116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811a:	e176      	b.n	800840a <UART_SetConfig+0x7aa>
 800811c:	2380      	movs	r3, #128	; 0x80
 800811e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008122:	e172      	b.n	800840a <UART_SetConfig+0x7aa>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a5b      	ldr	r2, [pc, #364]	; (8008298 <UART_SetConfig+0x638>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d130      	bne.n	8008190 <UART_SetConfig+0x530>
 800812e:	4b58      	ldr	r3, [pc, #352]	; (8008290 <UART_SetConfig+0x630>)
 8008130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	2b05      	cmp	r3, #5
 8008138:	d826      	bhi.n	8008188 <UART_SetConfig+0x528>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <UART_SetConfig+0x4e0>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008159 	.word	0x08008159
 8008144:	08008161 	.word	0x08008161
 8008148:	08008169 	.word	0x08008169
 800814c:	08008171 	.word	0x08008171
 8008150:	08008179 	.word	0x08008179
 8008154:	08008181 	.word	0x08008181
 8008158:	2300      	movs	r3, #0
 800815a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800815e:	e154      	b.n	800840a <UART_SetConfig+0x7aa>
 8008160:	2304      	movs	r3, #4
 8008162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008166:	e150      	b.n	800840a <UART_SetConfig+0x7aa>
 8008168:	2308      	movs	r3, #8
 800816a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816e:	e14c      	b.n	800840a <UART_SetConfig+0x7aa>
 8008170:	2310      	movs	r3, #16
 8008172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008176:	e148      	b.n	800840a <UART_SetConfig+0x7aa>
 8008178:	2320      	movs	r3, #32
 800817a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800817e:	e144      	b.n	800840a <UART_SetConfig+0x7aa>
 8008180:	2340      	movs	r3, #64	; 0x40
 8008182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008186:	e140      	b.n	800840a <UART_SetConfig+0x7aa>
 8008188:	2380      	movs	r3, #128	; 0x80
 800818a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800818e:	e13c      	b.n	800840a <UART_SetConfig+0x7aa>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a41      	ldr	r2, [pc, #260]	; (800829c <UART_SetConfig+0x63c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	f040 8082 	bne.w	80082a0 <UART_SetConfig+0x640>
 800819c:	4b3c      	ldr	r3, [pc, #240]	; (8008290 <UART_SetConfig+0x630>)
 800819e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081a4:	2b28      	cmp	r3, #40	; 0x28
 80081a6:	d86d      	bhi.n	8008284 <UART_SetConfig+0x624>
 80081a8:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <UART_SetConfig+0x550>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	08008255 	.word	0x08008255
 80081b4:	08008285 	.word	0x08008285
 80081b8:	08008285 	.word	0x08008285
 80081bc:	08008285 	.word	0x08008285
 80081c0:	08008285 	.word	0x08008285
 80081c4:	08008285 	.word	0x08008285
 80081c8:	08008285 	.word	0x08008285
 80081cc:	08008285 	.word	0x08008285
 80081d0:	0800825d 	.word	0x0800825d
 80081d4:	08008285 	.word	0x08008285
 80081d8:	08008285 	.word	0x08008285
 80081dc:	08008285 	.word	0x08008285
 80081e0:	08008285 	.word	0x08008285
 80081e4:	08008285 	.word	0x08008285
 80081e8:	08008285 	.word	0x08008285
 80081ec:	08008285 	.word	0x08008285
 80081f0:	08008265 	.word	0x08008265
 80081f4:	08008285 	.word	0x08008285
 80081f8:	08008285 	.word	0x08008285
 80081fc:	08008285 	.word	0x08008285
 8008200:	08008285 	.word	0x08008285
 8008204:	08008285 	.word	0x08008285
 8008208:	08008285 	.word	0x08008285
 800820c:	08008285 	.word	0x08008285
 8008210:	0800826d 	.word	0x0800826d
 8008214:	08008285 	.word	0x08008285
 8008218:	08008285 	.word	0x08008285
 800821c:	08008285 	.word	0x08008285
 8008220:	08008285 	.word	0x08008285
 8008224:	08008285 	.word	0x08008285
 8008228:	08008285 	.word	0x08008285
 800822c:	08008285 	.word	0x08008285
 8008230:	08008275 	.word	0x08008275
 8008234:	08008285 	.word	0x08008285
 8008238:	08008285 	.word	0x08008285
 800823c:	08008285 	.word	0x08008285
 8008240:	08008285 	.word	0x08008285
 8008244:	08008285 	.word	0x08008285
 8008248:	08008285 	.word	0x08008285
 800824c:	08008285 	.word	0x08008285
 8008250:	0800827d 	.word	0x0800827d
 8008254:	2301      	movs	r3, #1
 8008256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800825a:	e0d6      	b.n	800840a <UART_SetConfig+0x7aa>
 800825c:	2304      	movs	r3, #4
 800825e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008262:	e0d2      	b.n	800840a <UART_SetConfig+0x7aa>
 8008264:	2308      	movs	r3, #8
 8008266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800826a:	e0ce      	b.n	800840a <UART_SetConfig+0x7aa>
 800826c:	2310      	movs	r3, #16
 800826e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008272:	e0ca      	b.n	800840a <UART_SetConfig+0x7aa>
 8008274:	2320      	movs	r3, #32
 8008276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800827a:	e0c6      	b.n	800840a <UART_SetConfig+0x7aa>
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008282:	e0c2      	b.n	800840a <UART_SetConfig+0x7aa>
 8008284:	2380      	movs	r3, #128	; 0x80
 8008286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800828a:	e0be      	b.n	800840a <UART_SetConfig+0x7aa>
 800828c:	40011400 	.word	0x40011400
 8008290:	58024400 	.word	0x58024400
 8008294:	40007800 	.word	0x40007800
 8008298:	40007c00 	.word	0x40007c00
 800829c:	40011800 	.word	0x40011800
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4aad      	ldr	r2, [pc, #692]	; (800855c <UART_SetConfig+0x8fc>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d176      	bne.n	8008398 <UART_SetConfig+0x738>
 80082aa:	4bad      	ldr	r3, [pc, #692]	; (8008560 <UART_SetConfig+0x900>)
 80082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082b2:	2b28      	cmp	r3, #40	; 0x28
 80082b4:	d86c      	bhi.n	8008390 <UART_SetConfig+0x730>
 80082b6:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <UART_SetConfig+0x65c>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	08008361 	.word	0x08008361
 80082c0:	08008391 	.word	0x08008391
 80082c4:	08008391 	.word	0x08008391
 80082c8:	08008391 	.word	0x08008391
 80082cc:	08008391 	.word	0x08008391
 80082d0:	08008391 	.word	0x08008391
 80082d4:	08008391 	.word	0x08008391
 80082d8:	08008391 	.word	0x08008391
 80082dc:	08008369 	.word	0x08008369
 80082e0:	08008391 	.word	0x08008391
 80082e4:	08008391 	.word	0x08008391
 80082e8:	08008391 	.word	0x08008391
 80082ec:	08008391 	.word	0x08008391
 80082f0:	08008391 	.word	0x08008391
 80082f4:	08008391 	.word	0x08008391
 80082f8:	08008391 	.word	0x08008391
 80082fc:	08008371 	.word	0x08008371
 8008300:	08008391 	.word	0x08008391
 8008304:	08008391 	.word	0x08008391
 8008308:	08008391 	.word	0x08008391
 800830c:	08008391 	.word	0x08008391
 8008310:	08008391 	.word	0x08008391
 8008314:	08008391 	.word	0x08008391
 8008318:	08008391 	.word	0x08008391
 800831c:	08008379 	.word	0x08008379
 8008320:	08008391 	.word	0x08008391
 8008324:	08008391 	.word	0x08008391
 8008328:	08008391 	.word	0x08008391
 800832c:	08008391 	.word	0x08008391
 8008330:	08008391 	.word	0x08008391
 8008334:	08008391 	.word	0x08008391
 8008338:	08008391 	.word	0x08008391
 800833c:	08008381 	.word	0x08008381
 8008340:	08008391 	.word	0x08008391
 8008344:	08008391 	.word	0x08008391
 8008348:	08008391 	.word	0x08008391
 800834c:	08008391 	.word	0x08008391
 8008350:	08008391 	.word	0x08008391
 8008354:	08008391 	.word	0x08008391
 8008358:	08008391 	.word	0x08008391
 800835c:	08008389 	.word	0x08008389
 8008360:	2301      	movs	r3, #1
 8008362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008366:	e050      	b.n	800840a <UART_SetConfig+0x7aa>
 8008368:	2304      	movs	r3, #4
 800836a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836e:	e04c      	b.n	800840a <UART_SetConfig+0x7aa>
 8008370:	2308      	movs	r3, #8
 8008372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008376:	e048      	b.n	800840a <UART_SetConfig+0x7aa>
 8008378:	2310      	movs	r3, #16
 800837a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800837e:	e044      	b.n	800840a <UART_SetConfig+0x7aa>
 8008380:	2320      	movs	r3, #32
 8008382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008386:	e040      	b.n	800840a <UART_SetConfig+0x7aa>
 8008388:	2340      	movs	r3, #64	; 0x40
 800838a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800838e:	e03c      	b.n	800840a <UART_SetConfig+0x7aa>
 8008390:	2380      	movs	r3, #128	; 0x80
 8008392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008396:	e038      	b.n	800840a <UART_SetConfig+0x7aa>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a71      	ldr	r2, [pc, #452]	; (8008564 <UART_SetConfig+0x904>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d130      	bne.n	8008404 <UART_SetConfig+0x7a4>
 80083a2:	4b6f      	ldr	r3, [pc, #444]	; (8008560 <UART_SetConfig+0x900>)
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	d826      	bhi.n	80083fc <UART_SetConfig+0x79c>
 80083ae:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <UART_SetConfig+0x754>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	080083cd 	.word	0x080083cd
 80083b8:	080083d5 	.word	0x080083d5
 80083bc:	080083dd 	.word	0x080083dd
 80083c0:	080083e5 	.word	0x080083e5
 80083c4:	080083ed 	.word	0x080083ed
 80083c8:	080083f5 	.word	0x080083f5
 80083cc:	2302      	movs	r3, #2
 80083ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083d2:	e01a      	b.n	800840a <UART_SetConfig+0x7aa>
 80083d4:	2304      	movs	r3, #4
 80083d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083da:	e016      	b.n	800840a <UART_SetConfig+0x7aa>
 80083dc:	2308      	movs	r3, #8
 80083de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083e2:	e012      	b.n	800840a <UART_SetConfig+0x7aa>
 80083e4:	2310      	movs	r3, #16
 80083e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ea:	e00e      	b.n	800840a <UART_SetConfig+0x7aa>
 80083ec:	2320      	movs	r3, #32
 80083ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083f2:	e00a      	b.n	800840a <UART_SetConfig+0x7aa>
 80083f4:	2340      	movs	r3, #64	; 0x40
 80083f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083fa:	e006      	b.n	800840a <UART_SetConfig+0x7aa>
 80083fc:	2380      	movs	r3, #128	; 0x80
 80083fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008402:	e002      	b.n	800840a <UART_SetConfig+0x7aa>
 8008404:	2380      	movs	r3, #128	; 0x80
 8008406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a55      	ldr	r2, [pc, #340]	; (8008564 <UART_SetConfig+0x904>)
 8008410:	4293      	cmp	r3, r2
 8008412:	f040 80f0 	bne.w	80085f6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800841a:	2b20      	cmp	r3, #32
 800841c:	dc46      	bgt.n	80084ac <UART_SetConfig+0x84c>
 800841e:	2b02      	cmp	r3, #2
 8008420:	db75      	blt.n	800850e <UART_SetConfig+0x8ae>
 8008422:	3b02      	subs	r3, #2
 8008424:	2b1e      	cmp	r3, #30
 8008426:	d872      	bhi.n	800850e <UART_SetConfig+0x8ae>
 8008428:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x7d0>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	080084b3 	.word	0x080084b3
 8008434:	0800850f 	.word	0x0800850f
 8008438:	080084bb 	.word	0x080084bb
 800843c:	0800850f 	.word	0x0800850f
 8008440:	0800850f 	.word	0x0800850f
 8008444:	0800850f 	.word	0x0800850f
 8008448:	080084cb 	.word	0x080084cb
 800844c:	0800850f 	.word	0x0800850f
 8008450:	0800850f 	.word	0x0800850f
 8008454:	0800850f 	.word	0x0800850f
 8008458:	0800850f 	.word	0x0800850f
 800845c:	0800850f 	.word	0x0800850f
 8008460:	0800850f 	.word	0x0800850f
 8008464:	0800850f 	.word	0x0800850f
 8008468:	080084db 	.word	0x080084db
 800846c:	0800850f 	.word	0x0800850f
 8008470:	0800850f 	.word	0x0800850f
 8008474:	0800850f 	.word	0x0800850f
 8008478:	0800850f 	.word	0x0800850f
 800847c:	0800850f 	.word	0x0800850f
 8008480:	0800850f 	.word	0x0800850f
 8008484:	0800850f 	.word	0x0800850f
 8008488:	0800850f 	.word	0x0800850f
 800848c:	0800850f 	.word	0x0800850f
 8008490:	0800850f 	.word	0x0800850f
 8008494:	0800850f 	.word	0x0800850f
 8008498:	0800850f 	.word	0x0800850f
 800849c:	0800850f 	.word	0x0800850f
 80084a0:	0800850f 	.word	0x0800850f
 80084a4:	0800850f 	.word	0x0800850f
 80084a8:	08008501 	.word	0x08008501
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	d02a      	beq.n	8008506 <UART_SetConfig+0x8a6>
 80084b0:	e02d      	b.n	800850e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80084b2:	f7fc fd6f 	bl	8004f94 <HAL_RCCEx_GetD3PCLK1Freq>
 80084b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80084b8:	e02f      	b.n	800851a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ba:	f107 0314 	add.w	r3, r7, #20
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fc fd7e 	bl	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084c8:	e027      	b.n	800851a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ca:	f107 0308 	add.w	r3, r7, #8
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fc feca 	bl	8005268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084d8:	e01f      	b.n	800851a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084da:	4b21      	ldr	r3, [pc, #132]	; (8008560 <UART_SetConfig+0x900>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d009      	beq.n	80084fa <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084e6:	4b1e      	ldr	r3, [pc, #120]	; (8008560 <UART_SetConfig+0x900>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	08db      	lsrs	r3, r3, #3
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	4a1d      	ldr	r2, [pc, #116]	; (8008568 <UART_SetConfig+0x908>)
 80084f2:	fa22 f303 	lsr.w	r3, r2, r3
 80084f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084f8:	e00f      	b.n	800851a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80084fa:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <UART_SetConfig+0x908>)
 80084fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084fe:	e00c      	b.n	800851a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008500:	4b1a      	ldr	r3, [pc, #104]	; (800856c <UART_SetConfig+0x90c>)
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008504:	e009      	b.n	800851a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800850c:	e005      	b.n	800851a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 81e6 	beq.w	80088ee <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	4a12      	ldr	r2, [pc, #72]	; (8008570 <UART_SetConfig+0x910>)
 8008528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800852c:	461a      	mov	r2, r3
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	fbb3 f3f2 	udiv	r3, r3, r2
 8008534:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	4613      	mov	r3, r2
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	4413      	add	r3, r2
 8008540:	6a3a      	ldr	r2, [r7, #32]
 8008542:	429a      	cmp	r2, r3
 8008544:	d305      	bcc.n	8008552 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800854c:	6a3a      	ldr	r2, [r7, #32]
 800854e:	429a      	cmp	r2, r3
 8008550:	d910      	bls.n	8008574 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008558:	e1c9      	b.n	80088ee <UART_SetConfig+0xc8e>
 800855a:	bf00      	nop
 800855c:	40011c00 	.word	0x40011c00
 8008560:	58024400 	.word	0x58024400
 8008564:	58000c00 	.word	0x58000c00
 8008568:	03d09000 	.word	0x03d09000
 800856c:	003d0900 	.word	0x003d0900
 8008570:	08008f94 	.word	0x08008f94
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008576:	4618      	mov	r0, r3
 8008578:	f04f 0100 	mov.w	r1, #0
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	4ac1      	ldr	r2, [pc, #772]	; (8008888 <UART_SetConfig+0xc28>)
 8008582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008586:	b29a      	uxth	r2, r3
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	f7f7 feae 	bl	80002ec <__aeabi_uldivmod>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4610      	mov	r0, r2
 8008596:	4619      	mov	r1, r3
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	020b      	lsls	r3, r1, #8
 80085a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085a6:	0202      	lsls	r2, r0, #8
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	6849      	ldr	r1, [r1, #4]
 80085ac:	0849      	lsrs	r1, r1, #1
 80085ae:	4608      	mov	r0, r1
 80085b0:	f04f 0100 	mov.w	r1, #0
 80085b4:	1814      	adds	r4, r2, r0
 80085b6:	eb43 0501 	adc.w	r5, r3, r1
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	461a      	mov	r2, r3
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	4620      	mov	r0, r4
 80085c6:	4629      	mov	r1, r5
 80085c8:	f7f7 fe90 	bl	80002ec <__aeabi_uldivmod>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4613      	mov	r3, r2
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085da:	d308      	bcc.n	80085ee <UART_SetConfig+0x98e>
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085e2:	d204      	bcs.n	80085ee <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ea:	60da      	str	r2, [r3, #12]
 80085ec:	e17f      	b.n	80088ee <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80085f4:	e17b      	b.n	80088ee <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085fe:	f040 80bd 	bne.w	800877c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8008602:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008606:	2b20      	cmp	r3, #32
 8008608:	dc48      	bgt.n	800869c <UART_SetConfig+0xa3c>
 800860a:	2b00      	cmp	r3, #0
 800860c:	db7b      	blt.n	8008706 <UART_SetConfig+0xaa6>
 800860e:	2b20      	cmp	r3, #32
 8008610:	d879      	bhi.n	8008706 <UART_SetConfig+0xaa6>
 8008612:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <UART_SetConfig+0x9b8>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	080086a3 	.word	0x080086a3
 800861c:	080086ab 	.word	0x080086ab
 8008620:	08008707 	.word	0x08008707
 8008624:	08008707 	.word	0x08008707
 8008628:	080086b3 	.word	0x080086b3
 800862c:	08008707 	.word	0x08008707
 8008630:	08008707 	.word	0x08008707
 8008634:	08008707 	.word	0x08008707
 8008638:	080086c3 	.word	0x080086c3
 800863c:	08008707 	.word	0x08008707
 8008640:	08008707 	.word	0x08008707
 8008644:	08008707 	.word	0x08008707
 8008648:	08008707 	.word	0x08008707
 800864c:	08008707 	.word	0x08008707
 8008650:	08008707 	.word	0x08008707
 8008654:	08008707 	.word	0x08008707
 8008658:	080086d3 	.word	0x080086d3
 800865c:	08008707 	.word	0x08008707
 8008660:	08008707 	.word	0x08008707
 8008664:	08008707 	.word	0x08008707
 8008668:	08008707 	.word	0x08008707
 800866c:	08008707 	.word	0x08008707
 8008670:	08008707 	.word	0x08008707
 8008674:	08008707 	.word	0x08008707
 8008678:	08008707 	.word	0x08008707
 800867c:	08008707 	.word	0x08008707
 8008680:	08008707 	.word	0x08008707
 8008684:	08008707 	.word	0x08008707
 8008688:	08008707 	.word	0x08008707
 800868c:	08008707 	.word	0x08008707
 8008690:	08008707 	.word	0x08008707
 8008694:	08008707 	.word	0x08008707
 8008698:	080086f9 	.word	0x080086f9
 800869c:	2b40      	cmp	r3, #64	; 0x40
 800869e:	d02e      	beq.n	80086fe <UART_SetConfig+0xa9e>
 80086a0:	e031      	b.n	8008706 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086a2:	f7fb fd3f 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 80086a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80086a8:	e033      	b.n	8008712 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086aa:	f7fb fd51 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 80086ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80086b0:	e02f      	b.n	8008712 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086b2:	f107 0314 	add.w	r3, r7, #20
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fc fc82 	bl	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086c0:	e027      	b.n	8008712 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fc fdce 	bl	8005268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086d0:	e01f      	b.n	8008712 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086d2:	4b6e      	ldr	r3, [pc, #440]	; (800888c <UART_SetConfig+0xc2c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d009      	beq.n	80086f2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086de:	4b6b      	ldr	r3, [pc, #428]	; (800888c <UART_SetConfig+0xc2c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	08db      	lsrs	r3, r3, #3
 80086e4:	f003 0303 	and.w	r3, r3, #3
 80086e8:	4a69      	ldr	r2, [pc, #420]	; (8008890 <UART_SetConfig+0xc30>)
 80086ea:	fa22 f303 	lsr.w	r3, r2, r3
 80086ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086f0:	e00f      	b.n	8008712 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80086f2:	4b67      	ldr	r3, [pc, #412]	; (8008890 <UART_SetConfig+0xc30>)
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086f6:	e00c      	b.n	8008712 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086f8:	4b66      	ldr	r3, [pc, #408]	; (8008894 <UART_SetConfig+0xc34>)
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086fc:	e009      	b.n	8008712 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008702:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008704:	e005      	b.n	8008712 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008710:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 80ea 	beq.w	80088ee <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	4a5a      	ldr	r2, [pc, #360]	; (8008888 <UART_SetConfig+0xc28>)
 8008720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008724:	461a      	mov	r2, r3
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	fbb3 f3f2 	udiv	r3, r3, r2
 800872c:	005a      	lsls	r2, r3, #1
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	085b      	lsrs	r3, r3, #1
 8008734:	441a      	add	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	fbb2 f3f3 	udiv	r3, r2, r3
 800873e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	2b0f      	cmp	r3, #15
 8008744:	d916      	bls.n	8008774 <UART_SetConfig+0xb14>
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874c:	d212      	bcs.n	8008774 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	b29b      	uxth	r3, r3
 8008752:	f023 030f 	bic.w	r3, r3, #15
 8008756:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	b29b      	uxth	r3, r3
 800875e:	f003 0307 	and.w	r3, r3, #7
 8008762:	b29a      	uxth	r2, r3
 8008764:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008766:	4313      	orrs	r3, r2
 8008768:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008770:	60da      	str	r2, [r3, #12]
 8008772:	e0bc      	b.n	80088ee <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800877a:	e0b8      	b.n	80088ee <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800877c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008780:	2b20      	cmp	r3, #32
 8008782:	dc4b      	bgt.n	800881c <UART_SetConfig+0xbbc>
 8008784:	2b00      	cmp	r3, #0
 8008786:	f2c0 8087 	blt.w	8008898 <UART_SetConfig+0xc38>
 800878a:	2b20      	cmp	r3, #32
 800878c:	f200 8084 	bhi.w	8008898 <UART_SetConfig+0xc38>
 8008790:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <UART_SetConfig+0xb38>)
 8008792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008796:	bf00      	nop
 8008798:	08008823 	.word	0x08008823
 800879c:	0800882b 	.word	0x0800882b
 80087a0:	08008899 	.word	0x08008899
 80087a4:	08008899 	.word	0x08008899
 80087a8:	08008833 	.word	0x08008833
 80087ac:	08008899 	.word	0x08008899
 80087b0:	08008899 	.word	0x08008899
 80087b4:	08008899 	.word	0x08008899
 80087b8:	08008843 	.word	0x08008843
 80087bc:	08008899 	.word	0x08008899
 80087c0:	08008899 	.word	0x08008899
 80087c4:	08008899 	.word	0x08008899
 80087c8:	08008899 	.word	0x08008899
 80087cc:	08008899 	.word	0x08008899
 80087d0:	08008899 	.word	0x08008899
 80087d4:	08008899 	.word	0x08008899
 80087d8:	08008853 	.word	0x08008853
 80087dc:	08008899 	.word	0x08008899
 80087e0:	08008899 	.word	0x08008899
 80087e4:	08008899 	.word	0x08008899
 80087e8:	08008899 	.word	0x08008899
 80087ec:	08008899 	.word	0x08008899
 80087f0:	08008899 	.word	0x08008899
 80087f4:	08008899 	.word	0x08008899
 80087f8:	08008899 	.word	0x08008899
 80087fc:	08008899 	.word	0x08008899
 8008800:	08008899 	.word	0x08008899
 8008804:	08008899 	.word	0x08008899
 8008808:	08008899 	.word	0x08008899
 800880c:	08008899 	.word	0x08008899
 8008810:	08008899 	.word	0x08008899
 8008814:	08008899 	.word	0x08008899
 8008818:	08008879 	.word	0x08008879
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d02e      	beq.n	800887e <UART_SetConfig+0xc1e>
 8008820:	e03a      	b.n	8008898 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008822:	f7fb fc7f 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8008826:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008828:	e03c      	b.n	80088a4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800882a:	f7fb fc91 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 800882e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008830:	e038      	b.n	80088a4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008832:	f107 0314 	add.w	r3, r7, #20
 8008836:	4618      	mov	r0, r3
 8008838:	f7fc fbc2 	bl	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008840:	e030      	b.n	80088a4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008842:	f107 0308 	add.w	r3, r7, #8
 8008846:	4618      	mov	r0, r3
 8008848:	f7fc fd0e 	bl	8005268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008850:	e028      	b.n	80088a4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008852:	4b0e      	ldr	r3, [pc, #56]	; (800888c <UART_SetConfig+0xc2c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b00      	cmp	r3, #0
 800885c:	d009      	beq.n	8008872 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800885e:	4b0b      	ldr	r3, [pc, #44]	; (800888c <UART_SetConfig+0xc2c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	08db      	lsrs	r3, r3, #3
 8008864:	f003 0303 	and.w	r3, r3, #3
 8008868:	4a09      	ldr	r2, [pc, #36]	; (8008890 <UART_SetConfig+0xc30>)
 800886a:	fa22 f303 	lsr.w	r3, r2, r3
 800886e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008870:	e018      	b.n	80088a4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8008872:	4b07      	ldr	r3, [pc, #28]	; (8008890 <UART_SetConfig+0xc30>)
 8008874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008876:	e015      	b.n	80088a4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008878:	4b06      	ldr	r3, [pc, #24]	; (8008894 <UART_SetConfig+0xc34>)
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800887c:	e012      	b.n	80088a4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008884:	e00e      	b.n	80088a4 <UART_SetConfig+0xc44>
 8008886:	bf00      	nop
 8008888:	08008f94 	.word	0x08008f94
 800888c:	58024400 	.word	0x58024400
 8008890:	03d09000 	.word	0x03d09000
 8008894:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80088a2:	bf00      	nop
    }

    if (pclk != 0U)
 80088a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d021      	beq.n	80088ee <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	4a1a      	ldr	r2, [pc, #104]	; (8008918 <UART_SetConfig+0xcb8>)
 80088b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b4:	461a      	mov	r2, r3
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	441a      	add	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	2b0f      	cmp	r3, #15
 80088d2:	d909      	bls.n	80088e8 <UART_SetConfig+0xc88>
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088da:	d205      	bcs.n	80088e8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	e002      	b.n	80088ee <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800890a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800890e:	4618      	mov	r0, r3
 8008910:	3738      	adds	r7, #56	; 0x38
 8008912:	46bd      	mov	sp, r7
 8008914:	bdb0      	pop	{r4, r5, r7, pc}
 8008916:	bf00      	nop
 8008918:	08008f94 	.word	0x08008f94

0800891c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	f003 0304 	and.w	r3, r3, #4
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00a      	beq.n	80089ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	f003 0320 	and.w	r3, r3, #32
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01a      	beq.n	8008a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a1a:	d10a      	bne.n	8008a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	605a      	str	r2, [r3, #4]
  }
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a70:	f7f8 ff7c 	bl	800196c <HAL_GetTick>
 8008a74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0308 	and.w	r3, r3, #8
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d10e      	bne.n	8008aa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f82f 	bl	8008af6 <UART_WaitOnFlagUntilTimeout>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e025      	b.n	8008aee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d10e      	bne.n	8008ace <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f819 	bl	8008af6 <UART_WaitOnFlagUntilTimeout>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e00f      	b.n	8008aee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b09c      	sub	sp, #112	; 0x70
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	603b      	str	r3, [r7, #0]
 8008b02:	4613      	mov	r3, r2
 8008b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b06:	e0a9      	b.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0e:	f000 80a5 	beq.w	8008c5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b12:	f7f8 ff2b 	bl	800196c <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d302      	bcc.n	8008b28 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d140      	bne.n	8008baa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b3c:	667b      	str	r3, [r7, #100]	; 0x64
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e6      	bne.n	8008b28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	f023 0301 	bic.w	r3, r3, #1
 8008b70:	663b      	str	r3, [r7, #96]	; 0x60
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e5      	bne.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e069      	b.n	8008c7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d051      	beq.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc6:	d149      	bne.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008be6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e6      	bne.n	8008bd2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	613b      	str	r3, [r7, #16]
   return(result);
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3308      	adds	r3, #8
 8008c22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c24:	623a      	str	r2, [r7, #32]
 8008c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	69f9      	ldr	r1, [r7, #28]
 8008c2a:	6a3a      	ldr	r2, [r7, #32]
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e5      	bne.n	8008c04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e010      	b.n	8008c7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69da      	ldr	r2, [r3, #28]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	4013      	ands	r3, r2
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2301      	moveq	r3, #1
 8008c6e:	2300      	movne	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	f43f af46 	beq.w	8008b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3770      	adds	r7, #112	; 0x70
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b085      	sub	sp, #20
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d101      	bne.n	8008c9c <HAL_UARTEx_DisableFifoMode+0x16>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	e027      	b.n	8008cec <HAL_UARTEx_DisableFifoMode+0x66>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2224      	movs	r2, #36	; 0x24
 8008ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e02d      	b.n	8008d6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2224      	movs	r2, #36	; 0x24
 8008d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f022 0201 	bic.w	r2, r2, #1
 8008d36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f84f 	bl	8008df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d101      	bne.n	8008d8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e02d      	b.n	8008de8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2224      	movs	r2, #36	; 0x24
 8008d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f022 0201 	bic.w	r2, r2, #1
 8008db2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f811 	bl	8008df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d108      	bne.n	8008e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e10:	e031      	b.n	8008e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e12:	2310      	movs	r3, #16
 8008e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e16:	2310      	movs	r3, #16
 8008e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	0e5b      	lsrs	r3, r3, #25
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	0f5b      	lsrs	r3, r3, #29
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 0307 	and.w	r3, r3, #7
 8008e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	7b3a      	ldrb	r2, [r7, #12]
 8008e3e:	4911      	ldr	r1, [pc, #68]	; (8008e84 <UARTEx_SetNbDataToProcess+0x94>)
 8008e40:	5c8a      	ldrb	r2, [r1, r2]
 8008e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e46:	7b3a      	ldrb	r2, [r7, #12]
 8008e48:	490f      	ldr	r1, [pc, #60]	; (8008e88 <UARTEx_SetNbDataToProcess+0x98>)
 8008e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	7b7a      	ldrb	r2, [r7, #13]
 8008e5c:	4909      	ldr	r1, [pc, #36]	; (8008e84 <UARTEx_SetNbDataToProcess+0x94>)
 8008e5e:	5c8a      	ldrb	r2, [r1, r2]
 8008e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e64:	7b7a      	ldrb	r2, [r7, #13]
 8008e66:	4908      	ldr	r1, [pc, #32]	; (8008e88 <UARTEx_SetNbDataToProcess+0x98>)
 8008e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	08008fac 	.word	0x08008fac
 8008e88:	08008fb4 	.word	0x08008fb4

08008e8c <__libc_init_array>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	4d0d      	ldr	r5, [pc, #52]	; (8008ec4 <__libc_init_array+0x38>)
 8008e90:	4c0d      	ldr	r4, [pc, #52]	; (8008ec8 <__libc_init_array+0x3c>)
 8008e92:	1b64      	subs	r4, r4, r5
 8008e94:	10a4      	asrs	r4, r4, #2
 8008e96:	2600      	movs	r6, #0
 8008e98:	42a6      	cmp	r6, r4
 8008e9a:	d109      	bne.n	8008eb0 <__libc_init_array+0x24>
 8008e9c:	4d0b      	ldr	r5, [pc, #44]	; (8008ecc <__libc_init_array+0x40>)
 8008e9e:	4c0c      	ldr	r4, [pc, #48]	; (8008ed0 <__libc_init_array+0x44>)
 8008ea0:	f000 f82e 	bl	8008f00 <_init>
 8008ea4:	1b64      	subs	r4, r4, r5
 8008ea6:	10a4      	asrs	r4, r4, #2
 8008ea8:	2600      	movs	r6, #0
 8008eaa:	42a6      	cmp	r6, r4
 8008eac:	d105      	bne.n	8008eba <__libc_init_array+0x2e>
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb4:	4798      	blx	r3
 8008eb6:	3601      	adds	r6, #1
 8008eb8:	e7ee      	b.n	8008e98 <__libc_init_array+0xc>
 8008eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ebe:	4798      	blx	r3
 8008ec0:	3601      	adds	r6, #1
 8008ec2:	e7f2      	b.n	8008eaa <__libc_init_array+0x1e>
 8008ec4:	08008fc4 	.word	0x08008fc4
 8008ec8:	08008fc4 	.word	0x08008fc4
 8008ecc:	08008fc4 	.word	0x08008fc4
 8008ed0:	08008fc8 	.word	0x08008fc8

08008ed4 <memcpy>:
 8008ed4:	440a      	add	r2, r1
 8008ed6:	4291      	cmp	r1, r2
 8008ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008edc:	d100      	bne.n	8008ee0 <memcpy+0xc>
 8008ede:	4770      	bx	lr
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eea:	4291      	cmp	r1, r2
 8008eec:	d1f9      	bne.n	8008ee2 <memcpy+0xe>
 8008eee:	bd10      	pop	{r4, pc}

08008ef0 <memset>:
 8008ef0:	4402      	add	r2, r0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d100      	bne.n	8008efa <memset+0xa>
 8008ef8:	4770      	bx	lr
 8008efa:	f803 1b01 	strb.w	r1, [r3], #1
 8008efe:	e7f9      	b.n	8008ef4 <memset+0x4>

08008f00 <_init>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr

08008f0c <_fini>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr
