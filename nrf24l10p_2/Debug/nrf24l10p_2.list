
nrf24l10p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b07c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800b328  0800b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b3cc  0800b3cc  0001b3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b3d4  0800b3d4  0001b3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b3d8  0800b3d8  0001b3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  0800b3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000408  24000018  0800b3f4  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000420  0800b3f4  00020420  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c8b8  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ac4  00000000  00000000  0004c8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019b8  00000000  00000000  000503c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018b0  00000000  00000000  00051d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003466c  00000000  00000000  00053630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dc2a  00000000  00000000  00087c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162217  00000000  00000000  000a58c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00207add  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007194  00000000  00000000  00207b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000018 	.word	0x24000018
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b310 	.word	0x0800b310

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400001c 	.word	0x2400001c
 80002e8:	0800b310 	.word	0x0800b310

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <CS_Select>:
#define NRF24_CSN_PORT   GPIOD
#define NRF24_CSN_PIN    GPIO_PIN_15


void CS_Select (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <CS_Select+0x14>)
 80005f0:	f004 f8dc 	bl	80047ac <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	58020c00 	.word	0x58020c00

080005fc <CS_UnSelect>:

void CS_UnSelect (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <CS_UnSelect+0x14>)
 8000608:	f004 f8d0 	bl	80047ac <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	58020c00 	.word	0x58020c00

08000614 <CE_Enable>:


void CE_Enable (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <CE_Enable+0x14>)
 8000620:	f004 f8c4 	bl	80047ac <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58020c00 	.word	0x58020c00

0800062c <CE_Disable>:

void CE_Disable (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <CE_Disable+0x14>)
 8000638:	f004 f8b8 	bl	80047ac <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58020c00 	.word	0x58020c00

08000644 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	b2db      	uxtb	r3, r3
 800065c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000662:	f7ff ffbf 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	2202      	movs	r2, #2
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <nrf24_WriteReg+0x40>)
 8000672:	f007 fa4f 	bl	8007b14 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000676:	f7ff ffc1 	bl	80005fc <CS_UnSelect>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	240002dc 	.word	0x240002dc

08000688 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	b2db      	uxtb	r3, r3
 800069e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006a0:	f7ff ffa0 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80006a4:	f107 0114 	add.w	r1, r7, #20
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006ae:	f007 fa31 	bl	8007b14 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006be:	f007 fa29 	bl	8007b14 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006c2:	f7ff ff9b 	bl	80005fc <CS_UnSelect>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	240002dc 	.word	0x240002dc

080006d4 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006e2:	f7ff ff7f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80006e6:	1df9      	adds	r1, r7, #7
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4808      	ldr	r0, [pc, #32]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006ee:	f007 fa11 	bl	8007b14 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80006f2:	f107 010f 	add.w	r1, r7, #15
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2201      	movs	r2, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006fc:	f007 fbfc 	bl	8007ef8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000700:	f7ff ff7c 	bl	80005fc <CS_UnSelect>

	return data;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	240002dc 	.word	0x240002dc

08000714 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000722:	f7ff ff5f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000726:	f107 010f 	add.w	r1, r7, #15
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	2201      	movs	r2, #1
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000730:	f007 f9f0 	bl	8007b14 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b29a      	uxth	r2, r3
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000740:	f007 fbda 	bl	8007ef8 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000744:	f7ff ff5a 	bl	80005fc <CS_UnSelect>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	240002dc 	.word	0x240002dc

08000754 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800075e:	f7ff ff41 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <nrfsendCmd+0x28>)
 800076a:	f007 f9d3 	bl	8007b14 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800076e:	f7ff ff45 	bl	80005fc <CS_UnSelect>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	240002dc 	.word	0x240002dc

08000780 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b07      	cmp	r3, #7
 800078e:	d104      	bne.n	800079a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000790:	2100      	movs	r1, #0
 8000792:	2007      	movs	r0, #7
 8000794:	f7ff ff56 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000798:	e090      	b.n	80008bc <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b17      	cmp	r3, #23
 800079e:	d104      	bne.n	80007aa <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80007a0:	2111      	movs	r1, #17
 80007a2:	2017      	movs	r0, #23
 80007a4:	f7ff ff4e 	bl	8000644 <nrf24_WriteReg>
}
 80007a8:	e088      	b.n	80008bc <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80007aa:	2108      	movs	r1, #8
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff49 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80007b2:	213f      	movs	r1, #63	; 0x3f
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff45 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80007ba:	2103      	movs	r1, #3
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ff41 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80007c2:	2103      	movs	r1, #3
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff ff3d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80007ca:	2103      	movs	r1, #3
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff ff39 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80007d2:	2102      	movs	r1, #2
 80007d4:	2005      	movs	r0, #5
 80007d6:	f7ff ff35 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80007da:	210e      	movs	r1, #14
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff ff31 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2007      	movs	r0, #7
 80007e6:	f7ff ff2d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff29 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2009      	movs	r0, #9
 80007f6:	f7ff ff25 	bl	8000644 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007fa:	4a32      	ldr	r2, [pc, #200]	; (80008c4 <nrf24_reset+0x144>)
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	3304      	adds	r3, #4
 8000808:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2205      	movs	r2, #5
 8000810:	4619      	mov	r1, r3
 8000812:	200a      	movs	r0, #10
 8000814:	f7ff ff38 	bl	8000688 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000818:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <nrf24_reset+0x148>)
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000822:	6018      	str	r0, [r3, #0]
 8000824:	3304      	adds	r3, #4
 8000826:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2205      	movs	r2, #5
 800082e:	4619      	mov	r1, r3
 8000830:	200b      	movs	r0, #11
 8000832:	f7ff ff29 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000836:	21c3      	movs	r1, #195	; 0xc3
 8000838:	200c      	movs	r0, #12
 800083a:	f7ff ff03 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800083e:	21c4      	movs	r1, #196	; 0xc4
 8000840:	200d      	movs	r0, #13
 8000842:	f7ff feff 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000846:	21c5      	movs	r1, #197	; 0xc5
 8000848:	200e      	movs	r0, #14
 800084a:	f7ff fefb 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800084e:	21c6      	movs	r1, #198	; 0xc6
 8000850:	200f      	movs	r0, #15
 8000852:	f7ff fef7 	bl	8000644 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000856:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <nrf24_reset+0x144>)
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000860:	6018      	str	r0, [r3, #0]
 8000862:	3304      	adds	r3, #4
 8000864:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2205      	movs	r2, #5
 800086c:	4619      	mov	r1, r3
 800086e:	2010      	movs	r0, #16
 8000870:	f7ff ff0a 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	2011      	movs	r0, #17
 8000878:	f7ff fee4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2012      	movs	r0, #18
 8000880:	f7ff fee0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2013      	movs	r0, #19
 8000888:	f7ff fedc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	2014      	movs	r0, #20
 8000890:	f7ff fed8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000894:	2100      	movs	r1, #0
 8000896:	2015      	movs	r0, #21
 8000898:	f7ff fed4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2016      	movs	r0, #22
 80008a0:	f7ff fed0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80008a4:	2111      	movs	r1, #17
 80008a6:	2017      	movs	r0, #23
 80008a8:	f7ff fecc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f7ff fec8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	201d      	movs	r0, #29
 80008b8:	f7ff fec4 	bl	8000644 <nrf24_WriteReg>
}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	0800b328 	.word	0x0800b328
 80008c8:	0800b330 	.word	0x0800b330

080008cc <NRF24_Init>:




void NRF24_Init (void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80008d0:	f7ff feac 	bl	800062c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff53 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80008da:	2100      	movs	r1, #0
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff feb1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80008e2:	2100      	movs	r1, #0
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fead 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80008ea:	2100      	movs	r1, #0
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff fea9 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80008f2:	2103      	movs	r1, #3
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff fea5 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80008fa:	2100      	movs	r1, #0
 80008fc:	2004      	movs	r0, #4
 80008fe:	f7ff fea1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000902:	2100      	movs	r1, #0
 8000904:	2005      	movs	r0, #5
 8000906:	f7ff fe9d 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800090a:	210e      	movs	r1, #14
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff fe99 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000912:	f7ff fe7f 	bl	8000614 <CE_Enable>

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000926:	f7ff fe81 	bl	800062c <CE_Disable>

	nrf24_reset (STATUS);
 800092a:	2007      	movs	r0, #7
 800092c:	f7ff ff28 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	4619      	mov	r1, r3
 8000934:	2005      	movs	r0, #5
 8000936:	f7ff fe85 	bl	8000644 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff feca 	bl	80006d4 <nrf24_ReadReg>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4619      	mov	r1, r3
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fe77 	bl	8000644 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000956:	2205      	movs	r2, #5
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	200b      	movs	r0, #11
 800095c:	f7ff fe94 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000960:	21ee      	movs	r1, #238	; 0xee
 8000962:	200c      	movs	r0, #12
 8000964:	f7ff fe6e 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000968:	2120      	movs	r1, #32
 800096a:	2013      	movs	r0, #19
 800096c:	f7ff fe6a 	bl	8000644 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff feaf 	bl	80006d4 <nrf24_ReadReg>
 8000976:	4603      	mov	r3, r0
 8000978:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	f043 0303 	orr.w	r3, r3, #3
 8000980:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	4619      	mov	r1, r3
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fe5c 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800098c:	f7ff fe42 	bl	8000614 <CE_Enable>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80009a0:	2007      	movs	r0, #7
 80009a2:	f7ff fe97 	bl	80006d4 <nrf24_ReadReg>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00b      	beq.n	80009cc <isDataAvailable+0x34>
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	2007      	movs	r0, #7
 80009c4:	f7ff fe3e 	bl	8000644 <nrf24_WriteReg>

		return 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <isDataAvailable+0x36>
	}

	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80009e4:	f7ff fdfe 	bl	80005e4 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80009e8:	2361      	movs	r3, #97	; 0x61
 80009ea:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80009ec:	f107 010f 	add.w	r1, r7, #15
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2201      	movs	r2, #1
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <NRF24_Receive+0x50>)
 80009f6:	f007 f88d 	bl	8007b14 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	2220      	movs	r2, #32
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <NRF24_Receive+0x50>)
 8000a04:	f007 fa78 	bl	8007ef8 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000a08:	f7ff fdf8 	bl	80005fc <CS_UnSelect>

	HAL_Delay(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f001 fb7b 	bl	8002108 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000a12:	23e2      	movs	r3, #226	; 0xe2
 8000a14:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe9b 	bl	8000754 <nrfsendCmd>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	240002dc 	.word	0x240002dc

08000a2c <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e00c      	b.n	8000a54 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	b2d9      	uxtb	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	18d4      	adds	r4, r2, r3
 8000a44:	4608      	mov	r0, r1
 8000a46:	f7ff fe45 	bl	80006d4 <nrf24_ReadReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b09      	cmp	r3, #9
 8000a58:	ddef      	ble.n	8000a3a <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	330a      	adds	r3, #10
 8000a5e:	2205      	movs	r2, #5
 8000a60:	4619      	mov	r1, r3
 8000a62:	200a      	movs	r0, #10
 8000a64:	f7ff fe56 	bl	8000714 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	330f      	adds	r3, #15
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	4619      	mov	r1, r3
 8000a70:	200b      	movs	r0, #11
 8000a72:	f7ff fe4f 	bl	8000714 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0414 	add.w	r4, r3, #20
 8000a7c:	200c      	movs	r0, #12
 8000a7e:	f7ff fe29 	bl	80006d4 <nrf24_ReadReg>
 8000a82:	4603      	mov	r3, r0
 8000a84:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f103 0415 	add.w	r4, r3, #21
 8000a8c:	200d      	movs	r0, #13
 8000a8e:	f7ff fe21 	bl	80006d4 <nrf24_ReadReg>
 8000a92:	4603      	mov	r3, r0
 8000a94:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f103 0416 	add.w	r4, r3, #22
 8000a9c:	200e      	movs	r0, #14
 8000a9e:	f7ff fe19 	bl	80006d4 <nrf24_ReadReg>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f103 0417 	add.w	r4, r3, #23
 8000aac:	200f      	movs	r0, #15
 8000aae:	f7ff fe11 	bl	80006d4 <nrf24_ReadReg>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	2205      	movs	r2, #5
 8000abc:	4619      	mov	r1, r3
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f7ff fe28 	bl	8000714 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000ac4:	231d      	movs	r3, #29
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	e00e      	b.n	8000ae8 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	3b0c      	subs	r3, #12
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	18d4      	adds	r4, r2, r3
 8000ad8:	4608      	mov	r0, r1
 8000ada:	f7ff fdfb 	bl	80006d4 <nrf24_ReadReg>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b25      	cmp	r3, #37	; 0x25
 8000aec:	dded      	ble.n	8000aca <NRF24_ReadAll+0x9e>
	}

}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <HAL_FDCAN_RxFifo0Callback>:
uint8_t TxData_Node3_To_Node1[8];
uint8_t TxData_Node3_To_Node2[8];
uint8_t RxData_From_Node2[8];
uint8_t RxData_From_Node1[8];
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d10f      	bne.n	8000b2c <HAL_FDCAN_RxFifo0Callback+0x34>
   {
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00a      	beq.n	8000b2c <HAL_FDCAN_RxFifo0Callback+0x34>
  {
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node1) != HAL_OK)
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000b18:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f002 fe05 	bl	800372c <HAL_FDCAN_GetRxMessage>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_FDCAN_RxFifo0Callback+0x34>
    {
    /* Reception Error */
    Error_Handler();
 8000b28:	f000 fed4 	bl	80018d4 <Error_Handler>
    }

   }
   }
 }
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	4000a000 	.word	0x4000a000
 8000b38:	240000ec 	.word	0x240000ec
 8000b3c:	240003f4 	.word	0x240003f4

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b44:	f001 fa4e 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b48:	f000 f9ba 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f000 fdb0 	bl	80016b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b50:	f000 fb5c 	bl	800120c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000b54:	f000 fd60 	bl	8001618 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000b58:	f000 fbae 	bl	80012b8 <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000b5c:	f000 fa9e 	bl	800109c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000b60:	f000 fc6e 	bl	8001440 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b64:	f000 fa22 	bl	8000fac <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b68:	f000 fce0 	bl	800152c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//////////////nrf///////////
  NRF24_Init();
 8000b6c:	f7ff feae 	bl	80008cc <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);//nrf rx
 8000b70:	210a      	movs	r1, #10
 8000b72:	4883      	ldr	r0, [pc, #524]	; (8000d80 <main+0x240>)
 8000b74:	f7ff fed1 	bl	800091a <NRF24_RxMode>
  NRF24_ReadAll(data);//nrf rx
 8000b78:	4882      	ldr	r0, [pc, #520]	; (8000d84 <main+0x244>)
 8000b7a:	f7ff ff57 	bl	8000a2c <NRF24_ReadAll>
////////////////////////////

////////////motor///////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//motor back1
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4881      	ldr	r0, [pc, #516]	; (8000d88 <main+0x248>)
 8000b82:	f008 f839 	bl	8008bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//motor back2
 8000b86:	2104      	movs	r1, #4
 8000b88:	487f      	ldr	r0, [pc, #508]	; (8000d88 <main+0x248>)
 8000b8a:	f008 f835 	bl	8008bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//motor front
 8000b8e:	2108      	movs	r1, #8
 8000b90:	487d      	ldr	r0, [pc, #500]	; (8000d88 <main+0x248>)
 8000b92:	f008 f831 	bl	8008bf8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,1);//motor enable1
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9c:	487b      	ldr	r0, [pc, #492]	; (8000d8c <main+0x24c>)
 8000b9e:	f003 fe05 	bl	80047ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//motor enable2
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba8:	4879      	ldr	r0, [pc, #484]	; (8000d90 <main+0x250>)
 8000baa:	f003 fdff 	bl	80047ac <HAL_GPIO_WritePin>
 // HCSR04_Read();
 // HAL_Delay(200);
///////////////////////////////

///////////////nrf//////////////
	  if (isDataAvailable(2) == 1)
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff fef2 	bl	8000998 <isDataAvailable>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d102      	bne.n	8000bc0 <main+0x80>
	  	 {
		  NRF24_Receive(RxData);
 8000bba:	4876      	ldr	r0, [pc, #472]	; (8000d94 <main+0x254>)
 8000bbc:	f7ff ff0c 	bl	80009d8 <NRF24_Receive>
//	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,1);


///////////////go and back (switch/////////////////

	  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==0)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4875      	ldr	r0, [pc, #468]	; (8000d98 <main+0x258>)
 8000bc4:	f003 fdda 	bl	800477c <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d120      	bne.n	8000c10 <main+0xd0>
		  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd4:	4870      	ldr	r0, [pc, #448]	; (8000d98 <main+0x258>)
 8000bd6:	f003 fde9 	bl	80047ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2108      	movs	r1, #8
 8000bde:	486c      	ldr	r0, [pc, #432]	; (8000d90 <main+0x250>)
 8000be0:	f003 fde4 	bl	80047ac <HAL_GPIO_WritePin>
		  htim1.Instance->CCR1=RxData[0];
 8000be4:	4b6b      	ldr	r3, [pc, #428]	; (8000d94 <main+0x254>)
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <main+0x248>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
		  htim1.Instance->CCR2=RxData[0];
 8000bee:	4b69      	ldr	r3, [pc, #420]	; (8000d94 <main+0x254>)
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <main+0x248>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	639a      	str	r2, [r3, #56]	; 0x38
		  if(RxData[0]>=100)
 8000bf8:	4b66      	ldr	r3, [pc, #408]	; (8000d94 <main+0x254>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b63      	cmp	r3, #99	; 0x63
 8000bfe:	d907      	bls.n	8000c10 <main+0xd0>
		  	  {
		  		  htim1.Instance->CCR1=99;
 8000c00:	4b61      	ldr	r3, [pc, #388]	; (8000d88 <main+0x248>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2263      	movs	r2, #99	; 0x63
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34
		  		  htim1.Instance->CCR2=99;
 8000c08:	4b5f      	ldr	r3, [pc, #380]	; (8000d88 <main+0x248>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2263      	movs	r2, #99	; 0x63
 8000c0e:	639a      	str	r2, [r3, #56]	; 0x38
		  	  }
		  }
	  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==1)
 8000c10:	2101      	movs	r1, #1
 8000c12:	4861      	ldr	r0, [pc, #388]	; (8000d98 <main+0x258>)
 8000c14:	f003 fdb2 	bl	800477c <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d120      	bne.n	8000c60 <main+0x120>
		  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c24:	485c      	ldr	r0, [pc, #368]	; (8000d98 <main+0x258>)
 8000c26:	f003 fdc1 	bl	80047ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	4858      	ldr	r0, [pc, #352]	; (8000d90 <main+0x250>)
 8000c30:	f003 fdbc 	bl	80047ac <HAL_GPIO_WritePin>
		  htim1.Instance->CCR1=RxData[0];
 8000c34:	4b57      	ldr	r3, [pc, #348]	; (8000d94 <main+0x254>)
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	4b53      	ldr	r3, [pc, #332]	; (8000d88 <main+0x248>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	635a      	str	r2, [r3, #52]	; 0x34
		  htim1.Instance->CCR2=RxData[0];
 8000c3e:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <main+0x254>)
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <main+0x248>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	639a      	str	r2, [r3, #56]	; 0x38
		  if(RxData[0]>=100)
 8000c48:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <main+0x254>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b63      	cmp	r3, #99	; 0x63
 8000c4e:	d907      	bls.n	8000c60 <main+0x120>
		  	  {
		  		  htim1.Instance->CCR1=99;
 8000c50:	4b4d      	ldr	r3, [pc, #308]	; (8000d88 <main+0x248>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2263      	movs	r2, #99	; 0x63
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34
		  		  htim1.Instance->CCR2=99;
 8000c58:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <main+0x248>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2263      	movs	r2, #99	; 0x63
 8000c5e:	639a      	str	r2, [r3, #56]	; 0x38
		  }


///////////////////////nrf networking and direction//////////////////

		  if (RxData[1]  <=40)
 8000c60:	4b4c      	ldr	r3, [pc, #304]	; (8000d94 <main+0x254>)
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	2b28      	cmp	r3, #40	; 0x28
 8000c66:	f200 8085 	bhi.w	8000d74 <main+0x234>
			  {
				  while (RxData[1]  <= 40)
 8000c6a:	e07e      	b.n	8000d6a <main+0x22a>
				  {
					  if (isDataAvailable(2) == 1)
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff fe93 	bl	8000998 <isDataAvailable>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d102      	bne.n	8000c7e <main+0x13e>
					  {
						  NRF24_Receive(RxData);
 8000c78:	4846      	ldr	r0, [pc, #280]	; (8000d94 <main+0x254>)
 8000c7a:	f7ff fead 	bl	80009d8 <NRF24_Receive>
					  }
					  // ?��른쪽 방향?���?????????????? 모터 ?��?��
					  htim1.Instance->CCR3 = 80;
 8000c7e:	4b42      	ldr	r3, [pc, #264]	; (8000d88 <main+0x248>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2250      	movs	r2, #80	; 0x50
 8000c84:	63da      	str	r2, [r3, #60]	; 0x3c
					  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	4843      	ldr	r0, [pc, #268]	; (8000d9c <main+0x25c>)
 8000c8e:	f003 fd8d 	bl	80047ac <HAL_GPIO_WritePin>
					  HAL_Delay(100);
 8000c92:	2064      	movs	r0, #100	; 0x64
 8000c94:	f001 fa38 	bl	8002108 <HAL_Delay>
					  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==0)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	483f      	ldr	r0, [pc, #252]	; (8000d98 <main+0x258>)
 8000c9c:	f003 fd6e 	bl	800477c <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d120      	bne.n	8000ce8 <main+0x1a8>
						  {
						  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cac:	483a      	ldr	r0, [pc, #232]	; (8000d98 <main+0x258>)
 8000cae:	f003 fd7d 	bl	80047ac <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	4836      	ldr	r0, [pc, #216]	; (8000d90 <main+0x250>)
 8000cb8:	f003 fd78 	bl	80047ac <HAL_GPIO_WritePin>
						  htim1.Instance->CCR1=RxData[0];
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <main+0x254>)
 8000cbe:	781a      	ldrb	r2, [r3, #0]
 8000cc0:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <main+0x248>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
						  htim1.Instance->CCR2=RxData[0];
 8000cc6:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <main+0x254>)
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <main+0x248>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
						  if(RxData[0]>=100)
 8000cd0:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <main+0x254>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b63      	cmp	r3, #99	; 0x63
 8000cd6:	d907      	bls.n	8000ce8 <main+0x1a8>
						  	  {
						  		  htim1.Instance->CCR1=99;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <main+0x248>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2263      	movs	r2, #99	; 0x63
 8000cde:	635a      	str	r2, [r3, #52]	; 0x34
						  		  htim1.Instance->CCR2=99;
 8000ce0:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <main+0x248>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2263      	movs	r2, #99	; 0x63
 8000ce6:	639a      	str	r2, [r3, #56]	; 0x38
						  	  }
						  }
					  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==1)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	482b      	ldr	r0, [pc, #172]	; (8000d98 <main+0x258>)
 8000cec:	f003 fd46 	bl	800477c <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d120      	bne.n	8000d38 <main+0x1f8>
						  {
						  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfc:	4826      	ldr	r0, [pc, #152]	; (8000d98 <main+0x258>)
 8000cfe:	f003 fd55 	bl	80047ac <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2108      	movs	r1, #8
 8000d06:	4822      	ldr	r0, [pc, #136]	; (8000d90 <main+0x250>)
 8000d08:	f003 fd50 	bl	80047ac <HAL_GPIO_WritePin>
						  htim1.Instance->CCR1=RxData[0];
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <main+0x254>)
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <main+0x248>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
						  htim1.Instance->CCR2=RxData[0];
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <main+0x254>)
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <main+0x248>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38
						  if(RxData[0]>=100)
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <main+0x254>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b63      	cmp	r3, #99	; 0x63
 8000d26:	d907      	bls.n	8000d38 <main+0x1f8>
						  	  {
						  		  htim1.Instance->CCR1=99;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <main+0x248>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2263      	movs	r2, #99	; 0x63
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
						  		  htim1.Instance->CCR2=99;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <main+0x248>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2263      	movs	r2, #99	; 0x63
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38
						  	  }
						  }
					  // ?��로운 ?��?��?�� ?��?��

					  if(41<=RxData[1]&&RxData[1]<=80)
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <main+0x254>)
 8000d3a:	785b      	ldrb	r3, [r3, #1]
 8000d3c:	2b28      	cmp	r3, #40	; 0x28
 8000d3e:	d914      	bls.n	8000d6a <main+0x22a>
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <main+0x254>)
 8000d42:	785b      	ldrb	r3, [r3, #1]
 8000d44:	2b50      	cmp	r3, #80	; 0x50
 8000d46:	d810      	bhi.n	8000d6a <main+0x22a>
					  {
						  htim1.Instance->CCR3 = 90;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <main+0x248>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	225a      	movs	r2, #90	; 0x5a
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
						  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <main+0x25c>)
 8000d58:	f003 fd28 	bl	80047ac <HAL_GPIO_WritePin>
						  HAL_Delay(200);
 8000d5c:	20c8      	movs	r0, #200	; 0xc8
 8000d5e:	f001 f9d3 	bl	8002108 <HAL_Delay>
						  htim1.Instance->CCR3 = 0;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <main+0x248>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	63da      	str	r2, [r3, #60]	; 0x3c
				  while (RxData[1]  <= 40)
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <main+0x254>)
 8000d6c:	785b      	ldrb	r3, [r3, #1]
 8000d6e:	2b28      	cmp	r3, #40	; 0x28
 8000d70:	f67f af7c 	bls.w	8000c6c <main+0x12c>
				  }


			  }

		  if (RxData[1] > 85)
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <main+0x254>)
 8000d76:	785b      	ldrb	r3, [r3, #1]
 8000d78:	2b55      	cmp	r3, #85	; 0x55
 8000d7a:	f67f af18 	bls.w	8000bae <main+0x6e>
				  {
					  while (RxData[1] > 85)
 8000d7e:	e08e      	b.n	8000e9e <main+0x35e>
 8000d80:	24000000 	.word	0x24000000
 8000d84:	24000250 	.word	0x24000250
 8000d88:	24000284 	.word	0x24000284
 8000d8c:	58021400 	.word	0x58021400
 8000d90:	58020000 	.word	0x58020000
 8000d94:	24000364 	.word	0x24000364
 8000d98:	58021000 	.word	0x58021000
 8000d9c:	58021800 	.word	0x58021800
					  {
						  if (isDataAvailable(2) == 1)
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff fdf9 	bl	8000998 <isDataAvailable>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d102      	bne.n	8000db2 <main+0x272>
						  {
							  NRF24_Receive(RxData);
 8000dac:	483f      	ldr	r0, [pc, #252]	; (8000eac <main+0x36c>)
 8000dae:	f7ff fe13 	bl	80009d8 <NRF24_Receive>
						  }
						  // ?��른쪽 방향?���?????????????? 모터 ?��?��
						  htim1.Instance->CCR3 = 80;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <main+0x370>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2250      	movs	r2, #80	; 0x50
 8000db8:	63da      	str	r2, [r3, #60]	; 0x3c
						  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc0:	483c      	ldr	r0, [pc, #240]	; (8000eb4 <main+0x374>)
 8000dc2:	f003 fcf3 	bl	80047ac <HAL_GPIO_WritePin>
						  HAL_Delay(100);
 8000dc6:	2064      	movs	r0, #100	; 0x64
 8000dc8:	f001 f99e 	bl	8002108 <HAL_Delay>
						  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==0)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	483a      	ldr	r0, [pc, #232]	; (8000eb8 <main+0x378>)
 8000dd0:	f003 fcd4 	bl	800477c <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d120      	bne.n	8000e1c <main+0x2dc>
							  {
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de0:	4835      	ldr	r0, [pc, #212]	; (8000eb8 <main+0x378>)
 8000de2:	f003 fce3 	bl	80047ac <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	4834      	ldr	r0, [pc, #208]	; (8000ebc <main+0x37c>)
 8000dec:	f003 fcde 	bl	80047ac <HAL_GPIO_WritePin>
							  htim1.Instance->CCR1=RxData[0];
 8000df0:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <main+0x36c>)
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <main+0x370>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
							  htim1.Instance->CCR2=RxData[0];
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <main+0x36c>)
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <main+0x370>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
							  if(RxData[0]>=100)
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <main+0x36c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b63      	cmp	r3, #99	; 0x63
 8000e0a:	d907      	bls.n	8000e1c <main+0x2dc>
							  	  {
							  		  htim1.Instance->CCR1=99;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <main+0x370>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2263      	movs	r2, #99	; 0x63
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
							  		  htim1.Instance->CCR2=99;
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <main+0x370>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2263      	movs	r2, #99	; 0x63
 8000e1a:	639a      	str	r2, [r3, #56]	; 0x38
							  	  }
							  }
						  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)==1)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4826      	ldr	r0, [pc, #152]	; (8000eb8 <main+0x378>)
 8000e20:	f003 fcac 	bl	800477c <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d120      	bne.n	8000e6c <main+0x32c>
							  {
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e30:	4821      	ldr	r0, [pc, #132]	; (8000eb8 <main+0x378>)
 8000e32:	f003 fcbb 	bl	80047ac <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4820      	ldr	r0, [pc, #128]	; (8000ebc <main+0x37c>)
 8000e3c:	f003 fcb6 	bl	80047ac <HAL_GPIO_WritePin>
							  htim1.Instance->CCR1=RxData[0];
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <main+0x36c>)
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <main+0x370>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
							  htim1.Instance->CCR2=RxData[0];
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <main+0x36c>)
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <main+0x370>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38
							  if(RxData[0]>=100)
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <main+0x36c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b63      	cmp	r3, #99	; 0x63
 8000e5a:	d907      	bls.n	8000e6c <main+0x32c>
							  	  {
							  		  htim1.Instance->CCR1=99;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <main+0x370>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2263      	movs	r2, #99	; 0x63
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
							  		  htim1.Instance->CCR2=99;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <main+0x370>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2263      	movs	r2, #99	; 0x63
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
							  	  }
							  }
						  // ?��로운 ?��?��?�� ?��?��
						  if(41<=RxData[1]&&RxData[1]<=85)
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <main+0x36c>)
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	2b28      	cmp	r3, #40	; 0x28
 8000e72:	d914      	bls.n	8000e9e <main+0x35e>
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <main+0x36c>)
 8000e76:	785b      	ldrb	r3, [r3, #1]
 8000e78:	2b55      	cmp	r3, #85	; 0x55
 8000e7a:	d810      	bhi.n	8000e9e <main+0x35e>
						  {
							  htim1.Instance->CCR3 = 90;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <main+0x370>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	225a      	movs	r2, #90	; 0x5a
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8a:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <main+0x374>)
 8000e8c:	f003 fc8e 	bl	80047ac <HAL_GPIO_WritePin>
							  HAL_Delay(200);
 8000e90:	20c8      	movs	r0, #200	; 0xc8
 8000e92:	f001 f939 	bl	8002108 <HAL_Delay>
							  htim1.Instance->CCR3 = 0;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <main+0x370>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	63da      	str	r2, [r3, #60]	; 0x3c
					  while (RxData[1] > 85)
 8000e9e:	4b03      	ldr	r3, [pc, #12]	; (8000eac <main+0x36c>)
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	2b55      	cmp	r3, #85	; 0x55
 8000ea4:	f63f af7c 	bhi.w	8000da0 <main+0x260>
	  if (isDataAvailable(2) == 1)
 8000ea8:	e681      	b.n	8000bae <main+0x6e>
 8000eaa:	bf00      	nop
 8000eac:	24000364 	.word	0x24000364
 8000eb0:	24000284 	.word	0x24000284
 8000eb4:	58021800 	.word	0x58021800
 8000eb8:	58021000 	.word	0x58021000
 8000ebc:	58020000 	.word	0x58020000

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09c      	sub	sp, #112	; 0x70
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	224c      	movs	r2, #76	; 0x4c
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f00a fa16 	bl	800b300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00a fa10 	bl	800b300 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ee0:	2004      	movs	r0, #4
 8000ee2:	f003 fc7d 	bl	80047e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <SystemClock_Config+0xe4>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4a2d      	ldr	r2, [pc, #180]	; (8000fa4 <SystemClock_Config+0xe4>)
 8000ef0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef4:	6193      	str	r3, [r2, #24]
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <SystemClock_Config+0xe4>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f02:	bf00      	nop
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <SystemClock_Config+0xe4>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f10:	d1f8      	bne.n	8000f04 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <SystemClock_Config+0xe8>)
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <SystemClock_Config+0xe8>)
 8000f18:	f023 0303 	bic.w	r3, r3, #3
 8000f1c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f26:	2340      	movs	r3, #64	; 0x40
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f32:	2304      	movs	r3, #4
 8000f34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f36:	2308      	movs	r3, #8
 8000f38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f46:	230c      	movs	r3, #12
 8000f48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fc9c 	bl	8004894 <HAL_RCC_OscConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f62:	f000 fcb7 	bl	80018d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f66:	233f      	movs	r3, #63	; 0x3f
 8000f68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f7a:	2340      	movs	r3, #64	; 0x40
 8000f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f84:	2340      	movs	r3, #64	; 0x40
 8000f86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 f885 	bl	800509c <HAL_RCC_ClockConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000f98:	f000 fc9c 	bl	80018d4 <Error_Handler>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3770      	adds	r7, #112	; 0x70
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	58024800 	.word	0x58024800
 8000fa8:	58024400 	.word	0x58024400

08000fac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <MX_ADC1_Init+0xe4>)
 8000fd2:	4a30      	ldr	r2, [pc, #192]	; (8001094 <MX_ADC1_Init+0xe8>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_ADC1_Init+0xe4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_ADC1_Init+0xe4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <MX_ADC1_Init+0xe4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <MX_ADC1_Init+0xe4>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_ADC1_Init+0xe4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_ADC1_Init+0xe4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <MX_ADC1_Init+0xe4>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <MX_ADC1_Init+0xe4>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_ADC1_Init+0xe4>)
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_ADC1_Init+0xe4>)
 800100e:	2200      	movs	r2, #0
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC1_Init+0xe4>)
 8001014:	2200      	movs	r2, #0
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0xe4>)
 800101a:	2200      	movs	r2, #0
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC1_Init+0xe4>)
 8001020:	2200      	movs	r2, #0
 8001022:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0xe4>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	4818      	ldr	r0, [pc, #96]	; (8001090 <MX_ADC1_Init+0xe4>)
 800102e:	f001 fa1b 	bl	8002468 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001038:	f000 fc4c 	bl	80018d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <MX_ADC1_Init+0xe4>)
 8001048:	f001 ff40 	bl	8002ecc <HAL_ADCEx_MultiModeConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001052:	f000 fc3f 	bl	80018d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_ADC1_Init+0xec>)
 8001058:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105a:	2306      	movs	r3, #6
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001062:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001066:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0xe4>)
 800107a:	f001 fb4f 	bl	800271c <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001084:	f000 fc26 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	24000140 	.word	0x24000140
 8001094:	40022000 	.word	0x40022000
 8001098:	08600004 	.word	0x08600004

0800109c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010a0:	4b56      	ldr	r3, [pc, #344]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010a2:	4a57      	ldr	r2, [pc, #348]	; (8001200 <MX_FDCAN1_Init+0x164>)
 80010a4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80010a6:	4b55      	ldr	r3, [pc, #340]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010ae:	4b53      	ldr	r3, [pc, #332]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80010b4:	4b51      	ldr	r3, [pc, #324]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80010ba:	4b50      	ldr	r3, [pc, #320]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010bc:	2200      	movs	r2, #0
 80010be:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80010c0:	4b4e      	ldr	r3, [pc, #312]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80010c6:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80010cc:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80010d2:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010d4:	2205      	movs	r2, #5
 80010d6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80010d8:	4b48      	ldr	r3, [pc, #288]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010da:	2202      	movs	r2, #2
 80010dc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010de:	4b47      	ldr	r3, [pc, #284]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80010e4:	4b45      	ldr	r3, [pc, #276]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010e6:	2204      	movs	r2, #4
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010ec:	2205      	movs	r2, #5
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80010f0:	4b42      	ldr	r3, [pc, #264]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80010fc:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80010fe:	2201      	movs	r2, #1
 8001100:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001102:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <MX_FDCAN1_Init+0x160>)
 8001104:	2200      	movs	r2, #0
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <MX_FDCAN1_Init+0x160>)
 800110a:	2201      	movs	r2, #1
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <MX_FDCAN1_Init+0x160>)
 8001110:	2204      	movs	r2, #4
 8001112:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001114:	4b39      	ldr	r3, [pc, #228]	; (80011fc <MX_FDCAN1_Init+0x160>)
 8001116:	2200      	movs	r2, #0
 8001118:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <MX_FDCAN1_Init+0x160>)
 800111c:	2204      	movs	r2, #4
 800111e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <MX_FDCAN1_Init+0x160>)
 8001122:	2201      	movs	r2, #1
 8001124:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001126:	4b35      	ldr	r3, [pc, #212]	; (80011fc <MX_FDCAN1_Init+0x160>)
 8001128:	2204      	movs	r2, #4
 800112a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800112c:	4b33      	ldr	r3, [pc, #204]	; (80011fc <MX_FDCAN1_Init+0x160>)
 800112e:	2200      	movs	r2, #0
 8001130:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <MX_FDCAN1_Init+0x160>)
 8001134:	2200      	movs	r2, #0
 8001136:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001138:	4b30      	ldr	r3, [pc, #192]	; (80011fc <MX_FDCAN1_Init+0x160>)
 800113a:	2200      	movs	r2, #0
 800113c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <MX_FDCAN1_Init+0x160>)
 8001140:	2200      	movs	r2, #0
 8001142:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <MX_FDCAN1_Init+0x160>)
 8001146:	2204      	movs	r2, #4
 8001148:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800114a:	482c      	ldr	r0, [pc, #176]	; (80011fc <MX_FDCAN1_Init+0x160>)
 800114c:	f002 f86a 	bl	8003224 <HAL_FDCAN_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8001156:	f000 fbbd 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <MX_FDCAN1_Init+0x168>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
        sFilterConfig.FilterIndex = 0;
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <MX_FDCAN1_Init+0x168>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
        sFilterConfig.FilterType = FDCAN_FILTER_MASK; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <MX_FDCAN1_Init+0x168>)
 8001168:	2202      	movs	r2, #2
 800116a:	609a      	str	r2, [r3, #8]
        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_FDCAN1_Init+0x168>)
 800116e:	2201      	movs	r2, #1
 8001170:	60da      	str	r2, [r3, #12]
        sFilterConfig.FilterID1 = 0; // ID Node2
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <MX_FDCAN1_Init+0x168>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
        sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_FDCAN1_Init+0x168>)
 800117a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800117e:	615a      	str	r2, [r3, #20]
        sFilterConfig.RxBufferIndex = 0;
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_FDCAN1_Init+0x168>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
        //HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001186:	491f      	ldr	r1, [pc, #124]	; (8001204 <MX_FDCAN1_Init+0x168>)
 8001188:	481c      	ldr	r0, [pc, #112]	; (80011fc <MX_FDCAN1_Init+0x160>)
 800118a:	f002 fa2d 	bl	80035e8 <HAL_FDCAN_ConfigFilter>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_FDCAN1_Init+0xfc>
               {
                  Error_Handler();
 8001194:	f000 fb9e 	bl	80018d4 <Error_Handler>
               }
        if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001198:	4818      	ldr	r0, [pc, #96]	; (80011fc <MX_FDCAN1_Init+0x160>)
 800119a:	f002 fa9b 	bl	80036d4 <HAL_FDCAN_Start>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_FDCAN1_Init+0x10c>
              {
                Error_Handler();
 80011a4:	f000 fb96 	bl	80018d4 <Error_Handler>
              }

            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80011a8:	2200      	movs	r2, #0
 80011aa:	2101      	movs	r1, #1
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_FDCAN1_Init+0x160>)
 80011ae:	f002 fc2b 	bl	8003a08 <HAL_FDCAN_ActivateNotification>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_FDCAN1_Init+0x120>
              {
                /* Notification Error */
                Error_Handler();
 80011b8:	f000 fb8c 	bl	80018d4 <Error_Handler>
              }

            TxHeader.Identifier = 0x33;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_FDCAN1_Init+0x16c>)
 80011be:	2233      	movs	r2, #51	; 0x33
 80011c0:	601a      	str	r2, [r3, #0]
            TxHeader.IdType = FDCAN_STANDARD_ID;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_FDCAN1_Init+0x16c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
            TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_FDCAN1_Init+0x16c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
            TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_FDCAN1_Init+0x16c>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011d4:	60da      	str	r2, [r3, #12]
            TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_FDCAN1_Init+0x16c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
            TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <MX_FDCAN1_Init+0x16c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
            TxHeader.FDFormat = FDCAN_FD_CAN;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_FDCAN1_Init+0x16c>)
 80011e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011e8:	619a      	str	r2, [r3, #24]
            TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <MX_FDCAN1_Init+0x16c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
            TxHeader.MessageMarker = 0x0;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <MX_FDCAN1_Init+0x16c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]



  /* USER CODE END FDCAN1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240001a8 	.word	0x240001a8
 8001200:	4000a000 	.word	0x4000a000
 8001204:	24000034 	.word	0x24000034
 8001208:	240003d0 	.word	0x240003d0

0800120c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001212:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <MX_SPI1_Init+0xa8>)
 8001214:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001218:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800121c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001226:	2207      	movs	r2, #7
 8001228:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MX_SPI1_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001238:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800123c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001240:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001244:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_SPI1_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_SPI1_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_SPI1_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <MX_SPI1_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_SPI1_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_SPI1_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_SPI1_Init+0xa4>)
 800129e:	f006 fb33 	bl	8007908 <HAL_SPI_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80012a8:	f000 fb14 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	240002dc 	.word	0x240002dc
 80012b4:	40013000 	.word	0x40013000

080012b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b09c      	sub	sp, #112	; 0x70
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2234      	movs	r2, #52	; 0x34
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f00a f804 	bl	800b300 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f8:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <MX_TIM1_Init+0x180>)
 80012fa:	4a50      	ldr	r2, [pc, #320]	; (800143c <MX_TIM1_Init+0x184>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65;
 80012fe:	4b4e      	ldr	r3, [pc, #312]	; (8001438 <MX_TIM1_Init+0x180>)
 8001300:	2241      	movs	r2, #65	; 0x41
 8001302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <MX_TIM1_Init+0x180>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800130a:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <MX_TIM1_Init+0x180>)
 800130c:	2264      	movs	r2, #100	; 0x64
 800130e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b49      	ldr	r3, [pc, #292]	; (8001438 <MX_TIM1_Init+0x180>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001316:	4b48      	ldr	r3, [pc, #288]	; (8001438 <MX_TIM1_Init+0x180>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b46      	ldr	r3, [pc, #280]	; (8001438 <MX_TIM1_Init+0x180>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001322:	4845      	ldr	r0, [pc, #276]	; (8001438 <MX_TIM1_Init+0x180>)
 8001324:	f007 fbaf 	bl	8008a86 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800132e:	f000 fad1 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800133c:	4619      	mov	r1, r3
 800133e:	483e      	ldr	r0, [pc, #248]	; (8001438 <MX_TIM1_Init+0x180>)
 8001340:	f007 ff9c 	bl	800927c <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800134a:	f000 fac3 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800134e:	483a      	ldr	r0, [pc, #232]	; (8001438 <MX_TIM1_Init+0x180>)
 8001350:	f007 fbf0 	bl	8008b34 <HAL_TIM_PWM_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800135a:	f000 fabb 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800136e:	4619      	mov	r1, r3
 8001370:	4831      	ldr	r0, [pc, #196]	; (8001438 <MX_TIM1_Init+0x180>)
 8001372:	f008 fce1 	bl	8009d38 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800137c:	f000 faaa 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001380:	2360      	movs	r3, #96	; 0x60
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8001384:	2332      	movs	r3, #50	; 0x32
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001388:	2300      	movs	r3, #0
 800138a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800138c:	2300      	movs	r3, #0
 800138e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4824      	ldr	r0, [pc, #144]	; (8001438 <MX_TIM1_Init+0x180>)
 80013a6:	f007 fe55 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80013b0:	f000 fa90 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013b8:	2204      	movs	r2, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	481e      	ldr	r0, [pc, #120]	; (8001438 <MX_TIM1_Init+0x180>)
 80013be:	f007 fe49 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80013c8:	f000 fa84 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d0:	2208      	movs	r2, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	4818      	ldr	r0, [pc, #96]	; (8001438 <MX_TIM1_Init+0x180>)
 80013d6:	f007 fe3d 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80013e0:	f000 fa78 	bl	80018d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM1_Init+0x180>)
 800141a:	f008 fd1b 	bl	8009e54 <HAL_TIMEx_ConfigBreakDeadTime>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001424:	f000 fa56 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM1_Init+0x180>)
 800142a:	f000 fc09 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 800142e:	bf00      	nop
 8001430:	3770      	adds	r7, #112	; 0x70
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	24000284 	.word	0x24000284
 800143c:	40010000 	.word	0x40010000

08001440 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	615a      	str	r2, [r3, #20]
 8001470:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <MX_TIM2_Init+0xe8>)
 8001474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001478:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128-1;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_TIM2_Init+0xe8>)
 800147c:	227f      	movs	r2, #127	; 0x7f
 800147e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_TIM2_Init+0xe8>)
 8001482:	2210      	movs	r2, #16
 8001484:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_TIM2_Init+0xe8>)
 8001488:	f240 32e7 	movw	r2, #999	; 0x3e7
 800148c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_TIM2_Init+0xe8>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_TIM2_Init+0xe8>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149a:	4823      	ldr	r0, [pc, #140]	; (8001528 <MX_TIM2_Init+0xe8>)
 800149c:	f007 faf3 	bl	8008a86 <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014a6:	f000 fa15 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <MX_TIM2_Init+0xe8>)
 80014b8:	f007 fee0 	bl	800927c <HAL_TIM_ConfigClockSource>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014c2:	f000 fa07 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM2_Init+0xe8>)
 80014c8:	f007 fb34 	bl	8008b34 <HAL_TIM_PWM_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014d2:	f000 f9ff 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <MX_TIM2_Init+0xe8>)
 80014e6:	f008 fc27 	bl	8009d38 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014f0:	f000 f9f0 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f4:	2360      	movs	r3, #96	; 0x60
 80014f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM2_Init+0xe8>)
 800150c:	f007 fda2 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001516:	f000 f9dd 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM2_Init+0xe8>)
 800151c:	f000 fb90 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 8001520:	bf00      	nop
 8001522:	3738      	adds	r7, #56	; 0x38
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	24000384 	.word	0x24000384

0800152c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <MX_TIM3_Init+0xe4>)
 8001560:	4a2c      	ldr	r2, [pc, #176]	; (8001614 <MX_TIM3_Init+0xe8>)
 8001562:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <MX_TIM3_Init+0xe4>)
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <MX_TIM3_Init+0xe4>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_TIM3_Init+0xe4>)
 8001572:	2264      	movs	r2, #100	; 0x64
 8001574:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <MX_TIM3_Init+0xe4>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <MX_TIM3_Init+0xe4>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001582:	4823      	ldr	r0, [pc, #140]	; (8001610 <MX_TIM3_Init+0xe4>)
 8001584:	f007 fa7f 	bl	8008a86 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800158e:	f000 f9a1 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159c:	4619      	mov	r1, r3
 800159e:	481c      	ldr	r0, [pc, #112]	; (8001610 <MX_TIM3_Init+0xe4>)
 80015a0:	f007 fe6c 	bl	800927c <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015aa:	f000 f993 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015ae:	4818      	ldr	r0, [pc, #96]	; (8001610 <MX_TIM3_Init+0xe4>)
 80015b0:	f007 fac0 	bl	8008b34 <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015ba:	f000 f98b 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <MX_TIM3_Init+0xe4>)
 80015ce:	f008 fbb3 	bl	8009d38 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015d8:	f000 f97c 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	; 0x60
 80015de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80015e0:	2332      	movs	r3, #50	; 0x32
 80015e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015e4:	2302      	movs	r3, #2
 80015e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <MX_TIM3_Init+0xe4>)
 80015f4:	f007 fd2e 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015fe:	f000 f969 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <MX_TIM3_Init+0xe4>)
 8001604:	f000 fb1c 	bl	8001c40 <HAL_TIM_MspPostInit>

}
 8001608:	bf00      	nop
 800160a:	3738      	adds	r7, #56	; 0x38
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	240000f4 	.word	0x240000f4
 8001614:	40000400 	.word	0x40000400

08001618 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <MX_USART3_UART_Init+0x94>)
 8001620:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001660:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001662:	f008 fcb5 	bl	8009fd0 <HAL_UART_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800166c:	f000 f932 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001670:	2100      	movs	r1, #0
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001674:	f009 fd48 	bl	800b108 <HAL_UARTEx_SetTxFifoThreshold>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800167e:	f000 f929 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001682:	2100      	movs	r1, #0
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001686:	f009 fd7d 	bl	800b184 <HAL_UARTEx_SetRxFifoThreshold>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001690:	f000 f920 	bl	80018d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001694:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_USART3_UART_Init+0x90>)
 8001696:	f009 fcfe 	bl	800b096 <HAL_UARTEx_DisableFifoMode>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016a0:	f000 f918 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	24000054 	.word	0x24000054
 80016ac:	40004800 	.word	0x40004800

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	; 0x38
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c6:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <MX_GPIO_Init+0x208>)
 80016c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016cc:	4a7a      	ldr	r2, [pc, #488]	; (80018b8 <MX_GPIO_Init+0x208>)
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016d6:	4b78      	ldr	r3, [pc, #480]	; (80018b8 <MX_GPIO_Init+0x208>)
 80016d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b74      	ldr	r3, [pc, #464]	; (80018b8 <MX_GPIO_Init+0x208>)
 80016e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ea:	4a73      	ldr	r2, [pc, #460]	; (80018b8 <MX_GPIO_Init+0x208>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016f4:	4b70      	ldr	r3, [pc, #448]	; (80018b8 <MX_GPIO_Init+0x208>)
 80016f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001704:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001708:	4a6b      	ldr	r2, [pc, #428]	; (80018b8 <MX_GPIO_Init+0x208>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001712:	4b69      	ldr	r3, [pc, #420]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001714:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001722:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001726:	4a64      	ldr	r2, [pc, #400]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001730:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001732:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800173e:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001744:	4a5c      	ldr	r2, [pc, #368]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800174e:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175c:	4b56      	ldr	r3, [pc, #344]	; (80018b8 <MX_GPIO_Init+0x208>)
 800175e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001762:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800176c:	4b52      	ldr	r3, [pc, #328]	; (80018b8 <MX_GPIO_Init+0x208>)
 800176e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <MX_GPIO_Init+0x208>)
 800177c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001780:	4a4d      	ldr	r2, [pc, #308]	; (80018b8 <MX_GPIO_Init+0x208>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800178a:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <MX_GPIO_Init+0x208>)
 800178c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001798:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <MX_GPIO_Init+0x208>)
 800179a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800179e:	4a46      	ldr	r2, [pc, #280]	; (80018b8 <MX_GPIO_Init+0x208>)
 80017a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017a8:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <MX_GPIO_Init+0x208>)
 80017aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 7184 	mov.w	r1, #264	; 0x108
 80017bc:	483f      	ldr	r0, [pc, #252]	; (80018bc <MX_GPIO_Init+0x20c>)
 80017be:	f002 fff5 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2164      	movs	r1, #100	; 0x64
 80017c6:	483e      	ldr	r0, [pc, #248]	; (80018c0 <MX_GPIO_Init+0x210>)
 80017c8:	f002 fff0 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d2:	483c      	ldr	r0, [pc, #240]	; (80018c4 <MX_GPIO_Init+0x214>)
 80017d4:	f002 ffea 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f24c 0101 	movw	r1, #49153	; 0xc001
 80017de:	483a      	ldr	r0, [pc, #232]	; (80018c8 <MX_GPIO_Init+0x218>)
 80017e0:	f002 ffe4 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ce_Pin|csn_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80017ea:	4838      	ldr	r0, [pc, #224]	; (80018cc <MX_GPIO_Init+0x21c>)
 80017ec:	f002 ffde 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IRQ_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80017f6:	4836      	ldr	r0, [pc, #216]	; (80018d0 <MX_GPIO_Init+0x220>)
 80017f8:	f002 ffd8 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 80017fc:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4829      	ldr	r0, [pc, #164]	; (80018bc <MX_GPIO_Init+0x20c>)
 8001816:	f002 fe01 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	4823      	ldr	r0, [pc, #140]	; (80018c0 <MX_GPIO_Init+0x210>)
 8001832:	f002 fdf3 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	481d      	ldr	r0, [pc, #116]	; (80018c4 <MX_GPIO_Init+0x214>)
 8001850:	f002 fde4 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8001854:	f24c 0301 	movw	r3, #49153	; 0xc001
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	4816      	ldr	r0, [pc, #88]	; (80018c8 <MX_GPIO_Init+0x218>)
 800186e:	f002 fdd5 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : ce_Pin csn_Pin */
  GPIO_InitStruct.Pin = ce_Pin|csn_Pin;
 8001872:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	4810      	ldr	r0, [pc, #64]	; (80018cc <MX_GPIO_Init+0x21c>)
 800188c:	f002 fdc6 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin PG14 */
  GPIO_InitStruct.Pin = IRQ_Pin|GPIO_PIN_14;
 8001890:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a6:	4619      	mov	r1, r3
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <MX_GPIO_Init+0x220>)
 80018aa:	f002 fdb7 	bl	800441c <HAL_GPIO_Init>

}
 80018ae:	bf00      	nop
 80018b0:	3738      	adds	r7, #56	; 0x38
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58020000 	.word	0x58020000
 80018c0:	58020400 	.word	0x58020400
 80018c4:	58021400 	.word	0x58021400
 80018c8:	58021000 	.word	0x58021000
 80018cc:	58020c00 	.word	0x58020c00
 80018d0:	58021800 	.word	0x58021800

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <Error_Handler+0x8>
	...

080018e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_MspInit+0x30>)
 80018e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80018ec:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_MspInit+0x30>)
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_MspInit+0x30>)
 80018f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	58024400 	.word	0x58024400

08001914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0b8      	sub	sp, #224	; 0xe0
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	22b8      	movs	r2, #184	; 0xb8
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f009 fce3 	bl	800b300 <memset>
  if(hadc->Instance==ADC1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a2a      	ldr	r2, [pc, #168]	; (80019e8 <HAL_ADC_MspInit+0xd4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d14d      	bne.n	80019e0 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001944:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001948:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 800194a:	2320      	movs	r3, #32
 800194c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 800194e:	2381      	movs	r3, #129	; 0x81
 8001950:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001952:	2302      	movs	r3, #2
 8001954:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001956:	2302      	movs	r3, #2
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800195a:	2302      	movs	r3, #2
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800195e:	2340      	movs	r3, #64	; 0x40
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001962:	2300      	movs	r3, #0
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4618      	mov	r0, r3
 8001976:	f003 ff1d 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001980:	f7ff ffa8 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_ADC_MspInit+0xd8>)
 8001986:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_ADC_MspInit+0xd8>)
 800198c:	f043 0320 	orr.w	r3, r3, #32
 8001990:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_ADC_MspInit+0xd8>)
 8001996:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_ADC_MspInit+0xd8>)
 80019a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019a8:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_ADC_MspInit+0xd8>)
 80019aa:	f043 0320 	orr.w	r3, r3, #32
 80019ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_ADC_MspInit+0xd8>)
 80019b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019b8:	f003 0320 	and.w	r3, r3, #32
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_ADC_MspInit+0xdc>)
 80019dc:	f002 fd1e 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	37e0      	adds	r7, #224	; 0xe0
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40022000 	.word	0x40022000
 80019ec:	58024400 	.word	0x58024400
 80019f0:	58021400 	.word	0x58021400

080019f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b0b8      	sub	sp, #224	; 0xe0
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	22b8      	movs	r2, #184	; 0xb8
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f009 fc73 	bl	800b300 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <HAL_FDCAN_MspInit+0xd0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d14b      	bne.n	8001abc <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001a2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 febc 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001a42:	f7ff ff47 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_FDCAN_MspInit+0xd4>)
 8001a48:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <HAL_FDCAN_MspInit+0xd4>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_FDCAN_MspInit+0xd4>)
 8001a58:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_FDCAN_MspInit+0xd4>)
 8001a66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_FDCAN_MspInit+0xd4>)
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_FDCAN_MspInit+0xd4>)
 8001a76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a82:	2303      	movs	r3, #3
 8001a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4809      	ldr	r0, [pc, #36]	; (8001acc <HAL_FDCAN_MspInit+0xd8>)
 8001aa8:	f002 fcb8 	bl	800441c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2013      	movs	r0, #19
 8001ab2:	f001 fb82 	bl	80031ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001ab6:	2013      	movs	r0, #19
 8001ab8:	f001 fb99 	bl	80031ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	37e0      	adds	r7, #224	; 0xe0
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	4000a000 	.word	0x4000a000
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	58020c00 	.word	0x58020c00

08001ad0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0b8      	sub	sp, #224	; 0xe0
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	22b8      	movs	r2, #184	; 0xb8
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f009 fc05 	bl	800b300 <memset>
  if(hspi->Instance==SPI1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <HAL_SPI_MspInit+0xbc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d141      	bne.n	8001b84 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fe50 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001b1a:	f7ff fedb 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_SPI_MspInit+0xc0>)
 8001b20:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001b24:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_SPI_MspInit+0xc0>)
 8001b26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b2a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_SPI_MspInit+0xc0>)
 8001b30:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_SPI_MspInit+0xc0>)
 8001b3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <HAL_SPI_MspInit+0xc0>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_SPI_MspInit+0xc0>)
 8001b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b5a:	23e0      	movs	r3, #224	; 0xe0
 8001b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b72:	2305      	movs	r3, #5
 8001b74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_SPI_MspInit+0xc4>)
 8001b80:	f002 fc4c 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b84:	bf00      	nop
 8001b86:	37e0      	adds	r7, #224	; 0xe0
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40013000 	.word	0x40013000
 8001b90:	58024400 	.word	0x58024400
 8001b94:	58020000 	.word	0x58020000

08001b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <HAL_TIM_Base_MspInit+0x9c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10f      	bne.n	8001bca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_TIM_Base_MspInit+0xa0>)
 8001bac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001bb0:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <HAL_TIM_Base_MspInit+0xa0>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001bba:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_TIM_Base_MspInit+0xa0>)
 8001bbc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bc8:	e030      	b.n	8001c2c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd2:	d117      	bne.n	8001c04 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_TIM_Base_MspInit+0xa0>)
 8001bd6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_TIM_Base_MspInit+0xa0>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_TIM_Base_MspInit+0xa0>)
 8001be6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	201c      	movs	r0, #28
 8001bf8:	f001 fadf 	bl	80031ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bfc:	201c      	movs	r0, #28
 8001bfe:	f001 faf6 	bl	80031ee <HAL_NVIC_EnableIRQ>
}
 8001c02:	e013      	b.n	8001c2c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <HAL_TIM_Base_MspInit+0xa4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_TIM_Base_MspInit+0xa0>)
 8001c10:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001c14:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_TIM_Base_MspInit+0xa0>)
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_TIM_Base_MspInit+0xa0>)
 8001c20:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40010000 	.word	0x40010000
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	40000400 	.word	0x40000400

08001c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a38      	ldr	r2, [pc, #224]	; (8001d40 <HAL_TIM_MspPostInit+0x100>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d120      	bne.n	8001ca4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c68:	4a36      	ldr	r2, [pc, #216]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c72:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001c74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001c80:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	482a      	ldr	r0, [pc, #168]	; (8001d48 <HAL_TIM_MspPostInit+0x108>)
 8001c9e:	f002 fbbd 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ca2:	e048      	b.n	8001d36 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d11f      	bne.n	8001cee <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001cb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001cc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4819      	ldr	r0, [pc, #100]	; (8001d4c <HAL_TIM_MspPostInit+0x10c>)
 8001ce8:	f002 fb98 	bl	800441c <HAL_GPIO_Init>
}
 8001cec:	e023      	b.n	8001d36 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_TIM_MspPostInit+0x110>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d11e      	bne.n	8001d36 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cfe:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_TIM_MspPostInit+0x104>)
 8001d0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d16:	2340      	movs	r3, #64	; 0x40
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d26:	2302      	movs	r3, #2
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4808      	ldr	r0, [pc, #32]	; (8001d54 <HAL_TIM_MspPostInit+0x114>)
 8001d32:	f002 fb73 	bl	800441c <HAL_GPIO_Init>
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40010000 	.word	0x40010000
 8001d44:	58024400 	.word	0x58024400
 8001d48:	58021000 	.word	0x58021000
 8001d4c:	58020000 	.word	0x58020000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	58020800 	.word	0x58020800

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0b8      	sub	sp, #224	; 0xe0
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	22b8      	movs	r2, #184	; 0xb8
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f009 fac1 	bl	800b300 <memset>
  if(huart->Instance==USART3)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a25      	ldr	r2, [pc, #148]	; (8001e18 <HAL_UART_MspInit+0xc0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d142      	bne.n	8001e0e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fd0c 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001da2:	f7ff fd97 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_UART_MspInit+0xc4>)
 8001da8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001dac:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_UART_MspInit+0xc4>)
 8001dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_UART_MspInit+0xc4>)
 8001db8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_UART_MspInit+0xc4>)
 8001dc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_UART_MspInit+0xc4>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_UART_MspInit+0xc4>)
 8001dd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001de2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001de6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <HAL_UART_MspInit+0xc8>)
 8001e0a:	f002 fb07 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	37e0      	adds	r7, #224	; 0xe0
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40004800 	.word	0x40004800
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58020c00 	.word	0x58020c00

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <NMI_Handler+0x4>

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e70:	f000 f92a 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <FDCAN1_IT0_IRQHandler+0x10>)
 8001e7e:	f001 fe3d 	bl	8003afc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	240001a8 	.word	0x240001a8

08001e8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <TIM2_IRQHandler+0x10>)
 8001e92:	f006 ffbf 	bl	8008e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	24000384 	.word	0x24000384

08001ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <SystemInit+0xd0>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	4a31      	ldr	r2, [pc, #196]	; (8001f70 <SystemInit+0xd0>)
 8001eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <SystemInit+0xd4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d807      	bhi.n	8001ed0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <SystemInit+0xd4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 030f 	bic.w	r3, r3, #15
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <SystemInit+0xd4>)
 8001eca:	f043 0303 	orr.w	r3, r3, #3
 8001ece:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <SystemInit+0xd8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <SystemInit+0xd8>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <SystemInit+0xd8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <SystemInit+0xd8>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4924      	ldr	r1, [pc, #144]	; (8001f78 <SystemInit+0xd8>)
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <SystemInit+0xdc>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <SystemInit+0xd4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <SystemInit+0xd4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 030f 	bic.w	r3, r3, #15
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <SystemInit+0xd4>)
 8001f04:	f043 0303 	orr.w	r3, r3, #3
 8001f08:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <SystemInit+0xd8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <SystemInit+0xd8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <SystemInit+0xd8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <SystemInit+0xd8>)
 8001f1e:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <SystemInit+0xe0>)
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <SystemInit+0xd8>)
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <SystemInit+0xe4>)
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <SystemInit+0xd8>)
 8001f2a:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <SystemInit+0xe8>)
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <SystemInit+0xd8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <SystemInit+0xd8>)
 8001f36:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <SystemInit+0xe8>)
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <SystemInit+0xd8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <SystemInit+0xd8>)
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <SystemInit+0xe8>)
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <SystemInit+0xd8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <SystemInit+0xd8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <SystemInit+0xd8>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <SystemInit+0xd8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <SystemInit+0xec>)
 8001f60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f64:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00
 8001f74:	52002000 	.word	0x52002000
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f80:	02020200 	.word	0x02020200
 8001f84:	01ff0000 	.word	0x01ff0000
 8001f88:	01010280 	.word	0x01010280
 8001f8c:	52004000 	.word	0x52004000

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f94:	f7ff ff84 	bl	8001ea0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f9a:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb0:	4c0a      	ldr	r4, [pc, #40]	; (8001fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f009 f96d 	bl	800b29c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7fe fdbd 	bl	8000b40 <main>
  bx  lr
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001fcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fd0:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001fd4:	0800b3dc 	.word	0x0800b3dc
  ldr r2, =_sbss
 8001fd8:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001fdc:	24000420 	.word	0x24000420

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fea:	2003      	movs	r0, #3
 8001fec:	f001 f8da 	bl	80031a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ff0:	f003 fa0a 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_Init+0x68>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	4913      	ldr	r1, [pc, #76]	; (8002050 <HAL_Init+0x6c>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_Init+0x68>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_Init+0x6c>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <HAL_Init+0x70>)
 8002026:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002028:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <HAL_Init+0x74>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800202e:	200f      	movs	r0, #15
 8002030:	f000 f814 	bl	800205c <HAL_InitTick>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e002      	b.n	8002044 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800203e:	f7ff fc4f 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	58024400 	.word	0x58024400
 8002050:	0800b384 	.word	0x0800b384
 8002054:	2400000c 	.word	0x2400000c
 8002058:	24000008 	.word	0x24000008

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_InitTick+0x60>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e021      	b.n	80020b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_InitTick+0x64>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_InitTick+0x60>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f001 f8bf 	bl	800320a <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f001 f889 	bl	80031ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x68>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	24000014 	.word	0x24000014
 80020c0:	24000008 	.word	0x24000008
 80020c4:	24000010 	.word	0x24000010

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	24000014 	.word	0x24000014
 80020ec:	2400041c 	.word	0x2400041c

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2400041c 	.word	0x2400041c

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	24000014 	.word	0x24000014

08002150 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3360      	adds	r3, #96	; 0x60
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80021ec:	bf00      	nop
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	431a      	orrs	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	611a      	str	r2, [r3, #16]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800222a:	b480      	push	{r7}
 800222c:	b087      	sub	sp, #28
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3360      	adds	r3, #96	; 0x60
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	431a      	orrs	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	601a      	str	r2, [r3, #0]
  }
}
 8002254:	bf00      	nop
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3330      	adds	r3, #48	; 0x30
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	4413      	add	r3, r2
 800227e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	211f      	movs	r1, #31
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	f003 011f 	and.w	r1, r3, #31
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	431a      	orrs	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022ac:	bf00      	nop
 80022ae:	371c      	adds	r7, #28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3314      	adds	r3, #20
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	0e5b      	lsrs	r3, r3, #25
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	4413      	add	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	0d1b      	lsrs	r3, r3, #20
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2107      	movs	r1, #7
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	401a      	ands	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	0d1b      	lsrs	r3, r3, #20
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0318 	and.w	r3, r3, #24
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002334:	40d9      	lsrs	r1, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	400b      	ands	r3, r1
 800233a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800233e:	431a      	orrs	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	000fffff 	.word	0x000fffff

08002358 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6093      	str	r3, [r2, #8]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	5fffffc0 	.word	0x5fffffc0

0800237c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800238c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002390:	d101      	bne.n	8002396 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	6fffffc0 	.word	0x6fffffc0

080023cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023e0:	d101      	bne.n	80023e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <LL_ADC_IsEnabled+0x18>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <LL_ADC_IsEnabled+0x1a>
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b04      	cmp	r3, #4
 800242c:	d101      	bne.n	8002432 <LL_ADC_REG_IsConversionOngoing+0x18>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b08      	cmp	r3, #8
 8002452:	d101      	bne.n	8002458 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e138      	b.n	80026f4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fa3f 	bl	8001914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff67 	bl	800237c <LL_ADC_IsDeepPowerDownEnabled>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff4d 	bl	8002358 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff82 	bl	80023cc <LL_ADC_IsInternalRegulatorEnabled>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d114      	bne.n	80024f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff66 	bl	80023a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024d8:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_ADC_Init+0x294>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	4a88      	ldr	r2, [pc, #544]	; (8002700 <HAL_ADC_Init+0x298>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	3301      	adds	r3, #1
 80024e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024ea:	e002      	b.n	80024f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f9      	bne.n	80024ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff65 	bl	80023cc <LL_ADC_IsInternalRegulatorEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f043 0210 	orr.w	r2, r3, #16
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff76 	bl	800241a <LL_ADC_REG_IsConversionOngoing>
 800252e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 80d2 	bne.w	80026e2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 80ce 	bne.w	80026e2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff4a 	bl	80023f4 <LL_ADC_IsEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d110      	bne.n	8002588 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002566:	4867      	ldr	r0, [pc, #412]	; (8002704 <HAL_ADC_Init+0x29c>)
 8002568:	f7ff ff44 	bl	80023f4 <LL_ADC_IsEnabled>
 800256c:	4604      	mov	r4, r0
 800256e:	4866      	ldr	r0, [pc, #408]	; (8002708 <HAL_ADC_Init+0x2a0>)
 8002570:	f7ff ff40 	bl	80023f4 <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	4323      	orrs	r3, r4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d105      	bne.n	8002588 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4619      	mov	r1, r3
 8002582:	4862      	ldr	r0, [pc, #392]	; (800270c <HAL_ADC_Init+0x2a4>)
 8002584:	f7ff fde4 	bl	8002150 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7d5b      	ldrb	r3, [r3, #21]
 800258c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002592:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002598:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7f1b      	ldrb	r3, [r3, #28]
 800259e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7f1b      	ldrb	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d106      	bne.n	80025ba <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	045b      	lsls	r3, r3, #17
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_ADC_Init+0x2a8>)
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	69b9      	ldr	r1, [r7, #24]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff13 	bl	800241a <LL_ADC_REG_IsConversionOngoing>
 80025f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff20 	bl	8002440 <LL_ADC_INJ_IsConversionOngoing>
 8002600:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d14a      	bne.n	800269e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d147      	bne.n	800269e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7d1b      	ldrb	r3, [r3, #20]
 8002612:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <HAL_ADC_Init+0x2ac>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	430b      	orrs	r3, r1
 800262e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002636:	2b01      	cmp	r3, #1
 8002638:	d11b      	bne.n	8002672 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	4b34      	ldr	r3, [pc, #208]	; (8002718 <HAL_ADC_Init+0x2b0>)
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800264e:	3a01      	subs	r2, #1
 8002650:	0411      	lsls	r1, r2, #16
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002656:	4311      	orrs	r1, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002662:	430a      	orrs	r2, r1
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	611a      	str	r2, [r3, #16]
 8002670:	e007      	b.n	8002682 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fb25 	bl	8002ce8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d10c      	bne.n	80026c0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	f023 010f 	bic.w	r1, r3, #15
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
 80026be:	e007      	b.n	80026d0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 020f 	bic.w	r2, r2, #15
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f023 0303 	bic.w	r3, r3, #3
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
 80026e0:	e007      	b.n	80026f2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0210 	orr.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3724      	adds	r7, #36	; 0x24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd90      	pop	{r4, r7, pc}
 80026fc:	24000008 	.word	0x24000008
 8002700:	053e2d63 	.word	0x053e2d63
 8002704:	40022000 	.word	0x40022000
 8002708:	40022100 	.word	0x40022100
 800270c:	40022300 	.word	0x40022300
 8002710:	fff0c003 	.word	0xfff0c003
 8002714:	ffffbffc 	.word	0xffffbffc
 8002718:	fc00f81e 	.word	0xfc00f81e

0800271c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b0a1      	sub	sp, #132	; 0x84
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a9a      	ldr	r2, [pc, #616]	; (80029a0 <HAL_ADC_ConfigChannel+0x284>)
 8002736:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x2a>
 8002742:	2302      	movs	r3, #2
 8002744:	e2bc      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x5a4>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fe61 	bl	800241a <LL_ADC_REG_IsConversionOngoing>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 82a1 	bne.w	8002ca2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002768:	2b00      	cmp	r3, #0
 800276a:	d108      	bne.n	800277e <HAL_ADC_ConfigChannel+0x62>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2201      	movs	r2, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	e016      	b.n	80027ac <HAL_ADC_ConfigChannel+0x90>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800278c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800278e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e003      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800279a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	2201      	movs	r2, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	69d1      	ldr	r1, [r2, #28]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f7ff fd4a 	bl	8002260 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fe22 	bl	800241a <LL_ADC_REG_IsConversionOngoing>
 80027d6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fe2f 	bl	8002440 <LL_ADC_INJ_IsConversionOngoing>
 80027e2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 80a0 	bne.w	800292c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 809c 	bne.w	800292c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6819      	ldr	r1, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	461a      	mov	r2, r3
 8002802:	f7ff fd59 	bl	80022b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_ADC_ConfigChannel+0x110>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	e00a      	b.n	8002842 <HAL_ADC_ConfigChannel+0x126>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d027      	beq.n	800289c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6919      	ldr	r1, [r3, #16]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800285a:	f7ff fcad 	bl	80021b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6919      	ldr	r1, [r3, #16]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	7e5b      	ldrb	r3, [r3, #25]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d102      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x158>
 800286e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002872:	e000      	b.n	8002876 <HAL_ADC_ConfigChannel+0x15a>
 8002874:	2300      	movs	r3, #0
 8002876:	461a      	mov	r2, r3
 8002878:	f7ff fcd7 	bl	800222a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6919      	ldr	r1, [r3, #16]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	7e1b      	ldrb	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x176>
 800288c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002890:	e000      	b.n	8002894 <HAL_ADC_ConfigChannel+0x178>
 8002892:	2300      	movs	r3, #0
 8002894:	461a      	mov	r2, r3
 8002896:	f7ff fcaf 	bl	80021f8 <LL_ADC_SetDataRightShift>
 800289a:	e047      	b.n	800292c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	069b      	lsls	r3, r3, #26
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028be:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	069b      	lsls	r3, r3, #26
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d107      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028e2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	069b      	lsls	r3, r3, #26
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d107      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002906:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	069b      	lsls	r3, r3, #26
 8002918:	429a      	cmp	r2, r3
 800291a:	d107      	bne.n	800292c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800292a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fd5f 	bl	80023f4 <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 81bb 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	461a      	mov	r2, r3
 800294c:	f7ff fce0 	bl	8002310 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <HAL_ADC_ConfigChannel+0x284>)
 8002956:	4293      	cmp	r3, r2
 8002958:	f040 8130 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x268>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	3301      	adds	r3, #1
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2b09      	cmp	r3, #9
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e01b      	b.n	80029bc <HAL_ADC_ConfigChannel+0x2a0>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002998:	2b00      	cmp	r3, #0
 800299a:	d103      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800299c:	2320      	movs	r3, #32
 800299e:	e005      	b.n	80029ac <HAL_ADC_ConfigChannel+0x290>
 80029a0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80029a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2b09      	cmp	r3, #9
 80029b4:	bf94      	ite	ls
 80029b6:	2301      	movls	r3, #1
 80029b8:	2300      	movhi	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d079      	beq.n	8002ab4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d107      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x2c0>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	3301      	adds	r3, #1
 80029d4:	069b      	lsls	r3, r3, #26
 80029d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029da:	e015      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x2ec>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80029ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80029ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80029f4:	2320      	movs	r3, #32
 80029f6:	e003      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80029f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d109      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x30c>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	e017      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x33c>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	ea42 0103 	orr.w	r1, r2, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x362>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0e9b      	lsrs	r3, r3, #26
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	051b      	lsls	r3, r3, #20
 8002a7c:	e018      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x394>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002a96:	2320      	movs	r3, #32
 8002a98:	e003      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	e07e      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d107      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x3b4>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	069b      	lsls	r3, r3, #26
 8002aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ace:	e015      	b.n	8002afc <HAL_ADC_ConfigChannel+0x3e0>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	069b      	lsls	r3, r3, #26
 8002af8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x400>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	e017      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x430>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	61bb      	str	r3, [r7, #24]
  return result;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e003      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	ea42 0103 	orr.w	r1, r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10d      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x45c>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b1e      	subs	r3, #30
 8002b70:	051b      	lsls	r3, r3, #20
 8002b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b76:	e01b      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x494>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	60fb      	str	r3, [r7, #12]
  return result;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e003      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 021f 	and.w	r2, r3, #31
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b1e      	subs	r3, #30
 8002baa:	051b      	lsls	r3, r3, #20
 8002bac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	6892      	ldr	r2, [r2, #8]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7ff fb7e 	bl	80022b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da77      	bge.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc4:	4840      	ldr	r0, [pc, #256]	; (8002cc8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002bc6:	f7ff fae9 	bl	800219c <LL_ADC_GetCommonPathInternalCh>
 8002bca:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bcc:	483f      	ldr	r0, [pc, #252]	; (8002ccc <HAL_ADC_ConfigChannel+0x5b0>)
 8002bce:	f7ff fc11 	bl	80023f4 <LL_ADC_IsEnabled>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	483e      	ldr	r0, [pc, #248]	; (8002cd0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002bd6:	f7ff fc0d 	bl	80023f4 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4323      	orrs	r3, r4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d155      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a3b      	ldr	r2, [pc, #236]	; (8002cd4 <HAL_ADC_ConfigChannel+0x5b8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d122      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x516>
 8002bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d11d      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a35      	ldr	r2, [pc, #212]	; (8002cd0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d159      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c06:	4619      	mov	r1, r3
 8002c08:	482f      	ldr	r0, [pc, #188]	; (8002cc8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002c0a:	f7ff fab4 	bl	8002176 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c0e:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_ADC_ConfigChannel+0x5bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	099b      	lsrs	r3, r3, #6
 8002c14:	4a31      	ldr	r2, [pc, #196]	; (8002cdc <HAL_ADC_ConfigChannel+0x5c0>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c22:	e002      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f9      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c30:	e040      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d111      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x544>
 8002c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d131      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c56:	4619      	mov	r1, r3
 8002c58:	481b      	ldr	r0, [pc, #108]	; (8002cc8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002c5a:	f7ff fa8c 	bl	8002176 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c5e:	e029      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d124      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11f      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <HAL_ADC_ConfigChannel+0x5b4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d11a      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c84:	4619      	mov	r1, r3
 8002c86:	4810      	ldr	r0, [pc, #64]	; (8002cc8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002c88:	f7ff fa75 	bl	8002176 <LL_ADC_SetCommonPathInternalCh>
 8002c8c:	e012      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f043 0220 	orr.w	r2, r3, #32
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ca0:	e008      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cbc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3784      	adds	r7, #132	; 0x84
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}
 8002cc8:	40022300 	.word	0x40022300
 8002ccc:	40022000 	.word	0x40022000
 8002cd0:	40022100 	.word	0x40022100
 8002cd4:	cb840000 	.word	0xcb840000
 8002cd8:	24000008 	.word	0x24000008
 8002cdc:	053e2d63 	.word	0x053e2d63
 8002ce0:	bac04000 	.word	0xbac04000
 8002ce4:	cfb80000 	.word	0xcfb80000

08002ce8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002cf0:	4b5f      	ldr	r3, [pc, #380]	; (8002e70 <ADC_ConfigureBoostMode+0x188>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01c      	beq.n	8002d36 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002cfc:	f002 fcfe 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8002d00:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d0a:	d010      	beq.n	8002d2e <ADC_ConfigureBoostMode+0x46>
 8002d0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d10:	d871      	bhi.n	8002df6 <ADC_ConfigureBoostMode+0x10e>
 8002d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d16:	d002      	beq.n	8002d1e <ADC_ConfigureBoostMode+0x36>
 8002d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d1c:	d16b      	bne.n	8002df6 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
        break;
 8002d2c:	e066      	b.n	8002dfc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	60fb      	str	r3, [r7, #12]
        break;
 8002d34:	e062      	b.n	8002dfc <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d3a:	f003 fc47 	bl	80065cc <HAL_RCCEx_GetPeriphCLKFreq>
 8002d3e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d48:	d051      	beq.n	8002dee <ADC_ConfigureBoostMode+0x106>
 8002d4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d4e:	d854      	bhi.n	8002dfa <ADC_ConfigureBoostMode+0x112>
 8002d50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d54:	d047      	beq.n	8002de6 <ADC_ConfigureBoostMode+0xfe>
 8002d56:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d5a:	d84e      	bhi.n	8002dfa <ADC_ConfigureBoostMode+0x112>
 8002d5c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d60:	d03d      	beq.n	8002dde <ADC_ConfigureBoostMode+0xf6>
 8002d62:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d66:	d848      	bhi.n	8002dfa <ADC_ConfigureBoostMode+0x112>
 8002d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d6c:	d033      	beq.n	8002dd6 <ADC_ConfigureBoostMode+0xee>
 8002d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d72:	d842      	bhi.n	8002dfa <ADC_ConfigureBoostMode+0x112>
 8002d74:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d78:	d029      	beq.n	8002dce <ADC_ConfigureBoostMode+0xe6>
 8002d7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d7e:	d83c      	bhi.n	8002dfa <ADC_ConfigureBoostMode+0x112>
 8002d80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d84:	d01a      	beq.n	8002dbc <ADC_ConfigureBoostMode+0xd4>
 8002d86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d8a:	d836      	bhi.n	8002dfa <ADC_ConfigureBoostMode+0x112>
 8002d8c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d90:	d014      	beq.n	8002dbc <ADC_ConfigureBoostMode+0xd4>
 8002d92:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d96:	d830      	bhi.n	8002dfa <ADC_ConfigureBoostMode+0x112>
 8002d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9c:	d00e      	beq.n	8002dbc <ADC_ConfigureBoostMode+0xd4>
 8002d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da2:	d82a      	bhi.n	8002dfa <ADC_ConfigureBoostMode+0x112>
 8002da4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002da8:	d008      	beq.n	8002dbc <ADC_ConfigureBoostMode+0xd4>
 8002daa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dae:	d824      	bhi.n	8002dfa <ADC_ConfigureBoostMode+0x112>
 8002db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db4:	d002      	beq.n	8002dbc <ADC_ConfigureBoostMode+0xd4>
 8002db6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dba:	d11e      	bne.n	8002dfa <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	0c9b      	lsrs	r3, r3, #18
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	60fb      	str	r3, [r7, #12]
        break;
 8002dcc:	e016      	b.n	8002dfc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]
        break;
 8002dd4:	e012      	b.n	8002dfc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	60fb      	str	r3, [r7, #12]
        break;
 8002ddc:	e00e      	b.n	8002dfc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	60fb      	str	r3, [r7, #12]
        break;
 8002de4:	e00a      	b.n	8002dfc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	09db      	lsrs	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]
        break;
 8002dec:	e006      	b.n	8002dfc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	60fb      	str	r3, [r7, #12]
        break;
 8002df4:	e002      	b.n	8002dfc <ADC_ConfigureBoostMode+0x114>
        break;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002dfa:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <ADC_ConfigureBoostMode+0x18c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d808      	bhi.n	8002e1c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e18:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e1a:	e025      	b.n	8002e68 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <ADC_ConfigureBoostMode+0x190>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d80a      	bhi.n	8002e3a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e36:	609a      	str	r2, [r3, #8]
}
 8002e38:	e016      	b.n	8002e68 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a0f      	ldr	r2, [pc, #60]	; (8002e7c <ADC_ConfigureBoostMode+0x194>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d80a      	bhi.n	8002e58 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	609a      	str	r2, [r3, #8]
}
 8002e56:	e007      	b.n	8002e68 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e66:	609a      	str	r2, [r3, #8]
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40022300 	.word	0x40022300
 8002e74:	005f5e10 	.word	0x005f5e10
 8002e78:	00bebc20 	.word	0x00bebc20
 8002e7c:	017d7840 	.word	0x017d7840

08002e80 <LL_ADC_IsEnabled>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <LL_ADC_IsEnabled+0x18>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <LL_ADC_IsEnabled+0x1a>
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d101      	bne.n	8002ebe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b09f      	sub	sp, #124	; 0x7c
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e080      	b.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3d      	ldr	r2, [pc, #244]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d102      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f04:	4b3c      	ldr	r3, [pc, #240]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	e001      	b.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e05f      	b.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ffb9 	bl	8002ea6 <LL_ADC_REG_IsConversionOngoing>
 8002f34:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff ffb3 	bl	8002ea6 <LL_ADC_REG_IsConversionOngoing>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d141      	bne.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d13e      	bne.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002f4e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f68:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6a:	4822      	ldr	r0, [pc, #136]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f6c:	f7ff ff88 	bl	8002e80 <LL_ADC_IsEnabled>
 8002f70:	4604      	mov	r4, r0
 8002f72:	4821      	ldr	r0, [pc, #132]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f74:	f7ff ff84 	bl	8002e80 <LL_ADC_IsEnabled>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d12e      	bne.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	6811      	ldr	r1, [r2, #0]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	6892      	ldr	r2, [r2, #8]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f98:	e021      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa6:	4813      	ldr	r0, [pc, #76]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002fa8:	f7ff ff6a 	bl	8002e80 <LL_ADC_IsEnabled>
 8002fac:	4604      	mov	r4, r0
 8002fae:	4812      	ldr	r0, [pc, #72]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002fb0:	f7ff ff66 	bl	8002e80 <LL_ADC_IsEnabled>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4323      	orrs	r3, r4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d110      	bne.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fc6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc8:	e009      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fde:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fe8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	377c      	adds	r7, #124	; 0x7c
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40022100 	.word	0x40022100
 8002ffc:	40022300 	.word	0x40022300
 8003000:	fffff0e0 	.word	0xfffff0e0

08003004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <__NVIC_SetPriorityGrouping+0x40>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 800302e:	4313      	orrs	r3, r2
 8003030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003032:	4a04      	ldr	r2, [pc, #16]	; (8003044 <__NVIC_SetPriorityGrouping+0x40>)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	60d3      	str	r3, [r2, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00
 8003048:	05fa0000 	.word	0x05fa0000

0800304c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <__NVIC_GetPriorityGrouping+0x18>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db0b      	blt.n	8003092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	4907      	ldr	r1, [pc, #28]	; (80030a0 <__NVIC_EnableIRQ+0x38>)
 8003082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2001      	movs	r0, #1
 800308a:	fa00 f202 	lsl.w	r2, r0, r2
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000e100 	.word	0xe000e100

080030a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	; (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	; (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b04      	cmp	r3, #4
 8003114:	bf28      	it	cs
 8003116:	2304      	movcs	r3, #4
 8003118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3304      	adds	r3, #4
 800311e:	2b06      	cmp	r3, #6
 8003120:	d902      	bls.n	8003128 <NVIC_EncodePriority+0x30>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3b03      	subs	r3, #3
 8003126:	e000      	b.n	800312a <NVIC_EncodePriority+0x32>
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	401a      	ands	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003140:	f04f 31ff 	mov.w	r1, #4294967295
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43d9      	mvns	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	4313      	orrs	r3, r2
         );
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003170:	d301      	bcc.n	8003176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003172:	2301      	movs	r3, #1
 8003174:	e00f      	b.n	8003196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <SysTick_Config+0x40>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317e:	210f      	movs	r1, #15
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	f7ff ff8e 	bl	80030a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <SysTick_Config+0x40>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <SysTick_Config+0x40>)
 8003190:	2207      	movs	r2, #7
 8003192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	e000e010 	.word	0xe000e010

080031a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff29 	bl	8003004 <__NVIC_SetPriorityGrouping>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031c8:	f7ff ff40 	bl	800304c <__NVIC_GetPriorityGrouping>
 80031cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7ff ff90 	bl	80030f8 <NVIC_EncodePriority>
 80031d8:	4602      	mov	r2, r0
 80031da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff5f 	bl	80030a4 <__NVIC_SetPriority>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff33 	bl	8003068 <__NVIC_EnableIRQ>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ffa4 	bl	8003160 <SysTick_Config>
 8003218:	4603      	mov	r3, r0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b098      	sub	sp, #96	; 0x60
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800322c:	4a84      	ldr	r2, [pc, #528]	; (8003440 <HAL_FDCAN_Init+0x21c>)
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	4611      	mov	r1, r2
 8003234:	224c      	movs	r2, #76	; 0x4c
 8003236:	4618      	mov	r0, r3
 8003238:	f008 f854 	bl	800b2e4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e1ca      	b.n	80035dc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7e      	ldr	r2, [pc, #504]	; (8003444 <HAL_FDCAN_Init+0x220>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d106      	bne.n	800325e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe fbbe 	bl	80019f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0210 	bic.w	r2, r2, #16
 8003286:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003288:	f7fe ff32 	bl	80020f0 <HAL_GetTick>
 800328c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800328e:	e014      	b.n	80032ba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003290:	f7fe ff2e 	bl	80020f0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b0a      	cmp	r3, #10
 800329c:	d90d      	bls.n	80032ba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e190      	b.n	80035dc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d0e3      	beq.n	8003290 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d8:	f7fe ff0a 	bl	80020f0 <HAL_GetTick>
 80032dc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80032de:	e014      	b.n	800330a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80032e0:	f7fe ff06 	bl	80020f0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b0a      	cmp	r3, #10
 80032ec:	d90d      	bls.n	800330a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2203      	movs	r2, #3
 8003302:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e168      	b.n	80035dc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0e3      	beq.n	80032e0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0202 	orr.w	r2, r2, #2
 8003326:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7c1b      	ldrb	r3, [r3, #16]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d108      	bne.n	8003342 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333e:	619a      	str	r2, [r3, #24]
 8003340:	e007      	b.n	8003352 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699a      	ldr	r2, [r3, #24]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003350:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7c5b      	ldrb	r3, [r3, #17]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d108      	bne.n	800336c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003368:	619a      	str	r2, [r3, #24]
 800336a:	e007      	b.n	800337c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800337a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7c9b      	ldrb	r3, [r3, #18]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d108      	bne.n	8003396 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003392:	619a      	str	r2, [r3, #24]
 8003394:	e007      	b.n	80033a6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80033ca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0210 	bic.w	r2, r2, #16
 80033da:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d108      	bne.n	80033f6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0204 	orr.w	r2, r2, #4
 80033f2:	619a      	str	r2, [r3, #24]
 80033f4:	e030      	b.n	8003458 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02c      	beq.n	8003458 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d020      	beq.n	8003448 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003414:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0210 	orr.w	r2, r2, #16
 8003424:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d114      	bne.n	8003458 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0220 	orr.w	r2, r2, #32
 800343c:	619a      	str	r2, [r3, #24]
 800343e:	e00b      	b.n	8003458 <HAL_FDCAN_Init+0x234>
 8003440:	0800b338 	.word	0x0800b338
 8003444:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0220 	orr.w	r2, r2, #32
 8003456:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	3b01      	subs	r3, #1
 800345e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	3b01      	subs	r3, #1
 8003466:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003468:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003470:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	3b01      	subs	r3, #1
 800347a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003480:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003482:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800348c:	d115      	bne.n	80034ba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	3b01      	subs	r3, #1
 800349a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800349c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	3b01      	subs	r3, #1
 80034a4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80034a6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	3b01      	subs	r3, #1
 80034b0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80034b6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80034b8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e0:	4413      	add	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80034ee:	f023 0107 	bic.w	r1, r3, #7
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034fc:	4413      	add	r3, r2
 80034fe:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800351c:	f023 0107 	bic.w	r1, r3, #7
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800352a:	4413      	add	r3, r2
 800352c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	d013      	beq.n	800356a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800354a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003558:	4413      	add	r3, r2
 800355a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800355e:	011a      	lsls	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356e:	2b00      	cmp	r3, #0
 8003570:	d013      	beq.n	800359a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800357a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003588:	4413      	add	r3, r2
 800358a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800358e:	021a      	lsls	r2, r3, #8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <HAL_FDCAN_Init+0x3c0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d107      	bne.n	80035b4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f022 0203 	bic.w	r2, r2, #3
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fd9f 	bl	8004110 <FDCAN_CalcultateRamBlockAddresses>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80035d8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3760      	adds	r7, #96	; 0x60
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	4000a000 	.word	0x4000a000

080035e8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80035f8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d002      	beq.n	8003606 <HAL_FDCAN_ConfigFilter+0x1e>
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d157      	bne.n	80036b6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d12b      	bne.n	8003666 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b07      	cmp	r3, #7
 8003614:	d10d      	bne.n	8003632 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003622:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003628:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800362a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e00e      	b.n	8003650 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800363e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003646:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e025      	b.n	80036b2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	075a      	lsls	r2, r3, #29
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b07      	cmp	r3, #7
 800367a:	d103      	bne.n	8003684 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	e006      	b.n	8003692 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	079a      	lsls	r2, r3, #30
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	3304      	adds	r3, #4
 80036aa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e008      	b.n	80036c8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036bc:	f043 0202 	orr.w	r2, r3, #2
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d111      	bne.n	800370c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e008      	b.n	800371e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003712:	f043 0204 	orr.w	r2, r3, #4
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800372c:	b480      	push	{r7}
 800372e:	b08b      	sub	sp, #44	; 0x2c
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003744:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003746:	7efb      	ldrb	r3, [r7, #27]
 8003748:	2b02      	cmp	r3, #2
 800374a:	f040 814b 	bne.w	80039e4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d14d      	bne.n	80037f0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800375c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e13e      	b.n	80039f6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800378e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e12c      	b.n	80039f6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037a4:	0e1b      	lsrs	r3, r3, #24
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10b      	bne.n	80037c6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037b6:	0fdb      	lsrs	r3, r3, #31
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c0:	d101      	bne.n	80037c6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	69f9      	ldr	r1, [r7, #28]
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	e069      	b.n	80038c4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b41      	cmp	r3, #65	; 0x41
 80037f4:	d14d      	bne.n	8003892 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0ed      	b.n	80039f6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003830:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0db      	b.n	80039f6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003846:	0e1b      	lsrs	r3, r3, #24
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10b      	bne.n	8003868 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003858:	0fdb      	lsrs	r3, r3, #31
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003862:	d101      	bne.n	8003868 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003864:	2301      	movs	r3, #1
 8003866:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	69f9      	ldr	r1, [r7, #28]
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
 8003890:	e018      	b.n	80038c4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	d309      	bcc.n	80038b0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0a2      	b.n	80039f6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d107      	bne.n	80038e8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0c9b      	lsrs	r3, r3, #18
 80038de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	e005      	b.n	80038f4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	3304      	adds	r3, #4
 8003910:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0e1b      	lsrs	r3, r3, #24
 8003946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	0fda      	lsrs	r2, r3, #31
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	3304      	adds	r3, #4
 800395c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003962:	2300      	movs	r3, #0
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	e00a      	b.n	800397e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	441a      	add	r2, r3
 800396e:	6839      	ldr	r1, [r7, #0]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	440b      	add	r3, r1
 8003974:	7812      	ldrb	r2, [r2, #0]
 8003976:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	3301      	adds	r3, #1
 800397c:	623b      	str	r3, [r7, #32]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	0c1b      	lsrs	r3, r3, #16
 8003984:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003986:	5cd3      	ldrb	r3, [r2, r3]
 8003988:	461a      	mov	r2, r3
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	4293      	cmp	r3, r2
 800398e:	d3eb      	bcc.n	8003968 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d105      	bne.n	80039a2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80039a0:	e01e      	b.n	80039e0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b41      	cmp	r3, #65	; 0x41
 80039a6:	d105      	bne.n	80039b4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80039b2:	e015      	b.n	80039e0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b1f      	cmp	r3, #31
 80039b8:	d808      	bhi.n	80039cc <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2101      	movs	r1, #1
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	fa01 f202 	lsl.w	r2, r1, r2
 80039c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80039ca:	e009      	b.n	80039e0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 021f 	and.w	r2, r3, #31
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2101      	movs	r1, #1
 80039d8:	fa01 f202 	lsl.w	r2, r1, r2
 80039dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e008      	b.n	80039f6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	372c      	adds	r7, #44	; 0x2c
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	0800b394 	.word	0x0800b394

08003a08 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a1a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d002      	beq.n	8003a28 <HAL_FDCAN_ActivateNotification+0x20>
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d155      	bne.n	8003ad4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a46:	e014      	b.n	8003a72 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4013      	ands	r3, r2
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d108      	bne.n	8003a6a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0202 	orr.w	r2, r2, #2
 8003a66:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a68:	e003      	b.n	8003a72 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_FDCAN_ActivateNotification+0xec>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	6553      	str	r3, [r2, #84]	; 0x54
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	0f9b      	lsrs	r3, r3, #30
 8003aca:	490b      	ldr	r1, [pc, #44]	; (8003af8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e008      	b.n	8003ae6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ada:	f043 0202 	orr.w	r2, r3, #2
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	3fcfffff 	.word	0x3fcfffff
 8003af8:	4000a800 	.word	0x4000a800

08003afc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b092      	sub	sp, #72	; 0x48
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003b04:	4b90      	ldr	r3, [pc, #576]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	079b      	lsls	r3, r3, #30
 8003b0a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003b0c:	4b8e      	ldr	r3, [pc, #568]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	079b      	lsls	r3, r3, #30
 8003b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b14:	4013      	ands	r3, r2
 8003b16:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b22:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b44:	4013      	ands	r3, r2
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b52:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b66:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b74:	4013      	ands	r3, r2
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d011      	beq.n	8003bc2 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bb4:	651a      	str	r2, [r3, #80]	; 0x50
 8003bb6:	4b64      	ldr	r3, [pc, #400]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fa5a 	bl	8004076 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01e      	beq.n	8003c0e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d017      	beq.n	8003c0e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bfe:	651a      	str	r2, [r3, #80]	; 0x50
 8003c00:	4b51      	ldr	r3, [pc, #324]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa0b 	bl	8004024 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c1a:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_FDCAN_IRQHandler+0x250>)
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c20:	4a49      	ldr	r2, [pc, #292]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c24:	0f9b      	lsrs	r3, r3, #30
 8003c26:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003c28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9c4 	bl	8003fb8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c3c:	4b43      	ldr	r3, [pc, #268]	; (8003d4c <HAL_FDCAN_IRQHandler+0x250>)
 8003c3e:	400b      	ands	r3, r1
 8003c40:	6513      	str	r3, [r2, #80]	; 0x50
 8003c42:	4a41      	ldr	r2, [pc, #260]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c46:	0f9b      	lsrs	r3, r3, #30
 8003c48:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f9be 	bl	8003fce <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c5e:	4b3b      	ldr	r3, [pc, #236]	; (8003d4c <HAL_FDCAN_IRQHandler+0x250>)
 8003c60:	400b      	ands	r3, r1
 8003c62:	6513      	str	r3, [r2, #80]	; 0x50
 8003c64:	4a38      	ldr	r2, [pc, #224]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c68:	0f9b      	lsrs	r3, r3, #30
 8003c6a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003c6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fc ff42 	bl	8000af8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_FDCAN_IRQHandler+0x250>)
 8003c82:	400b      	ands	r3, r1
 8003c84:	6513      	str	r3, [r2, #80]	; 0x50
 8003c86:	4a30      	ldr	r2, [pc, #192]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	0f9b      	lsrs	r3, r3, #30
 8003c8c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003c8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f9a7 	bl	8003fe4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d011      	beq.n	8003cc8 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cba:	651a      	str	r2, [r3, #80]	; 0x50
 8003cbc:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f999 	bl	8003ffa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01e      	beq.n	8003d14 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d017      	beq.n	8003d14 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f97d 	bl	800400e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d016      	beq.n	8003d50 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00f      	beq.n	8003d50 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d38:	651a      	str	r2, [r3, #80]	; 0x50
 8003d3a:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <HAL_FDCAN_IRQHandler+0x24c>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f97a 	bl	800403a <HAL_FDCAN_RxBufferNewMessageCallback>
 8003d46:	e003      	b.n	8003d50 <HAL_FDCAN_IRQHandler+0x254>
 8003d48:	4000a800 	.word	0x4000a800
 8003d4c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d011      	beq.n	8003d82 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d74:	651a      	str	r2, [r3, #80]	; 0x50
 8003d76:	4b8d      	ldr	r3, [pc, #564]	; (8003fac <HAL_FDCAN_IRQHandler+0x4b0>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f966 	bl	800404e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d011      	beq.n	8003db4 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003da6:	651a      	str	r2, [r3, #80]	; 0x50
 8003da8:	4b80      	ldr	r3, [pc, #512]	; (8003fac <HAL_FDCAN_IRQHandler+0x4b0>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f957 	bl	8004062 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00f      	beq.n	8003df0 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dd8:	651a      	str	r2, [r3, #80]	; 0x50
 8003dda:	4b74      	ldr	r3, [pc, #464]	; (8003fac <HAL_FDCAN_IRQHandler+0x4b0>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dfc:	4b6c      	ldr	r3, [pc, #432]	; (8003fb0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	6513      	str	r3, [r2, #80]	; 0x50
 8003e02:	4a6a      	ldr	r2, [pc, #424]	; (8003fac <HAL_FDCAN_IRQHandler+0x4b0>)
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	0f9b      	lsrs	r3, r3, #30
 8003e08:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f946 	bl	800409e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d011      	beq.n	8003e3c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e1e:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003e20:	400b      	ands	r3, r1
 8003e22:	6513      	str	r3, [r2, #80]	; 0x50
 8003e24:	4a61      	ldr	r2, [pc, #388]	; (8003fac <HAL_FDCAN_IRQHandler+0x4b0>)
 8003e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e28:	0f9b      	lsrs	r3, r3, #30
 8003e2a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5c      	ldr	r2, [pc, #368]	; (8003fb4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f040 80a6 	bne.w	8003f94 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 809e 	beq.w	8003f94 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e7a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	4013      	ands	r3, r2
 8003e86:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003e92:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8003eaa:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003ec2:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003edc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f8e7 	bl	80040b4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d007      	beq.n	8003efc <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	6a3a      	ldr	r2, [r7, #32]
 8003ef2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003ef4:	6a39      	ldr	r1, [r7, #32]
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8e7 	bl	80040ca <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01b      	beq.n	8003f42 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d014      	beq.n	8003f42 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f2e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2240      	movs	r2, #64	; 0x40
 8003f36:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	6939      	ldr	r1, [r7, #16]
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f8cf 	bl	80040e0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003f50:	69f9      	ldr	r1, [r7, #28]
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8d0 	bl	80040f8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00b      	beq.n	8003f94 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f873 	bl	800408a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3748      	adds	r7, #72	; 0x48
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	4000a800 	.word	0x4000a800
 8003fb0:	3fcfffff 	.word	0x3fcfffff
 8003fb4:	4000a000 	.word	0x4000a000

08003fb8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004126:	4ba7      	ldr	r3, [pc, #668]	; (80043c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004128:	4013      	ands	r3, r2
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	0091      	lsls	r1, r2, #2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	430b      	orrs	r3, r1
 8004134:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004140:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	041a      	lsls	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	4413      	add	r3, r2
 800415c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004166:	4b97      	ldr	r3, [pc, #604]	; (80043c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004168:	4013      	ands	r3, r2
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	0091      	lsls	r1, r2, #2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	430b      	orrs	r3, r1
 8004174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	041a      	lsls	r2, r3, #16
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4413      	add	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041a8:	4b86      	ldr	r3, [pc, #536]	; (80043c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	0091      	lsls	r1, r2, #2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	430b      	orrs	r3, r1
 80041b6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041c2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	041a      	lsls	r2, r3, #16
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	4413      	add	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80041f0:	4b74      	ldr	r3, [pc, #464]	; (80043c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	0091      	lsls	r1, r2, #2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	430b      	orrs	r3, r1
 80041fe:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800420a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	041a      	lsls	r2, r3, #16
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4413      	add	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004238:	4b62      	ldr	r3, [pc, #392]	; (80043c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	0091      	lsls	r1, r2, #2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	430b      	orrs	r3, r1
 8004246:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4413      	add	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004264:	4b57      	ldr	r3, [pc, #348]	; (80043c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004266:	4013      	ands	r3, r2
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	0091      	lsls	r1, r2, #2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	430b      	orrs	r3, r1
 8004272:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800427e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	041a      	lsls	r2, r3, #16
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	4413      	add	r3, r2
 800429c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	0091      	lsls	r1, r2, #2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042c0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	041a      	lsls	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042dc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e4:	061a      	lsls	r2, r3, #24
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f4:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80042f6:	4413      	add	r3, r2
 80042f8:	009a      	lsls	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	441a      	add	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	441a      	add	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	441a      	add	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	4a04      	ldr	r2, [pc, #16]	; (80043cc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d915      	bls.n	80043ec <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80043c0:	e006      	b.n	80043d0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80043c2:	bf00      	nop
 80043c4:	ffff0003 	.word	0xffff0003
 80043c8:	10002b00 	.word	0x10002b00
 80043cc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d6:	f043 0220 	orr.w	r2, r3, #32
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2203      	movs	r2, #3
 80043e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e010      	b.n	800440e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e005      	b.n	8004400 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3304      	adds	r3, #4
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	429a      	cmp	r2, r3
 800440a:	d3f3      	bcc.n	80043f4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop

0800441c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800442a:	4b89      	ldr	r3, [pc, #548]	; (8004650 <HAL_GPIO_Init+0x234>)
 800442c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800442e:	e194      	b.n	800475a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2101      	movs	r1, #1
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8186 	beq.w	8004754 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d005      	beq.n	8004460 <HAL_GPIO_Init+0x44>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d130      	bne.n	80044c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	2203      	movs	r2, #3
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004496:	2201      	movs	r2, #1
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	f003 0201 	and.w	r2, r3, #1
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d017      	beq.n	80044fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	2203      	movs	r2, #3
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d123      	bne.n	8004552 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	08da      	lsrs	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3208      	adds	r2, #8
 8004512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	220f      	movs	r2, #15
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	08da      	lsrs	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3208      	adds	r2, #8
 800454c:	69b9      	ldr	r1, [r7, #24]
 800454e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	2203      	movs	r2, #3
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0203 	and.w	r2, r3, #3
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80e0 	beq.w	8004754 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004594:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <HAL_GPIO_Init+0x238>)
 8004596:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800459a:	4a2e      	ldr	r2, [pc, #184]	; (8004654 <HAL_GPIO_Init+0x238>)
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80045a4:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <HAL_GPIO_Init+0x238>)
 80045a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045b2:	4a29      	ldr	r2, [pc, #164]	; (8004658 <HAL_GPIO_Init+0x23c>)
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	3302      	adds	r3, #2
 80045ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	220f      	movs	r2, #15
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4013      	ands	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a20      	ldr	r2, [pc, #128]	; (800465c <HAL_GPIO_Init+0x240>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d052      	beq.n	8004684 <HAL_GPIO_Init+0x268>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <HAL_GPIO_Init+0x244>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d031      	beq.n	800464a <HAL_GPIO_Init+0x22e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <HAL_GPIO_Init+0x248>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02b      	beq.n	8004646 <HAL_GPIO_Init+0x22a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <HAL_GPIO_Init+0x24c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d025      	beq.n	8004642 <HAL_GPIO_Init+0x226>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1c      	ldr	r2, [pc, #112]	; (800466c <HAL_GPIO_Init+0x250>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01f      	beq.n	800463e <HAL_GPIO_Init+0x222>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <HAL_GPIO_Init+0x254>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d019      	beq.n	800463a <HAL_GPIO_Init+0x21e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <HAL_GPIO_Init+0x258>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_GPIO_Init+0x21a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <HAL_GPIO_Init+0x25c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00d      	beq.n	8004632 <HAL_GPIO_Init+0x216>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a18      	ldr	r2, [pc, #96]	; (800467c <HAL_GPIO_Init+0x260>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d007      	beq.n	800462e <HAL_GPIO_Init+0x212>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a17      	ldr	r2, [pc, #92]	; (8004680 <HAL_GPIO_Init+0x264>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d101      	bne.n	800462a <HAL_GPIO_Init+0x20e>
 8004626:	2309      	movs	r3, #9
 8004628:	e02d      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800462a:	230a      	movs	r3, #10
 800462c:	e02b      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800462e:	2308      	movs	r3, #8
 8004630:	e029      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 8004632:	2307      	movs	r3, #7
 8004634:	e027      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 8004636:	2306      	movs	r3, #6
 8004638:	e025      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800463a:	2305      	movs	r3, #5
 800463c:	e023      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800463e:	2304      	movs	r3, #4
 8004640:	e021      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 8004642:	2303      	movs	r3, #3
 8004644:	e01f      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 8004646:	2302      	movs	r3, #2
 8004648:	e01d      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800464a:	2301      	movs	r3, #1
 800464c:	e01b      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800464e:	bf00      	nop
 8004650:	58000080 	.word	0x58000080
 8004654:	58024400 	.word	0x58024400
 8004658:	58000400 	.word	0x58000400
 800465c:	58020000 	.word	0x58020000
 8004660:	58020400 	.word	0x58020400
 8004664:	58020800 	.word	0x58020800
 8004668:	58020c00 	.word	0x58020c00
 800466c:	58021000 	.word	0x58021000
 8004670:	58021400 	.word	0x58021400
 8004674:	58021800 	.word	0x58021800
 8004678:	58021c00 	.word	0x58021c00
 800467c:	58022000 	.word	0x58022000
 8004680:	58022400 	.word	0x58022400
 8004684:	2300      	movs	r3, #0
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	f002 0203 	and.w	r2, r2, #3
 800468c:	0092      	lsls	r2, r2, #2
 800468e:	4093      	lsls	r3, r2
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004696:	4938      	ldr	r1, [pc, #224]	; (8004778 <HAL_GPIO_Init+0x35c>)
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	089b      	lsrs	r3, r3, #2
 800469c:	3302      	adds	r3, #2
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f ae63 	bne.w	8004430 <HAL_GPIO_Init+0x14>
  }
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	3724      	adds	r7, #36	; 0x24
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	58000400 	.word	0x58000400

0800477c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	887b      	ldrh	r3, [r7, #2]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	e001      	b.n	800479e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
 80047b8:	4613      	mov	r3, r2
 80047ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047c8:	e003      	b.n	80047d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	041a      	lsls	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80047e8:	4b29      	ldr	r3, [pc, #164]	; (8004890 <HAL_PWREx_ConfigSupply+0xb0>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d00a      	beq.n	800480a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80047f4:	4b26      	ldr	r3, [pc, #152]	; (8004890 <HAL_PWREx_ConfigSupply+0xb0>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d001      	beq.n	8004806 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e040      	b.n	8004888 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e03e      	b.n	8004888 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800480a:	4b21      	ldr	r3, [pc, #132]	; (8004890 <HAL_PWREx_ConfigSupply+0xb0>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004812:	491f      	ldr	r1, [pc, #124]	; (8004890 <HAL_PWREx_ConfigSupply+0xb0>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4313      	orrs	r3, r2
 8004818:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800481a:	f7fd fc69 	bl	80020f0 <HAL_GetTick>
 800481e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004820:	e009      	b.n	8004836 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004822:	f7fd fc65 	bl	80020f0 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004830:	d901      	bls.n	8004836 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e028      	b.n	8004888 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004836:	4b16      	ldr	r3, [pc, #88]	; (8004890 <HAL_PWREx_ConfigSupply+0xb0>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004842:	d1ee      	bne.n	8004822 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b1e      	cmp	r3, #30
 8004848:	d008      	beq.n	800485c <HAL_PWREx_ConfigSupply+0x7c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b2e      	cmp	r3, #46	; 0x2e
 800484e:	d005      	beq.n	800485c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b1d      	cmp	r3, #29
 8004854:	d002      	beq.n	800485c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b2d      	cmp	r3, #45	; 0x2d
 800485a:	d114      	bne.n	8004886 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800485c:	f7fd fc48 	bl	80020f0 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004862:	e009      	b.n	8004878 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004864:	f7fd fc44 	bl	80020f0 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004872:	d901      	bls.n	8004878 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e007      	b.n	8004888 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_PWREx_ConfigSupply+0xb0>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004884:	d1ee      	bne.n	8004864 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	58024800 	.word	0x58024800

08004894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08c      	sub	sp, #48	; 0x30
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e3f3      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80b3 	beq.w	8004a1a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b4:	4b9e      	ldr	r3, [pc, #632]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048be:	4b9c      	ldr	r3, [pc, #624]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d007      	beq.n	80048da <HAL_RCC_OscConfig+0x46>
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	2b18      	cmp	r3, #24
 80048ce:	d112      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62>
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d10d      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048da:	4b95      	ldr	r3, [pc, #596]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8098 	beq.w	8004a18 <HAL_RCC_OscConfig+0x184>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 8093 	bne.w	8004a18 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e3cb      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x7a>
 8004900:	4b8b      	ldr	r3, [pc, #556]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a8a      	ldr	r2, [pc, #552]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e058      	b.n	80049c0 <HAL_RCC_OscConfig+0x12c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d112      	bne.n	800493c <HAL_RCC_OscConfig+0xa8>
 8004916:	4b86      	ldr	r3, [pc, #536]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a85      	ldr	r2, [pc, #532]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 800491c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b83      	ldr	r3, [pc, #524]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a82      	ldr	r2, [pc, #520]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004928:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b80      	ldr	r3, [pc, #512]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a7f      	ldr	r2, [pc, #508]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e041      	b.n	80049c0 <HAL_RCC_OscConfig+0x12c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004944:	d112      	bne.n	800496c <HAL_RCC_OscConfig+0xd8>
 8004946:	4b7a      	ldr	r3, [pc, #488]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a79      	ldr	r2, [pc, #484]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 800494c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b77      	ldr	r3, [pc, #476]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a76      	ldr	r2, [pc, #472]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004958:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4b74      	ldr	r3, [pc, #464]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a73      	ldr	r2, [pc, #460]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e029      	b.n	80049c0 <HAL_RCC_OscConfig+0x12c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004974:	d112      	bne.n	800499c <HAL_RCC_OscConfig+0x108>
 8004976:	4b6e      	ldr	r3, [pc, #440]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a6d      	ldr	r2, [pc, #436]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 800497c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	4b6b      	ldr	r3, [pc, #428]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a6a      	ldr	r2, [pc, #424]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4b68      	ldr	r3, [pc, #416]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a67      	ldr	r2, [pc, #412]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e011      	b.n	80049c0 <HAL_RCC_OscConfig+0x12c>
 800499c:	4b64      	ldr	r3, [pc, #400]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a63      	ldr	r2, [pc, #396]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 80049a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4b61      	ldr	r3, [pc, #388]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a60      	ldr	r2, [pc, #384]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 80049ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4b5e      	ldr	r3, [pc, #376]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5d      	ldr	r2, [pc, #372]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 80049ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80049be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d013      	beq.n	80049f0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fd fb92 	bl	80020f0 <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fd fb8e 	bl	80020f0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e355      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049e2:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x13c>
 80049ee:	e014      	b.n	8004a1a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd fb7e 	bl	80020f0 <HAL_GetTick>
 80049f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fd fb7a 	bl	80020f0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e341      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a0a:	4b49      	ldr	r3, [pc, #292]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x164>
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 808c 	beq.w	8004b40 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a28:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a32:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_RCC_OscConfig+0x1ba>
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	2b18      	cmp	r3, #24
 8004a42:	d137      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x220>
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d132      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a4e:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_RCC_OscConfig+0x1d2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e313      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a66:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 0219 	bic.w	r2, r3, #25
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	492f      	ldr	r1, [pc, #188]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a78:	f7fd fb3a 	bl	80020f0 <HAL_GetTick>
 8004a7c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fd fb36 	bl	80020f0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e2fd      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	4920      	ldr	r1, [pc, #128]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab2:	e045      	b.n	8004b40 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d026      	beq.n	8004b0a <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004abc:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 0219 	bic.w	r2, r3, #25
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4919      	ldr	r1, [pc, #100]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fd fb0f 	bl	80020f0 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad6:	f7fd fb0b 	bl	80020f0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e2d2      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	490b      	ldr	r1, [pc, #44]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	e01a      	b.n	8004b40 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <HAL_RCC_OscConfig+0x29c>)
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fd faeb 	bl	80020f0 <HAL_GetTick>
 8004b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b1c:	e00a      	b.n	8004b34 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fd fae7 	bl	80020f0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d903      	bls.n	8004b34 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e2ae      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
 8004b30:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b34:	4b99      	ldr	r3, [pc, #612]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1ee      	bne.n	8004b1e <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d06a      	beq.n	8004c22 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b4c:	4b93      	ldr	r3, [pc, #588]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b54:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b56:	4b91      	ldr	r3, [pc, #580]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d007      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2de>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b18      	cmp	r3, #24
 8004b66:	d11b      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x30c>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d116      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b72:	4b8a      	ldr	r3, [pc, #552]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2f6>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	2b80      	cmp	r3, #128	; 0x80
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e281      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b8a:	4b84      	ldr	r3, [pc, #528]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	4980      	ldr	r1, [pc, #512]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b9e:	e040      	b.n	8004c22 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d023      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ba8:	4b7c      	ldr	r3, [pc, #496]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a7b      	ldr	r2, [pc, #492]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fa9c 	bl	80020f0 <HAL_GetTick>
 8004bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004bbc:	f7fd fa98 	bl	80020f0 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e25f      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bce:	4b73      	ldr	r3, [pc, #460]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bda:	4b70      	ldr	r3, [pc, #448]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	061b      	lsls	r3, r3, #24
 8004be8:	496c      	ldr	r1, [pc, #432]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60cb      	str	r3, [r1, #12]
 8004bee:	e018      	b.n	8004c22 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004bf0:	4b6a      	ldr	r3, [pc, #424]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a69      	ldr	r2, [pc, #420]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fa78 	bl	80020f0 <HAL_GetTick>
 8004c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c04:	f7fd fa74 	bl	80020f0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e23b      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c16:	4b61      	ldr	r3, [pc, #388]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d036      	beq.n	8004c9c <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d019      	beq.n	8004c6a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c36:	4b59      	ldr	r3, [pc, #356]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3a:	4a58      	ldr	r2, [pc, #352]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fd fa55 	bl	80020f0 <HAL_GetTick>
 8004c46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4a:	f7fd fa51 	bl	80020f0 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e218      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x3b6>
 8004c68:	e018      	b.n	8004c9c <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6a:	4b4c      	ldr	r3, [pc, #304]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6e:	4a4b      	ldr	r2, [pc, #300]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fd fa3b 	bl	80020f0 <HAL_GetTick>
 8004c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fd fa37 	bl	80020f0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1fe      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c90:	4b42      	ldr	r3, [pc, #264]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f0      	bne.n	8004c7e <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d036      	beq.n	8004d16 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d019      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cb0:	4b3a      	ldr	r3, [pc, #232]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a39      	ldr	r2, [pc, #228]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cbc:	f7fd fa18 	bl	80020f0 <HAL_GetTick>
 8004cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004cc4:	f7fd fa14 	bl	80020f0 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e1db      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cd6:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x430>
 8004ce2:	e018      	b.n	8004d16 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cf0:	f7fd f9fe 	bl	80020f0 <HAL_GetTick>
 8004cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004cf8:	f7fd f9fa 	bl	80020f0 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e1c1      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d0a:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 80af 	beq.w	8004e82 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <HAL_RCC_OscConfig+0x50c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <HAL_RCC_OscConfig+0x50c>)
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d30:	f7fd f9de 	bl	80020f0 <HAL_GetTick>
 8004d34:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d38:	f7fd f9da 	bl	80020f0 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e1a1      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d4a:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <HAL_RCC_OscConfig+0x50c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d106      	bne.n	8004d6c <HAL_RCC_OscConfig+0x4d8>
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6a:	e05b      	b.n	8004e24 <HAL_RCC_OscConfig+0x590>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d117      	bne.n	8004da4 <HAL_RCC_OscConfig+0x510>
 8004d74:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d84:	4a05      	ldr	r2, [pc, #20]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8c:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	4a02      	ldr	r2, [pc, #8]	; (8004d9c <HAL_RCC_OscConfig+0x508>)
 8004d92:	f023 0304 	bic.w	r3, r3, #4
 8004d96:	6713      	str	r3, [r2, #112]	; 0x70
 8004d98:	e044      	b.n	8004e24 <HAL_RCC_OscConfig+0x590>
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	58024800 	.word	0x58024800
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d112      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x53e>
 8004dac:	4b95      	ldr	r3, [pc, #596]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4a94      	ldr	r2, [pc, #592]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004db2:	f043 0304 	orr.w	r3, r3, #4
 8004db6:	6713      	str	r3, [r2, #112]	; 0x70
 8004db8:	4b92      	ldr	r3, [pc, #584]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	4a91      	ldr	r2, [pc, #580]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc4:	4b8f      	ldr	r3, [pc, #572]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	4a8e      	ldr	r2, [pc, #568]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd0:	e028      	b.n	8004e24 <HAL_RCC_OscConfig+0x590>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b85      	cmp	r3, #133	; 0x85
 8004dd8:	d112      	bne.n	8004e00 <HAL_RCC_OscConfig+0x56c>
 8004dda:	4b8a      	ldr	r3, [pc, #552]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a89      	ldr	r2, [pc, #548]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004de0:	f043 0304 	orr.w	r3, r3, #4
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	4b87      	ldr	r3, [pc, #540]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a86      	ldr	r2, [pc, #536]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
 8004df2:	4b84      	ldr	r3, [pc, #528]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	4a83      	ldr	r2, [pc, #524]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfe:	e011      	b.n	8004e24 <HAL_RCC_OscConfig+0x590>
 8004e00:	4b80      	ldr	r3, [pc, #512]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e04:	4a7f      	ldr	r2, [pc, #508]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0c:	4b7d      	ldr	r3, [pc, #500]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	4a7c      	ldr	r2, [pc, #496]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004e12:	f023 0304 	bic.w	r3, r3, #4
 8004e16:	6713      	str	r3, [r2, #112]	; 0x70
 8004e18:	4b7a      	ldr	r3, [pc, #488]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4a79      	ldr	r2, [pc, #484]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fd f960 	bl	80020f0 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd f95c 	bl	80020f0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e121      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e4a:	4b6e      	ldr	r3, [pc, #440]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ee      	beq.n	8004e34 <HAL_RCC_OscConfig+0x5a0>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e58:	f7fd f94a 	bl	80020f0 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fd f946 	bl	80020f0 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e10b      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e76:	4b63      	ldr	r3, [pc, #396]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ee      	bne.n	8004e60 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 8100 	beq.w	800508c <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e8c:	4b5d      	ldr	r3, [pc, #372]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e94:	2b18      	cmp	r3, #24
 8004e96:	f000 80bb 	beq.w	8005010 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	f040 8095 	bne.w	8004fce <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b57      	ldr	r3, [pc, #348]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a56      	ldr	r2, [pc, #344]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd f91e 	bl	80020f0 <HAL_GetTick>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fd f91a 	bl	80020f0 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e0e1      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eca:	4b4e      	ldr	r3, [pc, #312]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed6:	4b4b      	ldr	r3, [pc, #300]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eda:	4b4b      	ldr	r3, [pc, #300]	; (8005008 <HAL_RCC_OscConfig+0x774>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ee6:	0112      	lsls	r2, r2, #4
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	4946      	ldr	r1, [pc, #280]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	628b      	str	r3, [r1, #40]	; 0x28
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	3b01      	subs	r3, #1
 8004f00:	025b      	lsls	r3, r3, #9
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f20:	4938      	ldr	r1, [pc, #224]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f26:	4b37      	ldr	r3, [pc, #220]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	4a36      	ldr	r2, [pc, #216]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f32:	4b34      	ldr	r3, [pc, #208]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f36:	4b35      	ldr	r3, [pc, #212]	; (800500c <HAL_RCC_OscConfig+0x778>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f3e:	00d2      	lsls	r2, r2, #3
 8004f40:	4930      	ldr	r1, [pc, #192]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f46:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	f023 020c 	bic.w	r2, r3, #12
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	492c      	ldr	r1, [pc, #176]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f58:	4b2a      	ldr	r3, [pc, #168]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f023 0202 	bic.w	r2, r3, #2
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	4927      	ldr	r1, [pc, #156]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f6a:	4b26      	ldr	r3, [pc, #152]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	4a25      	ldr	r2, [pc, #148]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f76:	4b23      	ldr	r3, [pc, #140]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	4a22      	ldr	r2, [pc, #136]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f82:	4b20      	ldr	r3, [pc, #128]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f8e:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f9a:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a19      	ldr	r2, [pc, #100]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004fa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7fd f8a3 	bl	80020f0 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fae:	f7fd f89f 	bl	80020f0 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e066      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x71a>
 8004fcc:	e05e      	b.n	800508c <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fd f889 	bl	80020f0 <HAL_GetTick>
 8004fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe2:	f7fd f885 	bl	80020f0 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e04c      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ff4:	4b03      	ldr	r3, [pc, #12]	; (8005004 <HAL_RCC_OscConfig+0x770>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f0      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x74e>
 8005000:	e044      	b.n	800508c <HAL_RCC_OscConfig+0x7f8>
 8005002:	bf00      	nop
 8005004:	58024400 	.word	0x58024400
 8005008:	fffffc0c 	.word	0xfffffc0c
 800500c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005010:	4b21      	ldr	r3, [pc, #132]	; (8005098 <HAL_RCC_OscConfig+0x804>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005016:	4b20      	ldr	r3, [pc, #128]	; (8005098 <HAL_RCC_OscConfig+0x804>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b01      	cmp	r3, #1
 8005022:	d031      	beq.n	8005088 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f003 0203 	and.w	r2, r3, #3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d12a      	bne.n	8005088 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503e:	429a      	cmp	r2, r3
 8005040:	d122      	bne.n	8005088 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d11a      	bne.n	8005088 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	0a5b      	lsrs	r3, r3, #9
 8005056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d111      	bne.n	8005088 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d108      	bne.n	8005088 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	0e1b      	lsrs	r3, r3, #24
 800507a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3730      	adds	r7, #48	; 0x30
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	58024400 	.word	0x58024400

0800509c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e19c      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b8a      	ldr	r3, [pc, #552]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d910      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b87      	ldr	r3, [pc, #540]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 020f 	bic.w	r2, r3, #15
 80050c6:	4985      	ldr	r1, [pc, #532]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b83      	ldr	r3, [pc, #524]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e184      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	4b7b      	ldr	r3, [pc, #492]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d908      	bls.n	800510e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050fc:	4b78      	ldr	r3, [pc, #480]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	4975      	ldr	r1, [pc, #468]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800510a:	4313      	orrs	r3, r2
 800510c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d010      	beq.n	800513c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	4b70      	ldr	r3, [pc, #448]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005126:	429a      	cmp	r2, r3
 8005128:	d908      	bls.n	800513c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800512a:	4b6d      	ldr	r3, [pc, #436]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	496a      	ldr	r1, [pc, #424]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005138:	4313      	orrs	r3, r2
 800513a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d010      	beq.n	800516a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	4b64      	ldr	r3, [pc, #400]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005154:	429a      	cmp	r2, r3
 8005156:	d908      	bls.n	800516a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005158:	4b61      	ldr	r3, [pc, #388]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	495e      	ldr	r1, [pc, #376]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005166:	4313      	orrs	r3, r2
 8005168:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	4b59      	ldr	r3, [pc, #356]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005182:	429a      	cmp	r2, r3
 8005184:	d908      	bls.n	8005198 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005186:	4b56      	ldr	r3, [pc, #344]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	4953      	ldr	r1, [pc, #332]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005194:	4313      	orrs	r3, r2
 8005196:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d908      	bls.n	80051c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b4:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f023 020f 	bic.w	r2, r3, #15
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4947      	ldr	r1, [pc, #284]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d055      	beq.n	800527e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051d2:	4b43      	ldr	r3, [pc, #268]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4940      	ldr	r1, [pc, #256]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d107      	bne.n	80051fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051ec:	4b3c      	ldr	r3, [pc, #240]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d121      	bne.n	800523c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0f6      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b03      	cmp	r3, #3
 8005202:	d107      	bne.n	8005214 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005204:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d115      	bne.n	800523c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0ea      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d107      	bne.n	800522c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800521c:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0de      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800522c:	4b2c      	ldr	r3, [pc, #176]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0d6      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800523c:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f023 0207 	bic.w	r2, r3, #7
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4925      	ldr	r1, [pc, #148]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800524a:	4313      	orrs	r3, r2
 800524c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524e:	f7fc ff4f 	bl	80020f0 <HAL_GetTick>
 8005252:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005254:	e00a      	b.n	800526c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005256:	f7fc ff4b 	bl	80020f0 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	f241 3288 	movw	r2, #5000	; 0x1388
 8005264:	4293      	cmp	r3, r2
 8005266:	d901      	bls.n	800526c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e0be      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526c:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	429a      	cmp	r2, r3
 800527c:	d1eb      	bne.n	8005256 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d010      	beq.n	80052ac <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	429a      	cmp	r2, r3
 8005298:	d208      	bcs.n	80052ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529a:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f023 020f 	bic.w	r2, r3, #15
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	490e      	ldr	r1, [pc, #56]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d214      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 020f 	bic.w	r2, r3, #15
 80052c2:	4906      	ldr	r1, [pc, #24]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b04      	ldr	r3, [pc, #16]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e086      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
 80052dc:	52002000 	.word	0x52002000
 80052e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d010      	beq.n	8005312 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	4b3f      	ldr	r3, [pc, #252]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d208      	bcs.n	8005312 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005300:	4b3c      	ldr	r3, [pc, #240]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	4939      	ldr	r1, [pc, #228]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800530e:	4313      	orrs	r3, r2
 8005310:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d010      	beq.n	8005340 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800532a:	429a      	cmp	r2, r3
 800532c:	d208      	bcs.n	8005340 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800532e:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	492e      	ldr	r1, [pc, #184]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800533c:	4313      	orrs	r3, r2
 800533e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d010      	beq.n	800536e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005358:	429a      	cmp	r2, r3
 800535a:	d208      	bcs.n	800536e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800535c:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	4922      	ldr	r1, [pc, #136]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800536a:	4313      	orrs	r3, r2
 800536c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d010      	beq.n	800539c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005386:	429a      	cmp	r2, r3
 8005388:	d208      	bcs.n	800539c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800538a:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	4917      	ldr	r1, [pc, #92]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005398:	4313      	orrs	r3, r2
 800539a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800539c:	f000 f834 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	4912      	ldr	r1, [pc, #72]	; (80053f8 <HAL_RCC_ClockConfig+0x35c>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
 80053b8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80053ba:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	4a0d      	ldr	r2, [pc, #52]	; (80053f8 <HAL_RCC_ClockConfig+0x35c>)
 80053c4:	5cd3      	ldrb	r3, [r2, r3]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
 80053d0:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <HAL_RCC_ClockConfig+0x360>)
 80053d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053d4:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <HAL_RCC_ClockConfig+0x364>)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <HAL_RCC_ClockConfig+0x368>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fc fe3c 	bl	800205c <HAL_InitTick>
 80053e4:	4603      	mov	r3, r0
 80053e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	58024400 	.word	0x58024400
 80053f8:	0800b384 	.word	0x0800b384
 80053fc:	2400000c 	.word	0x2400000c
 8005400:	24000008 	.word	0x24000008
 8005404:	24000010 	.word	0x24000010

08005408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800540e:	4bb3      	ldr	r3, [pc, #716]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005416:	2b18      	cmp	r3, #24
 8005418:	f200 8155 	bhi.w	80056c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <HAL_RCC_GetSysClockFreq+0x1c>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005489 	.word	0x08005489
 8005428:	080056c7 	.word	0x080056c7
 800542c:	080056c7 	.word	0x080056c7
 8005430:	080056c7 	.word	0x080056c7
 8005434:	080056c7 	.word	0x080056c7
 8005438:	080056c7 	.word	0x080056c7
 800543c:	080056c7 	.word	0x080056c7
 8005440:	080056c7 	.word	0x080056c7
 8005444:	080054af 	.word	0x080054af
 8005448:	080056c7 	.word	0x080056c7
 800544c:	080056c7 	.word	0x080056c7
 8005450:	080056c7 	.word	0x080056c7
 8005454:	080056c7 	.word	0x080056c7
 8005458:	080056c7 	.word	0x080056c7
 800545c:	080056c7 	.word	0x080056c7
 8005460:	080056c7 	.word	0x080056c7
 8005464:	080054b5 	.word	0x080054b5
 8005468:	080056c7 	.word	0x080056c7
 800546c:	080056c7 	.word	0x080056c7
 8005470:	080056c7 	.word	0x080056c7
 8005474:	080056c7 	.word	0x080056c7
 8005478:	080056c7 	.word	0x080056c7
 800547c:	080056c7 	.word	0x080056c7
 8005480:	080056c7 	.word	0x080056c7
 8005484:	080054bb 	.word	0x080054bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005488:	4b94      	ldr	r3, [pc, #592]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005494:	4b91      	ldr	r3, [pc, #580]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	08db      	lsrs	r3, r3, #3
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	4a90      	ldr	r2, [pc, #576]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
 80054a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80054a6:	e111      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054a8:	4b8d      	ldr	r3, [pc, #564]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054aa:	61bb      	str	r3, [r7, #24]
    break;
 80054ac:	e10e      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80054ae:	4b8d      	ldr	r3, [pc, #564]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054b0:	61bb      	str	r3, [r7, #24]
    break;
 80054b2:	e10b      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80054b4:	4b8c      	ldr	r3, [pc, #560]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054b6:	61bb      	str	r3, [r7, #24]
    break;
 80054b8:	e108      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054ba:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80054c4:	4b85      	ldr	r3, [pc, #532]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054d0:	4b82      	ldr	r3, [pc, #520]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80054da:	4b80      	ldr	r3, [pc, #512]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	08db      	lsrs	r3, r3, #3
 80054e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80e1 	beq.w	80056c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b02      	cmp	r3, #2
 8005502:	f000 8083 	beq.w	800560c <HAL_RCC_GetSysClockFreq+0x204>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b02      	cmp	r3, #2
 800550a:	f200 80a1 	bhi.w	8005650 <HAL_RCC_GetSysClockFreq+0x248>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x114>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d056      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800551a:	e099      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800551c:	4b6f      	ldr	r3, [pc, #444]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d02d      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005528:	4b6c      	ldr	r3, [pc, #432]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	4a6b      	ldr	r2, [pc, #428]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
 8005538:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005552:	4b62      	ldr	r3, [pc, #392]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005562:	ed97 6a02 	vldr	s12, [r7, #8]
 8005566:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005582:	e087      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005596:	4b51      	ldr	r3, [pc, #324]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c6:	e065      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80056f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055da:	4b40      	ldr	r3, [pc, #256]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80055f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800560a:	e043      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	eddf 6a38 	vldr	s13, [pc, #224]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800561a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561e:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005632:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800564e:	e021      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80056f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800565e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005672:	ed97 6a02 	vldr	s12, [r7, #8]
 8005676:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800567a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005692:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	0a5b      	lsrs	r3, r3, #9
 800569a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800569e:	3301      	adds	r3, #1
 80056a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80056b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b8:	ee17 3a90 	vmov	r3, s15
 80056bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80056be:	e005      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    break;
 80056c4:	e002      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80056c6:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056c8:	61bb      	str	r3, [r7, #24]
    break;
 80056ca:	bf00      	nop
  }

  return sysclockfreq;
 80056cc:	69bb      	ldr	r3, [r7, #24]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3724      	adds	r7, #36	; 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	58024400 	.word	0x58024400
 80056e0:	03d09000 	.word	0x03d09000
 80056e4:	003d0900 	.word	0x003d0900
 80056e8:	016e3600 	.word	0x016e3600
 80056ec:	46000000 	.word	0x46000000
 80056f0:	4c742400 	.word	0x4c742400
 80056f4:	4a742400 	.word	0x4a742400
 80056f8:	4bb71b00 	.word	0x4bb71b00

080056fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005702:	f7ff fe81 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 8005706:	4602      	mov	r2, r0
 8005708:	4b10      	ldr	r3, [pc, #64]	; (800574c <HAL_RCC_GetHCLKFreq+0x50>)
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	490f      	ldr	r1, [pc, #60]	; (8005750 <HAL_RCC_GetHCLKFreq+0x54>)
 8005714:	5ccb      	ldrb	r3, [r1, r3]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	fa22 f303 	lsr.w	r3, r2, r3
 800571e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <HAL_RCC_GetHCLKFreq+0x50>)
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	4a09      	ldr	r2, [pc, #36]	; (8005750 <HAL_RCC_GetHCLKFreq+0x54>)
 800572a:	5cd3      	ldrb	r3, [r2, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	fa22 f303 	lsr.w	r3, r2, r3
 8005736:	4a07      	ldr	r2, [pc, #28]	; (8005754 <HAL_RCC_GetHCLKFreq+0x58>)
 8005738:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800573a:	4a07      	ldr	r2, [pc, #28]	; (8005758 <HAL_RCC_GetHCLKFreq+0x5c>)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005740:	4b04      	ldr	r3, [pc, #16]	; (8005754 <HAL_RCC_GetHCLKFreq+0x58>)
 8005742:	681b      	ldr	r3, [r3, #0]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	58024400 	.word	0x58024400
 8005750:	0800b384 	.word	0x0800b384
 8005754:	2400000c 	.word	0x2400000c
 8005758:	24000008 	.word	0x24000008

0800575c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005760:	f7ff ffcc 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	091b      	lsrs	r3, r3, #4
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4904      	ldr	r1, [pc, #16]	; (8005784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800577c:	4618      	mov	r0, r3
 800577e:	bd80      	pop	{r7, pc}
 8005780:	58024400 	.word	0x58024400
 8005784:	0800b384 	.word	0x0800b384

08005788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800578c:	f7ff ffb6 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8005790:	4602      	mov	r2, r0
 8005792:	4b06      	ldr	r3, [pc, #24]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	0a1b      	lsrs	r3, r3, #8
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	4904      	ldr	r1, [pc, #16]	; (80057b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800579e:	5ccb      	ldrb	r3, [r1, r3]
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	58024400 	.word	0x58024400
 80057b0:	0800b384 	.word	0x0800b384

080057b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057bc:	2300      	movs	r3, #0
 80057be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057c0:	2300      	movs	r3, #0
 80057c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d03f      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057d8:	d02a      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80057da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057de:	d824      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057e4:	d018      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ea:	d81e      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f4:	d007      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80057f6:	e018      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f8:	4ba6      	ldr	r3, [pc, #664]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	4aa5      	ldr	r2, [pc, #660]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80057fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005802:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005804:	e015      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	2102      	movs	r1, #2
 800580c:	4618      	mov	r0, r3
 800580e:	f001 ff17 	bl	8007640 <RCCEx_PLL2_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005816:	e00c      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	2102      	movs	r1, #2
 800581e:	4618      	mov	r0, r3
 8005820:	f001 ffc0 	bl	80077a4 <RCCEx_PLL3_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005828:	e003      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
      break;
 800582e:	e000      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005838:	4b96      	ldr	r3, [pc, #600]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005844:	4993      	ldr	r1, [pc, #588]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005846:	4313      	orrs	r3, r2
 8005848:	650b      	str	r3, [r1, #80]	; 0x50
 800584a:	e001      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d03d      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	2b04      	cmp	r3, #4
 8005862:	d826      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005881 	.word	0x08005881
 8005870:	0800588f 	.word	0x0800588f
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058b9 	.word	0x080058b9
 800587c:	080058b9 	.word	0x080058b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005880:	4b84      	ldr	r3, [pc, #528]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	4a83      	ldr	r2, [pc, #524]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800588c:	e015      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f001 fed3 	bl	8007640 <RCCEx_PLL2_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800589e:	e00c      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 ff7c 	bl	80077a4 <RCCEx_PLL3_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058b0:	e003      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
      break;
 80058b6:	e000      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80058b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058c0:	4b74      	ldr	r3, [pc, #464]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80058c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c4:	f023 0207 	bic.w	r2, r3, #7
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	4971      	ldr	r1, [pc, #452]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	650b      	str	r3, [r1, #80]	; 0x50
 80058d2:	e001      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d04a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80058ec:	d031      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80058ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80058f2:	d82b      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80058f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f8:	d02d      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fe:	d825      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005900:	2bc0      	cmp	r3, #192	; 0xc0
 8005902:	d02a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005904:	2bc0      	cmp	r3, #192	; 0xc0
 8005906:	d821      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005908:	2b80      	cmp	r3, #128	; 0x80
 800590a:	d016      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	d81d      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d007      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005918:	e018      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591a:	4b5e      	ldr	r3, [pc, #376]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a5d      	ldr	r2, [pc, #372]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005926:	e019      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	2100      	movs	r1, #0
 800592e:	4618      	mov	r0, r3
 8005930:	f001 fe86 	bl	8007640 <RCCEx_PLL2_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005938:	e010      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3324      	adds	r3, #36	; 0x24
 800593e:	2100      	movs	r1, #0
 8005940:	4618      	mov	r0, r3
 8005942:	f001 ff2f 	bl	80077a4 <RCCEx_PLL3_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800594a:	e007      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	75fb      	strb	r3, [r7, #23]
      break;
 8005950:	e004      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005952:	bf00      	nop
 8005954:	e002      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800595a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005962:	4b4c      	ldr	r3, [pc, #304]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005966:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596e:	4949      	ldr	r1, [pc, #292]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005970:	4313      	orrs	r3, r2
 8005972:	650b      	str	r3, [r1, #80]	; 0x50
 8005974:	e001      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005982:	2b00      	cmp	r3, #0
 8005984:	d04f      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800598e:	d036      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005990:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005994:	d830      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599a:	d032      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800599c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a0:	d82a      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80059a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059a6:	d02e      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80059a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059ac:	d824      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80059ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b2:	d018      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b8:	d81e      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80059be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c2:	d007      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80059c4:	e018      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c6:	4b33      	ldr	r3, [pc, #204]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	4a32      	ldr	r2, [pc, #200]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80059d2:	e019      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fe30 	bl	8007640 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80059e4:	e010      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3324      	adds	r3, #36	; 0x24
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fed9 	bl	80077a4 <RCCEx_PLL3_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80059f6:	e007      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	75fb      	strb	r3, [r7, #23]
      break;
 80059fc:	e004      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80059fe:	bf00      	nop
 8005a00:	e002      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005a0e:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a12:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1a:	491e      	ldr	r1, [pc, #120]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	650b      	str	r3, [r1, #80]	; 0x50
 8005a20:	e001      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d034      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a36:	2b30      	cmp	r3, #48	; 0x30
 8005a38:	d01c      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005a3a:	2b30      	cmp	r3, #48	; 0x30
 8005a3c:	d817      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	d00c      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d813      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8005a4a:	2b10      	cmp	r3, #16
 8005a4c:	d10f      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4e:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005a5a:	e00e      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	2102      	movs	r1, #2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fdec 	bl	8007640 <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005a6c:	e005      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	75fb      	strb	r3, [r7, #23]
      break;
 8005a72:	e002      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005a74:	bf00      	nop
 8005a76:	e000      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a8c:	4901      	ldr	r1, [pc, #4]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a92:	e003      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d047      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ab0:	d030      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ab6:	d82a      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005ab8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005abc:	d02c      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005abe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ac2:	d824      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac8:	d018      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ace:	d81e      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	d007      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005ada:	e018      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005adc:	4bb0      	ldr	r3, [pc, #704]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	4aaf      	ldr	r2, [pc, #700]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ae8:	e017      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3304      	adds	r3, #4
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fda5 	bl	8007640 <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005afa:	e00e      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3324      	adds	r3, #36	; 0x24
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 fe4e 	bl	80077a4 <RCCEx_PLL3_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b0c:	e005      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	75fb      	strb	r3, [r7, #23]
      break;
 8005b12:	e002      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005b14:	bf00      	nop
 8005b16:	e000      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b20:	4b9f      	ldr	r3, [pc, #636]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b24:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2c:	499c      	ldr	r1, [pc, #624]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	650b      	str	r3, [r1, #80]	; 0x50
 8005b32:	e001      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d049      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b4c:	d02e      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b52:	d828      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b58:	d02a      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b5e:	d822      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b64:	d026      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005b66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b6a:	d81c      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b70:	d010      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b76:	d816      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b80:	d111      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	2101      	movs	r1, #1
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fd59 	bl	8007640 <RCCEx_PLL2_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005b92:	e012      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3324      	adds	r3, #36	; 0x24
 8005b98:	2101      	movs	r1, #1
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fe02 	bl	80077a4 <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ba4:	e009      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8005baa:	e006      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005bac:	bf00      	nop
 8005bae:	e004      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005bb0:	bf00      	nop
 8005bb2:	e002      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bc0:	4b77      	ldr	r3, [pc, #476]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bcc:	4974      	ldr	r1, [pc, #464]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	650b      	str	r3, [r1, #80]	; 0x50
 8005bd2:	e001      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d053      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bea:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005bee:	d034      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005bf0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005bf4:	d82e      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bfa:	d030      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c00:	d828      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c06:	d02c      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d822      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005c0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c12:	d028      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005c14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c18:	d81c      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c1e:	d010      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c24:	d816      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01f      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c2e:	d111      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3304      	adds	r3, #4
 8005c34:	2101      	movs	r1, #1
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fd02 	bl	8007640 <RCCEx_PLL2_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c40:	e014      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3324      	adds	r3, #36	; 0x24
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fdab 	bl	80077a4 <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c52:	e00b      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	75fb      	strb	r3, [r7, #23]
      break;
 8005c58:	e008      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c72:	4b4b      	ldr	r3, [pc, #300]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c80:	4947      	ldr	r1, [pc, #284]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	658b      	str	r3, [r1, #88]	; 0x58
 8005c86:	e001      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c88:	7dfb      	ldrb	r3, [r7, #23]
 8005c8a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d02f      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca0:	d00e      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca6:	d814      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d015      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cb0:	d10f      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb2:	4b3b      	ldr	r3, [pc, #236]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	4a3a      	ldr	r2, [pc, #232]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005cbe:	e00c      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 fcba 	bl	8007640 <RCCEx_PLL2_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005cd0:	e003      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd6:	e000      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d109      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ce0:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cec:	492c      	ldr	r1, [pc, #176]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8005cf2:	e001      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d032      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d81b      	bhi.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d4b 	.word	0x08005d4b
 8005d18:	08005d25 	.word	0x08005d25
 8005d1c:	08005d33 	.word	0x08005d33
 8005d20:	08005d4b 	.word	0x08005d4b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d24:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	4a1d      	ldr	r2, [pc, #116]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d30:	e00c      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3304      	adds	r3, #4
 8005d36:	2102      	movs	r1, #2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 fc81 	bl	8007640 <RCCEx_PLL2_Config>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d42:	e003      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	75fb      	strb	r3, [r7, #23]
      break;
 8005d48:	e000      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8005d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d52:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d56:	f023 0203 	bic.w	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	4910      	ldr	r1, [pc, #64]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d64:	e001      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 808a 	beq.w	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d84:	f7fc f9b4 	bl	80020f0 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d8a:	e00d      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8c:	f7fc f9b0 	bl	80020f0 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b64      	cmp	r3, #100	; 0x64
 8005d98:	d906      	bls.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	75fb      	strb	r3, [r7, #23]
        break;
 8005d9e:	e009      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8005da0:	58024400 	.word	0x58024400
 8005da4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005da8:	4bba      	ldr	r3, [pc, #744]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0eb      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d166      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005dba:	4bb7      	ldr	r3, [pc, #732]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005dbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dc4:	4053      	eors	r3, r2
 8005dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d013      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dce:	4bb2      	ldr	r3, [pc, #712]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dd8:	4baf      	ldr	r3, [pc, #700]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	4aae      	ldr	r2, [pc, #696]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005de4:	4bac      	ldr	r3, [pc, #688]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	4aab      	ldr	r2, [pc, #684]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005df0:	4aa9      	ldr	r2, [pc, #676]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e00:	d115      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e02:	f7fc f975 	bl	80020f0 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e08:	e00b      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e0a:	f7fc f971 	bl	80020f0 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d902      	bls.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e20:	e005      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e22:	4b9d      	ldr	r3, [pc, #628]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0ed      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d126      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e42:	d10d      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005e44:	4b94      	ldr	r3, [pc, #592]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e52:	0919      	lsrs	r1, r3, #4
 8005e54:	4b91      	ldr	r3, [pc, #580]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e56:	400b      	ands	r3, r1
 8005e58:	498f      	ldr	r1, [pc, #572]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	610b      	str	r3, [r1, #16]
 8005e5e:	e005      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005e60:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	4a8c      	ldr	r2, [pc, #560]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e6a:	6113      	str	r3, [r2, #16]
 8005e6c:	4b8a      	ldr	r3, [pc, #552]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e7a:	4987      	ldr	r1, [pc, #540]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	670b      	str	r3, [r1, #112]	; 0x70
 8005e80:	e004      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	75bb      	strb	r3, [r7, #22]
 8005e86:	e001      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d07f      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e9e:	2b28      	cmp	r3, #40	; 0x28
 8005ea0:	d866      	bhi.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005ea2:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005f77 	.word	0x08005f77
 8005eac:	08005f71 	.word	0x08005f71
 8005eb0:	08005f71 	.word	0x08005f71
 8005eb4:	08005f71 	.word	0x08005f71
 8005eb8:	08005f71 	.word	0x08005f71
 8005ebc:	08005f71 	.word	0x08005f71
 8005ec0:	08005f71 	.word	0x08005f71
 8005ec4:	08005f71 	.word	0x08005f71
 8005ec8:	08005f4d 	.word	0x08005f4d
 8005ecc:	08005f71 	.word	0x08005f71
 8005ed0:	08005f71 	.word	0x08005f71
 8005ed4:	08005f71 	.word	0x08005f71
 8005ed8:	08005f71 	.word	0x08005f71
 8005edc:	08005f71 	.word	0x08005f71
 8005ee0:	08005f71 	.word	0x08005f71
 8005ee4:	08005f71 	.word	0x08005f71
 8005ee8:	08005f5f 	.word	0x08005f5f
 8005eec:	08005f71 	.word	0x08005f71
 8005ef0:	08005f71 	.word	0x08005f71
 8005ef4:	08005f71 	.word	0x08005f71
 8005ef8:	08005f71 	.word	0x08005f71
 8005efc:	08005f71 	.word	0x08005f71
 8005f00:	08005f71 	.word	0x08005f71
 8005f04:	08005f71 	.word	0x08005f71
 8005f08:	08005f77 	.word	0x08005f77
 8005f0c:	08005f71 	.word	0x08005f71
 8005f10:	08005f71 	.word	0x08005f71
 8005f14:	08005f71 	.word	0x08005f71
 8005f18:	08005f71 	.word	0x08005f71
 8005f1c:	08005f71 	.word	0x08005f71
 8005f20:	08005f71 	.word	0x08005f71
 8005f24:	08005f71 	.word	0x08005f71
 8005f28:	08005f77 	.word	0x08005f77
 8005f2c:	08005f71 	.word	0x08005f71
 8005f30:	08005f71 	.word	0x08005f71
 8005f34:	08005f71 	.word	0x08005f71
 8005f38:	08005f71 	.word	0x08005f71
 8005f3c:	08005f71 	.word	0x08005f71
 8005f40:	08005f71 	.word	0x08005f71
 8005f44:	08005f71 	.word	0x08005f71
 8005f48:	08005f77 	.word	0x08005f77
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	2101      	movs	r1, #1
 8005f52:	4618      	mov	r0, r3
 8005f54:	f001 fb74 	bl	8007640 <RCCEx_PLL2_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f5c:	e00c      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3324      	adds	r3, #36	; 0x24
 8005f62:	2101      	movs	r1, #1
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 fc1d 	bl	80077a4 <RCCEx_PLL3_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f6e:	e003      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
      break;
 8005f74:	e000      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8005f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f7e:	4b46      	ldr	r3, [pc, #280]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f82:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f8c:	4942      	ldr	r1, [pc, #264]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	654b      	str	r3, [r1, #84]	; 0x54
 8005f92:	e001      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
 8005f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d038      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fa8:	2b05      	cmp	r3, #5
 8005faa:	d821      	bhi.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005ff7 	.word	0x08005ff7
 8005fb8:	08005fcd 	.word	0x08005fcd
 8005fbc:	08005fdf 	.word	0x08005fdf
 8005fc0:	08005ff7 	.word	0x08005ff7
 8005fc4:	08005ff7 	.word	0x08005ff7
 8005fc8:	08005ff7 	.word	0x08005ff7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 fb34 	bl	8007640 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005fdc:	e00c      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3324      	adds	r3, #36	; 0x24
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 fbdd 	bl	80077a4 <RCCEx_PLL3_Config>
 8005fea:	4603      	mov	r3, r0
 8005fec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005fee:	e003      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8005ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ffe:	4b26      	ldr	r3, [pc, #152]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	f023 0207 	bic.w	r2, r3, #7
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600a:	4923      	ldr	r1, [pc, #140]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800600c:	4313      	orrs	r3, r2
 800600e:	654b      	str	r3, [r1, #84]	; 0x54
 8006010:	e001      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	d040      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006028:	2b05      	cmp	r3, #5
 800602a:	d821      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800602c:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006077 	.word	0x08006077
 8006038:	0800604d 	.word	0x0800604d
 800603c:	0800605f 	.word	0x0800605f
 8006040:	08006077 	.word	0x08006077
 8006044:	08006077 	.word	0x08006077
 8006048:	08006077 	.word	0x08006077
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3304      	adds	r3, #4
 8006050:	2101      	movs	r1, #1
 8006052:	4618      	mov	r0, r3
 8006054:	f001 faf4 	bl	8007640 <RCCEx_PLL2_Config>
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800605c:	e00c      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3324      	adds	r3, #36	; 0x24
 8006062:	2101      	movs	r1, #1
 8006064:	4618      	mov	r0, r3
 8006066:	f001 fb9d 	bl	80077a4 <RCCEx_PLL3_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800606e:	e003      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
      break;
 8006074:	e000      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d110      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	f023 0207 	bic.w	r2, r3, #7
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800608c:	4902      	ldr	r1, [pc, #8]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800608e:	4313      	orrs	r3, r2
 8006090:	658b      	str	r3, [r1, #88]	; 0x58
 8006092:	e007      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006094:	58024800 	.word	0x58024800
 8006098:	58024400 	.word	0x58024400
 800609c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d04b      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060ba:	d02e      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80060bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060c0:	d828      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80060c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c6:	d02a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80060c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060cc:	d822      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80060ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060d2:	d026      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80060d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060d8:	d81c      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80060da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060de:	d010      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80060e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060e4:	d816      	bhi.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01d      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80060ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ee:	d111      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3304      	adds	r3, #4
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 faa2 	bl	8007640 <RCCEx_PLL2_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006100:	e012      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3324      	adds	r3, #36	; 0x24
 8006106:	2102      	movs	r1, #2
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fb4b 	bl	80077a4 <RCCEx_PLL3_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006112:	e009      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	75fb      	strb	r3, [r7, #23]
      break;
 8006118:	e006      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800611a:	bf00      	nop
 800611c:	e004      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800612e:	4bb3      	ldr	r3, [pc, #716]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800613c:	49af      	ldr	r1, [pc, #700]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800613e:	4313      	orrs	r3, r2
 8006140:	654b      	str	r3, [r1, #84]	; 0x54
 8006142:	e001      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d04b      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800615a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800615e:	d02e      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006160:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006164:	d828      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616a:	d02a      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800616c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006170:	d822      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006176:	d026      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800617c:	d81c      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800617e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006182:	d010      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006188:	d816      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01d      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006192:	d111      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f001 fa50 	bl	8007640 <RCCEx_PLL2_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061a4:	e012      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3324      	adds	r3, #36	; 0x24
 80061aa:	2102      	movs	r1, #2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 faf9 	bl	80077a4 <RCCEx_PLL3_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061b6:	e009      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	75fb      	strb	r3, [r7, #23]
      break;
 80061bc:	e006      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80061be:	bf00      	nop
 80061c0:	e004      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80061c2:	bf00      	nop
 80061c4:	e002      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80061ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061d2:	4b8a      	ldr	r3, [pc, #552]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80061d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061e0:	4986      	ldr	r1, [pc, #536]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	658b      	str	r3, [r1, #88]	; 0x58
 80061e6:	e001      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d04b      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006202:	d02e      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006204:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006208:	d828      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800620a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620e:	d02a      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006214:	d822      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006216:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800621a:	d026      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800621c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006220:	d81c      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006226:	d010      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800622c:	d816      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01d      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006236:	d111      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3304      	adds	r3, #4
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f001 f9fe 	bl	8007640 <RCCEx_PLL2_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006248:	e012      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3324      	adds	r3, #36	; 0x24
 800624e:	2102      	movs	r1, #2
 8006250:	4618      	mov	r0, r3
 8006252:	f001 faa7 	bl	80077a4 <RCCEx_PLL3_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800625a:	e009      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]
      break;
 8006260:	e006      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006262:	bf00      	nop
 8006264:	e004      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006266:	bf00      	nop
 8006268:	e002      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800626e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006276:	4b61      	ldr	r3, [pc, #388]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006284:	495d      	ldr	r1, [pc, #372]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006286:	4313      	orrs	r3, r2
 8006288:	658b      	str	r3, [r1, #88]	; 0x58
 800628a:	e001      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a6:	d10a      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3324      	adds	r3, #36	; 0x24
 80062ac:	2102      	movs	r1, #2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 fa78 	bl	80077a4 <RCCEx_PLL3_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062be:	4b4f      	ldr	r3, [pc, #316]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062cc:	494b      	ldr	r1, [pc, #300]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e8:	d10a      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3324      	adds	r3, #36	; 0x24
 80062ee:	2102      	movs	r1, #2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 fa57 	bl	80077a4 <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006300:	4b3e      	ldr	r3, [pc, #248]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800630e:	493b      	ldr	r1, [pc, #236]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006310:	4313      	orrs	r3, r2
 8006312:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d034      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800632a:	d01d      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800632c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006330:	d817      	bhi.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8006336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633a:	d009      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800633c:	e011      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3304      	adds	r3, #4
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f001 f97b 	bl	8007640 <RCCEx_PLL2_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800634e:	e00c      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3324      	adds	r3, #36	; 0x24
 8006354:	2102      	movs	r1, #2
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fa24 	bl	80077a4 <RCCEx_PLL3_Config>
 800635c:	4603      	mov	r3, r0
 800635e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006360:	e003      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	75fb      	strb	r3, [r7, #23]
      break;
 8006366:	e000      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006370:	4b22      	ldr	r3, [pc, #136]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006374:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800637e:	491f      	ldr	r1, [pc, #124]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006380:	4313      	orrs	r3, r2
 8006382:	658b      	str	r3, [r1, #88]	; 0x58
 8006384:	e001      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d036      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800639c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063a0:	d01c      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80063a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063a6:	d816      	bhi.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80063a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ac:	d003      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80063ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063b2:	d007      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80063b4:	e00f      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b6:	4b11      	ldr	r3, [pc, #68]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	4a10      	ldr	r2, [pc, #64]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80063c2:	e00c      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3324      	adds	r3, #36	; 0x24
 80063c8:	2101      	movs	r1, #1
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 f9ea 	bl	80077a4 <RCCEx_PLL3_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80063d4:	e003      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	75fb      	strb	r3, [r7, #23]
      break;
 80063da:	e000      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80063dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10d      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80063e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f2:	4902      	ldr	r1, [pc, #8]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	654b      	str	r3, [r1, #84]	; 0x54
 80063f8:	e004      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006400:	7dfb      	ldrb	r3, [r7, #23]
 8006402:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d029      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641c:	d007      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800641e:	e00f      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006420:	4b69      	ldr	r3, [pc, #420]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	4a68      	ldr	r2, [pc, #416]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800642a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800642c:	e00b      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	2102      	movs	r1, #2
 8006434:	4618      	mov	r0, r3
 8006436:	f001 f903 	bl	8007640 <RCCEx_PLL2_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800643e:	e002      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	75fb      	strb	r3, [r7, #23]
      break;
 8006444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d109      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800644c:	4b5e      	ldr	r3, [pc, #376]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800644e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006450:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006458:	495b      	ldr	r1, [pc, #364]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800645a:	4313      	orrs	r3, r2
 800645c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800645e:	e001      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3324      	adds	r3, #36	; 0x24
 8006474:	2102      	movs	r1, #2
 8006476:	4618      	mov	r0, r3
 8006478:	f001 f994 	bl	80077a4 <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d032      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800649c:	d017      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800649e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a2:	d811      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80064a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a8:	d013      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80064aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ae:	d80b      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d010      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80064b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b8:	d106      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ba:	4b43      	ldr	r3, [pc, #268]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	4a42      	ldr	r2, [pc, #264]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80064c6:	e007      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	75fb      	strb	r3, [r7, #23]
      break;
 80064cc:	e004      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80064ce:	bf00      	nop
 80064d0:	e002      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80064d2:	bf00      	nop
 80064d4:	e000      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80064d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064de:	4b3a      	ldr	r3, [pc, #232]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ec:	4936      	ldr	r1, [pc, #216]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	654b      	str	r3, [r1, #84]	; 0x54
 80064f2:	e001      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d008      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006504:	4b30      	ldr	r3, [pc, #192]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006508:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006510:	492d      	ldr	r1, [pc, #180]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006512:	4313      	orrs	r3, r2
 8006514:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006522:	4b29      	ldr	r3, [pc, #164]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006526:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800652e:	4926      	ldr	r1, [pc, #152]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006530:	4313      	orrs	r3, r2
 8006532:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006540:	4b21      	ldr	r3, [pc, #132]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006544:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654c:	491e      	ldr	r1, [pc, #120]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800654e:	4313      	orrs	r3, r2
 8006550:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800655e:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	4a19      	ldr	r2, [pc, #100]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006568:	6113      	str	r3, [r2, #16]
 800656a:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006574:	4914      	ldr	r1, [pc, #80]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006576:	4313      	orrs	r3, r2
 8006578:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	da08      	bge.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006586:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	490e      	ldr	r1, [pc, #56]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006590:	4313      	orrs	r3, r2
 8006592:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065a0:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80065a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ae:	4906      	ldr	r1, [pc, #24]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80065b4:	7dbb      	ldrb	r3, [r7, #22]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e000      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	58024400 	.word	0x58024400

080065cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b090      	sub	sp, #64	; 0x40
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065da:	f040 8089 	bne.w	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80065de:	4ba8      	ldr	r3, [pc, #672]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	633b      	str	r3, [r7, #48]	; 0x30
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d87d      	bhi.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006609 	.word	0x08006609
 80065f8:	0800662d 	.word	0x0800662d
 80065fc:	08006651 	.word	0x08006651
 8006600:	080066e5 	.word	0x080066e5
 8006604:	08006675 	.word	0x08006675

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006608:	4b9d      	ldr	r3, [pc, #628]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006614:	d107      	bne.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800661a:	4618      	mov	r0, r3
 800661c:	f000 febe 	bl	800739c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006624:	e3f5      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800662a:	e3f2      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800662c:	4b94      	ldr	r3, [pc, #592]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006638:	d107      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800663a:	f107 0318 	add.w	r3, r7, #24
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fc04 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006648:	e3e3      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664e:	e3e0      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006650:	4b8b      	ldr	r3, [pc, #556]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665c:	d107      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800665e:	f107 030c 	add.w	r3, r7, #12
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fd46 	bl	80070f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800666c:	e3d1      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006672:	e3ce      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006674:	4b82      	ldr	r3, [pc, #520]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800667c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800667e:	4b80      	ldr	r3, [pc, #512]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b04      	cmp	r3, #4
 8006688:	d10c      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006690:	4b7b      	ldr	r3, [pc, #492]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	08db      	lsrs	r3, r3, #3
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	4a7a      	ldr	r2, [pc, #488]	; (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a2:	e01e      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066a4:	4b76      	ldr	r3, [pc, #472]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b0:	d106      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80066b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b8:	d102      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066ba:	4b73      	ldr	r3, [pc, #460]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066be:	e010      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066c0:	4b6f      	ldr	r3, [pc, #444]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066cc:	d106      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d4:	d102      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80066d6:	4b6d      	ldr	r3, [pc, #436]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066da:	e002      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80066e0:	e397      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80066e2:	e396      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066e4:	4b6a      	ldr	r3, [pc, #424]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066e8:	e393      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ee:	e390      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f6:	f040 8095 	bne.w	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80066fa:	4b61      	ldr	r3, [pc, #388]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006702:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670a:	d04d      	beq.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006712:	f200 8084 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	2bc0      	cmp	r3, #192	; 0xc0
 800671a:	d07d      	beq.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	2bc0      	cmp	r3, #192	; 0xc0
 8006720:	d87d      	bhi.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	2b80      	cmp	r3, #128	; 0x80
 8006726:	d02d      	beq.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	2b80      	cmp	r3, #128	; 0x80
 800672c:	d877      	bhi.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	2b40      	cmp	r3, #64	; 0x40
 8006738:	d012      	beq.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800673a:	e070      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800673c:	4b50      	ldr	r3, [pc, #320]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006748:	d107      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800674a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fe24 	bl	800739c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006758:	e35b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800675e:	e358      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006760:	4b47      	ldr	r3, [pc, #284]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800676c:	d107      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800676e:	f107 0318 	add.w	r3, r7, #24
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fb6a 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800677c:	e349      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006782:	e346      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006784:	4b3e      	ldr	r3, [pc, #248]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800678c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006790:	d107      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006792:	f107 030c 	add.w	r3, r7, #12
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fcac 	bl	80070f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067a0:	e337      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a6:	e334      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067a8:	4b35      	ldr	r3, [pc, #212]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067b2:	4b33      	ldr	r3, [pc, #204]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d10c      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80067be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067c4:	4b2e      	ldr	r3, [pc, #184]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	08db      	lsrs	r3, r3, #3
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	4a2d      	ldr	r2, [pc, #180]	; (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d6:	e01e      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067d8:	4b29      	ldr	r3, [pc, #164]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e4:	d106      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80067e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ec:	d102      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80067ee:	4b26      	ldr	r3, [pc, #152]	; (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f2:	e010      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067f4:	4b22      	ldr	r3, [pc, #136]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006800:	d106      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006808:	d102      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800680a:	4b20      	ldr	r3, [pc, #128]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680e:	e002      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006814:	e2fd      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006816:	e2fc      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006818:	4b1d      	ldr	r3, [pc, #116]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800681a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800681c:	e2f9      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006822:	e2f6      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682a:	f040 80a7 	bne.w	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 800682e:	4b14      	ldr	r3, [pc, #80]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006832:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006836:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683e:	d05f      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006846:	f200 8096 	bhi.w	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006850:	f000 808e 	beq.w	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800685a:	f200 808c 	bhi.w	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006864:	d03a      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686c:	f200 8083 	bhi.w	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00e      	beq.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d01c      	beq.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 800687e:	e07a      	b.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006880:	58024400 	.word	0x58024400
 8006884:	03d09000 	.word	0x03d09000
 8006888:	003d0900 	.word	0x003d0900
 800688c:	016e3600 	.word	0x016e3600
 8006890:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006894:	4ba8      	ldr	r3, [pc, #672]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068a0:	d107      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fd78 	bl	800739c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068b0:	e2af      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068b6:	e2ac      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068b8:	4b9f      	ldr	r3, [pc, #636]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c4:	d107      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c6:	f107 0318 	add.w	r3, r7, #24
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fabe 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068d4:	e29d      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068da:	e29a      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068dc:	4b96      	ldr	r3, [pc, #600]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e8:	d107      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ea:	f107 030c 	add.w	r3, r7, #12
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fc00 	bl	80070f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068f8:	e28b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068fe:	e288      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006900:	4b8d      	ldr	r3, [pc, #564]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006904:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006908:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800690a:	4b8b      	ldr	r3, [pc, #556]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b04      	cmp	r3, #4
 8006914:	d10c      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800691c:	4b86      	ldr	r3, [pc, #536]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	08db      	lsrs	r3, r3, #3
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	4a85      	ldr	r2, [pc, #532]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800692e:	e01e      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006930:	4b81      	ldr	r3, [pc, #516]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693c:	d106      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 800693e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006944:	d102      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006946:	4b7e      	ldr	r3, [pc, #504]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694a:	e010      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800694c:	4b7a      	ldr	r3, [pc, #488]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006958:	d106      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800695a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006960:	d102      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006962:	4b78      	ldr	r3, [pc, #480]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006966:	e002      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800696c:	e251      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800696e:	e250      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006970:	4b75      	ldr	r3, [pc, #468]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006974:	e24d      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800697a:	e24a      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	f040 809c 	bne.w	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006986:	4b6c      	ldr	r3, [pc, #432]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800698e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006996:	d054      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800699e:	f200 808b 	bhi.w	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069a8:	f000 8083 	beq.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069b2:	f200 8081 	bhi.w	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069bc:	d02f      	beq.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c4:	d878      	bhi.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d2:	d012      	beq.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80069d4:	e070      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069d6:	4b58      	ldr	r3, [pc, #352]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069e2:	d107      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fcd7 	bl	800739c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069f2:	e20e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069f8:	e20b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069fa:	4b4f      	ldr	r3, [pc, #316]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a06:	d107      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a08:	f107 0318 	add.w	r3, r7, #24
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fa1d 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a16:	e1fc      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a1c:	e1f9      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a1e:	4b46      	ldr	r3, [pc, #280]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2a:	d107      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a2c:	f107 030c 	add.w	r3, r7, #12
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fb5f 	bl	80070f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a3a:	e1ea      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a40:	e1e7      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a42:	4b3d      	ldr	r3, [pc, #244]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a4a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a4c:	4b3a      	ldr	r3, [pc, #232]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d10c      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a5e:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	08db      	lsrs	r3, r3, #3
 8006a64:	f003 0303 	and.w	r3, r3, #3
 8006a68:	4a34      	ldr	r2, [pc, #208]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a70:	e01e      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a72:	4b31      	ldr	r3, [pc, #196]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8006a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a86:	d102      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a88:	4b2d      	ldr	r3, [pc, #180]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a8c:	e010      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a8e:	4b2a      	ldr	r3, [pc, #168]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a9a:	d106      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa2:	d102      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006aa4:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006aae:	e1b0      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006ab0:	e1af      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ab2:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ab6:	e1ac      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006abc:	e1a9      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ac4:	d17d      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006ac6:	4b1c      	ldr	r3, [pc, #112]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ace:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ad6:	d039      	beq.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ade:	d86d      	bhi.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aec:	d012      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006aee:	e065      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006af0:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006afc:	d107      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006afe:	f107 0318 	add.w	r3, r7, #24
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 f9a2 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b0c:	e181      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b12:	e17e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b14:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b20:	d107      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b22:	f107 030c 	add.w	r3, r7, #12
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fae4 	bl	80070f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b30:	e16f      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b36:	e16c      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	03d09000 	.word	0x03d09000
 8006b40:	003d0900 	.word	0x003d0900
 8006b44:	016e3600 	.word	0x016e3600
 8006b48:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b4c:	4ba0      	ldr	r3, [pc, #640]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b56:	4b9e      	ldr	r3, [pc, #632]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d10c      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8006b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d109      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b68:	4b99      	ldr	r3, [pc, #612]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	08db      	lsrs	r3, r3, #3
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	4a98      	ldr	r2, [pc, #608]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b7a:	e01e      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b7c:	4b94      	ldr	r3, [pc, #592]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b88:	d106      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b90:	d102      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b92:	4b91      	ldr	r3, [pc, #580]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b96:	e010      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b98:	4b8d      	ldr	r3, [pc, #564]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ba4:	d106      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bac:	d102      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006bae:	4b8b      	ldr	r3, [pc, #556]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb2:	e002      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006bb8:	e12b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006bba:	e12a      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bc0:	e127      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc8:	d133      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006bca:	4b81      	ldr	r3, [pc, #516]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d004      	beq.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be0:	d012      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006be2:	e023      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006be4:	4b7a      	ldr	r3, [pc, #488]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fbd0 	bl	800739c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c00:	e107      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c06:	e104      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c08:	4b71      	ldr	r3, [pc, #452]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c14:	d107      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c16:	f107 0318 	add.w	r3, r7, #24
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f916 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c24:	e0f5      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c2a:	e0f2      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c30:	e0ef      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c38:	f040 8091 	bne.w	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006c3c:	4b64      	ldr	r3, [pc, #400]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c40:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006c44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006c4c:	f000 8081 	beq.w	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006c56:	d87f      	bhi.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c5e:	d06b      	beq.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c66:	d877      	bhi.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d056      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c76:	d86f      	bhi.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c7e:	d03b      	beq.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c86:	d867      	bhi.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c8e:	d021      	beq.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c96:	d85f      	bhi.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ca4:	d004      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006ca6:	e057      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006ca8:	f000 f8ba 	bl	8006e20 <HAL_RCCEx_GetD3PCLK1Freq>
 8006cac:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006cae:	e0b0      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cb0:	4b47      	ldr	r3, [pc, #284]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cbc:	d107      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cbe:	f107 0318 	add.w	r3, r7, #24
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 f8c2 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ccc:	e0a1      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cd2:	e09e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cd4:	4b3e      	ldr	r3, [pc, #248]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce2:	f107 030c 	add.w	r3, r7, #12
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fa04 	bl	80070f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006cf0:	e08f      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf6:	e08c      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cf8:	4b35      	ldr	r3, [pc, #212]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d109      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d04:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	08db      	lsrs	r3, r3, #3
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	4a31      	ldr	r2, [pc, #196]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
 8006d14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d16:	e07c      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d1c:	e079      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d1e:	4b2c      	ldr	r3, [pc, #176]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2a:	d102      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8006d2c:	4b2a      	ldr	r3, [pc, #168]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d30:	e06f      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d36:	e06c      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d38:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d44:	d102      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8006d46:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006d48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d4a:	e062      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d50:	e05f      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d52:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d56:	e05c      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d5c:	e059      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d64:	d153      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006d66:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d6e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d76:	d035      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d7e:	d843      	bhi.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d004      	beq.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d8c:	d00d      	beq.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8006d8e:	e03b      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d90:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d9c:	d102      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006da2:	e036      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da8:	e033      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006db6:	d107      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 faed 	bl	800739c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006dc6:	e024      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dcc:	e021      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	003d0900 	.word	0x003d0900
 8006ddc:	016e3600 	.word	0x016e3600
 8006de0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006de4:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df0:	d107      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006df2:	f107 0318 	add.w	r3, r7, #24
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f828 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e00:	e007      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e06:	e004      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e0c:	e001      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3740      	adds	r7, #64	; 0x40
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	58024400 	.word	0x58024400

08006e20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006e24:	f7fe fc6a 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	091b      	lsrs	r3, r3, #4
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	4904      	ldr	r1, [pc, #16]	; (8006e48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e36:	5ccb      	ldrb	r3, [r1, r3]
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	58024400 	.word	0x58024400
 8006e48:	0800b384 	.word	0x0800b384

08006e4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b089      	sub	sp, #36	; 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e54:	4ba1      	ldr	r3, [pc, #644]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006e5e:	4b9f      	ldr	r3, [pc, #636]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e62:	0b1b      	lsrs	r3, r3, #12
 8006e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e6a:	4b9c      	ldr	r3, [pc, #624]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6e:	091b      	lsrs	r3, r3, #4
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006e76:	4b99      	ldr	r3, [pc, #612]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7a:	08db      	lsrs	r3, r3, #3
 8006e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8111 	beq.w	80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	f000 8083 	beq.w	8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	f200 80a1 	bhi.w	8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d056      	beq.n	8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006eb6:	e099      	b.n	8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eb8:	4b88      	ldr	r3, [pc, #544]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d02d      	beq.n	8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ec4:	4b85      	ldr	r3, [pc, #532]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	08db      	lsrs	r3, r3, #3
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	4a84      	ldr	r2, [pc, #528]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eee:	4b7b      	ldr	r3, [pc, #492]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f02:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f1e:	e087      	b.n	8007030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b6a      	ldr	r3, [pc, #424]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f46:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f62:	e065      	b.n	8007030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b59      	ldr	r3, [pc, #356]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fa6:	e043      	b.n	8007030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fba:	4b48      	ldr	r3, [pc, #288]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fea:	e021      	b.n	8007030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b37      	ldr	r3, [pc, #220]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007012:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800702e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007030:	4b2a      	ldr	r3, [pc, #168]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	0a5b      	lsrs	r3, r3, #9
 8007036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800704a:	edd7 6a07 	vldr	s13, [r7, #28]
 800704e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007056:	ee17 2a90 	vmov	r2, s15
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800705e:	4b1f      	ldr	r3, [pc, #124]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	0c1b      	lsrs	r3, r3, #16
 8007064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007068:	ee07 3a90 	vmov	s15, r3
 800706c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007078:	edd7 6a07 	vldr	s13, [r7, #28]
 800707c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007084:	ee17 2a90 	vmov	r2, s15
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800708c:	4b13      	ldr	r3, [pc, #76]	; (80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	0e1b      	lsrs	r3, r3, #24
 8007092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b2:	ee17 2a90 	vmov	r2, s15
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070ba:	e008      	b.n	80070ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	609a      	str	r2, [r3, #8]
}
 80070ce:	bf00      	nop
 80070d0:	3724      	adds	r7, #36	; 0x24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	58024400 	.word	0x58024400
 80070e0:	03d09000 	.word	0x03d09000
 80070e4:	46000000 	.word	0x46000000
 80070e8:	4c742400 	.word	0x4c742400
 80070ec:	4a742400 	.word	0x4a742400
 80070f0:	4bb71b00 	.word	0x4bb71b00

080070f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b089      	sub	sp, #36	; 0x24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070fc:	4ba1      	ldr	r3, [pc, #644]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007106:	4b9f      	ldr	r3, [pc, #636]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710a:	0d1b      	lsrs	r3, r3, #20
 800710c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007110:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007112:	4b9c      	ldr	r3, [pc, #624]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	0a1b      	lsrs	r3, r3, #8
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800711e:	4b99      	ldr	r3, [pc, #612]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007122:	08db      	lsrs	r3, r3, #3
 8007124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	fb02 f303 	mul.w	r3, r2, r3
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 8111 	beq.w	8007364 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b02      	cmp	r3, #2
 8007146:	f000 8083 	beq.w	8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	2b02      	cmp	r3, #2
 800714e:	f200 80a1 	bhi.w	8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d056      	beq.n	800720c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800715e:	e099      	b.n	8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007160:	4b88      	ldr	r3, [pc, #544]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d02d      	beq.n	80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800716c:	4b85      	ldr	r3, [pc, #532]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	08db      	lsrs	r3, r3, #3
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	4a84      	ldr	r2, [pc, #528]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
 800717c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	ee07 3a90 	vmov	s15, r3
 8007184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007196:	4b7b      	ldr	r3, [pc, #492]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071c6:	e087      	b.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071da:	4b6a      	ldr	r3, [pc, #424]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800720a:	e065      	b.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800721a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721e:	4b59      	ldr	r3, [pc, #356]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007232:	eddf 5a56 	vldr	s11, [pc, #344]	; 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800724e:	e043      	b.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800725e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007262:	4b48      	ldr	r3, [pc, #288]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	ed97 6a03 	vldr	s12, [r7, #12]
 8007276:	eddf 5a45 	vldr	s11, [pc, #276]	; 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007292:	e021      	b.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b37      	ldr	r3, [pc, #220]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80072d8:	4b2a      	ldr	r3, [pc, #168]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	0a5b      	lsrs	r3, r3, #9
 80072de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fe:	ee17 2a90 	vmov	r2, s15
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007306:	4b1f      	ldr	r3, [pc, #124]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	0c1b      	lsrs	r3, r3, #16
 800730c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800731c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007320:	edd7 6a07 	vldr	s13, [r7, #28]
 8007324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732c:	ee17 2a90 	vmov	r2, s15
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007334:	4b13      	ldr	r3, [pc, #76]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	0e1b      	lsrs	r3, r3, #24
 800733a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800734e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735a:	ee17 2a90 	vmov	r2, s15
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007362:	e008      	b.n	8007376 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	609a      	str	r2, [r3, #8]
}
 8007376:	bf00      	nop
 8007378:	3724      	adds	r7, #36	; 0x24
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	58024400 	.word	0x58024400
 8007388:	03d09000 	.word	0x03d09000
 800738c:	46000000 	.word	0x46000000
 8007390:	4c742400 	.word	0x4c742400
 8007394:	4a742400 	.word	0x4a742400
 8007398:	4bb71b00 	.word	0x4bb71b00

0800739c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800739c:	b480      	push	{r7}
 800739e:	b089      	sub	sp, #36	; 0x24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073a4:	4ba0      	ldr	r3, [pc, #640]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80073ae:	4b9e      	ldr	r3, [pc, #632]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	091b      	lsrs	r3, r3, #4
 80073b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073ba:	4b9b      	ldr	r3, [pc, #620]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073c4:	4b98      	ldr	r3, [pc, #608]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	08db      	lsrs	r3, r3, #3
 80073ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	fb02 f303 	mul.w	r3, r2, r3
 80073d4:	ee07 3a90 	vmov	s15, r3
 80073d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8111 	beq.w	800760a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	f000 8083 	beq.w	80074f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	f200 80a1 	bhi.w	800753a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d056      	beq.n	80074b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007404:	e099      	b.n	800753a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007406:	4b88      	ldr	r3, [pc, #544]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d02d      	beq.n	800746e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007412:	4b85      	ldr	r3, [pc, #532]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	4a83      	ldr	r2, [pc, #524]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800741e:	fa22 f303 	lsr.w	r3, r2, r3
 8007422:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743c:	4b7a      	ldr	r3, [pc, #488]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007450:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007468:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800746c:	e087      	b.n	800757e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007478:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800747c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007480:	4b69      	ldr	r3, [pc, #420]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007490:	ed97 6a03 	vldr	s12, [r7, #12]
 8007494:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074b0:	e065      	b.n	800757e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007638 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80074c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c4:	4b58      	ldr	r3, [pc, #352]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074f4:	e043      	b.n	800757e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007500:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800763c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007508:	4b47      	ldr	r3, [pc, #284]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007518:	ed97 6a03 	vldr	s12, [r7, #12]
 800751c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800752c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007538:	e021      	b.n	800757e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	ee07 3a90 	vmov	s15, r3
 8007540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007544:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754c:	4b36      	ldr	r3, [pc, #216]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007560:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800757c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800757e:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	0a5b      	lsrs	r3, r3, #9
 8007584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007598:	edd7 6a07 	vldr	s13, [r7, #28]
 800759c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a4:	ee17 2a90 	vmov	r2, s15
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80075ac:	4b1e      	ldr	r3, [pc, #120]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d2:	ee17 2a90 	vmov	r2, s15
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80075da:	4b13      	ldr	r3, [pc, #76]	; (8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	0e1b      	lsrs	r3, r3, #24
 80075e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007600:	ee17 2a90 	vmov	r2, s15
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007608:	e008      	b.n	800761c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	609a      	str	r2, [r3, #8]
}
 800761c:	bf00      	nop
 800761e:	3724      	adds	r7, #36	; 0x24
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	58024400 	.word	0x58024400
 800762c:	03d09000 	.word	0x03d09000
 8007630:	46000000 	.word	0x46000000
 8007634:	4c742400 	.word	0x4c742400
 8007638:	4a742400 	.word	0x4a742400
 800763c:	4bb71b00 	.word	0x4bb71b00

08007640 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800764e:	4b53      	ldr	r3, [pc, #332]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b03      	cmp	r3, #3
 8007658:	d101      	bne.n	800765e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e099      	b.n	8007792 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800765e:	4b4f      	ldr	r3, [pc, #316]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a4e      	ldr	r2, [pc, #312]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007664:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766a:	f7fa fd41 	bl	80020f0 <HAL_GetTick>
 800766e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007670:	e008      	b.n	8007684 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007672:	f7fa fd3d 	bl	80020f0 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e086      	b.n	8007792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007684:	4b45      	ldr	r3, [pc, #276]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1f0      	bne.n	8007672 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007690:	4b42      	ldr	r3, [pc, #264]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	031b      	lsls	r3, r3, #12
 800769e:	493f      	ldr	r1, [pc, #252]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	628b      	str	r3, [r1, #40]	; 0x28
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	025b      	lsls	r3, r3, #9
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	3b01      	subs	r3, #1
 80076c0:	041b      	lsls	r3, r3, #16
 80076c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	061b      	lsls	r3, r3, #24
 80076d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076d4:	4931      	ldr	r1, [pc, #196]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076da:	4b30      	ldr	r3, [pc, #192]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	492d      	ldr	r1, [pc, #180]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076ec:	4b2b      	ldr	r3, [pc, #172]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	f023 0220 	bic.w	r2, r3, #32
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	4928      	ldr	r1, [pc, #160]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076fe:	4b27      	ldr	r3, [pc, #156]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	4a26      	ldr	r2, [pc, #152]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007704:	f023 0310 	bic.w	r3, r3, #16
 8007708:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800770a:	4b24      	ldr	r3, [pc, #144]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 800770c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800770e:	4b24      	ldr	r3, [pc, #144]	; (80077a0 <RCCEx_PLL2_Config+0x160>)
 8007710:	4013      	ands	r3, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	69d2      	ldr	r2, [r2, #28]
 8007716:	00d2      	lsls	r2, r2, #3
 8007718:	4920      	ldr	r1, [pc, #128]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800771e:	4b1f      	ldr	r3, [pc, #124]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	4a1e      	ldr	r2, [pc, #120]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007724:	f043 0310 	orr.w	r3, r3, #16
 8007728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d106      	bne.n	800773e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007730:	4b1a      	ldr	r3, [pc, #104]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	4a19      	ldr	r2, [pc, #100]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007736:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800773a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800773c:	e00f      	b.n	800775e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d106      	bne.n	8007752 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007744:	4b15      	ldr	r3, [pc, #84]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4a14      	ldr	r2, [pc, #80]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 800774a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800774e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007750:	e005      	b.n	800775e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	4a11      	ldr	r2, [pc, #68]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800775c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800775e:	4b0f      	ldr	r3, [pc, #60]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a0e      	ldr	r2, [pc, #56]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776a:	f7fa fcc1 	bl	80020f0 <HAL_GetTick>
 800776e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007770:	e008      	b.n	8007784 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007772:	f7fa fcbd 	bl	80020f0 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e006      	b.n	8007792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	58024400 	.word	0x58024400
 80077a0:	ffff0007 	.word	0xffff0007

080077a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077b2:	4b53      	ldr	r3, [pc, #332]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d101      	bne.n	80077c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e099      	b.n	80078f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077c2:	4b4f      	ldr	r3, [pc, #316]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a4e      	ldr	r2, [pc, #312]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ce:	f7fa fc8f 	bl	80020f0 <HAL_GetTick>
 80077d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077d4:	e008      	b.n	80077e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077d6:	f7fa fc8b 	bl	80020f0 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e086      	b.n	80078f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077e8:	4b45      	ldr	r3, [pc, #276]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1f0      	bne.n	80077d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077f4:	4b42      	ldr	r3, [pc, #264]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	051b      	lsls	r3, r3, #20
 8007802:	493f      	ldr	r1, [pc, #252]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007804:	4313      	orrs	r3, r2
 8007806:	628b      	str	r3, [r1, #40]	; 0x28
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	3b01      	subs	r3, #1
 800780e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	3b01      	subs	r3, #1
 8007818:	025b      	lsls	r3, r3, #9
 800781a:	b29b      	uxth	r3, r3
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	3b01      	subs	r3, #1
 8007824:	041b      	lsls	r3, r3, #16
 8007826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	3b01      	subs	r3, #1
 8007832:	061b      	lsls	r3, r3, #24
 8007834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007838:	4931      	ldr	r1, [pc, #196]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800783a:	4313      	orrs	r3, r2
 800783c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800783e:	4b30      	ldr	r3, [pc, #192]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	492d      	ldr	r1, [pc, #180]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800784c:	4313      	orrs	r3, r2
 800784e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007850:	4b2b      	ldr	r3, [pc, #172]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	4928      	ldr	r1, [pc, #160]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800785e:	4313      	orrs	r3, r2
 8007860:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007862:	4b27      	ldr	r3, [pc, #156]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	4a26      	ldr	r2, [pc, #152]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800786c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800786e:	4b24      	ldr	r3, [pc, #144]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007872:	4b24      	ldr	r3, [pc, #144]	; (8007904 <RCCEx_PLL3_Config+0x160>)
 8007874:	4013      	ands	r3, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	69d2      	ldr	r2, [r2, #28]
 800787a:	00d2      	lsls	r2, r2, #3
 800787c:	4920      	ldr	r1, [pc, #128]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800787e:	4313      	orrs	r3, r2
 8007880:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007882:	4b1f      	ldr	r3, [pc, #124]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800788c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	4a19      	ldr	r2, [pc, #100]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800789a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800789e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a0:	e00f      	b.n	80078c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d106      	bne.n	80078b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078a8:	4b15      	ldr	r3, [pc, #84]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	4a14      	ldr	r2, [pc, #80]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078b4:	e005      	b.n	80078c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078b6:	4b12      	ldr	r3, [pc, #72]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	4a11      	ldr	r2, [pc, #68]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a0e      	ldr	r2, [pc, #56]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ce:	f7fa fc0f 	bl	80020f0 <HAL_GetTick>
 80078d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078d4:	e008      	b.n	80078e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078d6:	f7fa fc0b 	bl	80020f0 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d901      	bls.n	80078e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e006      	b.n	80078f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0f0      	beq.n	80078d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
 8007904:	ffff0007 	.word	0xffff0007

08007908 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e0f1      	b.n	8007afe <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a78      	ldr	r2, [pc, #480]	; (8007b08 <HAL_SPI_Init+0x200>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00f      	beq.n	800794a <HAL_SPI_Init+0x42>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a77      	ldr	r2, [pc, #476]	; (8007b0c <HAL_SPI_Init+0x204>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00a      	beq.n	800794a <HAL_SPI_Init+0x42>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a75      	ldr	r2, [pc, #468]	; (8007b10 <HAL_SPI_Init+0x208>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d005      	beq.n	800794a <HAL_SPI_Init+0x42>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b0f      	cmp	r3, #15
 8007944:	d901      	bls.n	800794a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e0d9      	b.n	8007afe <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 f880 	bl	8008a50 <SPI_GetPacketSize>
 8007950:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a6c      	ldr	r2, [pc, #432]	; (8007b08 <HAL_SPI_Init+0x200>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00c      	beq.n	8007976 <HAL_SPI_Init+0x6e>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a6a      	ldr	r2, [pc, #424]	; (8007b0c <HAL_SPI_Init+0x204>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d007      	beq.n	8007976 <HAL_SPI_Init+0x6e>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a69      	ldr	r2, [pc, #420]	; (8007b10 <HAL_SPI_Init+0x208>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d002      	beq.n	8007976 <HAL_SPI_Init+0x6e>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b08      	cmp	r3, #8
 8007974:	d811      	bhi.n	800799a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800797a:	4a63      	ldr	r2, [pc, #396]	; (8007b08 <HAL_SPI_Init+0x200>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d009      	beq.n	8007994 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a61      	ldr	r2, [pc, #388]	; (8007b0c <HAL_SPI_Init+0x204>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <HAL_SPI_Init+0x8c>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a60      	ldr	r2, [pc, #384]	; (8007b10 <HAL_SPI_Init+0x208>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d104      	bne.n	800799e <HAL_SPI_Init+0x96>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b10      	cmp	r3, #16
 8007998:	d901      	bls.n	800799e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e0af      	b.n	8007afe <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fa f88c 	bl	8001ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0201 	bic.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80079da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079e4:	d119      	bne.n	8007a1a <HAL_SPI_Init+0x112>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ee:	d103      	bne.n	80079f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d008      	beq.n	8007a0a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10c      	bne.n	8007a1a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a08:	d107      	bne.n	8007a1a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69da      	ldr	r2, [r3, #28]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	431a      	orrs	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	ea42 0103 	orr.w	r1, r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	431a      	orrs	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7a:	ea42 0103 	orr.w	r1, r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d113      	bne.n	8007aba <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aa4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ab8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0201 	bic.w	r2, r2, #1
 8007ac8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	40013000 	.word	0x40013000
 8007b0c:	40003800 	.word	0x40003800
 8007b10:	40003c00 	.word	0x40003c00

08007b14 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	4613      	mov	r3, r2
 8007b22:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3320      	adds	r3, #32
 8007b2a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_SPI_Transmit+0x2a>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e1d7      	b.n	8007eee <HAL_SPI_Transmit+0x3da>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b46:	f7fa fad3 	bl	80020f0 <HAL_GetTick>
 8007b4a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d007      	beq.n	8007b68 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007b64:	7efb      	ldrb	r3, [r7, #27]
 8007b66:	e1c2      	b.n	8007eee <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_SPI_Transmit+0x60>
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007b80:	7efb      	ldrb	r3, [r7, #27]
 8007b82:	e1b4      	b.n	8007eee <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2203      	movs	r2, #3
 8007b88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	88fa      	ldrh	r2, [r7, #6]
 8007b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	88fa      	ldrh	r2, [r7, #6]
 8007ba6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007bd4:	d107      	bne.n	8007be6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	4b96      	ldr	r3, [pc, #600]	; (8007e48 <HAL_SPI_Transmit+0x334>)
 8007bee:	4013      	ands	r3, r2
 8007bf0:	88f9      	ldrh	r1, [r7, #6]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f042 0201 	orr.w	r2, r2, #1
 8007c08:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c12:	d107      	bne.n	8007c24 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2b0f      	cmp	r3, #15
 8007c2a:	d947      	bls.n	8007cbc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007c2c:	e03f      	b.n	8007cae <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d114      	bne.n	8007c66 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6812      	ldr	r2, [r2, #0]
 8007c46:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	1d1a      	adds	r2, r3, #4
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c64:	e023      	b.n	8007cae <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c66:	f7fa fa43 	bl	80020f0 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d803      	bhi.n	8007c7e <HAL_SPI_Transmit+0x16a>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7c:	d102      	bne.n	8007c84 <HAL_SPI_Transmit+0x170>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d114      	bne.n	8007cae <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fe15 	bl	80088b4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e11f      	b.n	8007eee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1b9      	bne.n	8007c2e <HAL_SPI_Transmit+0x11a>
 8007cba:	e0f2      	b.n	8007ea2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	2b07      	cmp	r3, #7
 8007cc2:	f240 80e7 	bls.w	8007e94 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007cc6:	e05d      	b.n	8007d84 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d132      	bne.n	8007d3c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d918      	bls.n	8007d14 <HAL_SPI_Transmit+0x200>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d014      	beq.n	8007d14 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6812      	ldr	r2, [r2, #0]
 8007cf4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b02      	subs	r3, #2
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007d12:	e037      	b.n	8007d84 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d18:	881a      	ldrh	r2, [r3, #0]
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d22:	1c9a      	adds	r2, r3, #2
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007d3a:	e023      	b.n	8007d84 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d3c:	f7fa f9d8 	bl	80020f0 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d803      	bhi.n	8007d54 <HAL_SPI_Transmit+0x240>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	d102      	bne.n	8007d5a <HAL_SPI_Transmit+0x246>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d114      	bne.n	8007d84 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fdaa 	bl	80088b4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e0b4      	b.n	8007eee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d19b      	bne.n	8007cc8 <HAL_SPI_Transmit+0x1b4>
 8007d90:	e087      	b.n	8007ea2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d155      	bne.n	8007e4c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d918      	bls.n	8007dde <HAL_SPI_Transmit+0x2ca>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	d914      	bls.n	8007dde <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	3b04      	subs	r3, #4
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007ddc:	e05a      	b.n	8007e94 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d917      	bls.n	8007e1a <HAL_SPI_Transmit+0x306>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d013      	beq.n	8007e1a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df6:	881a      	ldrh	r2, [r3, #0]
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e00:	1c9a      	adds	r2, r3, #2
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	3b02      	subs	r3, #2
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e18:	e03c      	b.n	8007e94 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3320      	adds	r3, #32
 8007e24:	7812      	ldrb	r2, [r2, #0]
 8007e26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e44:	e026      	b.n	8007e94 <HAL_SPI_Transmit+0x380>
 8007e46:	bf00      	nop
 8007e48:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e4c:	f7fa f950 	bl	80020f0 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d803      	bhi.n	8007e64 <HAL_SPI_Transmit+0x350>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e62:	d102      	bne.n	8007e6a <HAL_SPI_Transmit+0x356>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d114      	bne.n	8007e94 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 fd22 	bl	80088b4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e02c      	b.n	8007eee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f47f af78 	bne.w	8007d92 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2108      	movs	r1, #8
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 fda1 	bl	80089f4 <SPI_WaitOnFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d007      	beq.n	8007ec8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ebe:	f043 0220 	orr.w	r2, r3, #32
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 fcf3 	bl	80088b4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007eec:	7efb      	ldrb	r3, [r7, #27]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop

08007ef8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	4613      	mov	r3, r2
 8007f06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3330      	adds	r3, #48	; 0x30
 8007f12:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f1c:	d112      	bne.n	8007f44 <HAL_SPI_Receive+0x4c>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10e      	bne.n	8007f44 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2204      	movs	r2, #4
 8007f2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f2e:	88fa      	ldrh	r2, [r7, #6]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	4613      	mov	r3, r2
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 f9ce 	bl	80082dc <HAL_SPI_TransmitReceive>
 8007f40:	4603      	mov	r3, r0
 8007f42:	e1c7      	b.n	80082d4 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d101      	bne.n	8007f52 <HAL_SPI_Receive+0x5a>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e1c0      	b.n	80082d4 <HAL_SPI_Receive+0x3dc>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f5a:	f7fa f8c9 	bl	80020f0 <HAL_GetTick>
 8007f5e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d007      	beq.n	8007f7c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007f78:	7ffb      	ldrb	r3, [r7, #31]
 8007f7a:	e1ab      	b.n	80082d4 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_SPI_Receive+0x90>
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d107      	bne.n	8007f98 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007f94:	7ffb      	ldrb	r3, [r7, #31]
 8007f96:	e19d      	b.n	80082d4 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2204      	movs	r2, #4
 8007f9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007fe8:	d107      	bne.n	8007ffa <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	4b94      	ldr	r3, [pc, #592]	; (8008254 <HAL_SPI_Receive+0x35c>)
 8008002:	4013      	ands	r3, r2
 8008004:	88f9      	ldrh	r1, [r7, #6]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	6812      	ldr	r2, [r2, #0]
 800800a:	430b      	orrs	r3, r1
 800800c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0201 	orr.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008026:	d107      	bne.n	8008038 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008036:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	2b0f      	cmp	r3, #15
 800803e:	d948      	bls.n	80080d2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008040:	e040      	b.n	80080c4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	695a      	ldr	r2, [r3, #20]
 8008048:	f248 0308 	movw	r3, #32776	; 0x8008
 800804c:	4013      	ands	r3, r2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d014      	beq.n	800807c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800805a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800805c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008062:	1d1a      	adds	r2, r3, #4
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800806e:	b29b      	uxth	r3, r3
 8008070:	3b01      	subs	r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800807a:	e023      	b.n	80080c4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800807c:	f7fa f838 	bl	80020f0 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d803      	bhi.n	8008094 <HAL_SPI_Receive+0x19c>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008092:	d102      	bne.n	800809a <HAL_SPI_Receive+0x1a2>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d114      	bne.n	80080c4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fc0a 	bl	80088b4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e107      	b.n	80082d4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1b8      	bne.n	8008042 <HAL_SPI_Receive+0x14a>
 80080d0:	e0ed      	b.n	80082ae <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	2b07      	cmp	r3, #7
 80080d8:	f240 80e2 	bls.w	80082a0 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80080dc:	e05b      	b.n	8008196 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d030      	beq.n	800814e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d014      	beq.n	8008124 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008102:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008104:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800810a:	1d1a      	adds	r2, r3, #4
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b02      	subs	r3, #2
 800811a:	b29a      	uxth	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008122:	e038      	b.n	8008196 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	8812      	ldrh	r2, [r2, #0]
 800812c:	b292      	uxth	r2, r2
 800812e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008134:	1c9a      	adds	r2, r3, #2
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b01      	subs	r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800814c:	e023      	b.n	8008196 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800814e:	f7f9 ffcf 	bl	80020f0 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d803      	bhi.n	8008166 <HAL_SPI_Receive+0x26e>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d102      	bne.n	800816c <HAL_SPI_Receive+0x274>
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d114      	bne.n	8008196 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 fba1 	bl	80088b4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008180:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e09e      	b.n	80082d4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d19d      	bne.n	80080de <HAL_SPI_Receive+0x1e6>
 80081a2:	e084      	b.n	80082ae <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d052      	beq.n	8008258 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d014      	beq.n	80081ea <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081ca:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081d0:	1d1a      	adds	r2, r3, #4
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081dc:	b29b      	uxth	r3, r3
 80081de:	3b04      	subs	r3, #4
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80081e8:	e05a      	b.n	80082a0 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80081f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f8:	d914      	bls.n	8008224 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	8812      	ldrh	r2, [r2, #0]
 8008202:	b292      	uxth	r2, r2
 8008204:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800820a:	1c9a      	adds	r2, r3, #2
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b02      	subs	r3, #2
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008222:	e03d      	b.n	80082a0 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008230:	7812      	ldrb	r2, [r2, #0]
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008246:	b29b      	uxth	r3, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008252:	e025      	b.n	80082a0 <HAL_SPI_Receive+0x3a8>
 8008254:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008258:	f7f9 ff4a 	bl	80020f0 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	429a      	cmp	r2, r3
 8008266:	d803      	bhi.n	8008270 <HAL_SPI_Receive+0x378>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d102      	bne.n	8008276 <HAL_SPI_Receive+0x37e>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d114      	bne.n	80082a0 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 fb1c 	bl	80088b4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800828a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e019      	b.n	80082d4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f47f af7b 	bne.w	80081a4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fb00 	bl	80088b4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e000      	b.n	80082d4 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 80082d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08e      	sub	sp, #56	; 0x38
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3320      	adds	r3, #32
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3330      	adds	r3, #48	; 0x30
 80082fe:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008306:	2b01      	cmp	r3, #1
 8008308:	d101      	bne.n	800830e <HAL_SPI_TransmitReceive+0x32>
 800830a:	2302      	movs	r3, #2
 800830c:	e2ce      	b.n	80088ac <HAL_SPI_TransmitReceive+0x5d0>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008316:	f7f9 feeb 	bl	80020f0 <HAL_GetTick>
 800831a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800831c:	887b      	ldrh	r3, [r7, #2]
 800831e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008320:	887b      	ldrh	r3, [r7, #2]
 8008322:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800832a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008332:	7efb      	ldrb	r3, [r7, #27]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d014      	beq.n	8008362 <HAL_SPI_TransmitReceive+0x86>
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800833e:	d106      	bne.n	800834e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008348:	7efb      	ldrb	r3, [r7, #27]
 800834a:	2b04      	cmp	r3, #4
 800834c:	d009      	beq.n	8008362 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800834e:	2302      	movs	r3, #2
 8008350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800835c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008360:	e2a4      	b.n	80088ac <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d005      	beq.n	8008374 <HAL_SPI_TransmitReceive+0x98>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_SPI_TransmitReceive+0x98>
 800836e:	887b      	ldrh	r3, [r7, #2]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008382:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008386:	e291      	b.n	80088ac <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b04      	cmp	r3, #4
 8008392:	d003      	beq.n	800839c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2205      	movs	r2, #5
 8008398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	887a      	ldrh	r2, [r7, #2]
 80083ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	887a      	ldrh	r2, [r7, #2]
 80083b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	887a      	ldrh	r2, [r7, #2]
 80083c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	887a      	ldrh	r2, [r7, #2]
 80083cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	4b9f      	ldr	r3, [pc, #636]	; (8008660 <HAL_SPI_TransmitReceive+0x384>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	8879      	ldrh	r1, [r7, #2]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	6812      	ldr	r2, [r2, #0]
 80083ec:	430b      	orrs	r3, r1
 80083ee:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008408:	d107      	bne.n	800841a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008418:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b0f      	cmp	r3, #15
 8008420:	d970      	bls.n	8008504 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008422:	e068      	b.n	80084f6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b02      	cmp	r3, #2
 8008430:	d11a      	bne.n	8008468 <HAL_SPI_TransmitReceive+0x18c>
 8008432:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008434:	2b00      	cmp	r3, #0
 8008436:	d017      	beq.n	8008468 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6812      	ldr	r2, [r2, #0]
 8008442:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008448:	1d1a      	adds	r2, r3, #4
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008454:	b29b      	uxth	r3, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008466:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	695a      	ldr	r2, [r3, #20]
 800846e:	f248 0308 	movw	r3, #32776	; 0x8008
 8008472:	4013      	ands	r3, r2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01a      	beq.n	80084ae <HAL_SPI_TransmitReceive+0x1d2>
 8008478:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800847a:	2b00      	cmp	r3, #0
 800847c:	d017      	beq.n	80084ae <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008486:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008488:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800848e:	1d1a      	adds	r2, r3, #4
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ae:	f7f9 fe1f 	bl	80020f0 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d803      	bhi.n	80084c6 <HAL_SPI_TransmitReceive+0x1ea>
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c4:	d102      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x1f0>
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d114      	bne.n	80084f6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f9f1 	bl	80088b4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e1da      	b.n	80088ac <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80084f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d193      	bne.n	8008424 <HAL_SPI_TransmitReceive+0x148>
 80084fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d190      	bne.n	8008424 <HAL_SPI_TransmitReceive+0x148>
 8008502:	e1ac      	b.n	800885e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b07      	cmp	r3, #7
 800850a:	f240 81a0 	bls.w	800884e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800850e:	e0a9      	b.n	8008664 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b02      	cmp	r3, #2
 800851c:	d139      	bne.n	8008592 <HAL_SPI_TransmitReceive+0x2b6>
 800851e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008520:	2b00      	cmp	r3, #0
 8008522:	d036      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008524:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008526:	2b01      	cmp	r3, #1
 8008528:	d91c      	bls.n	8008564 <HAL_SPI_TransmitReceive+0x288>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d018      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008542:	1d1a      	adds	r2, r3, #4
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b02      	subs	r3, #2
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008560:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008562:	e016      	b.n	8008592 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008568:	881a      	ldrh	r2, [r3, #0]
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008572:	1c9a      	adds	r2, r3, #2
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800857e:	b29b      	uxth	r3, r3
 8008580:	3b01      	subs	r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008590:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d03a      	beq.n	8008616 <HAL_SPI_TransmitReceive+0x33a>
 80085a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d037      	beq.n	8008616 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d018      	beq.n	80085e6 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80085be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085c4:	1d1a      	adds	r2, r3, #4
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	3b02      	subs	r3, #2
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80085e4:	e017      	b.n	8008616 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ea:	6a3a      	ldr	r2, [r7, #32]
 80085ec:	8812      	ldrh	r2, [r2, #0]
 80085ee:	b292      	uxth	r2, r2
 80085f0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f6:	1c9a      	adds	r2, r3, #2
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008602:	b29b      	uxth	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008614:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008616:	f7f9 fd6b 	bl	80020f0 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008622:	429a      	cmp	r2, r3
 8008624:	d803      	bhi.n	800862e <HAL_SPI_TransmitReceive+0x352>
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862c:	d102      	bne.n	8008634 <HAL_SPI_TransmitReceive+0x358>
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	2b00      	cmp	r3, #0
 8008632:	d117      	bne.n	8008664 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 f93d 	bl	80088b4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008648:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e126      	b.n	80088ac <HAL_SPI_TransmitReceive+0x5d0>
 800865e:	bf00      	nop
 8008660:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008664:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008666:	2b00      	cmp	r3, #0
 8008668:	f47f af52 	bne.w	8008510 <HAL_SPI_TransmitReceive+0x234>
 800866c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800866e:	2b00      	cmp	r3, #0
 8008670:	f47f af4e 	bne.w	8008510 <HAL_SPI_TransmitReceive+0x234>
 8008674:	e0f3      	b.n	800885e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b02      	cmp	r3, #2
 8008682:	d15a      	bne.n	800873a <HAL_SPI_TransmitReceive+0x45e>
 8008684:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008686:	2b00      	cmp	r3, #0
 8008688:	d057      	beq.n	800873a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800868a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800868c:	2b03      	cmp	r3, #3
 800868e:	d91c      	bls.n	80086ca <HAL_SPI_TransmitReceive+0x3ee>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008694:	2b40      	cmp	r3, #64	; 0x40
 8008696:	d918      	bls.n	80086ca <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a8:	1d1a      	adds	r2, r3, #4
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b04      	subs	r3, #4
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086c8:	e037      	b.n	800873a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80086ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d91b      	bls.n	8008708 <HAL_SPI_TransmitReceive+0x42c>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d017      	beq.n	8008708 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086dc:	881a      	ldrh	r2, [r3, #0]
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e6:	1c9a      	adds	r2, r3, #2
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b02      	subs	r3, #2
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008704:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008706:	e018      	b.n	800873a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3320      	adds	r3, #32
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008726:	b29b      	uxth	r3, r3
 8008728:	3b01      	subs	r3, #1
 800872a:	b29a      	uxth	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008738:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d05e      	beq.n	8008806 <HAL_SPI_TransmitReceive+0x52a>
 8008748:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d05b      	beq.n	8008806 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d018      	beq.n	800878e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008764:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008766:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800876c:	1d1a      	adds	r2, r3, #4
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b04      	subs	r3, #4
 800877c:	b29a      	uxth	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800878a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800878c:	e03b      	b.n	8008806 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800879c:	d918      	bls.n	80087d0 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a2:	6a3a      	ldr	r2, [r7, #32]
 80087a4:	8812      	ldrh	r2, [r2, #0]
 80087a6:	b292      	uxth	r2, r2
 80087a8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ae:	1c9a      	adds	r2, r3, #2
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	3b02      	subs	r3, #2
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80087ce:	e01a      	b.n	8008806 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	3b01      	subs	r3, #1
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008804:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008806:	f7f9 fc73 	bl	80020f0 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008812:	429a      	cmp	r2, r3
 8008814:	d803      	bhi.n	800881e <HAL_SPI_TransmitReceive+0x542>
 8008816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d102      	bne.n	8008824 <HAL_SPI_TransmitReceive+0x548>
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	2b00      	cmp	r3, #0
 8008822:	d114      	bne.n	800884e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f845 	bl	80088b4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008838:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e02e      	b.n	80088ac <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800884e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008850:	2b00      	cmp	r3, #0
 8008852:	f47f af10 	bne.w	8008676 <HAL_SPI_TransmitReceive+0x39a>
 8008856:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008858:	2b00      	cmp	r3, #0
 800885a:	f47f af0c 	bne.w	8008676 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	2200      	movs	r2, #0
 8008866:	2108      	movs	r1, #8
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f8c3 	bl	80089f4 <SPI_WaitOnFlagUntilTimeout>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800887a:	f043 0220 	orr.w	r2, r3, #32
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f815 	bl	80088b4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e001      	b.n	80088ac <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 80088a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3730      	adds	r7, #48	; 0x30
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0208 	orr.w	r2, r2, #8
 80088d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0210 	orr.w	r2, r2, #16
 80088e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6919      	ldr	r1, [r3, #16]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	4b3c      	ldr	r3, [pc, #240]	; (80089f0 <SPI_CloseTransfer+0x13c>)
 8008900:	400b      	ands	r3, r1
 8008902:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008912:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b04      	cmp	r3, #4
 800891e:	d014      	beq.n	800894a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00f      	beq.n	800894a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008930:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f042 0220 	orr.w	r2, r2, #32
 8008948:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b03      	cmp	r3, #3
 8008954:	d014      	beq.n	8008980 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00f      	beq.n	8008980 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008966:	f043 0204 	orr.w	r2, r3, #4
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800897e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00f      	beq.n	80089aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008990:	f043 0201 	orr.w	r2, r3, #1
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699a      	ldr	r2, [r3, #24]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00f      	beq.n	80089d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ba:	f043 0208 	orr.w	r2, r3, #8
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	fffffc90 	.word	0xfffffc90

080089f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	4613      	mov	r3, r2
 8008a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a04:	e010      	b.n	8008a28 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a06:	f7f9 fb73 	bl	80020f0 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d803      	bhi.n	8008a1e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1c:	d102      	bne.n	8008a24 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e00f      	b.n	8008a48 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	695a      	ldr	r2, [r3, #20]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	4013      	ands	r3, r2
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	bf0c      	ite	eq
 8008a38:	2301      	moveq	r3, #1
 8008a3a:	2300      	movne	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	461a      	mov	r2, r3
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d0df      	beq.n	8008a06 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5c:	095b      	lsrs	r3, r3, #5
 8008a5e:	3301      	adds	r3, #1
 8008a60:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	3307      	adds	r3, #7
 8008a6e:	08db      	lsrs	r3, r3, #3
 8008a70:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	fb02 f303 	mul.w	r3, r2, r3
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e049      	b.n	8008b2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d106      	bne.n	8008ab2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7f9 f873 	bl	8001b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f000 fd03 	bl	80094d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e049      	b.n	8008bda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f841 	bl	8008be2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	4619      	mov	r1, r3
 8008b72:	4610      	mov	r0, r2
 8008b74:	f000 fcac 	bl	80094d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d109      	bne.n	8008c1c <HAL_TIM_PWM_Start+0x24>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	bf14      	ite	ne
 8008c14:	2301      	movne	r3, #1
 8008c16:	2300      	moveq	r3, #0
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	e03c      	b.n	8008c96 <HAL_TIM_PWM_Start+0x9e>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d109      	bne.n	8008c36 <HAL_TIM_PWM_Start+0x3e>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	bf14      	ite	ne
 8008c2e:	2301      	movne	r3, #1
 8008c30:	2300      	moveq	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	e02f      	b.n	8008c96 <HAL_TIM_PWM_Start+0x9e>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d109      	bne.n	8008c50 <HAL_TIM_PWM_Start+0x58>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	bf14      	ite	ne
 8008c48:	2301      	movne	r3, #1
 8008c4a:	2300      	moveq	r3, #0
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	e022      	b.n	8008c96 <HAL_TIM_PWM_Start+0x9e>
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2b0c      	cmp	r3, #12
 8008c54:	d109      	bne.n	8008c6a <HAL_TIM_PWM_Start+0x72>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	bf14      	ite	ne
 8008c62:	2301      	movne	r3, #1
 8008c64:	2300      	moveq	r3, #0
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	e015      	b.n	8008c96 <HAL_TIM_PWM_Start+0x9e>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b10      	cmp	r3, #16
 8008c6e:	d109      	bne.n	8008c84 <HAL_TIM_PWM_Start+0x8c>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	bf14      	ite	ne
 8008c7c:	2301      	movne	r3, #1
 8008c7e:	2300      	moveq	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	e008      	b.n	8008c96 <HAL_TIM_PWM_Start+0x9e>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	bf14      	ite	ne
 8008c90:	2301      	movne	r3, #1
 8008c92:	2300      	moveq	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e0a1      	b.n	8008de2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <HAL_TIM_PWM_Start+0xb6>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cac:	e023      	b.n	8008cf6 <HAL_TIM_PWM_Start+0xfe>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d104      	bne.n	8008cbe <HAL_TIM_PWM_Start+0xc6>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cbc:	e01b      	b.n	8008cf6 <HAL_TIM_PWM_Start+0xfe>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	d104      	bne.n	8008cce <HAL_TIM_PWM_Start+0xd6>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ccc:	e013      	b.n	8008cf6 <HAL_TIM_PWM_Start+0xfe>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b0c      	cmp	r3, #12
 8008cd2:	d104      	bne.n	8008cde <HAL_TIM_PWM_Start+0xe6>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cdc:	e00b      	b.n	8008cf6 <HAL_TIM_PWM_Start+0xfe>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b10      	cmp	r3, #16
 8008ce2:	d104      	bne.n	8008cee <HAL_TIM_PWM_Start+0xf6>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cec:	e003      	b.n	8008cf6 <HAL_TIM_PWM_Start+0xfe>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 fff4 	bl	8009cec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a38      	ldr	r2, [pc, #224]	; (8008dec <HAL_TIM_PWM_Start+0x1f4>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d013      	beq.n	8008d36 <HAL_TIM_PWM_Start+0x13e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a37      	ldr	r2, [pc, #220]	; (8008df0 <HAL_TIM_PWM_Start+0x1f8>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d00e      	beq.n	8008d36 <HAL_TIM_PWM_Start+0x13e>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a35      	ldr	r2, [pc, #212]	; (8008df4 <HAL_TIM_PWM_Start+0x1fc>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d009      	beq.n	8008d36 <HAL_TIM_PWM_Start+0x13e>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a34      	ldr	r2, [pc, #208]	; (8008df8 <HAL_TIM_PWM_Start+0x200>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d004      	beq.n	8008d36 <HAL_TIM_PWM_Start+0x13e>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a32      	ldr	r2, [pc, #200]	; (8008dfc <HAL_TIM_PWM_Start+0x204>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d101      	bne.n	8008d3a <HAL_TIM_PWM_Start+0x142>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <HAL_TIM_PWM_Start+0x144>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d007      	beq.n	8008d50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a25      	ldr	r2, [pc, #148]	; (8008dec <HAL_TIM_PWM_Start+0x1f4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d022      	beq.n	8008da0 <HAL_TIM_PWM_Start+0x1a8>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d62:	d01d      	beq.n	8008da0 <HAL_TIM_PWM_Start+0x1a8>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a25      	ldr	r2, [pc, #148]	; (8008e00 <HAL_TIM_PWM_Start+0x208>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d018      	beq.n	8008da0 <HAL_TIM_PWM_Start+0x1a8>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a24      	ldr	r2, [pc, #144]	; (8008e04 <HAL_TIM_PWM_Start+0x20c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d013      	beq.n	8008da0 <HAL_TIM_PWM_Start+0x1a8>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a22      	ldr	r2, [pc, #136]	; (8008e08 <HAL_TIM_PWM_Start+0x210>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00e      	beq.n	8008da0 <HAL_TIM_PWM_Start+0x1a8>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a1a      	ldr	r2, [pc, #104]	; (8008df0 <HAL_TIM_PWM_Start+0x1f8>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d009      	beq.n	8008da0 <HAL_TIM_PWM_Start+0x1a8>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a1e      	ldr	r2, [pc, #120]	; (8008e0c <HAL_TIM_PWM_Start+0x214>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d004      	beq.n	8008da0 <HAL_TIM_PWM_Start+0x1a8>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a16      	ldr	r2, [pc, #88]	; (8008df4 <HAL_TIM_PWM_Start+0x1fc>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d115      	bne.n	8008dcc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <HAL_TIM_PWM_Start+0x218>)
 8008da8:	4013      	ands	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b06      	cmp	r3, #6
 8008db0:	d015      	beq.n	8008dde <HAL_TIM_PWM_Start+0x1e6>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db8:	d011      	beq.n	8008dde <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f042 0201 	orr.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dca:	e008      	b.n	8008dde <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0201 	orr.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	e000      	b.n	8008de0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40010400 	.word	0x40010400
 8008df4:	40014000 	.word	0x40014000
 8008df8:	40014400 	.word	0x40014400
 8008dfc:	40014800 	.word	0x40014800
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800
 8008e08:	40000c00 	.word	0x40000c00
 8008e0c:	40001800 	.word	0x40001800
 8008e10:	00010007 	.word	0x00010007

08008e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d122      	bne.n	8008e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d11b      	bne.n	8008e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0202 	mvn.w	r2, #2
 8008e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	f003 0303 	and.w	r3, r3, #3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fb1c 	bl	8009494 <HAL_TIM_IC_CaptureCallback>
 8008e5c:	e005      	b.n	8008e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fb0e 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fb1f 	bl	80094a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f003 0304 	and.w	r3, r3, #4
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	d122      	bne.n	8008ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b04      	cmp	r3, #4
 8008e8a:	d11b      	bne.n	8008ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f06f 0204 	mvn.w	r2, #4
 8008e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2202      	movs	r2, #2
 8008e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 faf2 	bl	8009494 <HAL_TIM_IC_CaptureCallback>
 8008eb0:	e005      	b.n	8008ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fae4 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 faf5 	bl	80094a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	f003 0308 	and.w	r3, r3, #8
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	d122      	bne.n	8008f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f003 0308 	and.w	r3, r3, #8
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d11b      	bne.n	8008f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f06f 0208 	mvn.w	r2, #8
 8008ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2204      	movs	r2, #4
 8008eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	f003 0303 	and.w	r3, r3, #3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fac8 	bl	8009494 <HAL_TIM_IC_CaptureCallback>
 8008f04:	e005      	b.n	8008f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 faba 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 facb 	bl	80094a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	f003 0310 	and.w	r3, r3, #16
 8008f22:	2b10      	cmp	r3, #16
 8008f24:	d122      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	f003 0310 	and.w	r3, r3, #16
 8008f30:	2b10      	cmp	r3, #16
 8008f32:	d11b      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f06f 0210 	mvn.w	r2, #16
 8008f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2208      	movs	r2, #8
 8008f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fa9e 	bl	8009494 <HAL_TIM_IC_CaptureCallback>
 8008f58:	e005      	b.n	8008f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa90 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 faa1 	bl	80094a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d10e      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d107      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f06f 0201 	mvn.w	r2, #1
 8008f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fa6a 	bl	800946c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	d10e      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb0:	2b80      	cmp	r3, #128	; 0x80
 8008fb2:	d107      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fff2 	bl	8009fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd2:	d10e      	bne.n	8008ff2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fde:	2b80      	cmp	r3, #128	; 0x80
 8008fe0:	d107      	bne.n	8008ff2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 ffe5 	bl	8009fbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffc:	2b40      	cmp	r3, #64	; 0x40
 8008ffe:	d10e      	bne.n	800901e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900a:	2b40      	cmp	r3, #64	; 0x40
 800900c:	d107      	bne.n	800901e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa4f 	bl	80094bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b20      	cmp	r3, #32
 800902a:	d10e      	bne.n	800904a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b20      	cmp	r3, #32
 8009038:	d107      	bne.n	800904a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f06f 0220 	mvn.w	r2, #32
 8009042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 ffa5 	bl	8009f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
	...

08009054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800906e:	2302      	movs	r3, #2
 8009070:	e0ff      	b.n	8009272 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b14      	cmp	r3, #20
 800907e:	f200 80f0 	bhi.w	8009262 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009082:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	080090dd 	.word	0x080090dd
 800908c:	08009263 	.word	0x08009263
 8009090:	08009263 	.word	0x08009263
 8009094:	08009263 	.word	0x08009263
 8009098:	0800911d 	.word	0x0800911d
 800909c:	08009263 	.word	0x08009263
 80090a0:	08009263 	.word	0x08009263
 80090a4:	08009263 	.word	0x08009263
 80090a8:	0800915f 	.word	0x0800915f
 80090ac:	08009263 	.word	0x08009263
 80090b0:	08009263 	.word	0x08009263
 80090b4:	08009263 	.word	0x08009263
 80090b8:	0800919f 	.word	0x0800919f
 80090bc:	08009263 	.word	0x08009263
 80090c0:	08009263 	.word	0x08009263
 80090c4:	08009263 	.word	0x08009263
 80090c8:	080091e1 	.word	0x080091e1
 80090cc:	08009263 	.word	0x08009263
 80090d0:	08009263 	.word	0x08009263
 80090d4:	08009263 	.word	0x08009263
 80090d8:	08009221 	.word	0x08009221
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fa8e 	bl	8009604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0208 	orr.w	r2, r2, #8
 80090f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699a      	ldr	r2, [r3, #24]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0204 	bic.w	r2, r2, #4
 8009106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6999      	ldr	r1, [r3, #24]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	691a      	ldr	r2, [r3, #16]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	619a      	str	r2, [r3, #24]
      break;
 800911a:	e0a5      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fafe 	bl	8009724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	699a      	ldr	r2, [r3, #24]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6999      	ldr	r1, [r3, #24]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	021a      	lsls	r2, r3, #8
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	619a      	str	r2, [r3, #24]
      break;
 800915c:	e084      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fb67 	bl	8009838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69da      	ldr	r2, [r3, #28]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f042 0208 	orr.w	r2, r2, #8
 8009178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69da      	ldr	r2, [r3, #28]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f022 0204 	bic.w	r2, r2, #4
 8009188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69d9      	ldr	r1, [r3, #28]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	691a      	ldr	r2, [r3, #16]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	61da      	str	r2, [r3, #28]
      break;
 800919c:	e064      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 fbcf 	bl	8009948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69da      	ldr	r2, [r3, #28]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	69da      	ldr	r2, [r3, #28]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69d9      	ldr	r1, [r3, #28]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	021a      	lsls	r2, r3, #8
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	61da      	str	r2, [r3, #28]
      break;
 80091de:	e043      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68b9      	ldr	r1, [r7, #8]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fc18 	bl	8009a1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0208 	orr.w	r2, r2, #8
 80091fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0204 	bic.w	r2, r2, #4
 800920a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	691a      	ldr	r2, [r3, #16]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	430a      	orrs	r2, r1
 800921c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800921e:	e023      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68b9      	ldr	r1, [r7, #8]
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fc5c 	bl	8009ae4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	021a      	lsls	r2, r3, #8
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009260:	e002      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	75fb      	strb	r3, [r7, #23]
      break;
 8009266:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009270:	7dfb      	ldrb	r3, [r7, #23]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop

0800927c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009290:	2b01      	cmp	r3, #1
 8009292:	d101      	bne.n	8009298 <HAL_TIM_ConfigClockSource+0x1c>
 8009294:	2302      	movs	r3, #2
 8009296:	e0dc      	b.n	8009452 <HAL_TIM_ConfigClockSource+0x1d6>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	4b6a      	ldr	r3, [pc, #424]	; (800945c <HAL_TIM_ConfigClockSource+0x1e0>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a64      	ldr	r2, [pc, #400]	; (8009460 <HAL_TIM_ConfigClockSource+0x1e4>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	f000 80a9 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1aa>
 80092d4:	4a62      	ldr	r2, [pc, #392]	; (8009460 <HAL_TIM_ConfigClockSource+0x1e4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	f200 80ae 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 80092dc:	4a61      	ldr	r2, [pc, #388]	; (8009464 <HAL_TIM_ConfigClockSource+0x1e8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	f000 80a1 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1aa>
 80092e4:	4a5f      	ldr	r2, [pc, #380]	; (8009464 <HAL_TIM_ConfigClockSource+0x1e8>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	f200 80a6 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 80092ec:	4a5e      	ldr	r2, [pc, #376]	; (8009468 <HAL_TIM_ConfigClockSource+0x1ec>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	f000 8099 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1aa>
 80092f4:	4a5c      	ldr	r2, [pc, #368]	; (8009468 <HAL_TIM_ConfigClockSource+0x1ec>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	f200 809e 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 80092fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009300:	f000 8091 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1aa>
 8009304:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009308:	f200 8096 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 800930c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009310:	f000 8089 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1aa>
 8009314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009318:	f200 808e 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 800931c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009320:	d03e      	beq.n	80093a0 <HAL_TIM_ConfigClockSource+0x124>
 8009322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009326:	f200 8087 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 800932a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932e:	f000 8086 	beq.w	800943e <HAL_TIM_ConfigClockSource+0x1c2>
 8009332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009336:	d87f      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 8009338:	2b70      	cmp	r3, #112	; 0x70
 800933a:	d01a      	beq.n	8009372 <HAL_TIM_ConfigClockSource+0xf6>
 800933c:	2b70      	cmp	r3, #112	; 0x70
 800933e:	d87b      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 8009340:	2b60      	cmp	r3, #96	; 0x60
 8009342:	d050      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x16a>
 8009344:	2b60      	cmp	r3, #96	; 0x60
 8009346:	d877      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 8009348:	2b50      	cmp	r3, #80	; 0x50
 800934a:	d03c      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x14a>
 800934c:	2b50      	cmp	r3, #80	; 0x50
 800934e:	d873      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 8009350:	2b40      	cmp	r3, #64	; 0x40
 8009352:	d058      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x18a>
 8009354:	2b40      	cmp	r3, #64	; 0x40
 8009356:	d86f      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 8009358:	2b30      	cmp	r3, #48	; 0x30
 800935a:	d064      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x1aa>
 800935c:	2b30      	cmp	r3, #48	; 0x30
 800935e:	d86b      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 8009360:	2b20      	cmp	r3, #32
 8009362:	d060      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x1aa>
 8009364:	2b20      	cmp	r3, #32
 8009366:	d867      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d05c      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x1aa>
 800936c:	2b10      	cmp	r3, #16
 800936e:	d05a      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x1aa>
 8009370:	e062      	b.n	8009438 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6818      	ldr	r0, [r3, #0]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	6899      	ldr	r1, [r3, #8]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f000 fc93 	bl	8009cac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	609a      	str	r2, [r3, #8]
      break;
 800939e:	e04f      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	6899      	ldr	r1, [r3, #8]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f000 fc7c 	bl	8009cac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093c2:	609a      	str	r2, [r3, #8]
      break;
 80093c4:	e03c      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	6859      	ldr	r1, [r3, #4]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	461a      	mov	r2, r3
 80093d4:	f000 fbec 	bl	8009bb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2150      	movs	r1, #80	; 0x50
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fc46 	bl	8009c70 <TIM_ITRx_SetConfig>
      break;
 80093e4:	e02c      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6859      	ldr	r1, [r3, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f000 fc0b 	bl	8009c0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2160      	movs	r1, #96	; 0x60
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fc36 	bl	8009c70 <TIM_ITRx_SetConfig>
      break;
 8009404:	e01c      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6818      	ldr	r0, [r3, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	6859      	ldr	r1, [r3, #4]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	461a      	mov	r2, r3
 8009414:	f000 fbcc 	bl	8009bb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2140      	movs	r1, #64	; 0x40
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fc26 	bl	8009c70 <TIM_ITRx_SetConfig>
      break;
 8009424:	e00c      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f000 fc1d 	bl	8009c70 <TIM_ITRx_SetConfig>
      break;
 8009436:	e003      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	73fb      	strb	r3, [r7, #15]
      break;
 800943c:	e000      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800943e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	ffceff88 	.word	0xffceff88
 8009460:	00100040 	.word	0x00100040
 8009464:	00100030 	.word	0x00100030
 8009468:	00100020 	.word	0x00100020

0800946c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a40      	ldr	r2, [pc, #256]	; (80095e4 <TIM_Base_SetConfig+0x114>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d013      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ee:	d00f      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a3d      	ldr	r2, [pc, #244]	; (80095e8 <TIM_Base_SetConfig+0x118>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d00b      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a3c      	ldr	r2, [pc, #240]	; (80095ec <TIM_Base_SetConfig+0x11c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d007      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a3b      	ldr	r2, [pc, #236]	; (80095f0 <TIM_Base_SetConfig+0x120>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d003      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a3a      	ldr	r2, [pc, #232]	; (80095f4 <TIM_Base_SetConfig+0x124>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d108      	bne.n	8009522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a2f      	ldr	r2, [pc, #188]	; (80095e4 <TIM_Base_SetConfig+0x114>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d01f      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009530:	d01b      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a2c      	ldr	r2, [pc, #176]	; (80095e8 <TIM_Base_SetConfig+0x118>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d017      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a2b      	ldr	r2, [pc, #172]	; (80095ec <TIM_Base_SetConfig+0x11c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d013      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a2a      	ldr	r2, [pc, #168]	; (80095f0 <TIM_Base_SetConfig+0x120>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d00f      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a29      	ldr	r2, [pc, #164]	; (80095f4 <TIM_Base_SetConfig+0x124>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d00b      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a28      	ldr	r2, [pc, #160]	; (80095f8 <TIM_Base_SetConfig+0x128>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d007      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a27      	ldr	r2, [pc, #156]	; (80095fc <TIM_Base_SetConfig+0x12c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d003      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a26      	ldr	r2, [pc, #152]	; (8009600 <TIM_Base_SetConfig+0x130>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d108      	bne.n	800957c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4313      	orrs	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	4313      	orrs	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a10      	ldr	r2, [pc, #64]	; (80095e4 <TIM_Base_SetConfig+0x114>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00f      	beq.n	80095c8 <TIM_Base_SetConfig+0xf8>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a12      	ldr	r2, [pc, #72]	; (80095f4 <TIM_Base_SetConfig+0x124>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00b      	beq.n	80095c8 <TIM_Base_SetConfig+0xf8>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a11      	ldr	r2, [pc, #68]	; (80095f8 <TIM_Base_SetConfig+0x128>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d007      	beq.n	80095c8 <TIM_Base_SetConfig+0xf8>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a10      	ldr	r2, [pc, #64]	; (80095fc <TIM_Base_SetConfig+0x12c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d003      	beq.n	80095c8 <TIM_Base_SetConfig+0xf8>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a0f      	ldr	r2, [pc, #60]	; (8009600 <TIM_Base_SetConfig+0x130>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d103      	bne.n	80095d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	615a      	str	r2, [r3, #20]
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	40010000 	.word	0x40010000
 80095e8:	40000400 	.word	0x40000400
 80095ec:	40000800 	.word	0x40000800
 80095f0:	40000c00 	.word	0x40000c00
 80095f4:	40010400 	.word	0x40010400
 80095f8:	40014000 	.word	0x40014000
 80095fc:	40014400 	.word	0x40014400
 8009600:	40014800 	.word	0x40014800

08009604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	f023 0201 	bic.w	r2, r3, #1
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4b37      	ldr	r3, [pc, #220]	; (800970c <TIM_OC1_SetConfig+0x108>)
 8009630:	4013      	ands	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 0303 	bic.w	r3, r3, #3
 800963a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	4313      	orrs	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f023 0302 	bic.w	r3, r3, #2
 800964c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	4313      	orrs	r3, r2
 8009656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a2d      	ldr	r2, [pc, #180]	; (8009710 <TIM_OC1_SetConfig+0x10c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00f      	beq.n	8009680 <TIM_OC1_SetConfig+0x7c>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a2c      	ldr	r2, [pc, #176]	; (8009714 <TIM_OC1_SetConfig+0x110>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d00b      	beq.n	8009680 <TIM_OC1_SetConfig+0x7c>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a2b      	ldr	r2, [pc, #172]	; (8009718 <TIM_OC1_SetConfig+0x114>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d007      	beq.n	8009680 <TIM_OC1_SetConfig+0x7c>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a2a      	ldr	r2, [pc, #168]	; (800971c <TIM_OC1_SetConfig+0x118>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d003      	beq.n	8009680 <TIM_OC1_SetConfig+0x7c>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a29      	ldr	r2, [pc, #164]	; (8009720 <TIM_OC1_SetConfig+0x11c>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d10c      	bne.n	800969a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	f023 0308 	bic.w	r3, r3, #8
 8009686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	4313      	orrs	r3, r2
 8009690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f023 0304 	bic.w	r3, r3, #4
 8009698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a1c      	ldr	r2, [pc, #112]	; (8009710 <TIM_OC1_SetConfig+0x10c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00f      	beq.n	80096c2 <TIM_OC1_SetConfig+0xbe>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a1b      	ldr	r2, [pc, #108]	; (8009714 <TIM_OC1_SetConfig+0x110>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00b      	beq.n	80096c2 <TIM_OC1_SetConfig+0xbe>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a1a      	ldr	r2, [pc, #104]	; (8009718 <TIM_OC1_SetConfig+0x114>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d007      	beq.n	80096c2 <TIM_OC1_SetConfig+0xbe>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a19      	ldr	r2, [pc, #100]	; (800971c <TIM_OC1_SetConfig+0x118>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d003      	beq.n	80096c2 <TIM_OC1_SetConfig+0xbe>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a18      	ldr	r2, [pc, #96]	; (8009720 <TIM_OC1_SetConfig+0x11c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d111      	bne.n	80096e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	621a      	str	r2, [r3, #32]
}
 8009700:	bf00      	nop
 8009702:	371c      	adds	r7, #28
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	fffeff8f 	.word	0xfffeff8f
 8009710:	40010000 	.word	0x40010000
 8009714:	40010400 	.word	0x40010400
 8009718:	40014000 	.word	0x40014000
 800971c:	40014400 	.word	0x40014400
 8009720:	40014800 	.word	0x40014800

08009724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	f023 0210 	bic.w	r2, r3, #16
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4b34      	ldr	r3, [pc, #208]	; (8009820 <TIM_OC2_SetConfig+0xfc>)
 8009750:	4013      	ands	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800975a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	021b      	lsls	r3, r3, #8
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	4313      	orrs	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f023 0320 	bic.w	r3, r3, #32
 800976e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	011b      	lsls	r3, r3, #4
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	4313      	orrs	r3, r2
 800977a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a29      	ldr	r2, [pc, #164]	; (8009824 <TIM_OC2_SetConfig+0x100>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d003      	beq.n	800978c <TIM_OC2_SetConfig+0x68>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a28      	ldr	r2, [pc, #160]	; (8009828 <TIM_OC2_SetConfig+0x104>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d10d      	bne.n	80097a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	4313      	orrs	r3, r2
 800979e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a1e      	ldr	r2, [pc, #120]	; (8009824 <TIM_OC2_SetConfig+0x100>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d00f      	beq.n	80097d0 <TIM_OC2_SetConfig+0xac>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a1d      	ldr	r2, [pc, #116]	; (8009828 <TIM_OC2_SetConfig+0x104>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00b      	beq.n	80097d0 <TIM_OC2_SetConfig+0xac>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a1c      	ldr	r2, [pc, #112]	; (800982c <TIM_OC2_SetConfig+0x108>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d007      	beq.n	80097d0 <TIM_OC2_SetConfig+0xac>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a1b      	ldr	r2, [pc, #108]	; (8009830 <TIM_OC2_SetConfig+0x10c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d003      	beq.n	80097d0 <TIM_OC2_SetConfig+0xac>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a1a      	ldr	r2, [pc, #104]	; (8009834 <TIM_OC2_SetConfig+0x110>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d113      	bne.n	80097f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	621a      	str	r2, [r3, #32]
}
 8009812:	bf00      	nop
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	feff8fff 	.word	0xfeff8fff
 8009824:	40010000 	.word	0x40010000
 8009828:	40010400 	.word	0x40010400
 800982c:	40014000 	.word	0x40014000
 8009830:	40014400 	.word	0x40014400
 8009834:	40014800 	.word	0x40014800

08009838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	4b33      	ldr	r3, [pc, #204]	; (8009930 <TIM_OC3_SetConfig+0xf8>)
 8009864:	4013      	ands	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f023 0303 	bic.w	r3, r3, #3
 800986e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	021b      	lsls	r3, r3, #8
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a28      	ldr	r2, [pc, #160]	; (8009934 <TIM_OC3_SetConfig+0xfc>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d003      	beq.n	800989e <TIM_OC3_SetConfig+0x66>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a27      	ldr	r2, [pc, #156]	; (8009938 <TIM_OC3_SetConfig+0x100>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d10d      	bne.n	80098ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	021b      	lsls	r3, r3, #8
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a1d      	ldr	r2, [pc, #116]	; (8009934 <TIM_OC3_SetConfig+0xfc>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00f      	beq.n	80098e2 <TIM_OC3_SetConfig+0xaa>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a1c      	ldr	r2, [pc, #112]	; (8009938 <TIM_OC3_SetConfig+0x100>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d00b      	beq.n	80098e2 <TIM_OC3_SetConfig+0xaa>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a1b      	ldr	r2, [pc, #108]	; (800993c <TIM_OC3_SetConfig+0x104>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d007      	beq.n	80098e2 <TIM_OC3_SetConfig+0xaa>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a1a      	ldr	r2, [pc, #104]	; (8009940 <TIM_OC3_SetConfig+0x108>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d003      	beq.n	80098e2 <TIM_OC3_SetConfig+0xaa>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a19      	ldr	r2, [pc, #100]	; (8009944 <TIM_OC3_SetConfig+0x10c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d113      	bne.n	800990a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	011b      	lsls	r3, r3, #4
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	4313      	orrs	r3, r2
 8009908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685a      	ldr	r2, [r3, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	621a      	str	r2, [r3, #32]
}
 8009924:	bf00      	nop
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	fffeff8f 	.word	0xfffeff8f
 8009934:	40010000 	.word	0x40010000
 8009938:	40010400 	.word	0x40010400
 800993c:	40014000 	.word	0x40014000
 8009940:	40014400 	.word	0x40014400
 8009944:	40014800 	.word	0x40014800

08009948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	4b24      	ldr	r3, [pc, #144]	; (8009a04 <TIM_OC4_SetConfig+0xbc>)
 8009974:	4013      	ands	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800997e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	4313      	orrs	r3, r2
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	031b      	lsls	r3, r3, #12
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	4313      	orrs	r3, r2
 800999e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a19      	ldr	r2, [pc, #100]	; (8009a08 <TIM_OC4_SetConfig+0xc0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d00f      	beq.n	80099c8 <TIM_OC4_SetConfig+0x80>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a18      	ldr	r2, [pc, #96]	; (8009a0c <TIM_OC4_SetConfig+0xc4>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00b      	beq.n	80099c8 <TIM_OC4_SetConfig+0x80>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a17      	ldr	r2, [pc, #92]	; (8009a10 <TIM_OC4_SetConfig+0xc8>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d007      	beq.n	80099c8 <TIM_OC4_SetConfig+0x80>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a16      	ldr	r2, [pc, #88]	; (8009a14 <TIM_OC4_SetConfig+0xcc>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d003      	beq.n	80099c8 <TIM_OC4_SetConfig+0x80>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a15      	ldr	r2, [pc, #84]	; (8009a18 <TIM_OC4_SetConfig+0xd0>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d109      	bne.n	80099dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	019b      	lsls	r3, r3, #6
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	4313      	orrs	r3, r2
 80099da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	621a      	str	r2, [r3, #32]
}
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	feff8fff 	.word	0xfeff8fff
 8009a08:	40010000 	.word	0x40010000
 8009a0c:	40010400 	.word	0x40010400
 8009a10:	40014000 	.word	0x40014000
 8009a14:	40014400 	.word	0x40014400
 8009a18:	40014800 	.word	0x40014800

08009a1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4b21      	ldr	r3, [pc, #132]	; (8009acc <TIM_OC5_SetConfig+0xb0>)
 8009a48:	4013      	ands	r3, r2
 8009a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	041b      	lsls	r3, r3, #16
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a18      	ldr	r2, [pc, #96]	; (8009ad0 <TIM_OC5_SetConfig+0xb4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d00f      	beq.n	8009a92 <TIM_OC5_SetConfig+0x76>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a17      	ldr	r2, [pc, #92]	; (8009ad4 <TIM_OC5_SetConfig+0xb8>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d00b      	beq.n	8009a92 <TIM_OC5_SetConfig+0x76>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a16      	ldr	r2, [pc, #88]	; (8009ad8 <TIM_OC5_SetConfig+0xbc>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d007      	beq.n	8009a92 <TIM_OC5_SetConfig+0x76>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a15      	ldr	r2, [pc, #84]	; (8009adc <TIM_OC5_SetConfig+0xc0>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d003      	beq.n	8009a92 <TIM_OC5_SetConfig+0x76>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a14      	ldr	r2, [pc, #80]	; (8009ae0 <TIM_OC5_SetConfig+0xc4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d109      	bne.n	8009aa6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	621a      	str	r2, [r3, #32]
}
 8009ac0:	bf00      	nop
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	fffeff8f 	.word	0xfffeff8f
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40010400 	.word	0x40010400
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	40014400 	.word	0x40014400
 8009ae0:	40014800 	.word	0x40014800

08009ae4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	4b22      	ldr	r3, [pc, #136]	; (8009b98 <TIM_OC6_SetConfig+0xb4>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	051b      	lsls	r3, r3, #20
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a19      	ldr	r2, [pc, #100]	; (8009b9c <TIM_OC6_SetConfig+0xb8>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00f      	beq.n	8009b5c <TIM_OC6_SetConfig+0x78>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a18      	ldr	r2, [pc, #96]	; (8009ba0 <TIM_OC6_SetConfig+0xbc>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d00b      	beq.n	8009b5c <TIM_OC6_SetConfig+0x78>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a17      	ldr	r2, [pc, #92]	; (8009ba4 <TIM_OC6_SetConfig+0xc0>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d007      	beq.n	8009b5c <TIM_OC6_SetConfig+0x78>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a16      	ldr	r2, [pc, #88]	; (8009ba8 <TIM_OC6_SetConfig+0xc4>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d003      	beq.n	8009b5c <TIM_OC6_SetConfig+0x78>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a15      	ldr	r2, [pc, #84]	; (8009bac <TIM_OC6_SetConfig+0xc8>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d109      	bne.n	8009b70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	029b      	lsls	r3, r3, #10
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	621a      	str	r2, [r3, #32]
}
 8009b8a:	bf00      	nop
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	feff8fff 	.word	0xfeff8fff
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40010400 	.word	0x40010400
 8009ba4:	40014000 	.word	0x40014000
 8009ba8:	40014400 	.word	0x40014400
 8009bac:	40014800 	.word	0x40014800

08009bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	f023 0201 	bic.w	r2, r3, #1
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f023 030a 	bic.w	r3, r3, #10
 8009bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	621a      	str	r2, [r3, #32]
}
 8009c02:	bf00      	nop
 8009c04:	371c      	adds	r7, #28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b087      	sub	sp, #28
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	f023 0210 	bic.w	r2, r3, #16
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	031b      	lsls	r3, r3, #12
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	621a      	str	r2, [r3, #32]
}
 8009c62:	bf00      	nop
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
	...

08009c70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	4b09      	ldr	r3, [pc, #36]	; (8009ca8 <TIM_ITRx_SetConfig+0x38>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f043 0307 	orr.w	r3, r3, #7
 8009c92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	609a      	str	r2, [r3, #8]
}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	ffcfff8f 	.word	0xffcfff8f

08009cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	021a      	lsls	r2, r3, #8
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	609a      	str	r2, [r3, #8]
}
 8009ce0:	bf00      	nop
 8009ce2:	371c      	adds	r7, #28
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f003 031f 	and.w	r3, r3, #31
 8009cfe:	2201      	movs	r2, #1
 8009d00:	fa02 f303 	lsl.w	r3, r2, r3
 8009d04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a1a      	ldr	r2, [r3, #32]
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	43db      	mvns	r3, r3
 8009d0e:	401a      	ands	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a1a      	ldr	r2, [r3, #32]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	f003 031f 	and.w	r3, r3, #31
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	fa01 f303 	lsl.w	r3, r1, r3
 8009d24:	431a      	orrs	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	621a      	str	r2, [r3, #32]
}
 8009d2a:	bf00      	nop
 8009d2c:	371c      	adds	r7, #28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
	...

08009d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d101      	bne.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e06d      	b.n	8009e2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a30      	ldr	r2, [pc, #192]	; (8009e38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d004      	beq.n	8009d84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a2f      	ldr	r2, [pc, #188]	; (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d108      	bne.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a20      	ldr	r2, [pc, #128]	; (8009e38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d022      	beq.n	8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc2:	d01d      	beq.n	8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a1d      	ldr	r2, [pc, #116]	; (8009e40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d018      	beq.n	8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a1c      	ldr	r2, [pc, #112]	; (8009e44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d013      	beq.n	8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a1a      	ldr	r2, [pc, #104]	; (8009e48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00e      	beq.n	8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a15      	ldr	r2, [pc, #84]	; (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d009      	beq.n	8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a16      	ldr	r2, [pc, #88]	; (8009e4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d004      	beq.n	8009e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a15      	ldr	r2, [pc, #84]	; (8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d10c      	bne.n	8009e1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	40010000 	.word	0x40010000
 8009e3c:	40010400 	.word	0x40010400
 8009e40:	40000400 	.word	0x40000400
 8009e44:	40000800 	.word	0x40000800
 8009e48:	40000c00 	.word	0x40000c00
 8009e4c:	40001800 	.word	0x40001800
 8009e50:	40014000 	.word	0x40014000

08009e54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e087      	b.n	8009f80 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	041b      	lsls	r3, r3, #16
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a27      	ldr	r2, [pc, #156]	; (8009f8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d004      	beq.n	8009efe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a25      	ldr	r2, [pc, #148]	; (8009f90 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d106      	bne.n	8009f0c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a1e      	ldr	r2, [pc, #120]	; (8009f8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d004      	beq.n	8009f20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a1d      	ldr	r2, [pc, #116]	; (8009f90 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d126      	bne.n	8009f6e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2a:	051b      	lsls	r3, r3, #20
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a0e      	ldr	r2, [pc, #56]	; (8009f8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d004      	beq.n	8009f60 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a0d      	ldr	r2, [pc, #52]	; (8009f90 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d106      	bne.n	8009f6e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	40010000 	.word	0x40010000
 8009f90:	40010400 	.word	0x40010400

08009f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e042      	b.n	800a068 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d106      	bne.n	8009ffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7f7 feaf 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2224      	movs	r2, #36	; 0x24
 8009ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f82c 	bl	800a070 <UART_SetConfig>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e022      	b.n	800a068 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fe7e 	bl	800ad2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a03e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a04e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 ff05 	bl	800ae70 <UART_CheckIdleState>
 800a066:	4603      	mov	r3, r0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a070:	b5b0      	push	{r4, r5, r7, lr}
 800a072:	b08e      	sub	sp, #56	; 0x38
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	431a      	orrs	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	431a      	orrs	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	4313      	orrs	r3, r2
 800a094:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	4bbf      	ldr	r3, [pc, #764]	; (800a39c <UART_SetConfig+0x32c>)
 800a09e:	4013      	ands	r3, r2
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0a6:	430b      	orrs	r3, r1
 800a0a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68da      	ldr	r2, [r3, #12]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4ab5      	ldr	r2, [pc, #724]	; (800a3a0 <UART_SetConfig+0x330>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d004      	beq.n	800a0da <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	4bb0      	ldr	r3, [pc, #704]	; (800a3a4 <UART_SetConfig+0x334>)
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	6812      	ldr	r2, [r2, #0]
 800a0e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0ea:	430b      	orrs	r3, r1
 800a0ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f4:	f023 010f 	bic.w	r1, r3, #15
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	430a      	orrs	r2, r1
 800a102:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4aa7      	ldr	r2, [pc, #668]	; (800a3a8 <UART_SetConfig+0x338>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d176      	bne.n	800a1fc <UART_SetConfig+0x18c>
 800a10e:	4ba7      	ldr	r3, [pc, #668]	; (800a3ac <UART_SetConfig+0x33c>)
 800a110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a116:	2b28      	cmp	r3, #40	; 0x28
 800a118:	d86c      	bhi.n	800a1f4 <UART_SetConfig+0x184>
 800a11a:	a201      	add	r2, pc, #4	; (adr r2, 800a120 <UART_SetConfig+0xb0>)
 800a11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a120:	0800a1c5 	.word	0x0800a1c5
 800a124:	0800a1f5 	.word	0x0800a1f5
 800a128:	0800a1f5 	.word	0x0800a1f5
 800a12c:	0800a1f5 	.word	0x0800a1f5
 800a130:	0800a1f5 	.word	0x0800a1f5
 800a134:	0800a1f5 	.word	0x0800a1f5
 800a138:	0800a1f5 	.word	0x0800a1f5
 800a13c:	0800a1f5 	.word	0x0800a1f5
 800a140:	0800a1cd 	.word	0x0800a1cd
 800a144:	0800a1f5 	.word	0x0800a1f5
 800a148:	0800a1f5 	.word	0x0800a1f5
 800a14c:	0800a1f5 	.word	0x0800a1f5
 800a150:	0800a1f5 	.word	0x0800a1f5
 800a154:	0800a1f5 	.word	0x0800a1f5
 800a158:	0800a1f5 	.word	0x0800a1f5
 800a15c:	0800a1f5 	.word	0x0800a1f5
 800a160:	0800a1d5 	.word	0x0800a1d5
 800a164:	0800a1f5 	.word	0x0800a1f5
 800a168:	0800a1f5 	.word	0x0800a1f5
 800a16c:	0800a1f5 	.word	0x0800a1f5
 800a170:	0800a1f5 	.word	0x0800a1f5
 800a174:	0800a1f5 	.word	0x0800a1f5
 800a178:	0800a1f5 	.word	0x0800a1f5
 800a17c:	0800a1f5 	.word	0x0800a1f5
 800a180:	0800a1dd 	.word	0x0800a1dd
 800a184:	0800a1f5 	.word	0x0800a1f5
 800a188:	0800a1f5 	.word	0x0800a1f5
 800a18c:	0800a1f5 	.word	0x0800a1f5
 800a190:	0800a1f5 	.word	0x0800a1f5
 800a194:	0800a1f5 	.word	0x0800a1f5
 800a198:	0800a1f5 	.word	0x0800a1f5
 800a19c:	0800a1f5 	.word	0x0800a1f5
 800a1a0:	0800a1e5 	.word	0x0800a1e5
 800a1a4:	0800a1f5 	.word	0x0800a1f5
 800a1a8:	0800a1f5 	.word	0x0800a1f5
 800a1ac:	0800a1f5 	.word	0x0800a1f5
 800a1b0:	0800a1f5 	.word	0x0800a1f5
 800a1b4:	0800a1f5 	.word	0x0800a1f5
 800a1b8:	0800a1f5 	.word	0x0800a1f5
 800a1bc:	0800a1f5 	.word	0x0800a1f5
 800a1c0:	0800a1ed 	.word	0x0800a1ed
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ca:	e326      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a1cc:	2304      	movs	r3, #4
 800a1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d2:	e322      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a1d4:	2308      	movs	r3, #8
 800a1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1da:	e31e      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a1dc:	2310      	movs	r3, #16
 800a1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e2:	e31a      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a1e4:	2320      	movs	r3, #32
 800a1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ea:	e316      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a1ec:	2340      	movs	r3, #64	; 0x40
 800a1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f2:	e312      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a1f4:	2380      	movs	r3, #128	; 0x80
 800a1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1fa:	e30e      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a6b      	ldr	r2, [pc, #428]	; (800a3b0 <UART_SetConfig+0x340>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d130      	bne.n	800a268 <UART_SetConfig+0x1f8>
 800a206:	4b69      	ldr	r3, [pc, #420]	; (800a3ac <UART_SetConfig+0x33c>)
 800a208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a20a:	f003 0307 	and.w	r3, r3, #7
 800a20e:	2b05      	cmp	r3, #5
 800a210:	d826      	bhi.n	800a260 <UART_SetConfig+0x1f0>
 800a212:	a201      	add	r2, pc, #4	; (adr r2, 800a218 <UART_SetConfig+0x1a8>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a231 	.word	0x0800a231
 800a21c:	0800a239 	.word	0x0800a239
 800a220:	0800a241 	.word	0x0800a241
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a251 	.word	0x0800a251
 800a22c:	0800a259 	.word	0x0800a259
 800a230:	2300      	movs	r3, #0
 800a232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a236:	e2f0      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a238:	2304      	movs	r3, #4
 800a23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23e:	e2ec      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a240:	2308      	movs	r3, #8
 800a242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a246:	e2e8      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a248:	2310      	movs	r3, #16
 800a24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24e:	e2e4      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a250:	2320      	movs	r3, #32
 800a252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a256:	e2e0      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a258:	2340      	movs	r3, #64	; 0x40
 800a25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25e:	e2dc      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a260:	2380      	movs	r3, #128	; 0x80
 800a262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a266:	e2d8      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a51      	ldr	r2, [pc, #324]	; (800a3b4 <UART_SetConfig+0x344>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d130      	bne.n	800a2d4 <UART_SetConfig+0x264>
 800a272:	4b4e      	ldr	r3, [pc, #312]	; (800a3ac <UART_SetConfig+0x33c>)
 800a274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b05      	cmp	r3, #5
 800a27c:	d826      	bhi.n	800a2cc <UART_SetConfig+0x25c>
 800a27e:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <UART_SetConfig+0x214>)
 800a280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a284:	0800a29d 	.word	0x0800a29d
 800a288:	0800a2a5 	.word	0x0800a2a5
 800a28c:	0800a2ad 	.word	0x0800a2ad
 800a290:	0800a2b5 	.word	0x0800a2b5
 800a294:	0800a2bd 	.word	0x0800a2bd
 800a298:	0800a2c5 	.word	0x0800a2c5
 800a29c:	2300      	movs	r3, #0
 800a29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a2:	e2ba      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a2a4:	2304      	movs	r3, #4
 800a2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2aa:	e2b6      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a2ac:	2308      	movs	r3, #8
 800a2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b2:	e2b2      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a2b4:	2310      	movs	r3, #16
 800a2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ba:	e2ae      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a2bc:	2320      	movs	r3, #32
 800a2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c2:	e2aa      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a2c4:	2340      	movs	r3, #64	; 0x40
 800a2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ca:	e2a6      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a2cc:	2380      	movs	r3, #128	; 0x80
 800a2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d2:	e2a2      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a37      	ldr	r2, [pc, #220]	; (800a3b8 <UART_SetConfig+0x348>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d130      	bne.n	800a340 <UART_SetConfig+0x2d0>
 800a2de:	4b33      	ldr	r3, [pc, #204]	; (800a3ac <UART_SetConfig+0x33c>)
 800a2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	2b05      	cmp	r3, #5
 800a2e8:	d826      	bhi.n	800a338 <UART_SetConfig+0x2c8>
 800a2ea:	a201      	add	r2, pc, #4	; (adr r2, 800a2f0 <UART_SetConfig+0x280>)
 800a2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f0:	0800a309 	.word	0x0800a309
 800a2f4:	0800a311 	.word	0x0800a311
 800a2f8:	0800a319 	.word	0x0800a319
 800a2fc:	0800a321 	.word	0x0800a321
 800a300:	0800a329 	.word	0x0800a329
 800a304:	0800a331 	.word	0x0800a331
 800a308:	2300      	movs	r3, #0
 800a30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30e:	e284      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a310:	2304      	movs	r3, #4
 800a312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a316:	e280      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a318:	2308      	movs	r3, #8
 800a31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31e:	e27c      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a320:	2310      	movs	r3, #16
 800a322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a326:	e278      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a328:	2320      	movs	r3, #32
 800a32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32e:	e274      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a330:	2340      	movs	r3, #64	; 0x40
 800a332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a336:	e270      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a338:	2380      	movs	r3, #128	; 0x80
 800a33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33e:	e26c      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a1d      	ldr	r2, [pc, #116]	; (800a3bc <UART_SetConfig+0x34c>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d142      	bne.n	800a3d0 <UART_SetConfig+0x360>
 800a34a:	4b18      	ldr	r3, [pc, #96]	; (800a3ac <UART_SetConfig+0x33c>)
 800a34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	2b05      	cmp	r3, #5
 800a354:	d838      	bhi.n	800a3c8 <UART_SetConfig+0x358>
 800a356:	a201      	add	r2, pc, #4	; (adr r2, 800a35c <UART_SetConfig+0x2ec>)
 800a358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35c:	0800a375 	.word	0x0800a375
 800a360:	0800a37d 	.word	0x0800a37d
 800a364:	0800a385 	.word	0x0800a385
 800a368:	0800a38d 	.word	0x0800a38d
 800a36c:	0800a395 	.word	0x0800a395
 800a370:	0800a3c1 	.word	0x0800a3c1
 800a374:	2300      	movs	r3, #0
 800a376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37a:	e24e      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a37c:	2304      	movs	r3, #4
 800a37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a382:	e24a      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a384:	2308      	movs	r3, #8
 800a386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38a:	e246      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a38c:	2310      	movs	r3, #16
 800a38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a392:	e242      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a394:	2320      	movs	r3, #32
 800a396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39a:	e23e      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a39c:	cfff69f3 	.word	0xcfff69f3
 800a3a0:	58000c00 	.word	0x58000c00
 800a3a4:	11fff4ff 	.word	0x11fff4ff
 800a3a8:	40011000 	.word	0x40011000
 800a3ac:	58024400 	.word	0x58024400
 800a3b0:	40004400 	.word	0x40004400
 800a3b4:	40004800 	.word	0x40004800
 800a3b8:	40004c00 	.word	0x40004c00
 800a3bc:	40005000 	.word	0x40005000
 800a3c0:	2340      	movs	r3, #64	; 0x40
 800a3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c6:	e228      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a3c8:	2380      	movs	r3, #128	; 0x80
 800a3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ce:	e224      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4ab1      	ldr	r2, [pc, #708]	; (800a69c <UART_SetConfig+0x62c>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d176      	bne.n	800a4c8 <UART_SetConfig+0x458>
 800a3da:	4bb1      	ldr	r3, [pc, #708]	; (800a6a0 <UART_SetConfig+0x630>)
 800a3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3e2:	2b28      	cmp	r3, #40	; 0x28
 800a3e4:	d86c      	bhi.n	800a4c0 <UART_SetConfig+0x450>
 800a3e6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <UART_SetConfig+0x37c>)
 800a3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ec:	0800a491 	.word	0x0800a491
 800a3f0:	0800a4c1 	.word	0x0800a4c1
 800a3f4:	0800a4c1 	.word	0x0800a4c1
 800a3f8:	0800a4c1 	.word	0x0800a4c1
 800a3fc:	0800a4c1 	.word	0x0800a4c1
 800a400:	0800a4c1 	.word	0x0800a4c1
 800a404:	0800a4c1 	.word	0x0800a4c1
 800a408:	0800a4c1 	.word	0x0800a4c1
 800a40c:	0800a499 	.word	0x0800a499
 800a410:	0800a4c1 	.word	0x0800a4c1
 800a414:	0800a4c1 	.word	0x0800a4c1
 800a418:	0800a4c1 	.word	0x0800a4c1
 800a41c:	0800a4c1 	.word	0x0800a4c1
 800a420:	0800a4c1 	.word	0x0800a4c1
 800a424:	0800a4c1 	.word	0x0800a4c1
 800a428:	0800a4c1 	.word	0x0800a4c1
 800a42c:	0800a4a1 	.word	0x0800a4a1
 800a430:	0800a4c1 	.word	0x0800a4c1
 800a434:	0800a4c1 	.word	0x0800a4c1
 800a438:	0800a4c1 	.word	0x0800a4c1
 800a43c:	0800a4c1 	.word	0x0800a4c1
 800a440:	0800a4c1 	.word	0x0800a4c1
 800a444:	0800a4c1 	.word	0x0800a4c1
 800a448:	0800a4c1 	.word	0x0800a4c1
 800a44c:	0800a4a9 	.word	0x0800a4a9
 800a450:	0800a4c1 	.word	0x0800a4c1
 800a454:	0800a4c1 	.word	0x0800a4c1
 800a458:	0800a4c1 	.word	0x0800a4c1
 800a45c:	0800a4c1 	.word	0x0800a4c1
 800a460:	0800a4c1 	.word	0x0800a4c1
 800a464:	0800a4c1 	.word	0x0800a4c1
 800a468:	0800a4c1 	.word	0x0800a4c1
 800a46c:	0800a4b1 	.word	0x0800a4b1
 800a470:	0800a4c1 	.word	0x0800a4c1
 800a474:	0800a4c1 	.word	0x0800a4c1
 800a478:	0800a4c1 	.word	0x0800a4c1
 800a47c:	0800a4c1 	.word	0x0800a4c1
 800a480:	0800a4c1 	.word	0x0800a4c1
 800a484:	0800a4c1 	.word	0x0800a4c1
 800a488:	0800a4c1 	.word	0x0800a4c1
 800a48c:	0800a4b9 	.word	0x0800a4b9
 800a490:	2301      	movs	r3, #1
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	e1c0      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a498:	2304      	movs	r3, #4
 800a49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49e:	e1bc      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a6:	e1b8      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ae:	e1b4      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a4b0:	2320      	movs	r3, #32
 800a4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b6:	e1b0      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a4b8:	2340      	movs	r3, #64	; 0x40
 800a4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4be:	e1ac      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a4c0:	2380      	movs	r3, #128	; 0x80
 800a4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4c6:	e1a8      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a75      	ldr	r2, [pc, #468]	; (800a6a4 <UART_SetConfig+0x634>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d130      	bne.n	800a534 <UART_SetConfig+0x4c4>
 800a4d2:	4b73      	ldr	r3, [pc, #460]	; (800a6a0 <UART_SetConfig+0x630>)
 800a4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b05      	cmp	r3, #5
 800a4dc:	d826      	bhi.n	800a52c <UART_SetConfig+0x4bc>
 800a4de:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <UART_SetConfig+0x474>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a4fd 	.word	0x0800a4fd
 800a4e8:	0800a505 	.word	0x0800a505
 800a4ec:	0800a50d 	.word	0x0800a50d
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a51d 	.word	0x0800a51d
 800a4f8:	0800a525 	.word	0x0800a525
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a502:	e18a      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a504:	2304      	movs	r3, #4
 800a506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50a:	e186      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a50c:	2308      	movs	r3, #8
 800a50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a512:	e182      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a514:	2310      	movs	r3, #16
 800a516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51a:	e17e      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a51c:	2320      	movs	r3, #32
 800a51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a522:	e17a      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a524:	2340      	movs	r3, #64	; 0x40
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52a:	e176      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a52c:	2380      	movs	r3, #128	; 0x80
 800a52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a532:	e172      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a5b      	ldr	r2, [pc, #364]	; (800a6a8 <UART_SetConfig+0x638>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d130      	bne.n	800a5a0 <UART_SetConfig+0x530>
 800a53e:	4b58      	ldr	r3, [pc, #352]	; (800a6a0 <UART_SetConfig+0x630>)
 800a540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	2b05      	cmp	r3, #5
 800a548:	d826      	bhi.n	800a598 <UART_SetConfig+0x528>
 800a54a:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <UART_SetConfig+0x4e0>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a569 	.word	0x0800a569
 800a554:	0800a571 	.word	0x0800a571
 800a558:	0800a579 	.word	0x0800a579
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a589 	.word	0x0800a589
 800a564:	0800a591 	.word	0x0800a591
 800a568:	2300      	movs	r3, #0
 800a56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56e:	e154      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a570:	2304      	movs	r3, #4
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a576:	e150      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a578:	2308      	movs	r3, #8
 800a57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57e:	e14c      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a580:	2310      	movs	r3, #16
 800a582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a586:	e148      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a588:	2320      	movs	r3, #32
 800a58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58e:	e144      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a590:	2340      	movs	r3, #64	; 0x40
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e140      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a598:	2380      	movs	r3, #128	; 0x80
 800a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59e:	e13c      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a41      	ldr	r2, [pc, #260]	; (800a6ac <UART_SetConfig+0x63c>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	f040 8082 	bne.w	800a6b0 <UART_SetConfig+0x640>
 800a5ac:	4b3c      	ldr	r3, [pc, #240]	; (800a6a0 <UART_SetConfig+0x630>)
 800a5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5b4:	2b28      	cmp	r3, #40	; 0x28
 800a5b6:	d86d      	bhi.n	800a694 <UART_SetConfig+0x624>
 800a5b8:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <UART_SetConfig+0x550>)
 800a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5be:	bf00      	nop
 800a5c0:	0800a665 	.word	0x0800a665
 800a5c4:	0800a695 	.word	0x0800a695
 800a5c8:	0800a695 	.word	0x0800a695
 800a5cc:	0800a695 	.word	0x0800a695
 800a5d0:	0800a695 	.word	0x0800a695
 800a5d4:	0800a695 	.word	0x0800a695
 800a5d8:	0800a695 	.word	0x0800a695
 800a5dc:	0800a695 	.word	0x0800a695
 800a5e0:	0800a66d 	.word	0x0800a66d
 800a5e4:	0800a695 	.word	0x0800a695
 800a5e8:	0800a695 	.word	0x0800a695
 800a5ec:	0800a695 	.word	0x0800a695
 800a5f0:	0800a695 	.word	0x0800a695
 800a5f4:	0800a695 	.word	0x0800a695
 800a5f8:	0800a695 	.word	0x0800a695
 800a5fc:	0800a695 	.word	0x0800a695
 800a600:	0800a675 	.word	0x0800a675
 800a604:	0800a695 	.word	0x0800a695
 800a608:	0800a695 	.word	0x0800a695
 800a60c:	0800a695 	.word	0x0800a695
 800a610:	0800a695 	.word	0x0800a695
 800a614:	0800a695 	.word	0x0800a695
 800a618:	0800a695 	.word	0x0800a695
 800a61c:	0800a695 	.word	0x0800a695
 800a620:	0800a67d 	.word	0x0800a67d
 800a624:	0800a695 	.word	0x0800a695
 800a628:	0800a695 	.word	0x0800a695
 800a62c:	0800a695 	.word	0x0800a695
 800a630:	0800a695 	.word	0x0800a695
 800a634:	0800a695 	.word	0x0800a695
 800a638:	0800a695 	.word	0x0800a695
 800a63c:	0800a695 	.word	0x0800a695
 800a640:	0800a685 	.word	0x0800a685
 800a644:	0800a695 	.word	0x0800a695
 800a648:	0800a695 	.word	0x0800a695
 800a64c:	0800a695 	.word	0x0800a695
 800a650:	0800a695 	.word	0x0800a695
 800a654:	0800a695 	.word	0x0800a695
 800a658:	0800a695 	.word	0x0800a695
 800a65c:	0800a695 	.word	0x0800a695
 800a660:	0800a68d 	.word	0x0800a68d
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a66a:	e0d6      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a66c:	2304      	movs	r3, #4
 800a66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a672:	e0d2      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a674:	2308      	movs	r3, #8
 800a676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67a:	e0ce      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a67c:	2310      	movs	r3, #16
 800a67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a682:	e0ca      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a684:	2320      	movs	r3, #32
 800a686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68a:	e0c6      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a68c:	2340      	movs	r3, #64	; 0x40
 800a68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a692:	e0c2      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a694:	2380      	movs	r3, #128	; 0x80
 800a696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69a:	e0be      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a69c:	40011400 	.word	0x40011400
 800a6a0:	58024400 	.word	0x58024400
 800a6a4:	40007800 	.word	0x40007800
 800a6a8:	40007c00 	.word	0x40007c00
 800a6ac:	40011800 	.word	0x40011800
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4aad      	ldr	r2, [pc, #692]	; (800a96c <UART_SetConfig+0x8fc>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d176      	bne.n	800a7a8 <UART_SetConfig+0x738>
 800a6ba:	4bad      	ldr	r3, [pc, #692]	; (800a970 <UART_SetConfig+0x900>)
 800a6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6c2:	2b28      	cmp	r3, #40	; 0x28
 800a6c4:	d86c      	bhi.n	800a7a0 <UART_SetConfig+0x730>
 800a6c6:	a201      	add	r2, pc, #4	; (adr r2, 800a6cc <UART_SetConfig+0x65c>)
 800a6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6cc:	0800a771 	.word	0x0800a771
 800a6d0:	0800a7a1 	.word	0x0800a7a1
 800a6d4:	0800a7a1 	.word	0x0800a7a1
 800a6d8:	0800a7a1 	.word	0x0800a7a1
 800a6dc:	0800a7a1 	.word	0x0800a7a1
 800a6e0:	0800a7a1 	.word	0x0800a7a1
 800a6e4:	0800a7a1 	.word	0x0800a7a1
 800a6e8:	0800a7a1 	.word	0x0800a7a1
 800a6ec:	0800a779 	.word	0x0800a779
 800a6f0:	0800a7a1 	.word	0x0800a7a1
 800a6f4:	0800a7a1 	.word	0x0800a7a1
 800a6f8:	0800a7a1 	.word	0x0800a7a1
 800a6fc:	0800a7a1 	.word	0x0800a7a1
 800a700:	0800a7a1 	.word	0x0800a7a1
 800a704:	0800a7a1 	.word	0x0800a7a1
 800a708:	0800a7a1 	.word	0x0800a7a1
 800a70c:	0800a781 	.word	0x0800a781
 800a710:	0800a7a1 	.word	0x0800a7a1
 800a714:	0800a7a1 	.word	0x0800a7a1
 800a718:	0800a7a1 	.word	0x0800a7a1
 800a71c:	0800a7a1 	.word	0x0800a7a1
 800a720:	0800a7a1 	.word	0x0800a7a1
 800a724:	0800a7a1 	.word	0x0800a7a1
 800a728:	0800a7a1 	.word	0x0800a7a1
 800a72c:	0800a789 	.word	0x0800a789
 800a730:	0800a7a1 	.word	0x0800a7a1
 800a734:	0800a7a1 	.word	0x0800a7a1
 800a738:	0800a7a1 	.word	0x0800a7a1
 800a73c:	0800a7a1 	.word	0x0800a7a1
 800a740:	0800a7a1 	.word	0x0800a7a1
 800a744:	0800a7a1 	.word	0x0800a7a1
 800a748:	0800a7a1 	.word	0x0800a7a1
 800a74c:	0800a791 	.word	0x0800a791
 800a750:	0800a7a1 	.word	0x0800a7a1
 800a754:	0800a7a1 	.word	0x0800a7a1
 800a758:	0800a7a1 	.word	0x0800a7a1
 800a75c:	0800a7a1 	.word	0x0800a7a1
 800a760:	0800a7a1 	.word	0x0800a7a1
 800a764:	0800a7a1 	.word	0x0800a7a1
 800a768:	0800a7a1 	.word	0x0800a7a1
 800a76c:	0800a799 	.word	0x0800a799
 800a770:	2301      	movs	r3, #1
 800a772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a776:	e050      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a778:	2304      	movs	r3, #4
 800a77a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a77e:	e04c      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a780:	2308      	movs	r3, #8
 800a782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a786:	e048      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a788:	2310      	movs	r3, #16
 800a78a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a78e:	e044      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a790:	2320      	movs	r3, #32
 800a792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a796:	e040      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a798:	2340      	movs	r3, #64	; 0x40
 800a79a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a79e:	e03c      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a7a0:	2380      	movs	r3, #128	; 0x80
 800a7a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a6:	e038      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a71      	ldr	r2, [pc, #452]	; (800a974 <UART_SetConfig+0x904>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d130      	bne.n	800a814 <UART_SetConfig+0x7a4>
 800a7b2:	4b6f      	ldr	r3, [pc, #444]	; (800a970 <UART_SetConfig+0x900>)
 800a7b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	d826      	bhi.n	800a80c <UART_SetConfig+0x79c>
 800a7be:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <UART_SetConfig+0x754>)
 800a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c4:	0800a7dd 	.word	0x0800a7dd
 800a7c8:	0800a7e5 	.word	0x0800a7e5
 800a7cc:	0800a7ed 	.word	0x0800a7ed
 800a7d0:	0800a7f5 	.word	0x0800a7f5
 800a7d4:	0800a7fd 	.word	0x0800a7fd
 800a7d8:	0800a805 	.word	0x0800a805
 800a7dc:	2302      	movs	r3, #2
 800a7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7e2:	e01a      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ea:	e016      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a7ec:	2308      	movs	r3, #8
 800a7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7f2:	e012      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a7f4:	2310      	movs	r3, #16
 800a7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7fa:	e00e      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a7fc:	2320      	movs	r3, #32
 800a7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a802:	e00a      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a804:	2340      	movs	r3, #64	; 0x40
 800a806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a80a:	e006      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a80c:	2380      	movs	r3, #128	; 0x80
 800a80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a812:	e002      	b.n	800a81a <UART_SetConfig+0x7aa>
 800a814:	2380      	movs	r3, #128	; 0x80
 800a816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a55      	ldr	r2, [pc, #340]	; (800a974 <UART_SetConfig+0x904>)
 800a820:	4293      	cmp	r3, r2
 800a822:	f040 80f0 	bne.w	800aa06 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a82a:	2b20      	cmp	r3, #32
 800a82c:	dc46      	bgt.n	800a8bc <UART_SetConfig+0x84c>
 800a82e:	2b02      	cmp	r3, #2
 800a830:	db75      	blt.n	800a91e <UART_SetConfig+0x8ae>
 800a832:	3b02      	subs	r3, #2
 800a834:	2b1e      	cmp	r3, #30
 800a836:	d872      	bhi.n	800a91e <UART_SetConfig+0x8ae>
 800a838:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <UART_SetConfig+0x7d0>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a8c3 	.word	0x0800a8c3
 800a844:	0800a91f 	.word	0x0800a91f
 800a848:	0800a8cb 	.word	0x0800a8cb
 800a84c:	0800a91f 	.word	0x0800a91f
 800a850:	0800a91f 	.word	0x0800a91f
 800a854:	0800a91f 	.word	0x0800a91f
 800a858:	0800a8db 	.word	0x0800a8db
 800a85c:	0800a91f 	.word	0x0800a91f
 800a860:	0800a91f 	.word	0x0800a91f
 800a864:	0800a91f 	.word	0x0800a91f
 800a868:	0800a91f 	.word	0x0800a91f
 800a86c:	0800a91f 	.word	0x0800a91f
 800a870:	0800a91f 	.word	0x0800a91f
 800a874:	0800a91f 	.word	0x0800a91f
 800a878:	0800a8eb 	.word	0x0800a8eb
 800a87c:	0800a91f 	.word	0x0800a91f
 800a880:	0800a91f 	.word	0x0800a91f
 800a884:	0800a91f 	.word	0x0800a91f
 800a888:	0800a91f 	.word	0x0800a91f
 800a88c:	0800a91f 	.word	0x0800a91f
 800a890:	0800a91f 	.word	0x0800a91f
 800a894:	0800a91f 	.word	0x0800a91f
 800a898:	0800a91f 	.word	0x0800a91f
 800a89c:	0800a91f 	.word	0x0800a91f
 800a8a0:	0800a91f 	.word	0x0800a91f
 800a8a4:	0800a91f 	.word	0x0800a91f
 800a8a8:	0800a91f 	.word	0x0800a91f
 800a8ac:	0800a91f 	.word	0x0800a91f
 800a8b0:	0800a91f 	.word	0x0800a91f
 800a8b4:	0800a91f 	.word	0x0800a91f
 800a8b8:	0800a911 	.word	0x0800a911
 800a8bc:	2b40      	cmp	r3, #64	; 0x40
 800a8be:	d02a      	beq.n	800a916 <UART_SetConfig+0x8a6>
 800a8c0:	e02d      	b.n	800a91e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a8c2:	f7fc faad 	bl	8006e20 <HAL_RCCEx_GetD3PCLK1Freq>
 800a8c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8c8:	e02f      	b.n	800a92a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ca:	f107 0314 	add.w	r3, r7, #20
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fc fabc 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8d8:	e027      	b.n	800a92a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8da:	f107 0308 	add.w	r3, r7, #8
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fc fc08 	bl	80070f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8e8:	e01f      	b.n	800a92a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ea:	4b21      	ldr	r3, [pc, #132]	; (800a970 <UART_SetConfig+0x900>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0320 	and.w	r3, r3, #32
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d009      	beq.n	800a90a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8f6:	4b1e      	ldr	r3, [pc, #120]	; (800a970 <UART_SetConfig+0x900>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	08db      	lsrs	r3, r3, #3
 800a8fc:	f003 0303 	and.w	r3, r3, #3
 800a900:	4a1d      	ldr	r2, [pc, #116]	; (800a978 <UART_SetConfig+0x908>)
 800a902:	fa22 f303 	lsr.w	r3, r2, r3
 800a906:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a908:	e00f      	b.n	800a92a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a90a:	4b1b      	ldr	r3, [pc, #108]	; (800a978 <UART_SetConfig+0x908>)
 800a90c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a90e:	e00c      	b.n	800a92a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a910:	4b1a      	ldr	r3, [pc, #104]	; (800a97c <UART_SetConfig+0x90c>)
 800a912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a914:	e009      	b.n	800a92a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a91a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a91c:	e005      	b.n	800a92a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a91e:	2300      	movs	r3, #0
 800a920:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a928:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 81e6 	beq.w	800acfe <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	4a12      	ldr	r2, [pc, #72]	; (800a980 <UART_SetConfig+0x910>)
 800a938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a93c:	461a      	mov	r2, r3
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	fbb3 f3f2 	udiv	r3, r3, r2
 800a944:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685a      	ldr	r2, [r3, #4]
 800a94a:	4613      	mov	r3, r2
 800a94c:	005b      	lsls	r3, r3, #1
 800a94e:	4413      	add	r3, r2
 800a950:	6a3a      	ldr	r2, [r7, #32]
 800a952:	429a      	cmp	r2, r3
 800a954:	d305      	bcc.n	800a962 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a95c:	6a3a      	ldr	r2, [r7, #32]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d910      	bls.n	800a984 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a968:	e1c9      	b.n	800acfe <UART_SetConfig+0xc8e>
 800a96a:	bf00      	nop
 800a96c:	40011c00 	.word	0x40011c00
 800a970:	58024400 	.word	0x58024400
 800a974:	58000c00 	.word	0x58000c00
 800a978:	03d09000 	.word	0x03d09000
 800a97c:	003d0900 	.word	0x003d0900
 800a980:	0800b3a4 	.word	0x0800b3a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a986:	4618      	mov	r0, r3
 800a988:	f04f 0100 	mov.w	r1, #0
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	4ac1      	ldr	r2, [pc, #772]	; (800ac98 <UART_SetConfig+0xc28>)
 800a992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a996:	b29a      	uxth	r2, r3
 800a998:	f04f 0300 	mov.w	r3, #0
 800a99c:	f7f5 fca6 	bl	80002ec <__aeabi_uldivmod>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	f04f 0200 	mov.w	r2, #0
 800a9ac:	f04f 0300 	mov.w	r3, #0
 800a9b0:	020b      	lsls	r3, r1, #8
 800a9b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9b6:	0202      	lsls	r2, r0, #8
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	6849      	ldr	r1, [r1, #4]
 800a9bc:	0849      	lsrs	r1, r1, #1
 800a9be:	4608      	mov	r0, r1
 800a9c0:	f04f 0100 	mov.w	r1, #0
 800a9c4:	1814      	adds	r4, r2, r0
 800a9c6:	eb43 0501 	adc.w	r5, r3, r1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f04f 0300 	mov.w	r3, #0
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	f7f5 fc88 	bl	80002ec <__aeabi_uldivmod>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9ea:	d308      	bcc.n	800a9fe <UART_SetConfig+0x98e>
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9f2:	d204      	bcs.n	800a9fe <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9fa:	60da      	str	r2, [r3, #12]
 800a9fc:	e17f      	b.n	800acfe <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aa04:	e17b      	b.n	800acfe <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa0e:	f040 80bd 	bne.w	800ab8c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800aa12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	dc48      	bgt.n	800aaac <UART_SetConfig+0xa3c>
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	db7b      	blt.n	800ab16 <UART_SetConfig+0xaa6>
 800aa1e:	2b20      	cmp	r3, #32
 800aa20:	d879      	bhi.n	800ab16 <UART_SetConfig+0xaa6>
 800aa22:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <UART_SetConfig+0x9b8>)
 800aa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa28:	0800aab3 	.word	0x0800aab3
 800aa2c:	0800aabb 	.word	0x0800aabb
 800aa30:	0800ab17 	.word	0x0800ab17
 800aa34:	0800ab17 	.word	0x0800ab17
 800aa38:	0800aac3 	.word	0x0800aac3
 800aa3c:	0800ab17 	.word	0x0800ab17
 800aa40:	0800ab17 	.word	0x0800ab17
 800aa44:	0800ab17 	.word	0x0800ab17
 800aa48:	0800aad3 	.word	0x0800aad3
 800aa4c:	0800ab17 	.word	0x0800ab17
 800aa50:	0800ab17 	.word	0x0800ab17
 800aa54:	0800ab17 	.word	0x0800ab17
 800aa58:	0800ab17 	.word	0x0800ab17
 800aa5c:	0800ab17 	.word	0x0800ab17
 800aa60:	0800ab17 	.word	0x0800ab17
 800aa64:	0800ab17 	.word	0x0800ab17
 800aa68:	0800aae3 	.word	0x0800aae3
 800aa6c:	0800ab17 	.word	0x0800ab17
 800aa70:	0800ab17 	.word	0x0800ab17
 800aa74:	0800ab17 	.word	0x0800ab17
 800aa78:	0800ab17 	.word	0x0800ab17
 800aa7c:	0800ab17 	.word	0x0800ab17
 800aa80:	0800ab17 	.word	0x0800ab17
 800aa84:	0800ab17 	.word	0x0800ab17
 800aa88:	0800ab17 	.word	0x0800ab17
 800aa8c:	0800ab17 	.word	0x0800ab17
 800aa90:	0800ab17 	.word	0x0800ab17
 800aa94:	0800ab17 	.word	0x0800ab17
 800aa98:	0800ab17 	.word	0x0800ab17
 800aa9c:	0800ab17 	.word	0x0800ab17
 800aaa0:	0800ab17 	.word	0x0800ab17
 800aaa4:	0800ab17 	.word	0x0800ab17
 800aaa8:	0800ab09 	.word	0x0800ab09
 800aaac:	2b40      	cmp	r3, #64	; 0x40
 800aaae:	d02e      	beq.n	800ab0e <UART_SetConfig+0xa9e>
 800aab0:	e031      	b.n	800ab16 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aab2:	f7fa fe53 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 800aab6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aab8:	e033      	b.n	800ab22 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaba:	f7fa fe65 	bl	8005788 <HAL_RCC_GetPCLK2Freq>
 800aabe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aac0:	e02f      	b.n	800ab22 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac2:	f107 0314 	add.w	r3, r7, #20
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fc f9c0 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aad0:	e027      	b.n	800ab22 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fc fb0c 	bl	80070f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aae0:	e01f      	b.n	800ab22 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aae2:	4b6e      	ldr	r3, [pc, #440]	; (800ac9c <UART_SetConfig+0xc2c>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 0320 	and.w	r3, r3, #32
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d009      	beq.n	800ab02 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aaee:	4b6b      	ldr	r3, [pc, #428]	; (800ac9c <UART_SetConfig+0xc2c>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	08db      	lsrs	r3, r3, #3
 800aaf4:	f003 0303 	and.w	r3, r3, #3
 800aaf8:	4a69      	ldr	r2, [pc, #420]	; (800aca0 <UART_SetConfig+0xc30>)
 800aafa:	fa22 f303 	lsr.w	r3, r2, r3
 800aafe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab00:	e00f      	b.n	800ab22 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800ab02:	4b67      	ldr	r3, [pc, #412]	; (800aca0 <UART_SetConfig+0xc30>)
 800ab04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab06:	e00c      	b.n	800ab22 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab08:	4b66      	ldr	r3, [pc, #408]	; (800aca4 <UART_SetConfig+0xc34>)
 800ab0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab0c:	e009      	b.n	800ab22 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab14:	e005      	b.n	800ab22 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ab16:	2300      	movs	r3, #0
 800ab18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ab20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 80ea 	beq.w	800acfe <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	4a5a      	ldr	r2, [pc, #360]	; (800ac98 <UART_SetConfig+0xc28>)
 800ab30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab34:	461a      	mov	r2, r3
 800ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab38:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab3c:	005a      	lsls	r2, r3, #1
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	085b      	lsrs	r3, r3, #1
 800ab44:	441a      	add	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab4e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	2b0f      	cmp	r3, #15
 800ab54:	d916      	bls.n	800ab84 <UART_SetConfig+0xb14>
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5c:	d212      	bcs.n	800ab84 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	f023 030f 	bic.w	r3, r3, #15
 800ab66:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6a:	085b      	lsrs	r3, r3, #1
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	f003 0307 	and.w	r3, r3, #7
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab76:	4313      	orrs	r3, r2
 800ab78:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ab80:	60da      	str	r2, [r3, #12]
 800ab82:	e0bc      	b.n	800acfe <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab8a:	e0b8      	b.n	800acfe <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab90:	2b20      	cmp	r3, #32
 800ab92:	dc4b      	bgt.n	800ac2c <UART_SetConfig+0xbbc>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f2c0 8087 	blt.w	800aca8 <UART_SetConfig+0xc38>
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	f200 8084 	bhi.w	800aca8 <UART_SetConfig+0xc38>
 800aba0:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <UART_SetConfig+0xb38>)
 800aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba6:	bf00      	nop
 800aba8:	0800ac33 	.word	0x0800ac33
 800abac:	0800ac3b 	.word	0x0800ac3b
 800abb0:	0800aca9 	.word	0x0800aca9
 800abb4:	0800aca9 	.word	0x0800aca9
 800abb8:	0800ac43 	.word	0x0800ac43
 800abbc:	0800aca9 	.word	0x0800aca9
 800abc0:	0800aca9 	.word	0x0800aca9
 800abc4:	0800aca9 	.word	0x0800aca9
 800abc8:	0800ac53 	.word	0x0800ac53
 800abcc:	0800aca9 	.word	0x0800aca9
 800abd0:	0800aca9 	.word	0x0800aca9
 800abd4:	0800aca9 	.word	0x0800aca9
 800abd8:	0800aca9 	.word	0x0800aca9
 800abdc:	0800aca9 	.word	0x0800aca9
 800abe0:	0800aca9 	.word	0x0800aca9
 800abe4:	0800aca9 	.word	0x0800aca9
 800abe8:	0800ac63 	.word	0x0800ac63
 800abec:	0800aca9 	.word	0x0800aca9
 800abf0:	0800aca9 	.word	0x0800aca9
 800abf4:	0800aca9 	.word	0x0800aca9
 800abf8:	0800aca9 	.word	0x0800aca9
 800abfc:	0800aca9 	.word	0x0800aca9
 800ac00:	0800aca9 	.word	0x0800aca9
 800ac04:	0800aca9 	.word	0x0800aca9
 800ac08:	0800aca9 	.word	0x0800aca9
 800ac0c:	0800aca9 	.word	0x0800aca9
 800ac10:	0800aca9 	.word	0x0800aca9
 800ac14:	0800aca9 	.word	0x0800aca9
 800ac18:	0800aca9 	.word	0x0800aca9
 800ac1c:	0800aca9 	.word	0x0800aca9
 800ac20:	0800aca9 	.word	0x0800aca9
 800ac24:	0800aca9 	.word	0x0800aca9
 800ac28:	0800ac89 	.word	0x0800ac89
 800ac2c:	2b40      	cmp	r3, #64	; 0x40
 800ac2e:	d02e      	beq.n	800ac8e <UART_SetConfig+0xc1e>
 800ac30:	e03a      	b.n	800aca8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac32:	f7fa fd93 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 800ac36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac38:	e03c      	b.n	800acb4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac3a:	f7fa fda5 	bl	8005788 <HAL_RCC_GetPCLK2Freq>
 800ac3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac40:	e038      	b.n	800acb4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac42:	f107 0314 	add.w	r3, r7, #20
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fc f900 	bl	8006e4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac50:	e030      	b.n	800acb4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac52:	f107 0308 	add.w	r3, r7, #8
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fc fa4c 	bl	80070f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac60:	e028      	b.n	800acb4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac62:	4b0e      	ldr	r3, [pc, #56]	; (800ac9c <UART_SetConfig+0xc2c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac6e:	4b0b      	ldr	r3, [pc, #44]	; (800ac9c <UART_SetConfig+0xc2c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	08db      	lsrs	r3, r3, #3
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	4a09      	ldr	r2, [pc, #36]	; (800aca0 <UART_SetConfig+0xc30>)
 800ac7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac80:	e018      	b.n	800acb4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ac82:	4b07      	ldr	r3, [pc, #28]	; (800aca0 <UART_SetConfig+0xc30>)
 800ac84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac86:	e015      	b.n	800acb4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac88:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <UART_SetConfig+0xc34>)
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac8c:	e012      	b.n	800acb4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac94:	e00e      	b.n	800acb4 <UART_SetConfig+0xc44>
 800ac96:	bf00      	nop
 800ac98:	0800b3a4 	.word	0x0800b3a4
 800ac9c:	58024400 	.word	0x58024400
 800aca0:	03d09000 	.word	0x03d09000
 800aca4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800acb2:	bf00      	nop
    }

    if (pclk != 0U)
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d021      	beq.n	800acfe <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	4a1a      	ldr	r2, [pc, #104]	; (800ad28 <UART_SetConfig+0xcb8>)
 800acc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc4:	461a      	mov	r2, r3
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	fbb3 f2f2 	udiv	r2, r3, r2
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	085b      	lsrs	r3, r3, #1
 800acd2:	441a      	add	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800acdc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace0:	2b0f      	cmp	r3, #15
 800ace2:	d909      	bls.n	800acf8 <UART_SetConfig+0xc88>
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acea:	d205      	bcs.n	800acf8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	b29a      	uxth	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	60da      	str	r2, [r3, #12]
 800acf6:	e002      	b.n	800acfe <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ad1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3738      	adds	r7, #56	; 0x38
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bdb0      	pop	{r4, r5, r7, pc}
 800ad26:	bf00      	nop
 800ad28:	0800b3a4 	.word	0x0800b3a4

0800ad2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00a      	beq.n	800ad56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5a:	f003 0302 	and.w	r3, r3, #2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00a      	beq.n	800ad78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	430a      	orrs	r2, r1
 800ad76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00a      	beq.n	800ad9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	430a      	orrs	r2, r1
 800ad98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9e:	f003 0308 	and.w	r3, r3, #8
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00a      	beq.n	800adbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	430a      	orrs	r2, r1
 800adba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc0:	f003 0310 	and.w	r3, r3, #16
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00a      	beq.n	800adde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	430a      	orrs	r2, r1
 800addc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00a      	beq.n	800ae00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01a      	beq.n	800ae42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae2a:	d10a      	bne.n	800ae42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00a      	beq.n	800ae64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	430a      	orrs	r2, r1
 800ae62:	605a      	str	r2, [r3, #4]
  }
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af02      	add	r7, sp, #8
 800ae76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae80:	f7f7 f936 	bl	80020f0 <HAL_GetTick>
 800ae84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0308 	and.w	r3, r3, #8
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d10e      	bne.n	800aeb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f82f 	bl	800af06 <UART_WaitOnFlagUntilTimeout>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d001      	beq.n	800aeb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e025      	b.n	800aefe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d10e      	bne.n	800aede <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f819 	bl	800af06 <UART_WaitOnFlagUntilTimeout>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e00f      	b.n	800aefe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2220      	movs	r2, #32
 800aee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b09c      	sub	sp, #112	; 0x70
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	603b      	str	r3, [r7, #0]
 800af12:	4613      	mov	r3, r2
 800af14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af16:	e0a9      	b.n	800b06c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1e:	f000 80a5 	beq.w	800b06c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af22:	f7f7 f8e5 	bl	80020f0 <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af2e:	429a      	cmp	r2, r3
 800af30:	d302      	bcc.n	800af38 <UART_WaitOnFlagUntilTimeout+0x32>
 800af32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af34:	2b00      	cmp	r3, #0
 800af36:	d140      	bne.n	800afba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af40:	e853 3f00 	ldrex	r3, [r3]
 800af44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af4c:	667b      	str	r3, [r7, #100]	; 0x64
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af5e:	e841 2300 	strex	r3, r2, [r1]
 800af62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800af64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1e6      	bne.n	800af38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3308      	adds	r3, #8
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af74:	e853 3f00 	ldrex	r3, [r3]
 800af78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	f023 0301 	bic.w	r3, r3, #1
 800af80:	663b      	str	r3, [r7, #96]	; 0x60
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3308      	adds	r3, #8
 800af88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af8a:	64ba      	str	r2, [r7, #72]	; 0x48
 800af8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af92:	e841 2300 	strex	r3, r2, [r1]
 800af96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800af98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e5      	bne.n	800af6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2220      	movs	r2, #32
 800afaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800afb6:	2303      	movs	r3, #3
 800afb8:	e069      	b.n	800b08e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d051      	beq.n	800b06c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afd6:	d149      	bne.n	800b06c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afe0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	e853 3f00 	ldrex	r3, [r3]
 800afee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	461a      	mov	r2, r3
 800affe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b000:	637b      	str	r3, [r7, #52]	; 0x34
 800b002:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b008:	e841 2300 	strex	r3, r2, [r1]
 800b00c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1e6      	bne.n	800afe2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3308      	adds	r3, #8
 800b01a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	e853 3f00 	ldrex	r3, [r3]
 800b022:	613b      	str	r3, [r7, #16]
   return(result);
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f023 0301 	bic.w	r3, r3, #1
 800b02a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	3308      	adds	r3, #8
 800b032:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b034:	623a      	str	r2, [r7, #32]
 800b036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b038:	69f9      	ldr	r1, [r7, #28]
 800b03a:	6a3a      	ldr	r2, [r7, #32]
 800b03c:	e841 2300 	strex	r3, r2, [r1]
 800b040:	61bb      	str	r3, [r7, #24]
   return(result);
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e5      	bne.n	800b014 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2220      	movs	r2, #32
 800b04c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2220      	movs	r2, #32
 800b054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2220      	movs	r2, #32
 800b05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e010      	b.n	800b08e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	69da      	ldr	r2, [r3, #28]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	4013      	ands	r3, r2
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	429a      	cmp	r2, r3
 800b07a:	bf0c      	ite	eq
 800b07c:	2301      	moveq	r3, #1
 800b07e:	2300      	movne	r3, #0
 800b080:	b2db      	uxtb	r3, r3
 800b082:	461a      	mov	r2, r3
 800b084:	79fb      	ldrb	r3, [r7, #7]
 800b086:	429a      	cmp	r2, r3
 800b088:	f43f af46 	beq.w	800af18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3770      	adds	r7, #112	; 0x70
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b096:	b480      	push	{r7}
 800b098:	b085      	sub	sp, #20
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d101      	bne.n	800b0ac <HAL_UARTEx_DisableFifoMode+0x16>
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	e027      	b.n	800b0fc <HAL_UARTEx_DisableFifoMode+0x66>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2224      	movs	r2, #36	; 0x24
 800b0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f022 0201 	bic.w	r2, r2, #1
 800b0d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b0da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2220      	movs	r2, #32
 800b0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d101      	bne.n	800b120 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b11c:	2302      	movs	r3, #2
 800b11e:	e02d      	b.n	800b17c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2224      	movs	r2, #36	; 0x24
 800b12c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f022 0201 	bic.w	r2, r2, #1
 800b146:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	430a      	orrs	r2, r1
 800b15a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f84f 	bl	800b200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2220      	movs	r2, #32
 800b16e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b194:	2b01      	cmp	r3, #1
 800b196:	d101      	bne.n	800b19c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b198:	2302      	movs	r3, #2
 800b19a:	e02d      	b.n	800b1f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2224      	movs	r2, #36	; 0x24
 800b1a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f022 0201 	bic.w	r2, r2, #1
 800b1c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f811 	bl	800b200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d108      	bne.n	800b222 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b220:	e031      	b.n	800b286 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b222:	2310      	movs	r3, #16
 800b224:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b226:	2310      	movs	r3, #16
 800b228:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	0e5b      	lsrs	r3, r3, #25
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 0307 	and.w	r3, r3, #7
 800b238:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	0f5b      	lsrs	r3, r3, #29
 800b242:	b2db      	uxtb	r3, r3
 800b244:	f003 0307 	and.w	r3, r3, #7
 800b248:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b24a:	7bbb      	ldrb	r3, [r7, #14]
 800b24c:	7b3a      	ldrb	r2, [r7, #12]
 800b24e:	4911      	ldr	r1, [pc, #68]	; (800b294 <UARTEx_SetNbDataToProcess+0x94>)
 800b250:	5c8a      	ldrb	r2, [r1, r2]
 800b252:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b256:	7b3a      	ldrb	r2, [r7, #12]
 800b258:	490f      	ldr	r1, [pc, #60]	; (800b298 <UARTEx_SetNbDataToProcess+0x98>)
 800b25a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b25c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b260:	b29a      	uxth	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b268:	7bfb      	ldrb	r3, [r7, #15]
 800b26a:	7b7a      	ldrb	r2, [r7, #13]
 800b26c:	4909      	ldr	r1, [pc, #36]	; (800b294 <UARTEx_SetNbDataToProcess+0x94>)
 800b26e:	5c8a      	ldrb	r2, [r1, r2]
 800b270:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b274:	7b7a      	ldrb	r2, [r7, #13]
 800b276:	4908      	ldr	r1, [pc, #32]	; (800b298 <UARTEx_SetNbDataToProcess+0x98>)
 800b278:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b27a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b27e:	b29a      	uxth	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b286:	bf00      	nop
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	0800b3bc 	.word	0x0800b3bc
 800b298:	0800b3c4 	.word	0x0800b3c4

0800b29c <__libc_init_array>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	4d0d      	ldr	r5, [pc, #52]	; (800b2d4 <__libc_init_array+0x38>)
 800b2a0:	4c0d      	ldr	r4, [pc, #52]	; (800b2d8 <__libc_init_array+0x3c>)
 800b2a2:	1b64      	subs	r4, r4, r5
 800b2a4:	10a4      	asrs	r4, r4, #2
 800b2a6:	2600      	movs	r6, #0
 800b2a8:	42a6      	cmp	r6, r4
 800b2aa:	d109      	bne.n	800b2c0 <__libc_init_array+0x24>
 800b2ac:	4d0b      	ldr	r5, [pc, #44]	; (800b2dc <__libc_init_array+0x40>)
 800b2ae:	4c0c      	ldr	r4, [pc, #48]	; (800b2e0 <__libc_init_array+0x44>)
 800b2b0:	f000 f82e 	bl	800b310 <_init>
 800b2b4:	1b64      	subs	r4, r4, r5
 800b2b6:	10a4      	asrs	r4, r4, #2
 800b2b8:	2600      	movs	r6, #0
 800b2ba:	42a6      	cmp	r6, r4
 800b2bc:	d105      	bne.n	800b2ca <__libc_init_array+0x2e>
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2c4:	4798      	blx	r3
 800b2c6:	3601      	adds	r6, #1
 800b2c8:	e7ee      	b.n	800b2a8 <__libc_init_array+0xc>
 800b2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ce:	4798      	blx	r3
 800b2d0:	3601      	adds	r6, #1
 800b2d2:	e7f2      	b.n	800b2ba <__libc_init_array+0x1e>
 800b2d4:	0800b3d4 	.word	0x0800b3d4
 800b2d8:	0800b3d4 	.word	0x0800b3d4
 800b2dc:	0800b3d4 	.word	0x0800b3d4
 800b2e0:	0800b3d8 	.word	0x0800b3d8

0800b2e4 <memcpy>:
 800b2e4:	440a      	add	r2, r1
 800b2e6:	4291      	cmp	r1, r2
 800b2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2ec:	d100      	bne.n	800b2f0 <memcpy+0xc>
 800b2ee:	4770      	bx	lr
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2fa:	4291      	cmp	r1, r2
 800b2fc:	d1f9      	bne.n	800b2f2 <memcpy+0xe>
 800b2fe:	bd10      	pop	{r4, pc}

0800b300 <memset>:
 800b300:	4402      	add	r2, r0
 800b302:	4603      	mov	r3, r0
 800b304:	4293      	cmp	r3, r2
 800b306:	d100      	bne.n	800b30a <memset+0xa>
 800b308:	4770      	bx	lr
 800b30a:	f803 1b01 	strb.w	r1, [r3], #1
 800b30e:	e7f9      	b.n	800b304 <memset+0x4>

0800b310 <_init>:
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	bf00      	nop
 800b314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b316:	bc08      	pop	{r3}
 800b318:	469e      	mov	lr, r3
 800b31a:	4770      	bx	lr

0800b31c <_fini>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	bf00      	nop
 800b320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b322:	bc08      	pop	{r3}
 800b324:	469e      	mov	lr, r3
 800b326:	4770      	bx	lr
