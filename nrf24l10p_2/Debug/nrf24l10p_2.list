
nrf24l10p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c628  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800c8d8  0800c8d8  0001c8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ca24  0800ca24  0001ca24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ca2c  0800ca2c  0001ca2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ca30  0800ca30  0001ca30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800ca34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000048c  2400007c  0800cab0  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000508  0800cab0  00020508  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e429  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f11  00000000  00000000  0004e4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a90  00000000  00000000  000523e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001968  00000000  00000000  00053e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000356c1  00000000  00000000  000557e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ebc2  00000000  00000000  0008aea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00163944  00000000  00000000  000a9a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020d3a7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007c74  00000000  00000000  0020d3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c8c0 	.word	0x0800c8c0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	0800c8c0 	.word	0x0800c8c0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <CS_Select>:
#define NRF24_CSN_PORT   GPIOD
#define NRF24_CSN_PIN    GPIO_PIN_15


void CS_Select (void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <CS_Select+0x14>)
 8000694:	f004 fb70 	bl	8004d78 <HAL_GPIO_WritePin>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	58020c00 	.word	0x58020c00

080006a0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006aa:	4802      	ldr	r0, [pc, #8]	; (80006b4 <CS_UnSelect+0x14>)
 80006ac:	f004 fb64 	bl	8004d78 <HAL_GPIO_WritePin>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	58020c00 	.word	0x58020c00

080006b8 <CE_Enable>:


void CE_Enable (void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <CE_Enable+0x14>)
 80006c4:	f004 fb58 	bl	8004d78 <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58020c00 	.word	0x58020c00

080006d0 <CE_Disable>:

void CE_Disable (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006da:	4802      	ldr	r0, [pc, #8]	; (80006e4 <CE_Disable+0x14>)
 80006dc:	f004 fb4c 	bl	8004d78 <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58020c00 	.word	0x58020c00

080006e8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000706:	f7ff ffbf 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800070a:	f107 010c 	add.w	r1, r7, #12
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	2202      	movs	r2, #2
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <nrf24_WriteReg+0x40>)
 8000716:	f007 fce3 	bl	80080e0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800071a:	f7ff ffc1 	bl	80006a0 <CS_UnSelect>
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	24000394 	.word	0x24000394

0800072c <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	b2db      	uxtb	r3, r3
 8000742:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000744:	f7ff ffa0 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000748:	f107 0114 	add.w	r1, r7, #20
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	2201      	movs	r2, #1
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <nrf24_WriteRegMulti+0x48>)
 8000752:	f007 fcc5 	bl	80080e0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	b29a      	uxth	r2, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <nrf24_WriteRegMulti+0x48>)
 8000762:	f007 fcbd 	bl	80080e0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000766:	f7ff ff9b 	bl	80006a0 <CS_UnSelect>
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	24000394 	.word	0x24000394

08000778 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000786:	f7ff ff7f 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800078a:	1df9      	adds	r1, r7, #7
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2201      	movs	r2, #1
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <nrf24_ReadReg+0x3c>)
 8000792:	f007 fca5 	bl	80080e0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000796:	f107 010f 	add.w	r1, r7, #15
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	2201      	movs	r2, #1
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <nrf24_ReadReg+0x3c>)
 80007a0:	f007 fe90 	bl	80084c4 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80007a4:	f7ff ff7c 	bl	80006a0 <CS_UnSelect>

	return data;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000394 	.word	0x24000394

080007b8 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80007c6:	f7ff ff5f 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80007ca:	f107 010f 	add.w	r1, r7, #15
 80007ce:	2364      	movs	r3, #100	; 0x64
 80007d0:	2201      	movs	r2, #1
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <nrf24_ReadReg_Multi+0x3c>)
 80007d4:	f007 fc84 	bl	80080e0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <nrf24_ReadReg_Multi+0x3c>)
 80007e4:	f007 fe6e 	bl	80084c4 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80007e8:	f7ff ff5a 	bl	80006a0 <CS_UnSelect>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000394 	.word	0x24000394

080007f8 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000802:	f7ff ff41 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000806:	1df9      	adds	r1, r7, #7
 8000808:	2364      	movs	r3, #100	; 0x64
 800080a:	2201      	movs	r2, #1
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <nrfsendCmd+0x28>)
 800080e:	f007 fc67 	bl	80080e0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000812:	f7ff ff45 	bl	80006a0 <CS_UnSelect>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	24000394 	.word	0x24000394

08000824 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b07      	cmp	r3, #7
 8000832:	d104      	bne.n	800083e <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000834:	2100      	movs	r1, #0
 8000836:	2007      	movs	r0, #7
 8000838:	f7ff ff56 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 800083c:	e090      	b.n	8000960 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b17      	cmp	r3, #23
 8000842:	d104      	bne.n	800084e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000844:	2111      	movs	r1, #17
 8000846:	2017      	movs	r0, #23
 8000848:	f7ff ff4e 	bl	80006e8 <nrf24_WriteReg>
}
 800084c:	e088      	b.n	8000960 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800084e:	2108      	movs	r1, #8
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff ff49 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000856:	213f      	movs	r1, #63	; 0x3f
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff45 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800085e:	2103      	movs	r1, #3
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff ff41 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000866:	2103      	movs	r1, #3
 8000868:	2003      	movs	r0, #3
 800086a:	f7ff ff3d 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800086e:	2103      	movs	r1, #3
 8000870:	2004      	movs	r0, #4
 8000872:	f7ff ff39 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000876:	2102      	movs	r1, #2
 8000878:	2005      	movs	r0, #5
 800087a:	f7ff ff35 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800087e:	210e      	movs	r1, #14
 8000880:	2006      	movs	r0, #6
 8000882:	f7ff ff31 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000886:	2100      	movs	r1, #0
 8000888:	2007      	movs	r0, #7
 800088a:	f7ff ff2d 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800088e:	2100      	movs	r1, #0
 8000890:	2008      	movs	r0, #8
 8000892:	f7ff ff29 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000896:	2100      	movs	r1, #0
 8000898:	2009      	movs	r0, #9
 800089a:	f7ff ff25 	bl	80006e8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800089e:	4a32      	ldr	r2, [pc, #200]	; (8000968 <nrf24_reset+0x144>)
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a8:	6018      	str	r0, [r3, #0]
 80008aa:	3304      	adds	r3, #4
 80008ac:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2205      	movs	r2, #5
 80008b4:	4619      	mov	r1, r3
 80008b6:	200a      	movs	r0, #10
 80008b8:	f7ff ff38 	bl	800072c <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80008bc:	4a2b      	ldr	r2, [pc, #172]	; (800096c <nrf24_reset+0x148>)
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c6:	6018      	str	r0, [r3, #0]
 80008c8:	3304      	adds	r3, #4
 80008ca:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	2205      	movs	r2, #5
 80008d2:	4619      	mov	r1, r3
 80008d4:	200b      	movs	r0, #11
 80008d6:	f7ff ff29 	bl	800072c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80008da:	21c3      	movs	r1, #195	; 0xc3
 80008dc:	200c      	movs	r0, #12
 80008de:	f7ff ff03 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80008e2:	21c4      	movs	r1, #196	; 0xc4
 80008e4:	200d      	movs	r0, #13
 80008e6:	f7ff feff 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80008ea:	21c5      	movs	r1, #197	; 0xc5
 80008ec:	200e      	movs	r0, #14
 80008ee:	f7ff fefb 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80008f2:	21c6      	movs	r1, #198	; 0xc6
 80008f4:	200f      	movs	r0, #15
 80008f6:	f7ff fef7 	bl	80006e8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80008fa:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <nrf24_reset+0x144>)
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000904:	6018      	str	r0, [r3, #0]
 8000906:	3304      	adds	r3, #4
 8000908:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2205      	movs	r2, #5
 8000910:	4619      	mov	r1, r3
 8000912:	2010      	movs	r0, #16
 8000914:	f7ff ff0a 	bl	800072c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000918:	2100      	movs	r1, #0
 800091a:	2011      	movs	r0, #17
 800091c:	f7ff fee4 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000920:	2100      	movs	r1, #0
 8000922:	2012      	movs	r0, #18
 8000924:	f7ff fee0 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000928:	2100      	movs	r1, #0
 800092a:	2013      	movs	r0, #19
 800092c:	f7ff fedc 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000930:	2100      	movs	r1, #0
 8000932:	2014      	movs	r0, #20
 8000934:	f7ff fed8 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000938:	2100      	movs	r1, #0
 800093a:	2015      	movs	r0, #21
 800093c:	f7ff fed4 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000940:	2100      	movs	r1, #0
 8000942:	2016      	movs	r0, #22
 8000944:	f7ff fed0 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000948:	2111      	movs	r1, #17
 800094a:	2017      	movs	r0, #23
 800094c:	f7ff fecc 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000950:	2100      	movs	r1, #0
 8000952:	201c      	movs	r0, #28
 8000954:	f7ff fec8 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000958:	2100      	movs	r1, #0
 800095a:	201d      	movs	r0, #29
 800095c:	f7ff fec4 	bl	80006e8 <nrf24_WriteReg>
}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	0800c8d8 	.word	0x0800c8d8
 800096c:	0800c8e0 	.word	0x0800c8e0

08000970 <NRF24_Init>:




void NRF24_Init (void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000974:	f7ff feac 	bl	80006d0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff53 	bl	8000824 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff feb1 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000986:	2100      	movs	r1, #0
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff fead 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800098e:	2100      	movs	r1, #0
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fea9 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000996:	2103      	movs	r1, #3
 8000998:	2003      	movs	r0, #3
 800099a:	f7ff fea5 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800099e:	2100      	movs	r1, #0
 80009a0:	2004      	movs	r0, #4
 80009a2:	f7ff fea1 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80009a6:	2100      	movs	r1, #0
 80009a8:	2005      	movs	r0, #5
 80009aa:	f7ff fe9d 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80009ae:	210e      	movs	r1, #14
 80009b0:	2006      	movs	r0, #6
 80009b2:	f7ff fe99 	bl	80006e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80009b6:	f7ff fe7f 	bl	80006b8 <CE_Enable>

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}

080009be <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80009ca:	f7ff fe81 	bl	80006d0 <CE_Disable>

	nrf24_reset (STATUS);
 80009ce:	2007      	movs	r0, #7
 80009d0:	f7ff ff28 	bl	8000824 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	4619      	mov	r1, r3
 80009d8:	2005      	movs	r0, #5
 80009da:	f7ff fe85 	bl	80006e8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80009de:	2002      	movs	r0, #2
 80009e0:	f7ff feca 	bl	8000778 <nrf24_ReadReg>
 80009e4:	4603      	mov	r3, r0
 80009e6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	4619      	mov	r1, r3
 80009f4:	2002      	movs	r0, #2
 80009f6:	f7ff fe77 	bl	80006e8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80009fa:	2205      	movs	r2, #5
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	200b      	movs	r0, #11
 8000a00:	f7ff fe94 	bl	800072c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000a04:	21ee      	movs	r1, #238	; 0xee
 8000a06:	200c      	movs	r0, #12
 8000a08:	f7ff fe6e 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	2013      	movs	r0, #19
 8000a10:	f7ff fe6a 	bl	80006e8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff feaf 	bl	8000778 <nrf24_ReadReg>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	f043 0303 	orr.w	r3, r3, #3
 8000a24:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fe5c 	bl	80006e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000a30:	f7ff fe42 	bl	80006b8 <CE_Enable>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000a44:	2007      	movs	r0, #7
 8000a46:	f7ff fe97 	bl	8000778 <nrf24_ReadReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00b      	beq.n	8000a70 <isDataAvailable+0x34>
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	2007      	movs	r0, #7
 8000a68:	f7ff fe3e 	bl	80006e8 <nrf24_WriteReg>

		return 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e000      	b.n	8000a72 <isDataAvailable+0x36>
	}

	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000a88:	f7ff fdfe 	bl	8000688 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000a8c:	2361      	movs	r3, #97	; 0x61
 8000a8e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000a90:	f107 010f 	add.w	r1, r7, #15
 8000a94:	2364      	movs	r3, #100	; 0x64
 8000a96:	2201      	movs	r2, #1
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <NRF24_Receive+0x50>)
 8000a9a:	f007 fb21 	bl	80080e0 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	4809      	ldr	r0, [pc, #36]	; (8000acc <NRF24_Receive+0x50>)
 8000aa8:	f007 fd0c 	bl	80084c4 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000aac:	f7ff fdf8 	bl	80006a0 <CS_UnSelect>

	HAL_Delay(1);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f001 fe3d 	bl	8002730 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000ab6:	23e2      	movs	r3, #226	; 0xe2
 8000ab8:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe9b 	bl	80007f8 <nrfsendCmd>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	24000394 	.word	0x24000394

08000ad0 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	e00c      	b.n	8000af8 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	b2d9      	uxtb	r1, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	18d4      	adds	r4, r2, r3
 8000ae8:	4608      	mov	r0, r1
 8000aea:	f7ff fe45 	bl	8000778 <nrf24_ReadReg>
 8000aee:	4603      	mov	r3, r0
 8000af0:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b09      	cmp	r3, #9
 8000afc:	ddef      	ble.n	8000ade <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	330a      	adds	r3, #10
 8000b02:	2205      	movs	r2, #5
 8000b04:	4619      	mov	r1, r3
 8000b06:	200a      	movs	r0, #10
 8000b08:	f7ff fe56 	bl	80007b8 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	330f      	adds	r3, #15
 8000b10:	2205      	movs	r2, #5
 8000b12:	4619      	mov	r1, r3
 8000b14:	200b      	movs	r0, #11
 8000b16:	f7ff fe4f 	bl	80007b8 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f103 0414 	add.w	r4, r3, #20
 8000b20:	200c      	movs	r0, #12
 8000b22:	f7ff fe29 	bl	8000778 <nrf24_ReadReg>
 8000b26:	4603      	mov	r3, r0
 8000b28:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f103 0415 	add.w	r4, r3, #21
 8000b30:	200d      	movs	r0, #13
 8000b32:	f7ff fe21 	bl	8000778 <nrf24_ReadReg>
 8000b36:	4603      	mov	r3, r0
 8000b38:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f103 0416 	add.w	r4, r3, #22
 8000b40:	200e      	movs	r0, #14
 8000b42:	f7ff fe19 	bl	8000778 <nrf24_ReadReg>
 8000b46:	4603      	mov	r3, r0
 8000b48:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f103 0417 	add.w	r4, r3, #23
 8000b50:	200f      	movs	r0, #15
 8000b52:	f7ff fe11 	bl	8000778 <nrf24_ReadReg>
 8000b56:	4603      	mov	r3, r0
 8000b58:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3318      	adds	r3, #24
 8000b5e:	2205      	movs	r2, #5
 8000b60:	4619      	mov	r1, r3
 8000b62:	200a      	movs	r0, #10
 8000b64:	f7ff fe28 	bl	80007b8 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000b68:	231d      	movs	r3, #29
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	e00e      	b.n	8000b8c <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	3b0c      	subs	r3, #12
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	18d4      	adds	r4, r2, r3
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	f7ff fdfb 	bl	8000778 <nrf24_ReadReg>
 8000b82:	4603      	mov	r3, r0
 8000b84:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	2b25      	cmp	r3, #37	; 0x25
 8000b90:	dded      	ble.n	8000b6e <NRF24_ReadAll+0x9e>
	}

}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd90      	pop	{r4, r7, pc}

08000b9c <_write>:
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}
int _write(int file, unsigned char * p, int len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
HAL_UART_Transmit(&huart3, p, len, 10);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	230a      	movs	r3, #10
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <_write+0x24>)
 8000bb2:	f009 fd43 	bl	800a63c <HAL_UART_Transmit>
return len;
 8000bb6:	687b      	ldr	r3, [r7, #4]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	240000dc 	.word	0x240000dc

08000bc4 <HAL_FDCAN_RxFifo0Callback>:
uint8_t RxData_From_Node3[16];
uint8_t RxData_From_Node1[16];
uint8_t RxData_From_Node4[8];

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d10f      	bne.n	8000bf8 <HAL_FDCAN_RxFifo0Callback+0x34>
   {
	  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00a      	beq.n	8000bf8 <HAL_FDCAN_RxFifo0Callback+0x34>
	  {

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node3) != HAL_OK)
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f003 f8b3 	bl	8003d54 <HAL_FDCAN_GetRxMessage>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_FDCAN_RxFifo0Callback+0x34>
		{
		Error_Handler();
 8000bf4:	f001 f8e8 	bl	8001dc8 <Error_Handler>
		}

	  }
   }

 }//choumpa jodo
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	4000a000 	.word	0x4000a000
 8000c04:	24000384 	.word	0x24000384
 8000c08:	240004ac 	.word	0x240004ac

08000c0c <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_FDCAN_RxFifo1Callback+0x3c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d10f      	bne.n	8000c40 <HAL_FDCAN_RxFifo1Callback+0x34>
   {
	  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00a      	beq.n	8000c40 <HAL_FDCAN_RxFifo1Callback+0x34>
	  {
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData_From_Node1) != HAL_OK)
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_FDCAN_RxFifo1Callback+0x40>)
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_FDCAN_RxFifo1Callback+0x44>)
 8000c2e:	2141      	movs	r1, #65	; 0x41
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f003 f88f 	bl	8003d54 <HAL_FDCAN_GetRxMessage>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_FDCAN_RxFifo1Callback+0x34>
		{
		Error_Handler();
 8000c3c:	f001 f8c4 	bl	8001dc8 <Error_Handler>
		}

	  }
   }
 }//rider
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	4000a000 	.word	0x4000a000
 8000c4c:	2400019c 	.word	0x2400019c
 8000c50:	240004ac 	.word	0x240004ac

08000c54 <HAL_FDCAN_RxBufferNewMessageCallback>:
void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

    if (FDCAN1 == hfdcan->Instance)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_FDCAN_RxBufferNewMessageCallback+0x30>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d10a      	bne.n	8000c7c <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
    {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_BUFFER0, &RxHeader, RxData_From_Node4) != HAL_OK)
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_FDCAN_RxBufferNewMessageCallback+0x34>)
 8000c68:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_FDCAN_RxBufferNewMessageCallback+0x38>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f003 f871 	bl	8003d54 <HAL_FDCAN_GetRxMessage>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
        {
            Error_Handler();
 8000c78:	f001 f8a6 	bl	8001dc8 <Error_Handler>
        }
    }

}//raspi
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	4000a000 	.word	0x4000a000
 8000c88:	240000c4 	.word	0x240000c4
 8000c8c:	240004ac 	.word	0x240004ac

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b098      	sub	sp, #96	; 0x60
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c96:	f001 fcb9 	bl	800260c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9a:	f000 fb35 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f000 ff81 	bl	8001ba4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ca2:	f000 fd2d 	bl	8001700 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ca6:	f000 ff31 	bl	8001b0c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000caa:	f000 fd7f 	bl	80017ac <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000cae:	f000 fc19 	bl	80014e4 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000cb2:	f000 fe3f 	bl	8001934 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000cb6:	f000 fb9d 	bl	80013f4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000cba:	f000 feb1 	bl	8001a20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//////////////nrf///////////
  NRF24_Init();
 8000cbe:	f7ff fe57 	bl	8000970 <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);//nrf rx
 8000cc2:	210a      	movs	r1, #10
 8000cc4:	488c      	ldr	r0, [pc, #560]	; (8000ef8 <main+0x268>)
 8000cc6:	f7ff fe7a 	bl	80009be <NRF24_RxMode>
  NRF24_ReadAll(data);//nrf rx
 8000cca:	488c      	ldr	r0, [pc, #560]	; (8000efc <main+0x26c>)
 8000ccc:	f7ff ff00 	bl	8000ad0 <NRF24_ReadAll>
////////////////////////////

////////////motor///////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//motor back1
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	488b      	ldr	r0, [pc, #556]	; (8000f00 <main+0x270>)
 8000cd4:	f008 fa76 	bl	80091c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//motor back2
 8000cd8:	2104      	movs	r1, #4
 8000cda:	4889      	ldr	r0, [pc, #548]	; (8000f00 <main+0x270>)
 8000cdc:	f008 fa72 	bl	80091c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//motor front
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	4887      	ldr	r0, [pc, #540]	; (8000f00 <main+0x270>)
 8000ce4:	f008 fa6e 	bl	80091c4 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,1);//motor enable1
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cee:	4885      	ldr	r0, [pc, #532]	; (8000f04 <main+0x274>)
 8000cf0:	f004 f842 	bl	8004d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//motor enable2
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfa:	4883      	ldr	r0, [pc, #524]	; (8000f08 <main+0x278>)
 8000cfc:	f004 f83c 	bl	8004d78 <HAL_GPIO_WritePin>
////////////////////////////

///////////jodo///////////
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//led jodo
 8000d00:	2100      	movs	r1, #0
 8000d02:	4882      	ldr	r0, [pc, #520]	; (8000f0c <main+0x27c>)
 8000d04:	f008 fa5e 	bl	80091c4 <HAL_TIM_PWM_Start>
//////////jodo////////////



//////////////buzzer/////////
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4881      	ldr	r0, [pc, #516]	; (8000f10 <main+0x280>)
 8000d0c:	f008 fa5a 	bl	80091c4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for(int i=0;i<11;i++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d14:	e00f      	b.n	8000d36 <main+0xa6>
	  {a[i]=RxData_From_Node3[i]-'0';}
 8000d16:	4a7f      	ldr	r2, [pc, #508]	; (8000f14 <main+0x284>)
 8000d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f843 2c58 	str.w	r2, [r3, #-88]
	  for(int i=0;i<11;i++)
 8000d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d32:	3301      	adds	r3, #1
 8000d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d38:	2b0a      	cmp	r3, #10
 8000d3a:	ddec      	ble.n	8000d16 <main+0x86>

	  for(int j=0;j<3;j++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d40:	e00f      	b.n	8000d62 <main+0xd2>
	  {b[j]=RxData_From_Node1[j]-'0';}
 8000d42:	4a75      	ldr	r2, [pc, #468]	; (8000f18 <main+0x288>)
 8000d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d46:	4413      	add	r3, r2
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000d56:	440b      	add	r3, r1
 8000d58:	f843 2c60 	str.w	r2, [r3, #-96]
	  for(int j=0;j<3;j++)
 8000d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d5e:	3301      	adds	r3, #1
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	ddec      	ble.n	8000d42 <main+0xb2>

	  int Distance1 = 100* a[1]  +10*a[2] +a[3];
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2264      	movs	r2, #100	; 0x64
 8000d6c:	fb02 f103 	mul.w	r1, r2, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	18ca      	adds	r2, r1, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	4413      	add	r3, r2
 8000d80:	653b      	str	r3, [r7, #80]	; 0x50
	  int Distance2 = 100* a[4]  +10*a[5] +a[6];
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2264      	movs	r2, #100	; 0x64
 8000d86:	fb02 f103 	mul.w	r1, r2, r3
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	18ca      	adds	r2, r1, r3
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	4413      	add	r3, r2
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int Distance3 = 100* a[8]  +10*a[9] +a[10];
 8000d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9e:	2264      	movs	r2, #100	; 0x64
 8000da0:	fb02 f103 	mul.w	r1, r2, r3
 8000da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	18ca      	adds	r2, r1, r3
 8000db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db2:	4413      	add	r3, r2
 8000db4:	64bb      	str	r3, [r7, #72]	; 0x48
	  int Distance4 = 100* b[0]  +10*b[1] +b[2];//rider
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2264      	movs	r2, #100	; 0x64
 8000dba:	fb02 f103 	mul.w	r1, r2, r3
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	18ca      	adds	r2, r1, r3
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	4413      	add	r3, r2
 8000dce:	647b      	str	r3, [r7, #68]	; 0x44


	  printf("    %d %d %d   ",b[0],b[1],b[2]);
 8000dd0:	6839      	ldr	r1, [r7, #0]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4851      	ldr	r0, [pc, #324]	; (8000f1c <main+0x28c>)
 8000dd8:	f00a fe1c 	bl	800ba14 <iprintf>

///////////////////////////////

///////////////nrf//////////////
	  if (isDataAvailable(2) == 1)
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff fe2d 	bl	8000a3c <isDataAvailable>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d102      	bne.n	8000dee <main+0x15e>
	  	 {
		  NRF24_Receive(RxData);
 8000de8:	484d      	ldr	r0, [pc, #308]	; (8000f20 <main+0x290>)
 8000dea:	f7ff fe47 	bl	8000a7c <NRF24_Receive>
//	  HAL_Delay(100);
//	  }



	  if(Distance1<=15)
 8000dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	dc15      	bgt.n	8000e20 <main+0x190>
	 	  {
	 	  TIM2->ARR = C;
 8000df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df8:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
	 	  TIM2->CCR1 = TIM2->ARR / 2;
 8000dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e08:	085b      	lsrs	r3, r3, #1
 8000e0a:	6353      	str	r3, [r2, #52]	; 0x34
	 	  HAL_Delay(50);
 8000e0c:	2032      	movs	r0, #50	; 0x32
 8000e0e:	f001 fc8f 	bl	8002730 <HAL_Delay>
	 	  TIM2->CCR1 = 0;
 8000e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e16:	2200      	movs	r2, #0
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(50);
 8000e1a:	2032      	movs	r0, #50	; 0x32
 8000e1c:	f001 fc88 	bl	8002730 <HAL_Delay>
	 	  }

	  if(Distance2<=15)
 8000e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	dc15      	bgt.n	8000e52 <main+0x1c2>
	 	  {
	 	  TIM2->ARR = C;
 8000e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2a:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
	 	  TIM2->CCR1 = TIM2->ARR / 2;
 8000e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	6353      	str	r3, [r2, #52]	; 0x34
	 	  HAL_Delay(50);
 8000e3e:	2032      	movs	r0, #50	; 0x32
 8000e40:	f001 fc76 	bl	8002730 <HAL_Delay>
	 	  TIM2->CCR1 = 0;
 8000e44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(50);
 8000e4c:	2032      	movs	r0, #50	; 0x32
 8000e4e:	f001 fc6f 	bl	8002730 <HAL_Delay>
	 	  }

	  if(Distance3<=15)
 8000e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	dc15      	bgt.n	8000e84 <main+0x1f4>
	 	  {
	 	  TIM2->ARR = C;
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
	 	  TIM2->CCR1 = TIM2->ARR / 2;
 8000e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	6353      	str	r3, [r2, #52]	; 0x34
	 	  HAL_Delay(50);
 8000e70:	2032      	movs	r0, #50	; 0x32
 8000e72:	f001 fc5d 	bl	8002730 <HAL_Delay>
	 	  TIM2->CCR1 = 0;
 8000e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(50);
 8000e7e:	2032      	movs	r0, #50	; 0x32
 8000e80:	f001 fc56 	bl	8002730 <HAL_Delay>
	 	  }


 /////////////jodo///////////////

 for(int l=12;l<=14;l++)
 8000e84:	230c      	movs	r3, #12
 8000e86:	657b      	str	r3, [r7, #84]	; 0x54
 8000e88:	e00f      	b.n	8000eaa <main+0x21a>
 {a[l]=RxData_From_Node3[l]-'0';}
 8000e8a:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <main+0x284>)
 8000e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f843 2c58 	str.w	r2, [r3, #-88]
 for(int l=12;l<=14;l++)
 8000ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	657b      	str	r3, [r7, #84]	; 0x54
 8000eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eac:	2b0e      	cmp	r3, #14
 8000eae:	ddec      	ble.n	8000e8a <main+0x1fa>
 int jodo = 100* a[12]  +10*a[13] +a[14];
 8000eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb2:	2264      	movs	r2, #100	; 0x64
 8000eb4:	fb02 f103 	mul.w	r1, r2, r3
 8000eb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	18ca      	adds	r2, r1, r3
 8000ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ec6:	4413      	add	r3, r2
 8000ec8:	643b      	str	r3, [r7, #64]	; 0x40
      htim3.Instance->CCR1=jodo;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <main+0x27c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
      if (jodo<45)
 8000ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed4:	2b2c      	cmp	r3, #44	; 0x2c
 8000ed6:	dc03      	bgt.n	8000ee0 <main+0x250>
      {
    	  htim3.Instance->CCR1=0;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <main+0x27c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34

/////////////////////////////////////////////////////

///////////////////////nrf networking and direction//////////////////

	if(RxData[3]==0)
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <main+0x290>)
 8000ee2:	78db      	ldrb	r3, [r3, #3]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 8128 	bne.w	800113a <main+0x4aa>
	{


			  if (RxData[1]  <=40)
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <main+0x290>)
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	2b28      	cmp	r3, #40	; 0x28
 8000ef0:	f200 8095 	bhi.w	800101e <main+0x38e>
				  {


					  while (RxData[1]  <= 40)
 8000ef4:	e08f      	b.n	8001016 <main+0x386>
 8000ef6:	bf00      	nop
 8000ef8:	24000000 	.word	0x24000000
 8000efc:	24000300 	.word	0x24000300
 8000f00:	24000334 	.word	0x24000334
 8000f04:	58021400 	.word	0x58021400
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	240001ac 	.word	0x240001ac
 8000f10:	2400043c 	.word	0x2400043c
 8000f14:	24000384 	.word	0x24000384
 8000f18:	2400019c 	.word	0x2400019c
 8000f1c:	0800c8e8 	.word	0x0800c8e8
 8000f20:	2400041c 	.word	0x2400041c
					  {

						  if (isDataAvailable(2) == 1)
 8000f24:	2002      	movs	r0, #2
 8000f26:	f7ff fd89 	bl	8000a3c <isDataAvailable>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d102      	bne.n	8000f36 <main+0x2a6>
						  {
							  NRF24_Receive(RxData);
 8000f30:	483e      	ldr	r0, [pc, #248]	; (800102c <main+0x39c>)
 8000f32:	f7ff fda3 	bl	8000a7c <NRF24_Receive>
						  }

						  htim1.Instance->CCR3 = 80;
 8000f36:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <main+0x3a0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2250      	movs	r2, #80	; 0x50
 8000f3c:	63da      	str	r2, [r3, #60]	; 0x3c
						  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f44:	483b      	ldr	r0, [pc, #236]	; (8001034 <main+0x3a4>)
 8000f46:	f003 ff17 	bl	8004d78 <HAL_GPIO_WritePin>
						  HAL_Delay(100);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f001 fbf0 	bl	8002730 <HAL_Delay>
						  if(RxData[2]==0)
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <main+0x39c>)
 8000f52:	789b      	ldrb	r3, [r3, #2]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d120      	bne.n	8000f9a <main+0x30a>
							  {
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5e:	4836      	ldr	r0, [pc, #216]	; (8001038 <main+0x3a8>)
 8000f60:	f003 ff0a 	bl	8004d78 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2108      	movs	r1, #8
 8000f68:	4834      	ldr	r0, [pc, #208]	; (800103c <main+0x3ac>)
 8000f6a:	f003 ff05 	bl	8004d78 <HAL_GPIO_WritePin>
							  htim1.Instance->CCR1=RxData[0];
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <main+0x39c>)
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <main+0x3a0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34
							  htim1.Instance->CCR2=RxData[0];
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <main+0x39c>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <main+0x3a0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
							  if(RxData[0]>=100)
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <main+0x39c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b63      	cmp	r3, #99	; 0x63
 8000f88:	d907      	bls.n	8000f9a <main+0x30a>
								  {
									  htim1.Instance->CCR1=99;
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <main+0x3a0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2263      	movs	r2, #99	; 0x63
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
									  htim1.Instance->CCR2=99;
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <main+0x3a0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2263      	movs	r2, #99	; 0x63
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
								  }
							  }
						  if(RxData[2]==1)
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <main+0x39c>)
 8000f9c:	789b      	ldrb	r3, [r3, #2]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d120      	bne.n	8000fe4 <main+0x354>
							  {
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa8:	4823      	ldr	r0, [pc, #140]	; (8001038 <main+0x3a8>)
 8000faa:	f003 fee5 	bl	8004d78 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4822      	ldr	r0, [pc, #136]	; (800103c <main+0x3ac>)
 8000fb4:	f003 fee0 	bl	8004d78 <HAL_GPIO_WritePin>
							  htim1.Instance->CCR1=RxData[0];
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <main+0x39c>)
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <main+0x3a0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
							  htim1.Instance->CCR2=RxData[0];
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <main+0x39c>)
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <main+0x3a0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	639a      	str	r2, [r3, #56]	; 0x38
							  if(RxData[0]>=100)
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <main+0x39c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b63      	cmp	r3, #99	; 0x63
 8000fd2:	d907      	bls.n	8000fe4 <main+0x354>
								  {
									  htim1.Instance->CCR1=99;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <main+0x3a0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2263      	movs	r2, #99	; 0x63
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34
									  htim1.Instance->CCR2=99;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <main+0x3a0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2263      	movs	r2, #99	; 0x63
 8000fe2:	639a      	str	r2, [r3, #56]	; 0x38
								  }
							  }

						  if(41<=RxData[1]&&RxData[1]<=80)
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <main+0x39c>)
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	2b28      	cmp	r3, #40	; 0x28
 8000fea:	d914      	bls.n	8001016 <main+0x386>
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <main+0x39c>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	2b50      	cmp	r3, #80	; 0x50
 8000ff2:	d810      	bhi.n	8001016 <main+0x386>
						  {
							  htim1.Instance->CCR3 = 90;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <main+0x3a0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	225a      	movs	r2, #90	; 0x5a
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <main+0x3a4>)
 8001004:	f003 feb8 	bl	8004d78 <HAL_GPIO_WritePin>
							  HAL_Delay(200);
 8001008:	20c8      	movs	r0, #200	; 0xc8
 800100a:	f001 fb91 	bl	8002730 <HAL_Delay>
							  htim1.Instance->CCR3 = 0;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <main+0x3a0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	63da      	str	r2, [r3, #60]	; 0x3c
					  while (RxData[1]  <= 40)
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <main+0x39c>)
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	2b28      	cmp	r3, #40	; 0x28
 800101c:	d982      	bls.n	8000f24 <main+0x294>
					  }


				  }

			  if (RxData[1] > 85)
 800101e:	4b03      	ldr	r3, [pc, #12]	; (800102c <main+0x39c>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	2b55      	cmp	r3, #85	; 0x55
 8001024:	f240 8089 	bls.w	800113a <main+0x4aa>
					  {

						  while (RxData[1] > 85)
 8001028:	e083      	b.n	8001132 <main+0x4a2>
 800102a:	bf00      	nop
 800102c:	2400041c 	.word	0x2400041c
 8001030:	24000334 	.word	0x24000334
 8001034:	58021800 	.word	0x58021800
 8001038:	58021000 	.word	0x58021000
 800103c:	58020000 	.word	0x58020000
						  {

							  if (isDataAvailable(2) == 1)
 8001040:	2002      	movs	r0, #2
 8001042:	f7ff fcfb 	bl	8000a3c <isDataAvailable>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d102      	bne.n	8001052 <main+0x3c2>
							  {
								  NRF24_Receive(RxData);
 800104c:	488b      	ldr	r0, [pc, #556]	; (800127c <main+0x5ec>)
 800104e:	f7ff fd15 	bl	8000a7c <NRF24_Receive>
							  }
							  htim1.Instance->CCR3 = 80;
 8001052:	4b8b      	ldr	r3, [pc, #556]	; (8001280 <main+0x5f0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2250      	movs	r2, #80	; 0x50
 8001058:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001060:	4888      	ldr	r0, [pc, #544]	; (8001284 <main+0x5f4>)
 8001062:	f003 fe89 	bl	8004d78 <HAL_GPIO_WritePin>
							  HAL_Delay(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f001 fb62 	bl	8002730 <HAL_Delay>
							  if(RxData[2]==0)
 800106c:	4b83      	ldr	r3, [pc, #524]	; (800127c <main+0x5ec>)
 800106e:	789b      	ldrb	r3, [r3, #2]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d120      	bne.n	80010b6 <main+0x426>
								  {
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107a:	4883      	ldr	r0, [pc, #524]	; (8001288 <main+0x5f8>)
 800107c:	f003 fe7c 	bl	8004d78 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 8001080:	2200      	movs	r2, #0
 8001082:	2108      	movs	r1, #8
 8001084:	4881      	ldr	r0, [pc, #516]	; (800128c <main+0x5fc>)
 8001086:	f003 fe77 	bl	8004d78 <HAL_GPIO_WritePin>
								  htim1.Instance->CCR1=RxData[0];
 800108a:	4b7c      	ldr	r3, [pc, #496]	; (800127c <main+0x5ec>)
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	4b7c      	ldr	r3, [pc, #496]	; (8001280 <main+0x5f0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
								  htim1.Instance->CCR2=RxData[0];
 8001094:	4b79      	ldr	r3, [pc, #484]	; (800127c <main+0x5ec>)
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b79      	ldr	r3, [pc, #484]	; (8001280 <main+0x5f0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
								  if(RxData[0]>=100)
 800109e:	4b77      	ldr	r3, [pc, #476]	; (800127c <main+0x5ec>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b63      	cmp	r3, #99	; 0x63
 80010a4:	d907      	bls.n	80010b6 <main+0x426>
									  {
										  htim1.Instance->CCR1=99;
 80010a6:	4b76      	ldr	r3, [pc, #472]	; (8001280 <main+0x5f0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2263      	movs	r2, #99	; 0x63
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
										  htim1.Instance->CCR2=99;
 80010ae:	4b74      	ldr	r3, [pc, #464]	; (8001280 <main+0x5f0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2263      	movs	r2, #99	; 0x63
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
									  }
								  }
							  if(RxData[2]==1)
 80010b6:	4b71      	ldr	r3, [pc, #452]	; (800127c <main+0x5ec>)
 80010b8:	789b      	ldrb	r3, [r3, #2]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d120      	bne.n	8001100 <main+0x470>
								  {
								  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c4:	4870      	ldr	r0, [pc, #448]	; (8001288 <main+0x5f8>)
 80010c6:	f003 fe57 	bl	8004d78 <HAL_GPIO_WritePin>
								  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2108      	movs	r1, #8
 80010ce:	486f      	ldr	r0, [pc, #444]	; (800128c <main+0x5fc>)
 80010d0:	f003 fe52 	bl	8004d78 <HAL_GPIO_WritePin>
								  htim1.Instance->CCR1=RxData[0];
 80010d4:	4b69      	ldr	r3, [pc, #420]	; (800127c <main+0x5ec>)
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	4b69      	ldr	r3, [pc, #420]	; (8001280 <main+0x5f0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
								  htim1.Instance->CCR2=RxData[0];
 80010de:	4b67      	ldr	r3, [pc, #412]	; (800127c <main+0x5ec>)
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <main+0x5f0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	639a      	str	r2, [r3, #56]	; 0x38
								  if(RxData[0]>=100)
 80010e8:	4b64      	ldr	r3, [pc, #400]	; (800127c <main+0x5ec>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b63      	cmp	r3, #99	; 0x63
 80010ee:	d907      	bls.n	8001100 <main+0x470>
									  {
										  htim1.Instance->CCR1=99;
 80010f0:	4b63      	ldr	r3, [pc, #396]	; (8001280 <main+0x5f0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2263      	movs	r2, #99	; 0x63
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
										  htim1.Instance->CCR2=99;
 80010f8:	4b61      	ldr	r3, [pc, #388]	; (8001280 <main+0x5f0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2263      	movs	r2, #99	; 0x63
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
									  }
								  }

							  if(41<=RxData[1]&&RxData[1]<=85)
 8001100:	4b5e      	ldr	r3, [pc, #376]	; (800127c <main+0x5ec>)
 8001102:	785b      	ldrb	r3, [r3, #1]
 8001104:	2b28      	cmp	r3, #40	; 0x28
 8001106:	d914      	bls.n	8001132 <main+0x4a2>
 8001108:	4b5c      	ldr	r3, [pc, #368]	; (800127c <main+0x5ec>)
 800110a:	785b      	ldrb	r3, [r3, #1]
 800110c:	2b55      	cmp	r3, #85	; 0x55
 800110e:	d810      	bhi.n	8001132 <main+0x4a2>
							  {
								  htim1.Instance->CCR3 = 90;
 8001110:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <main+0x5f0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	225a      	movs	r2, #90	; 0x5a
 8001116:	63da      	str	r2, [r3, #60]	; 0x3c
								  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111e:	4859      	ldr	r0, [pc, #356]	; (8001284 <main+0x5f4>)
 8001120:	f003 fe2a 	bl	8004d78 <HAL_GPIO_WritePin>
								  HAL_Delay(200);
 8001124:	20c8      	movs	r0, #200	; 0xc8
 8001126:	f001 fb03 	bl	8002730 <HAL_Delay>
								  htim1.Instance->CCR3 = 0;
 800112a:	4b55      	ldr	r3, [pc, #340]	; (8001280 <main+0x5f0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c
						  while (RxData[1] > 85)
 8001132:	4b52      	ldr	r3, [pc, #328]	; (800127c <main+0x5ec>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	2b55      	cmp	r3, #85	; 0x55
 8001138:	d882      	bhi.n	8001040 <main+0x3b0>
	  }
////////////////////////////////////////////////////////////

///////////////go and back /////////////////

						if(RxData[2]==0)
 800113a:	4b50      	ldr	r3, [pc, #320]	; (800127c <main+0x5ec>)
 800113c:	789b      	ldrb	r3, [r3, #2]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d12b      	bne.n	800119a <main+0x50a>
							  {
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001148:	484f      	ldr	r0, [pc, #316]	; (8001288 <main+0x5f8>)
 800114a:	f003 fe15 	bl	8004d78 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 800114e:	2200      	movs	r2, #0
 8001150:	2108      	movs	r1, #8
 8001152:	484e      	ldr	r0, [pc, #312]	; (800128c <main+0x5fc>)
 8001154:	f003 fe10 	bl	8004d78 <HAL_GPIO_WritePin>
							  htim1.Instance->CCR1=RxData[0];
 8001158:	4b48      	ldr	r3, [pc, #288]	; (800127c <main+0x5ec>)
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	4b48      	ldr	r3, [pc, #288]	; (8001280 <main+0x5f0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
							  htim1.Instance->CCR2=RxData[0];
 8001162:	4b46      	ldr	r3, [pc, #280]	; (800127c <main+0x5ec>)
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <main+0x5f0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	639a      	str	r2, [r3, #56]	; 0x38
							  if(RxData[0]>=100)
 800116c:	4b43      	ldr	r3, [pc, #268]	; (800127c <main+0x5ec>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b63      	cmp	r3, #99	; 0x63
 8001172:	d907      	bls.n	8001184 <main+0x4f4>
								  {
									  htim1.Instance->CCR1=99;
 8001174:	4b42      	ldr	r3, [pc, #264]	; (8001280 <main+0x5f0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2263      	movs	r2, #99	; 0x63
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
									  htim1.Instance->CCR2=99;
 800117c:	4b40      	ldr	r3, [pc, #256]	; (8001280 <main+0x5f0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2263      	movs	r2, #99	; 0x63
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
								  }
							  //////////////ridar///////////////
							  	  if(Distance4<=20)
 8001184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001186:	2b14      	cmp	r3, #20
 8001188:	dc07      	bgt.n	800119a <main+0x50a>
							  	  {
							  		  htim1.Instance->CCR1=0;
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <main+0x5f0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
							  		  htim1.Instance->CCR2=0;
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <main+0x5f0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2200      	movs	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
							  	  }

							  }
						  if(RxData[2]==1)
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <main+0x5ec>)
 800119c:	789b      	ldrb	r3, [r3, #2]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d12b      	bne.n	80011fa <main+0x56a>
							  {
							  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a8:	4837      	ldr	r0, [pc, #220]	; (8001288 <main+0x5f8>)
 80011aa:	f003 fde5 	bl	8004d78 <HAL_GPIO_WritePin>
							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2108      	movs	r1, #8
 80011b2:	4836      	ldr	r0, [pc, #216]	; (800128c <main+0x5fc>)
 80011b4:	f003 fde0 	bl	8004d78 <HAL_GPIO_WritePin>
							  htim1.Instance->CCR1=RxData[0];
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <main+0x5ec>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <main+0x5f0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
							  htim1.Instance->CCR2=RxData[0];
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <main+0x5ec>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <main+0x5f0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
							  if(RxData[0]>=100)
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <main+0x5ec>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b63      	cmp	r3, #99	; 0x63
 80011d2:	d907      	bls.n	80011e4 <main+0x554>
								  {
									  htim1.Instance->CCR1=99;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <main+0x5f0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2263      	movs	r2, #99	; 0x63
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
									  htim1.Instance->CCR2=99;
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <main+0x5f0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2263      	movs	r2, #99	; 0x63
 80011e2:	639a      	str	r2, [r3, #56]	; 0x38
								  }
							  //////////////ridar///////////////
							  	  if(Distance4<=20)
 80011e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e6:	2b14      	cmp	r3, #20
 80011e8:	dc07      	bgt.n	80011fa <main+0x56a>
							  	  {
							  		  htim1.Instance->CCR1=0;
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <main+0x5f0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
							  		  htim1.Instance->CCR2=0;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <main+0x5f0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38


////////////////////////////////////////////////////

/////////////////can fd raspi and direction ////////////////////
		  	  if(RxData[3]==1)
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <main+0x5ec>)
 80011fc:	78db      	ldrb	r3, [r3, #3]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	f47f ad86 	bne.w	8000d10 <main+0x80>
		  	  {


		  		  if (RxData_From_Node4[0]=='L')
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <main+0x600>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b4c      	cmp	r3, #76	; 0x4c
 800120a:	d130      	bne.n	800126e <main+0x5de>
		  				  {
		  					  while (RxData_From_Node4[0]=='L')
 800120c:	e029      	b.n	8001262 <main+0x5d2>
		  					  {

		  						  // left motor
		  						  htim1.Instance->CCR3 = 90;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <main+0x5f0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	225a      	movs	r2, #90	; 0x5a
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c
		  						  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121c:	4819      	ldr	r0, [pc, #100]	; (8001284 <main+0x5f4>)
 800121e:	f003 fdab 	bl	8004d78 <HAL_GPIO_WritePin>
		  						  HAL_Delay(100);
 8001222:	2064      	movs	r0, #100	; 0x64
 8001224:	f001 fa84 	bl	8002730 <HAL_Delay>

		  						  // straight
		  						  if(RxData_From_Node4[0]=='G')
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <main+0x600>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b47      	cmp	r3, #71	; 0x47
 800122e:	d110      	bne.n	8001252 <main+0x5c2>
		  						  {
		  							  htim1.Instance->CCR3 = 90;
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <main+0x5f0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	225a      	movs	r2, #90	; 0x5a
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
		  							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123e:	4811      	ldr	r0, [pc, #68]	; (8001284 <main+0x5f4>)
 8001240:	f003 fd9a 	bl	8004d78 <HAL_GPIO_WritePin>
		  							  HAL_Delay(200);
 8001244:	20c8      	movs	r0, #200	; 0xc8
 8001246:	f001 fa73 	bl	8002730 <HAL_Delay>
		  							  htim1.Instance->CCR3 = 0;
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <main+0x5f0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c
		  						  }
		  						  if (40<=RxData[1]&&RxData[1]<=80)
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <main+0x5ec>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	2b27      	cmp	r3, #39	; 0x27
 8001258:	d903      	bls.n	8001262 <main+0x5d2>
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <main+0x5ec>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	2b50      	cmp	r3, #80	; 0x50
 8001260:	d904      	bls.n	800126c <main+0x5dc>
		  					  while (RxData_From_Node4[0]=='L')
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <main+0x600>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b4c      	cmp	r3, #76	; 0x4c
 8001268:	d0d1      	beq.n	800120e <main+0x57e>
 800126a:	e000      	b.n	800126e <main+0x5de>
		  						  {
		  							  break;
 800126c:	bf00      	nop

		  					  }

		  				  }

		  			  if (RxData_From_Node4[0]=='R')
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <main+0x600>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b52      	cmp	r3, #82	; 0x52
 8001274:	f47f ad4c 	bne.w	8000d10 <main+0x80>
		  					  {



		  						  while (RxData_From_Node4[0]=='R')
 8001278:	e036      	b.n	80012e8 <main+0x658>
 800127a:	bf00      	nop
 800127c:	2400041c 	.word	0x2400041c
 8001280:	24000334 	.word	0x24000334
 8001284:	58021800 	.word	0x58021800
 8001288:	58021000 	.word	0x58021000
 800128c:	58020000 	.word	0x58020000
 8001290:	240000c4 	.word	0x240000c4
		  						  {

		  							  // right motor
		  							  htim1.Instance->CCR3 = 90;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <main+0x668>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	225a      	movs	r2, #90	; 0x5a
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
		  							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a2:	4816      	ldr	r0, [pc, #88]	; (80012fc <main+0x66c>)
 80012a4:	f003 fd68 	bl	8004d78 <HAL_GPIO_WritePin>
		  							  HAL_Delay(100);
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f001 fa41 	bl	8002730 <HAL_Delay>

		  							  if(RxData_From_Node4[0]=='G')
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <main+0x670>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b47      	cmp	r3, #71	; 0x47
 80012b4:	d110      	bne.n	80012d8 <main+0x648>
		  							  {
		  								  htim1.Instance->CCR3 = 90;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <main+0x668>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	225a      	movs	r2, #90	; 0x5a
 80012bc:	63da      	str	r2, [r3, #60]	; 0x3c
		  								  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <main+0x66c>)
 80012c6:	f003 fd57 	bl	8004d78 <HAL_GPIO_WritePin>
		  								  HAL_Delay(200);
 80012ca:	20c8      	movs	r0, #200	; 0xc8
 80012cc:	f001 fa30 	bl	8002730 <HAL_Delay>
		  								  htim1.Instance->CCR3 = 0;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <main+0x668>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2200      	movs	r2, #0
 80012d6:	63da      	str	r2, [r3, #60]	; 0x3c
		  							  }
		  							  if (40<=RxData[1]&&RxData[1]<=80)
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <main+0x674>)
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	2b27      	cmp	r3, #39	; 0x27
 80012de:	d903      	bls.n	80012e8 <main+0x658>
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <main+0x674>)
 80012e2:	785b      	ldrb	r3, [r3, #1]
 80012e4:	2b50      	cmp	r3, #80	; 0x50
 80012e6:	d904      	bls.n	80012f2 <main+0x662>
		  						  while (RxData_From_Node4[0]=='R')
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <main+0x670>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b52      	cmp	r3, #82	; 0x52
 80012ee:	d0d1      	beq.n	8001294 <main+0x604>
 80012f0:	e50e      	b.n	8000d10 <main+0x80>
		  							  {
		  								  break;
 80012f2:	bf00      	nop
  {
 80012f4:	e50c      	b.n	8000d10 <main+0x80>
 80012f6:	bf00      	nop
 80012f8:	24000334 	.word	0x24000334
 80012fc:	58021800 	.word	0x58021800
 8001300:	240000c4 	.word	0x240000c4
 8001304:	2400041c 	.word	0x2400041c

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b09c      	sub	sp, #112	; 0x70
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	224c      	movs	r2, #76	; 0x4c
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f00a fb74 	bl	800ba04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2220      	movs	r2, #32
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f00a fb6e 	bl	800ba04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001328:	2004      	movs	r0, #4
 800132a:	f003 fd3f 	bl	8004dac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <SystemClock_Config+0xe4>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <SystemClock_Config+0xe4>)
 8001338:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <SystemClock_Config+0xe4>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800134a:	bf00      	nop
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <SystemClock_Config+0xe4>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001358:	d1f8      	bne.n	800134c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <SystemClock_Config+0xe8>)
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <SystemClock_Config+0xe8>)
 8001360:	f023 0303 	bic.w	r3, r3, #3
 8001364:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001366:	2302      	movs	r3, #2
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800136a:	2301      	movs	r3, #1
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136e:	2340      	movs	r3, #64	; 0x40
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001376:	2300      	movs	r3, #0
 8001378:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800137a:	2304      	movs	r3, #4
 800137c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 800137e:	2308      	movs	r3, #8
 8001380:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001382:	2302      	movs	r3, #2
 8001384:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8001386:	2320      	movs	r3, #32
 8001388:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800138a:	2302      	movs	r3, #2
 800138c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800138e:	230c      	movs	r3, #12
 8001390:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001392:	2300      	movs	r3, #0
 8001394:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 fd5e 	bl	8004e60 <HAL_RCC_OscConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013aa:	f000 fd0d 	bl	8001dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ae:	233f      	movs	r3, #63	; 0x3f
 80013b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013be:	2340      	movs	r3, #64	; 0x40
 80013c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013c2:	2340      	movs	r3, #64	; 0x40
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2102      	movs	r1, #2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 f947 	bl	8005668 <HAL_RCC_ClockConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80013e0:	f000 fcf2 	bl	8001dc8 <Error_Handler>
  }
}
 80013e4:	bf00      	nop
 80013e6:	3770      	adds	r7, #112	; 0x70
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58024800 	.word	0x58024800
 80013f0:	58024400 	.word	0x58024400

080013f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MX_ADC1_Init+0xe4>)
 800141a:	4a30      	ldr	r2, [pc, #192]	; (80014dc <MX_ADC1_Init+0xe8>)
 800141c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_ADC1_Init+0xe4>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001432:	2204      	movs	r2, #4
 8001434:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001438:	2200      	movs	r2, #0
 800143a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MX_ADC1_Init+0xe4>)
 800143e:	2200      	movs	r2, #0
 8001440:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001444:	2201      	movs	r2, #1
 8001446:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <MX_ADC1_Init+0xe4>)
 800144a:	2200      	movs	r2, #0
 800144c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001456:	2200      	movs	r2, #0
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_ADC1_Init+0xe4>)
 800145c:	2200      	movs	r2, #0
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001468:	2200      	movs	r2, #0
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_ADC1_Init+0xe4>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001474:	4818      	ldr	r0, [pc, #96]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001476:	f001 fb0b 	bl	8002a90 <HAL_ADC_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001480:	f000 fca2 	bl	8001dc8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4812      	ldr	r0, [pc, #72]	; (80014d8 <MX_ADC1_Init+0xe4>)
 8001490:	f002 f830 	bl	80034f4 <HAL_ADCEx_MultiModeConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800149a:	f000 fc95 	bl	8001dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MX_ADC1_Init+0xec>)
 80014a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a2:	2306      	movs	r3, #6
 80014a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014b0:	2304      	movs	r3, #4
 80014b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_ADC1_Init+0xe4>)
 80014c2:	f001 fc3f 	bl	8002d44 <HAL_ADC_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80014cc:	f000 fc7c 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	240001f8 	.word	0x240001f8
 80014dc:	40022000 	.word	0x40022000
 80014e0:	08600004 	.word	0x08600004

080014e4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80014e8:	4b7f      	ldr	r3, [pc, #508]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 80014ea:	4a80      	ldr	r2, [pc, #512]	; (80016ec <MX_FDCAN1_Init+0x208>)
 80014ec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80014ee:	4b7e      	ldr	r3, [pc, #504]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 80014f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014f6:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80014fc:	4b7a      	ldr	r3, [pc, #488]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 80014fe:	2201      	movs	r2, #1
 8001500:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001502:	4b79      	ldr	r3, [pc, #484]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001504:	2200      	movs	r2, #0
 8001506:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001508:	4b77      	ldr	r3, [pc, #476]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800150a:	2200      	movs	r2, #0
 800150c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800150e:	4b76      	ldr	r3, [pc, #472]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001510:	2201      	movs	r2, #1
 8001512:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001514:	4b74      	ldr	r3, [pc, #464]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001516:	2201      	movs	r2, #1
 8001518:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 800151a:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800151c:	2205      	movs	r2, #5
 800151e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001520:	4b71      	ldr	r3, [pc, #452]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001522:	2202      	movs	r2, #2
 8001524:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001526:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001528:	2201      	movs	r2, #1
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800152c:	4b6e      	ldr	r3, [pc, #440]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800152e:	2204      	movs	r2, #4
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8001532:	4b6d      	ldr	r3, [pc, #436]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001534:	2205      	movs	r2, #5
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001538:	4b6b      	ldr	r3, [pc, #428]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800153a:	2204      	movs	r2, #4
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800153e:	4b6a      	ldr	r3, [pc, #424]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001540:	2200      	movs	r2, #0
 8001542:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 3;
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001546:	2203      	movs	r2, #3
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800154a:	4b67      	ldr	r3, [pc, #412]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800154c:	2200      	movs	r2, #0
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001550:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001552:	2201      	movs	r2, #1
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 8001556:	4b64      	ldr	r3, [pc, #400]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001558:	2206      	movs	r2, #6
 800155a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 800155c:	4b62      	ldr	r3, [pc, #392]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800155e:	2201      	movs	r2, #1
 8001560:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_16;
 8001562:	4b61      	ldr	r3, [pc, #388]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001564:	2206      	movs	r2, #6
 8001566:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001568:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800156a:	2201      	movs	r2, #1
 800156c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_16;
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001570:	2206      	movs	r2, #6
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001574:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001576:	2200      	movs	r2, #0
 8001578:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800157c:	2200      	movs	r2, #0
 800157e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001582:	2200      	movs	r2, #0
 8001584:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001586:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001588:	2200      	movs	r2, #0
 800158a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 800158c:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800158e:	2206      	movs	r2, #6
 8001590:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001592:	4855      	ldr	r0, [pc, #340]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001594:	f002 f95a 	bl	800384c <HAL_FDCAN_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800159e:	f000 fc13 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  	  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80015a2:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <MX_FDCAN1_Init+0x20c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
        sFilterConfig.FilterIndex = 1;
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <MX_FDCAN1_Init+0x20c>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	605a      	str	r2, [r3, #4]
        sFilterConfig.RxBufferIndex = 1;
 80015ae:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <MX_FDCAN1_Init+0x20c>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	619a      	str	r2, [r3, #24]
        sFilterConfig.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 80015b4:	4b4e      	ldr	r3, [pc, #312]	; (80016f0 <MX_FDCAN1_Init+0x20c>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	609a      	str	r2, [r3, #8]
        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <MX_FDCAN1_Init+0x20c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	60da      	str	r2, [r3, #12]
        sFilterConfig.FilterID1 = 0x33; // ID Node2
 80015c0:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <MX_FDCAN1_Init+0x20c>)
 80015c2:	2233      	movs	r2, #51	; 0x33
 80015c4:	611a      	str	r2, [r3, #16]
        sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <MX_FDCAN1_Init+0x20c>)
 80015c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015cc:	615a      	str	r2, [r3, #20]
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80015ce:	4948      	ldr	r1, [pc, #288]	; (80016f0 <MX_FDCAN1_Init+0x20c>)
 80015d0:	4845      	ldr	r0, [pc, #276]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 80015d2:	f002 fb1d 	bl	8003c10 <HAL_FDCAN_ConfigFilter>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_FDCAN1_Init+0xfc>
               {
                  Error_Handler();
 80015dc:	f000 fbf4 	bl	8001dc8 <Error_Handler>
               }
//
  	  	sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 80015e0:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <MX_FDCAN1_Init+0x210>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
        sFilterConfig1.FilterIndex = 2;
 80015e6:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <MX_FDCAN1_Init+0x210>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	605a      	str	r2, [r3, #4]
        sFilterConfig1.RxBufferIndex = 2;
 80015ec:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <MX_FDCAN1_Init+0x210>)
 80015ee:	2202      	movs	r2, #2
 80015f0:	619a      	str	r2, [r3, #24]
        sFilterConfig1.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 80015f2:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <MX_FDCAN1_Init+0x210>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	609a      	str	r2, [r3, #8]
        sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80015f8:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <MX_FDCAN1_Init+0x210>)
 80015fa:	2202      	movs	r2, #2
 80015fc:	60da      	str	r2, [r3, #12]
        sFilterConfig1.FilterID1 = 0x11; // ID Node2
 80015fe:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <MX_FDCAN1_Init+0x210>)
 8001600:	2211      	movs	r2, #17
 8001602:	611a      	str	r2, [r3, #16]
        sFilterConfig1.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8001604:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <MX_FDCAN1_Init+0x210>)
 8001606:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800160a:	615a      	str	r2, [r3, #20]
//
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig1) != HAL_OK)
 800160c:	4939      	ldr	r1, [pc, #228]	; (80016f4 <MX_FDCAN1_Init+0x210>)
 800160e:	4836      	ldr	r0, [pc, #216]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001610:	f002 fafe 	bl	8003c10 <HAL_FDCAN_ConfigFilter>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_FDCAN1_Init+0x13a>
        {
           Error_Handler();
 800161a:	f000 fbd5 	bl	8001dc8 <Error_Handler>
        }
  	  	sFilterConfig2.IdType = FDCAN_STANDARD_ID;
 800161e:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <MX_FDCAN1_Init+0x214>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
        sFilterConfig2.FilterIndex = 0;
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <MX_FDCAN1_Init+0x214>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
        sFilterConfig2.RxBufferIndex = 0;
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <MX_FDCAN1_Init+0x214>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
        sFilterConfig2.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8001630:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <MX_FDCAN1_Init+0x214>)
 8001632:	2201      	movs	r2, #1
 8001634:	609a      	str	r2, [r3, #8]
        sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <MX_FDCAN1_Init+0x214>)
 8001638:	2207      	movs	r2, #7
 800163a:	60da      	str	r2, [r3, #12]
        sFilterConfig2.FilterID1 = 0x44; // ID Node2
 800163c:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <MX_FDCAN1_Init+0x214>)
 800163e:	2244      	movs	r2, #68	; 0x44
 8001640:	611a      	str	r2, [r3, #16]
        sFilterConfig2.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <MX_FDCAN1_Init+0x214>)
 8001644:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001648:	615a      	str	r2, [r3, #20]

        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig2) != HAL_OK)
 800164a:	492b      	ldr	r1, [pc, #172]	; (80016f8 <MX_FDCAN1_Init+0x214>)
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800164e:	f002 fadf 	bl	8003c10 <HAL_FDCAN_ConfigFilter>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_FDCAN1_Init+0x178>
               {
                  Error_Handler();
 8001658:	f000 fbb6 	bl	8001dc8 <Error_Handler>
               }

        if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800165c:	4822      	ldr	r0, [pc, #136]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800165e:	f002 fb4d 	bl	8003cfc <HAL_FDCAN_Start>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_FDCAN1_Init+0x188>
              {
                Error_Handler();
 8001668:	f000 fbae 	bl	8001dc8 <Error_Handler>





        if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_BUFFER_NEW_MESSAGE, 0) != HAL_OK)
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001672:	481d      	ldr	r0, [pc, #116]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001674:	f002 fcdc 	bl	8004030 <HAL_FDCAN_ActivateNotification>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_FDCAN1_Init+0x19e>
          {
            /* Notification Error */
            Error_Handler();
 800167e:	f000 fba3 	bl	8001dc8 <Error_Handler>
          }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001682:	2200      	movs	r2, #0
 8001684:	2101      	movs	r1, #1
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 8001688:	f002 fcd2 	bl	8004030 <HAL_FDCAN_ActivateNotification>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_FDCAN1_Init+0x1b2>
              {
                Error_Handler();
 8001692:	f000 fb99 	bl	8001dc8 <Error_Handler>
              }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8001696:	2200      	movs	r2, #0
 8001698:	2110      	movs	r1, #16
 800169a:	4813      	ldr	r0, [pc, #76]	; (80016e8 <MX_FDCAN1_Init+0x204>)
 800169c:	f002 fcc8 	bl	8004030 <HAL_FDCAN_ActivateNotification>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_FDCAN1_Init+0x1c6>
              {
                Error_Handler();
 80016a6:	f000 fb8f 	bl	8001dc8 <Error_Handler>
              }

            TxHeader.Identifier = 0x22;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_FDCAN1_Init+0x218>)
 80016ac:	2222      	movs	r2, #34	; 0x22
 80016ae:	601a      	str	r2, [r3, #0]
            TxHeader.IdType = FDCAN_STANDARD_ID;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_FDCAN1_Init+0x218>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
            TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_FDCAN1_Init+0x218>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
            TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_FDCAN1_Init+0x218>)
 80016be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016c2:	60da      	str	r2, [r3, #12]
            TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <MX_FDCAN1_Init+0x218>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
            TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_FDCAN1_Init+0x218>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
            TxHeader.FDFormat = FDCAN_FD_CAN;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <MX_FDCAN1_Init+0x218>)
 80016d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016d6:	619a      	str	r2, [r3, #24]
            TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_FDCAN1_Init+0x218>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
            TxHeader.MessageMarker = 0x0;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <MX_FDCAN1_Init+0x218>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]



  /* USER CODE END FDCAN1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	24000260 	.word	0x24000260
 80016ec:	4000a000 	.word	0x4000a000
 80016f0:	240000a4 	.word	0x240000a4
 80016f4:	2400017c 	.word	0x2400017c
 80016f8:	240004d4 	.word	0x240004d4
 80016fc:	24000488 	.word	0x24000488

08001700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001706:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <MX_SPI1_Init+0xa8>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800170c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800171a:	2207      	movs	r2, #7
 800171c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800172c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001734:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001738:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001768:	2200      	movs	r2, #0
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800176e:	2200      	movs	r2, #0
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001774:	2200      	movs	r2, #0
 8001776:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001786:	2200      	movs	r2, #0
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_SPI1_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_SPI1_Init+0xa4>)
 8001792:	f006 fb9f 	bl	8007ed4 <HAL_SPI_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800179c:	f000 fb14 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	24000394 	.word	0x24000394
 80017a8:	40013000 	.word	0x40013000

080017ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b09c      	sub	sp, #112	; 0x70
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2234      	movs	r2, #52	; 0x34
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00a f90c 	bl	800ba04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017ec:	4b4f      	ldr	r3, [pc, #316]	; (800192c <MX_TIM1_Init+0x180>)
 80017ee:	4a50      	ldr	r2, [pc, #320]	; (8001930 <MX_TIM1_Init+0x184>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65;
 80017f2:	4b4e      	ldr	r3, [pc, #312]	; (800192c <MX_TIM1_Init+0x180>)
 80017f4:	2241      	movs	r2, #65	; 0x41
 80017f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b4c      	ldr	r3, [pc, #304]	; (800192c <MX_TIM1_Init+0x180>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80017fe:	4b4b      	ldr	r3, [pc, #300]	; (800192c <MX_TIM1_Init+0x180>)
 8001800:	2264      	movs	r2, #100	; 0x64
 8001802:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001804:	4b49      	ldr	r3, [pc, #292]	; (800192c <MX_TIM1_Init+0x180>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800180a:	4b48      	ldr	r3, [pc, #288]	; (800192c <MX_TIM1_Init+0x180>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001810:	4b46      	ldr	r3, [pc, #280]	; (800192c <MX_TIM1_Init+0x180>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001816:	4845      	ldr	r0, [pc, #276]	; (800192c <MX_TIM1_Init+0x180>)
 8001818:	f007 fc1b 	bl	8009052 <HAL_TIM_Base_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001822:	f000 fad1 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800182c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001830:	4619      	mov	r1, r3
 8001832:	483e      	ldr	r0, [pc, #248]	; (800192c <MX_TIM1_Init+0x180>)
 8001834:	f008 f808 	bl	8009848 <HAL_TIM_ConfigClockSource>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800183e:	f000 fac3 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001842:	483a      	ldr	r0, [pc, #232]	; (800192c <MX_TIM1_Init+0x180>)
 8001844:	f007 fc5c 	bl	8009100 <HAL_TIM_PWM_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800184e:	f000 fabb 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800185e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001862:	4619      	mov	r1, r3
 8001864:	4831      	ldr	r0, [pc, #196]	; (800192c <MX_TIM1_Init+0x180>)
 8001866:	f008 fd4d 	bl	800a304 <HAL_TIMEx_MasterConfigSynchronization>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001870:	f000 faaa 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001874:	2360      	movs	r3, #96	; 0x60
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8001878:	2332      	movs	r3, #50	; 0x32
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187c:	2300      	movs	r3, #0
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001880:	2300      	movs	r3, #0
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001890:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001894:	2200      	movs	r2, #0
 8001896:	4619      	mov	r1, r3
 8001898:	4824      	ldr	r0, [pc, #144]	; (800192c <MX_TIM1_Init+0x180>)
 800189a:	f007 fec1 	bl	8009620 <HAL_TIM_PWM_ConfigChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80018a4:	f000 fa90 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ac:	2204      	movs	r2, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	481e      	ldr	r0, [pc, #120]	; (800192c <MX_TIM1_Init+0x180>)
 80018b2:	f007 feb5 	bl	8009620 <HAL_TIM_PWM_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80018bc:	f000 fa84 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018c4:	2208      	movs	r2, #8
 80018c6:	4619      	mov	r1, r3
 80018c8:	4818      	ldr	r0, [pc, #96]	; (800192c <MX_TIM1_Init+0x180>)
 80018ca:	f007 fea9 	bl	8009620 <HAL_TIM_PWM_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80018d4:	f000 fa78 	bl	8001dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <MX_TIM1_Init+0x180>)
 800190e:	f008 fd87 	bl	800a420 <HAL_TIMEx_ConfigBreakDeadTime>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001918:	f000 fa56 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <MX_TIM1_Init+0x180>)
 800191e:	f000 fc11 	bl	8002144 <HAL_TIM_MspPostInit>

}
 8001922:	bf00      	nop
 8001924:	3770      	adds	r7, #112	; 0x70
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	24000334 	.word	0x24000334
 8001930:	40010000 	.word	0x40010000

08001934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	; 0x38
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001954:	463b      	mov	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128-1;
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001970:	227f      	movs	r2, #127	; 0x7f
 8001972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001976:	2210      	movs	r2, #16
 8001978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MX_TIM2_Init+0xe8>)
 800197c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_TIM2_Init+0xe8>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800198e:	4823      	ldr	r0, [pc, #140]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001990:	f007 fb5f 	bl	8009052 <HAL_TIM_Base_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800199a:	f000 fa15 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a8:	4619      	mov	r1, r3
 80019aa:	481c      	ldr	r0, [pc, #112]	; (8001a1c <MX_TIM2_Init+0xe8>)
 80019ac:	f007 ff4c 	bl	8009848 <HAL_TIM_ConfigClockSource>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019b6:	f000 fa07 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_TIM2_Init+0xe8>)
 80019bc:	f007 fba0 	bl	8009100 <HAL_TIM_PWM_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019c6:	f000 f9ff 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4810      	ldr	r0, [pc, #64]	; (8001a1c <MX_TIM2_Init+0xe8>)
 80019da:	f008 fc93 	bl	800a304 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019e4:	f000 f9f0 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e8:	2360      	movs	r3, #96	; 0x60
 80019ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001a00:	f007 fe0e 	bl	8009620 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a0a:	f000 f9dd 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001a10:	f000 fb98 	bl	8002144 <HAL_TIM_MspPostInit>

}
 8001a14:	bf00      	nop
 8001a16:	3738      	adds	r7, #56	; 0x38
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2400043c 	.word	0x2400043c

08001a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a40:	463b      	mov	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]
 8001a4e:	615a      	str	r2, [r3, #20]
 8001a50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001a54:	4a2c      	ldr	r2, [pc, #176]	; (8001b08 <MX_TIM3_Init+0xe8>)
 8001a56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001a5a:	2240      	movs	r2, #64	; 0x40
 8001a5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001a66:	2264      	movs	r2, #100	; 0x64
 8001a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a76:	4823      	ldr	r0, [pc, #140]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001a78:	f007 faeb 	bl	8009052 <HAL_TIM_Base_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a82:	f000 f9a1 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a90:	4619      	mov	r1, r3
 8001a92:	481c      	ldr	r0, [pc, #112]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001a94:	f007 fed8 	bl	8009848 <HAL_TIM_ConfigClockSource>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a9e:	f000 f993 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aa2:	4818      	ldr	r0, [pc, #96]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001aa4:	f007 fb2c 	bl	8009100 <HAL_TIM_PWM_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aae:	f000 f98b 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001ac2:	f008 fc1f 	bl	800a304 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001acc:	f000 f97c 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad0:	2360      	movs	r3, #96	; 0x60
 8001ad2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001ad4:	2332      	movs	r3, #50	; 0x32
 8001ad6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4807      	ldr	r0, [pc, #28]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001ae8:	f007 fd9a 	bl	8009620 <HAL_TIM_PWM_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001af2:	f000 f969 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MX_TIM3_Init+0xe4>)
 8001af8:	f000 fb24 	bl	8002144 <HAL_TIM_MspPostInit>

}
 8001afc:	bf00      	nop
 8001afe:	3738      	adds	r7, #56	; 0x38
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	240001ac 	.word	0x240001ac
 8001b08:	40000400 	.word	0x40000400

08001b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b12:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <MX_USART3_UART_Init+0x94>)
 8001b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b54:	4811      	ldr	r0, [pc, #68]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b56:	f008 fd21 	bl	800a59c <HAL_UART_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b60:	f000 f932 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b64:	2100      	movs	r1, #0
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b68:	f009 fe4a 	bl	800b800 <HAL_UARTEx_SetTxFifoThreshold>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001b72:	f000 f929 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4808      	ldr	r0, [pc, #32]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b7a:	f009 fe7f 	bl	800b87c <HAL_UARTEx_SetRxFifoThreshold>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b84:	f000 f920 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_USART3_UART_Init+0x90>)
 8001b8a:	f009 fe00 	bl	800b78e <HAL_UARTEx_DisableFifoMode>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b94:	f000 f918 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	240000dc 	.word	0x240000dc
 8001ba0:	40004800 	.word	0x40004800

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08e      	sub	sp, #56	; 0x38
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bba:	4b7c      	ldr	r3, [pc, #496]	; (8001dac <MX_GPIO_Init+0x208>)
 8001bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bc0:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <MX_GPIO_Init+0x208>)
 8001bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bca:	4b78      	ldr	r3, [pc, #480]	; (8001dac <MX_GPIO_Init+0x208>)
 8001bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	623b      	str	r3, [r7, #32]
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b74      	ldr	r3, [pc, #464]	; (8001dac <MX_GPIO_Init+0x208>)
 8001bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bde:	4a73      	ldr	r2, [pc, #460]	; (8001dac <MX_GPIO_Init+0x208>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001be8:	4b70      	ldr	r3, [pc, #448]	; (8001dac <MX_GPIO_Init+0x208>)
 8001bea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <MX_GPIO_Init+0x208>)
 8001bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bfc:	4a6b      	ldr	r2, [pc, #428]	; (8001dac <MX_GPIO_Init+0x208>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c06:	4b69      	ldr	r3, [pc, #420]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c14:	4b65      	ldr	r3, [pc, #404]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c1a:	4a64      	ldr	r2, [pc, #400]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c1c:	f043 0320 	orr.w	r3, r3, #32
 8001c20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c24:	4b61      	ldr	r3, [pc, #388]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c32:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c38:	4a5c      	ldr	r2, [pc, #368]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c3a:	f043 0310 	orr.w	r3, r3, #16
 8001c3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c50:	4b56      	ldr	r3, [pc, #344]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c56:	4a55      	ldr	r2, [pc, #340]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c60:	4b52      	ldr	r3, [pc, #328]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c74:	4a4d      	ldr	r2, [pc, #308]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c8c:	4b47      	ldr	r3, [pc, #284]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c92:	4a46      	ldr	r2, [pc, #280]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c9c:	4b43      	ldr	r3, [pc, #268]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001cb0:	483f      	ldr	r0, [pc, #252]	; (8001db0 <MX_GPIO_Init+0x20c>)
 8001cb2:	f003 f861 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2164      	movs	r1, #100	; 0x64
 8001cba:	483e      	ldr	r0, [pc, #248]	; (8001db4 <MX_GPIO_Init+0x210>)
 8001cbc:	f003 f85c 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc6:	483c      	ldr	r0, [pc, #240]	; (8001db8 <MX_GPIO_Init+0x214>)
 8001cc8:	f003 f856 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f24c 0101 	movw	r1, #49153	; 0xc001
 8001cd2:	483a      	ldr	r0, [pc, #232]	; (8001dbc <MX_GPIO_Init+0x218>)
 8001cd4:	f003 f850 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ce_Pin|csn_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001cde:	4838      	ldr	r0, [pc, #224]	; (8001dc0 <MX_GPIO_Init+0x21c>)
 8001ce0:	f003 f84a 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IRQ_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8001cea:	4836      	ldr	r0, [pc, #216]	; (8001dc4 <MX_GPIO_Init+0x220>)
 8001cec:	f003 f844 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 8001cf0:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d06:	4619      	mov	r1, r3
 8001d08:	4829      	ldr	r0, [pc, #164]	; (8001db0 <MX_GPIO_Init+0x20c>)
 8001d0a:	f002 fe85 	bl	8004a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d0e:	2364      	movs	r3, #100	; 0x64
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	4619      	mov	r1, r3
 8001d24:	4823      	ldr	r0, [pc, #140]	; (8001db4 <MX_GPIO_Init+0x210>)
 8001d26:	f002 fe77 	bl	8004a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	4619      	mov	r1, r3
 8001d42:	481d      	ldr	r0, [pc, #116]	; (8001db8 <MX_GPIO_Init+0x214>)
 8001d44:	f002 fe68 	bl	8004a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8001d48:	f24c 0301 	movw	r3, #49153	; 0xc001
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4816      	ldr	r0, [pc, #88]	; (8001dbc <MX_GPIO_Init+0x218>)
 8001d62:	f002 fe59 	bl	8004a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ce_Pin csn_Pin */
  GPIO_InitStruct.Pin = ce_Pin|csn_Pin;
 8001d66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <MX_GPIO_Init+0x21c>)
 8001d80:	f002 fe4a 	bl	8004a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin PG14 */
  GPIO_InitStruct.Pin = IRQ_Pin|GPIO_PIN_14;
 8001d84:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <MX_GPIO_Init+0x220>)
 8001d9e:	f002 fe3b 	bl	8004a18 <HAL_GPIO_Init>

}
 8001da2:	bf00      	nop
 8001da4:	3738      	adds	r7, #56	; 0x38
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	58024400 	.word	0x58024400
 8001db0:	58020000 	.word	0x58020000
 8001db4:	58020400 	.word	0x58020400
 8001db8:	58021400 	.word	0x58021400
 8001dbc:	58021000 	.word	0x58021000
 8001dc0:	58020c00 	.word	0x58020c00
 8001dc4:	58021800 	.word	0x58021800

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <Error_Handler+0x8>
	...

08001dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_MspInit+0x30>)
 8001ddc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001de0:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_MspInit+0x30>)
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_MspInit+0x30>)
 8001dec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	58024400 	.word	0x58024400

08001e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0b8      	sub	sp, #224	; 0xe0
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	22b8      	movs	r2, #184	; 0xb8
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f009 fdeb 	bl	800ba04 <memset>
  if(hadc->Instance==ADC1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <HAL_ADC_MspInit+0xd4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d14d      	bne.n	8001ed4 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8001e42:	2381      	movs	r3, #129	; 0x81
 8001e44:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001e46:	2302      	movs	r3, #2
 8001e48:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001e52:	2340      	movs	r3, #64	; 0x40
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 ff89 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001e74:	f7ff ffa8 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_ADC_MspInit+0xd8>)
 8001e7a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001e7e:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <HAL_ADC_MspInit+0xd8>)
 8001e80:	f043 0320 	orr.w	r3, r3, #32
 8001e84:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_ADC_MspInit+0xd8>)
 8001e8a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_ADC_MspInit+0xd8>)
 8001e98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e9c:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_ADC_MspInit+0xd8>)
 8001e9e:	f043 0320 	orr.w	r3, r3, #32
 8001ea2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_ADC_MspInit+0xd8>)
 8001ea8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ec8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <HAL_ADC_MspInit+0xdc>)
 8001ed0:	f002 fda2 	bl	8004a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ed4:	bf00      	nop
 8001ed6:	37e0      	adds	r7, #224	; 0xe0
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58021400 	.word	0x58021400

08001ee8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0b8      	sub	sp, #224	; 0xe0
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	22b8      	movs	r2, #184	; 0xb8
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f009 fd7b 	bl	800ba04 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2d      	ldr	r2, [pc, #180]	; (8001fc8 <HAL_FDCAN_MspInit+0xe0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d153      	bne.n	8001fc0 <HAL_FDCAN_MspInit+0xd8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 ff28 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001f36:	f7ff ff47 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_FDCAN_MspInit+0xe4>)
 8001f3c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001f40:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <HAL_FDCAN_MspInit+0xe4>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_FDCAN_MspInit+0xe4>)
 8001f4c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_FDCAN_MspInit+0xe4>)
 8001f5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f5e:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_FDCAN_MspInit+0xe4>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_FDCAN_MspInit+0xe4>)
 8001f6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f76:	2303      	movs	r3, #3
 8001f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f8e:	2309      	movs	r3, #9
 8001f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <HAL_FDCAN_MspInit+0xe8>)
 8001f9c:	f002 fd3c 	bl	8004a18 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2013      	movs	r0, #19
 8001fa6:	f001 fc1c 	bl	80037e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001faa:	2013      	movs	r0, #19
 8001fac:	f001 fc33 	bl	8003816 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2015      	movs	r0, #21
 8001fb6:	f001 fc14 	bl	80037e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001fba:	2015      	movs	r0, #21
 8001fbc:	f001 fc2b 	bl	8003816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	37e0      	adds	r7, #224	; 0xe0
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	4000a000 	.word	0x4000a000
 8001fcc:	58024400 	.word	0x58024400
 8001fd0:	58020c00 	.word	0x58020c00

08001fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0b8      	sub	sp, #224	; 0xe0
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	22b8      	movs	r2, #184	; 0xb8
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f009 fd05 	bl	800ba04 <memset>
  if(hspi->Instance==SPI1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a24      	ldr	r2, [pc, #144]	; (8002090 <HAL_SPI_MspInit+0xbc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d141      	bne.n	8002088 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800200a:	2300      	movs	r3, #0
 800200c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4618      	mov	r0, r3
 8002014:	f003 feb4 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800201e:	f7ff fed3 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_SPI_MspInit+0xc0>)
 8002024:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002028:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <HAL_SPI_MspInit+0xc0>)
 800202a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800202e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_SPI_MspInit+0xc0>)
 8002034:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_SPI_MspInit+0xc0>)
 8002042:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002046:	4a13      	ldr	r2, [pc, #76]	; (8002094 <HAL_SPI_MspInit+0xc0>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_SPI_MspInit+0xc0>)
 8002052:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800205e:	23e0      	movs	r3, #224	; 0xe0
 8002060:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002076:	2305      	movs	r3, #5
 8002078:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002080:	4619      	mov	r1, r3
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <HAL_SPI_MspInit+0xc4>)
 8002084:	f002 fcc8 	bl	8004a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	37e0      	adds	r7, #224	; 0xe0
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40013000 	.word	0x40013000
 8002094:	58024400 	.word	0x58024400
 8002098:	58020000 	.word	0x58020000

0800209c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a23      	ldr	r2, [pc, #140]	; (8002138 <HAL_TIM_Base_MspInit+0x9c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10f      	bne.n	80020ce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ae:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_TIM_Base_MspInit+0xa0>)
 80020b0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80020b4:	4a21      	ldr	r2, [pc, #132]	; (800213c <HAL_TIM_Base_MspInit+0xa0>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_TIM_Base_MspInit+0xa0>)
 80020c0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020cc:	e030      	b.n	8002130 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d6:	d117      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_TIM_Base_MspInit+0xa0>)
 80020da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_TIM_Base_MspInit+0xa0>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_TIM_Base_MspInit+0xa0>)
 80020ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	201c      	movs	r0, #28
 80020fc:	f001 fb71 	bl	80037e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002100:	201c      	movs	r0, #28
 8002102:	f001 fb88 	bl	8003816 <HAL_NVIC_EnableIRQ>
}
 8002106:	e013      	b.n	8002130 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_TIM_Base_MspInit+0xa4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_TIM_Base_MspInit+0xa0>)
 8002114:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002118:	4a08      	ldr	r2, [pc, #32]	; (800213c <HAL_TIM_Base_MspInit+0xa0>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_TIM_Base_MspInit+0xa0>)
 8002124:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	bf00      	nop
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40010000 	.word	0x40010000
 800213c:	58024400 	.word	0x58024400
 8002140:	40000400 	.word	0x40000400

08002144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a38      	ldr	r2, [pc, #224]	; (8002244 <HAL_TIM_MspPostInit+0x100>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d120      	bne.n	80021a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <HAL_TIM_MspPostInit+0x104>)
 8002168:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800216c:	4a36      	ldr	r2, [pc, #216]	; (8002248 <HAL_TIM_MspPostInit+0x104>)
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002176:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_TIM_MspPostInit+0x104>)
 8002178:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8002184:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002196:	2301      	movs	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	482a      	ldr	r0, [pc, #168]	; (800224c <HAL_TIM_MspPostInit+0x108>)
 80021a2:	f002 fc39 	bl	8004a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021a6:	e048      	b.n	800223a <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d11f      	bne.n	80021f2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_TIM_MspPostInit+0x104>)
 80021b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021b8:	4a23      	ldr	r2, [pc, #140]	; (8002248 <HAL_TIM_MspPostInit+0x104>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <HAL_TIM_MspPostInit+0x104>)
 80021c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021d0:	2301      	movs	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e0:	2301      	movs	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	4819      	ldr	r0, [pc, #100]	; (8002250 <HAL_TIM_MspPostInit+0x10c>)
 80021ec:	f002 fc14 	bl	8004a18 <HAL_GPIO_Init>
}
 80021f0:	e023      	b.n	800223a <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_TIM_MspPostInit+0x110>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d11e      	bne.n	800223a <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_TIM_MspPostInit+0x104>)
 80021fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002202:	4a11      	ldr	r2, [pc, #68]	; (8002248 <HAL_TIM_MspPostInit+0x104>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_TIM_MspPostInit+0x104>)
 800220e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800221a:	2340      	movs	r3, #64	; 0x40
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800222a:	2302      	movs	r3, #2
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4808      	ldr	r0, [pc, #32]	; (8002258 <HAL_TIM_MspPostInit+0x114>)
 8002236:	f002 fbef 	bl	8004a18 <HAL_GPIO_Init>
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	58024400 	.word	0x58024400
 800224c:	58021000 	.word	0x58021000
 8002250:	58020000 	.word	0x58020000
 8002254:	40000400 	.word	0x40000400
 8002258:	58020800 	.word	0x58020800

0800225c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0b8      	sub	sp, #224	; 0xe0
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	22b8      	movs	r2, #184	; 0xb8
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f009 fbc1 	bl	800ba04 <memset>
  if(huart->Instance==USART3)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <HAL_UART_MspInit+0xc0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d142      	bne.n	8002312 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800228c:	2302      	movs	r3, #2
 800228e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fd70 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022a6:	f7ff fd8f 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_UART_MspInit+0xc4>)
 80022ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_UART_MspInit+0xc4>)
 80022b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_UART_MspInit+0xc4>)
 80022bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80022c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_UART_MspInit+0xc4>)
 80022ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022ce:	4a14      	ldr	r2, [pc, #80]	; (8002320 <HAL_UART_MspInit+0xc4>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_UART_MspInit+0xc4>)
 80022da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002300:	2307      	movs	r3, #7
 8002302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002306:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <HAL_UART_MspInit+0xc8>)
 800230e:	f002 fb83 	bl	8004a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	37e0      	adds	r7, #224	; 0xe0
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004800 	.word	0x40004800
 8002320:	58024400 	.word	0x58024400
 8002324:	58020c00 	.word	0x58020c00

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002374:	f000 f9bc 	bl	80026f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <FDCAN1_IT0_IRQHandler+0x10>)
 8002382:	f001 fecf 	bl	8004124 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	24000260 	.word	0x24000260

08002390 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <FDCAN1_IT1_IRQHandler+0x10>)
 8002396:	f001 fec5 	bl	8004124 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	24000260 	.word	0x24000260

080023a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <TIM2_IRQHandler+0x10>)
 80023aa:	f007 f819 	bl	80093e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2400043c 	.word	0x2400043c

080023b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e00a      	b.n	80023e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ca:	f3af 8000 	nop.w
 80023ce:	4601      	mov	r1, r0
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	60ba      	str	r2, [r7, #8]
 80023d6:	b2ca      	uxtb	r2, r1
 80023d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbf0      	blt.n	80023ca <_read+0x12>
	}

return len;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
	return -1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800241a:	605a      	str	r2, [r3, #4]
	return 0;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <_isatty>:

int _isatty(int file)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
	return 1;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
	return 0;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <_sbrk+0x5c>)
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <_sbrk+0x60>)
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <_sbrk+0x64>)
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <_sbrk+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	429a      	cmp	r2, r3
 800248a:	d207      	bcs.n	800249c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800248c:	f009 fa82 	bl	800b994 <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	220c      	movs	r2, #12
 8002494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e009      	b.n	80024b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_sbrk+0x64>)
 80024ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	24100000 	.word	0x24100000
 80024bc:	00000400 	.word	0x00000400
 80024c0:	24000098 	.word	0x24000098
 80024c4:	24000508 	.word	0x24000508

080024c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <SystemInit+0xd0>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	4a31      	ldr	r2, [pc, #196]	; (8002598 <SystemInit+0xd0>)
 80024d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <SystemInit+0xd4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d807      	bhi.n	80024f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <SystemInit+0xd4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 030f 	bic.w	r3, r3, #15
 80024f0:	4a2a      	ldr	r2, [pc, #168]	; (800259c <SystemInit+0xd4>)
 80024f2:	f043 0303 	orr.w	r3, r3, #3
 80024f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <SystemInit+0xd8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <SystemInit+0xd8>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <SystemInit+0xd8>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800250a:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <SystemInit+0xd8>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4924      	ldr	r1, [pc, #144]	; (80025a0 <SystemInit+0xd8>)
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <SystemInit+0xdc>)
 8002512:	4013      	ands	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <SystemInit+0xd4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <SystemInit+0xd4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 030f 	bic.w	r3, r3, #15
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <SystemInit+0xd4>)
 800252c:	f043 0303 	orr.w	r3, r3, #3
 8002530:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <SystemInit+0xd8>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <SystemInit+0xd8>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <SystemInit+0xd8>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <SystemInit+0xd8>)
 8002546:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <SystemInit+0xe0>)
 8002548:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <SystemInit+0xd8>)
 800254c:	4a17      	ldr	r2, [pc, #92]	; (80025ac <SystemInit+0xe4>)
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <SystemInit+0xd8>)
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <SystemInit+0xe8>)
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <SystemInit+0xd8>)
 8002558:	2200      	movs	r2, #0
 800255a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <SystemInit+0xd8>)
 800255e:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <SystemInit+0xe8>)
 8002560:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <SystemInit+0xd8>)
 8002564:	2200      	movs	r2, #0
 8002566:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002568:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <SystemInit+0xd8>)
 800256a:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <SystemInit+0xe8>)
 800256c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <SystemInit+0xd8>)
 8002570:	2200      	movs	r2, #0
 8002572:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <SystemInit+0xd8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <SystemInit+0xd8>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <SystemInit+0xd8>)
 8002582:	2200      	movs	r2, #0
 8002584:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <SystemInit+0xec>)
 8002588:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800258c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00
 800259c:	52002000 	.word	0x52002000
 80025a0:	58024400 	.word	0x58024400
 80025a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80025a8:	02020200 	.word	0x02020200
 80025ac:	01ff0000 	.word	0x01ff0000
 80025b0:	01010280 	.word	0x01010280
 80025b4:	52004000 	.word	0x52004000

080025b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025bc:	f7ff ff84 	bl	80024c8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025c2:	490d      	ldr	r1, [pc, #52]	; (80025f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c8:	e002      	b.n	80025d0 <LoopCopyDataInit>

080025ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ce:	3304      	adds	r3, #4

080025d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80025d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d4:	d3f9      	bcc.n	80025ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025d8:	4c0a      	ldr	r4, [pc, #40]	; (8002604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025dc:	e001      	b.n	80025e2 <LoopFillZerobss>

080025de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e0:	3204      	adds	r2, #4

080025e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e4:	d3fb      	bcc.n	80025de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80025e6:	f009 f9db 	bl	800b9a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ea:	f7fe fb51 	bl	8000c90 <main>
  bx  lr
 80025ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025f0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80025f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025f8:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80025fc:	0800ca34 	.word	0x0800ca34
  ldr r2, =_sbss
 8002600:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002604:	24000508 	.word	0x24000508

08002608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002608:	e7fe      	b.n	8002608 <ADC_IRQHandler>
	...

0800260c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002612:	2003      	movs	r0, #3
 8002614:	f001 f8da 	bl	80037cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002618:	f003 f9dc 	bl	80059d4 <HAL_RCC_GetSysClockFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_Init+0x68>)
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	4913      	ldr	r1, [pc, #76]	; (8002678 <HAL_Init+0x6c>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_Init+0x68>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <HAL_Init+0x6c>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	4a0b      	ldr	r2, [pc, #44]	; (800267c <HAL_Init+0x70>)
 800264e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002650:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <HAL_Init+0x74>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002656:	200f      	movs	r0, #15
 8002658:	f000 f814 	bl	8002684 <HAL_InitTick>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e002      	b.n	800266c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002666:	f7ff fbb5 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	58024400 	.word	0x58024400
 8002678:	0800c944 	.word	0x0800c944
 800267c:	2400000c 	.word	0x2400000c
 8002680:	24000008 	.word	0x24000008

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_InitTick+0x60>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e021      	b.n	80026dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_InitTick+0x64>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_InitTick+0x60>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 f8bf 	bl	8003832 <HAL_SYSTICK_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00e      	b.n	80026dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	d80a      	bhi.n	80026da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f001 f889 	bl	80037e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d0:	4a06      	ldr	r2, [pc, #24]	; (80026ec <HAL_InitTick+0x68>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	24000014 	.word	0x24000014
 80026e8:	24000008 	.word	0x24000008
 80026ec:	24000010 	.word	0x24000010

080026f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x20>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x24>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_IncTick+0x24>)
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	24000014 	.word	0x24000014
 8002714:	240004f4 	.word	0x240004f4

08002718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return uwTick;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_GetTick+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	240004f4 	.word	0x240004f4

08002730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff ffee 	bl	8002718 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d005      	beq.n	8002756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_Delay+0x44>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002756:	bf00      	nop
 8002758:	f7ff ffde 	bl	8002718 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	429a      	cmp	r2, r3
 8002766:	d8f7      	bhi.n	8002758 <HAL_Delay+0x28>
  {
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	24000014 	.word	0x24000014

08002778 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	609a      	str	r2, [r3, #8]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3360      	adds	r3, #96	; 0x60
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	431a      	orrs	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	431a      	orrs	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	611a      	str	r2, [r3, #16]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002852:	b480      	push	{r7}
 8002854:	b087      	sub	sp, #28
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3360      	adds	r3, #96	; 0x60
 8002862:	461a      	mov	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	431a      	orrs	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	601a      	str	r2, [r3, #0]
  }
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3330      	adds	r3, #48	; 0x30
 8002898:	461a      	mov	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	211f      	movs	r1, #31
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	401a      	ands	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	f003 011f 	and.w	r1, r3, #31
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	431a      	orrs	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028d4:	bf00      	nop
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3314      	adds	r3, #20
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0e5b      	lsrs	r3, r3, #25
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	4413      	add	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0d1b      	lsrs	r3, r3, #20
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2107      	movs	r1, #7
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	401a      	ands	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0d1b      	lsrs	r3, r3, #20
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	431a      	orrs	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002950:	43db      	mvns	r3, r3
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0318 	and.w	r3, r3, #24
 800295a:	4908      	ldr	r1, [pc, #32]	; (800297c <LL_ADC_SetChannelSingleDiff+0x44>)
 800295c:	40d9      	lsrs	r1, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	400b      	ands	r3, r1
 8002962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002966:	431a      	orrs	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	000fffff 	.word	0x000fffff

08002980 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800298e:	4013      	ands	r3, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6093      	str	r3, [r2, #8]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	5fffffc0 	.word	0x5fffffc0

080029a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b8:	d101      	bne.n	80029be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80029da:	4013      	ands	r3, r2
 80029dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	6fffffc0 	.word	0x6fffffc0

080029f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a08:	d101      	bne.n	8002a0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <LL_ADC_IsEnabled+0x18>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <LL_ADC_IsEnabled+0x1a>
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d101      	bne.n	8002a5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d101      	bne.n	8002a80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e138      	b.n	8002d1c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff f9a5 	bl	8001e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff67 	bl	80029a4 <LL_ADC_IsDeepPowerDownEnabled>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff4d 	bl	8002980 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ff82 	bl	80029f4 <LL_ADC_IsInternalRegulatorEnabled>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d114      	bne.n	8002b20 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff66 	bl	80029cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b00:	4b88      	ldr	r3, [pc, #544]	; (8002d24 <HAL_ADC_Init+0x294>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	4a88      	ldr	r2, [pc, #544]	; (8002d28 <HAL_ADC_Init+0x298>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b12:	e002      	b.n	8002b1a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f9      	bne.n	8002b14 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff65 	bl	80029f4 <LL_ADC_IsInternalRegulatorEnabled>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f043 0210 	orr.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff76 	bl	8002a42 <LL_ADC_REG_IsConversionOngoing>
 8002b56:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f040 80d2 	bne.w	8002d0a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f040 80ce 	bne.w	8002d0a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b76:	f043 0202 	orr.w	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff4a 	bl	8002a1c <LL_ADC_IsEnabled>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d110      	bne.n	8002bb0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b8e:	4867      	ldr	r0, [pc, #412]	; (8002d2c <HAL_ADC_Init+0x29c>)
 8002b90:	f7ff ff44 	bl	8002a1c <LL_ADC_IsEnabled>
 8002b94:	4604      	mov	r4, r0
 8002b96:	4866      	ldr	r0, [pc, #408]	; (8002d30 <HAL_ADC_Init+0x2a0>)
 8002b98:	f7ff ff40 	bl	8002a1c <LL_ADC_IsEnabled>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4323      	orrs	r3, r4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4862      	ldr	r0, [pc, #392]	; (8002d34 <HAL_ADC_Init+0x2a4>)
 8002bac:	f7ff fde4 	bl	8002778 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7d5b      	ldrb	r3, [r3, #21]
 8002bb4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bba:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002bc0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7f1b      	ldrb	r3, [r3, #28]
 8002bc6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7f1b      	ldrb	r3, [r3, #28]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d106      	bne.n	8002be2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	045b      	lsls	r3, r3, #17
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <HAL_ADC_Init+0x2a8>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	69b9      	ldr	r1, [r7, #24]
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff13 	bl	8002a42 <LL_ADC_REG_IsConversionOngoing>
 8002c1c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff20 	bl	8002a68 <LL_ADC_INJ_IsConversionOngoing>
 8002c28:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d14a      	bne.n	8002cc6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d147      	bne.n	8002cc6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7d1b      	ldrb	r3, [r3, #20]
 8002c3a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <HAL_ADC_Init+0x2ac>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d11b      	bne.n	8002c9a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <HAL_ADC_Init+0x2b0>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c76:	3a01      	subs	r2, #1
 8002c78:	0411      	lsls	r1, r2, #16
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c84:	4311      	orrs	r1, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	611a      	str	r2, [r3, #16]
 8002c98:	e007      	b.n	8002caa <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fb25 	bl	8003310 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	f023 010f 	bic.w	r1, r3, #15
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	1e5a      	subs	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce6:	e007      	b.n	8002cf8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 020f 	bic.w	r2, r2, #15
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f023 0303 	bic.w	r3, r3, #3
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
 8002d08:	e007      	b.n	8002d1a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0210 	orr.w	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3724      	adds	r7, #36	; 0x24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}
 8002d24:	24000008 	.word	0x24000008
 8002d28:	053e2d63 	.word	0x053e2d63
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40022100 	.word	0x40022100
 8002d34:	40022300 	.word	0x40022300
 8002d38:	fff0c003 	.word	0xfff0c003
 8002d3c:	ffffbffc 	.word	0xffffbffc
 8002d40:	fc00f81e 	.word	0xfc00f81e

08002d44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b0a1      	sub	sp, #132	; 0x84
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a9a      	ldr	r2, [pc, #616]	; (8002fc8 <HAL_ADC_ConfigChannel+0x284>)
 8002d5e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x2a>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e2bc      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x5a4>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fe61 	bl	8002a42 <LL_ADC_REG_IsConversionOngoing>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 82a1 	bne.w	80032ca <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d108      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x62>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2201      	movs	r2, #1
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	e016      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x90>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2201      	movs	r2, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	69d1      	ldr	r1, [r2, #28]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	430b      	orrs	r3, r1
 8002de0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f7ff fd4a 	bl	8002888 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fe22 	bl	8002a42 <LL_ADC_REG_IsConversionOngoing>
 8002dfe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fe2f 	bl	8002a68 <LL_ADC_INJ_IsConversionOngoing>
 8002e0a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 80a0 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 809c 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f7ff fd59 	bl	80028e0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x110>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	e00a      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x126>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d027      	beq.n	8002ec4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6919      	ldr	r1, [r3, #16]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e82:	f7ff fcad 	bl	80027e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6919      	ldr	r1, [r3, #16]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	7e5b      	ldrb	r3, [r3, #25]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x158>
 8002e96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e9a:	e000      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x15a>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f7ff fcd7 	bl	8002852 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6919      	ldr	r1, [r3, #16]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	7e1b      	ldrb	r3, [r3, #24]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x176>
 8002eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eb8:	e000      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x178>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f7ff fcaf 	bl	8002820 <LL_ADC_SetDataRightShift>
 8002ec2:	e047      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	069b      	lsls	r3, r3, #26
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d107      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	069b      	lsls	r3, r3, #26
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d107      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f0a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	069b      	lsls	r3, r3, #26
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d107      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f2e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	069b      	lsls	r3, r3, #26
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d107      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f52:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fd5f 	bl	8002a1c <LL_ADC_IsEnabled>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f040 81bb 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f7ff fce0 	bl	8002938 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <HAL_ADC_ConfigChannel+0x284>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	f040 8130 	bne.w	80031e4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x268>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0e9b      	lsrs	r3, r3, #26
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2b09      	cmp	r3, #9
 8002fa2:	bf94      	ite	ls
 8002fa4:	2301      	movls	r3, #1
 8002fa6:	2300      	movhi	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e01b      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x2a0>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e005      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x290>
 8002fc8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	2b09      	cmp	r3, #9
 8002fdc:	bf94      	ite	ls
 8002fde:	2301      	movls	r3, #1
 8002fe0:	2300      	movhi	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d079      	beq.n	80030dc <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x2c0>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0e9b      	lsrs	r3, r3, #26
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	069b      	lsls	r3, r3, #26
 8002ffe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003002:	e015      	b.n	8003030 <HAL_ADC_ConfigChannel+0x2ec>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003014:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800301c:	2320      	movs	r3, #32
 800301e:	e003      	b.n	8003028 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3301      	adds	r3, #1
 800302a:	069b      	lsls	r3, r3, #26
 800302c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x30c>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	3301      	adds	r3, #1
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	e017      	b.n	8003080 <HAL_ADC_ConfigChannel+0x33c>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e003      	b.n	8003074 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	3301      	adds	r3, #1
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	ea42 0103 	orr.w	r1, r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x362>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	3301      	adds	r3, #1
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	051b      	lsls	r3, r3, #20
 80030a4:	e018      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x394>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80030be:	2320      	movs	r3, #32
 80030c0:	e003      	b.n	80030ca <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d8:	430b      	orrs	r3, r1
 80030da:	e07e      	b.n	80031da <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x3b4>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	3301      	adds	r3, #1
 80030f0:	069b      	lsls	r3, r3, #26
 80030f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030f6:	e015      	b.n	8003124 <HAL_ADC_ConfigChannel+0x3e0>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003110:	2320      	movs	r3, #32
 8003112:	e003      	b.n	800311c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	3301      	adds	r3, #1
 800311e:	069b      	lsls	r3, r3, #26
 8003120:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x400>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	3301      	adds	r3, #1
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2101      	movs	r1, #1
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	e017      	b.n	8003174 <HAL_ADC_ConfigChannel+0x430>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	61bb      	str	r3, [r7, #24]
  return result;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800315c:	2320      	movs	r3, #32
 800315e:	e003      	b.n	8003168 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3301      	adds	r3, #1
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	ea42 0103 	orr.w	r1, r2, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10d      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x45c>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0e9b      	lsrs	r3, r3, #26
 800318a:	3301      	adds	r3, #1
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	3b1e      	subs	r3, #30
 8003198:	051b      	lsls	r3, r3, #20
 800319a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800319e:	e01b      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x494>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	60fb      	str	r3, [r7, #12]
  return result;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	e003      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f003 021f 	and.w	r2, r3, #31
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	3b1e      	subs	r3, #30
 80031d2:	051b      	lsls	r3, r3, #20
 80031d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d8:	430b      	orrs	r3, r1
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	6892      	ldr	r2, [r2, #8]
 80031de:	4619      	mov	r1, r3
 80031e0:	f7ff fb7e 	bl	80028e0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da77      	bge.n	80032dc <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ec:	4840      	ldr	r0, [pc, #256]	; (80032f0 <HAL_ADC_ConfigChannel+0x5ac>)
 80031ee:	f7ff fae9 	bl	80027c4 <LL_ADC_GetCommonPathInternalCh>
 80031f2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f4:	483f      	ldr	r0, [pc, #252]	; (80032f4 <HAL_ADC_ConfigChannel+0x5b0>)
 80031f6:	f7ff fc11 	bl	8002a1c <LL_ADC_IsEnabled>
 80031fa:	4604      	mov	r4, r0
 80031fc:	483e      	ldr	r0, [pc, #248]	; (80032f8 <HAL_ADC_ConfigChannel+0x5b4>)
 80031fe:	f7ff fc0d 	bl	8002a1c <LL_ADC_IsEnabled>
 8003202:	4603      	mov	r3, r0
 8003204:	4323      	orrs	r3, r4
 8003206:	2b00      	cmp	r3, #0
 8003208:	d155      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3b      	ldr	r2, [pc, #236]	; (80032fc <HAL_ADC_ConfigChannel+0x5b8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d122      	bne.n	800325a <HAL_ADC_ConfigChannel+0x516>
 8003214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d11d      	bne.n	800325a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <HAL_ADC_ConfigChannel+0x5b4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d159      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800322e:	4619      	mov	r1, r3
 8003230:	482f      	ldr	r0, [pc, #188]	; (80032f0 <HAL_ADC_ConfigChannel+0x5ac>)
 8003232:	f7ff fab4 	bl	800279e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003236:	4b32      	ldr	r3, [pc, #200]	; (8003300 <HAL_ADC_ConfigChannel+0x5bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	099b      	lsrs	r3, r3, #6
 800323c:	4a31      	ldr	r2, [pc, #196]	; (8003304 <HAL_ADC_ConfigChannel+0x5c0>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	3301      	adds	r3, #1
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800324a:	e002      	b.n	8003252 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3b01      	subs	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f9      	bne.n	800324c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003258:	e040      	b.n	80032dc <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <HAL_ADC_ConfigChannel+0x5c4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d111      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x544>
 8003264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <HAL_ADC_ConfigChannel+0x5b4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d131      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327e:	4619      	mov	r1, r3
 8003280:	481b      	ldr	r0, [pc, #108]	; (80032f0 <HAL_ADC_ConfigChannel+0x5ac>)
 8003282:	f7ff fa8c 	bl	800279e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003286:	e029      	b.n	80032dc <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_ADC_ConfigChannel+0x5c8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d124      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x598>
 8003292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d11f      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <HAL_ADC_ConfigChannel+0x5b4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d11a      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032ac:	4619      	mov	r1, r3
 80032ae:	4810      	ldr	r0, [pc, #64]	; (80032f0 <HAL_ADC_ConfigChannel+0x5ac>)
 80032b0:	f7ff fa75 	bl	800279e <LL_ADC_SetCommonPathInternalCh>
 80032b4:	e012      	b.n	80032dc <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80032c8:	e008      	b.n	80032dc <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f043 0220 	orr.w	r2, r3, #32
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3784      	adds	r7, #132	; 0x84
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd90      	pop	{r4, r7, pc}
 80032f0:	40022300 	.word	0x40022300
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40022100 	.word	0x40022100
 80032fc:	cb840000 	.word	0xcb840000
 8003300:	24000008 	.word	0x24000008
 8003304:	053e2d63 	.word	0x053e2d63
 8003308:	bac04000 	.word	0xbac04000
 800330c:	cfb80000 	.word	0xcfb80000

08003310 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003318:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <ADC_ConfigureBoostMode+0x188>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01c      	beq.n	800335e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003324:	f002 fcd0 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8003328:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003332:	d010      	beq.n	8003356 <ADC_ConfigureBoostMode+0x46>
 8003334:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003338:	d871      	bhi.n	800341e <ADC_ConfigureBoostMode+0x10e>
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333e:	d002      	beq.n	8003346 <ADC_ConfigureBoostMode+0x36>
 8003340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003344:	d16b      	bne.n	800341e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	60fb      	str	r3, [r7, #12]
        break;
 8003354:	e066      	b.n	8003424 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	089b      	lsrs	r3, r3, #2
 800335a:	60fb      	str	r3, [r7, #12]
        break;
 800335c:	e062      	b.n	8003424 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800335e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003362:	f003 fc19 	bl	8006b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8003366:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003370:	d051      	beq.n	8003416 <ADC_ConfigureBoostMode+0x106>
 8003372:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003376:	d854      	bhi.n	8003422 <ADC_ConfigureBoostMode+0x112>
 8003378:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800337c:	d047      	beq.n	800340e <ADC_ConfigureBoostMode+0xfe>
 800337e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003382:	d84e      	bhi.n	8003422 <ADC_ConfigureBoostMode+0x112>
 8003384:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003388:	d03d      	beq.n	8003406 <ADC_ConfigureBoostMode+0xf6>
 800338a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800338e:	d848      	bhi.n	8003422 <ADC_ConfigureBoostMode+0x112>
 8003390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003394:	d033      	beq.n	80033fe <ADC_ConfigureBoostMode+0xee>
 8003396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800339a:	d842      	bhi.n	8003422 <ADC_ConfigureBoostMode+0x112>
 800339c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80033a0:	d029      	beq.n	80033f6 <ADC_ConfigureBoostMode+0xe6>
 80033a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80033a6:	d83c      	bhi.n	8003422 <ADC_ConfigureBoostMode+0x112>
 80033a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80033ac:	d01a      	beq.n	80033e4 <ADC_ConfigureBoostMode+0xd4>
 80033ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80033b2:	d836      	bhi.n	8003422 <ADC_ConfigureBoostMode+0x112>
 80033b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033b8:	d014      	beq.n	80033e4 <ADC_ConfigureBoostMode+0xd4>
 80033ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033be:	d830      	bhi.n	8003422 <ADC_ConfigureBoostMode+0x112>
 80033c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033c4:	d00e      	beq.n	80033e4 <ADC_ConfigureBoostMode+0xd4>
 80033c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ca:	d82a      	bhi.n	8003422 <ADC_ConfigureBoostMode+0x112>
 80033cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033d0:	d008      	beq.n	80033e4 <ADC_ConfigureBoostMode+0xd4>
 80033d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033d6:	d824      	bhi.n	8003422 <ADC_ConfigureBoostMode+0x112>
 80033d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033dc:	d002      	beq.n	80033e4 <ADC_ConfigureBoostMode+0xd4>
 80033de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033e2:	d11e      	bne.n	8003422 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c9b      	lsrs	r3, r3, #18
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	60fb      	str	r3, [r7, #12]
        break;
 80033f4:	e016      	b.n	8003424 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	60fb      	str	r3, [r7, #12]
        break;
 80033fc:	e012      	b.n	8003424 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	60fb      	str	r3, [r7, #12]
        break;
 8003404:	e00e      	b.n	8003424 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	60fb      	str	r3, [r7, #12]
        break;
 800340c:	e00a      	b.n	8003424 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	09db      	lsrs	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]
        break;
 8003414:	e006      	b.n	8003424 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	60fb      	str	r3, [r7, #12]
        break;
 800341c:	e002      	b.n	8003424 <ADC_ConfigureBoostMode+0x114>
        break;
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8003422:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a1b      	ldr	r2, [pc, #108]	; (800349c <ADC_ConfigureBoostMode+0x18c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d808      	bhi.n	8003444 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003440:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003442:	e025      	b.n	8003490 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <ADC_ConfigureBoostMode+0x190>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d80a      	bhi.n	8003462 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	e016      	b.n	8003490 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <ADC_ConfigureBoostMode+0x194>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d80a      	bhi.n	8003480 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347c:	609a      	str	r2, [r3, #8]
}
 800347e:	e007      	b.n	8003490 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40022300 	.word	0x40022300
 800349c:	005f5e10 	.word	0x005f5e10
 80034a0:	00bebc20 	.word	0x00bebc20
 80034a4:	017d7840 	.word	0x017d7840

080034a8 <LL_ADC_IsEnabled>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <LL_ADC_IsEnabled+0x18>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <LL_ADC_IsEnabled+0x1a>
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_ADC_REG_IsConversionOngoing>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d101      	bne.n	80034e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b09f      	sub	sp, #124	; 0x7c
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800350e:	2302      	movs	r3, #2
 8003510:	e080      	b.n	8003614 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800351e:	2300      	movs	r3, #0
 8003520:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3d      	ldr	r2, [pc, #244]	; (800361c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d102      	bne.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800352c:	4b3c      	ldr	r3, [pc, #240]	; (8003620 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	e001      	b.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e05f      	b.n	8003614 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffb9 	bl	80034ce <LL_ADC_REG_IsConversionOngoing>
 800355c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ffb3 	bl	80034ce <LL_ADC_REG_IsConversionOngoing>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d141      	bne.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800356e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003570:	2b00      	cmp	r3, #0
 8003572:	d13e      	bne.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003576:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	431a      	orrs	r2, r3
 800358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003590:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003592:	4822      	ldr	r0, [pc, #136]	; (800361c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003594:	f7ff ff88 	bl	80034a8 <LL_ADC_IsEnabled>
 8003598:	4604      	mov	r4, r0
 800359a:	4821      	ldr	r0, [pc, #132]	; (8003620 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800359c:	f7ff ff84 	bl	80034a8 <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4323      	orrs	r3, r4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d12e      	bne.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	6811      	ldr	r1, [r2, #0]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	6892      	ldr	r2, [r2, #8]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	431a      	orrs	r2, r3
 80035bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035c0:	e021      	b.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80035c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ce:	4813      	ldr	r0, [pc, #76]	; (800361c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80035d0:	f7ff ff6a 	bl	80034a8 <LL_ADC_IsEnabled>
 80035d4:	4604      	mov	r4, r0
 80035d6:	4812      	ldr	r0, [pc, #72]	; (8003620 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80035d8:	f7ff ff66 	bl	80034a8 <LL_ADC_IsEnabled>
 80035dc:	4603      	mov	r3, r0
 80035de:	4323      	orrs	r3, r4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d110      	bne.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035ee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035f0:	e009      	b.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	f043 0220 	orr.w	r2, r3, #32
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003604:	e000      	b.n	8003608 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003606:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003610:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003614:	4618      	mov	r0, r3
 8003616:	377c      	adds	r7, #124	; 0x7c
 8003618:	46bd      	mov	sp, r7
 800361a:	bd90      	pop	{r4, r7, pc}
 800361c:	40022000 	.word	0x40022000
 8003620:	40022100 	.word	0x40022100
 8003624:	40022300 	.word	0x40022300
 8003628:	fffff0e0 	.word	0xfffff0e0

0800362c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <__NVIC_SetPriorityGrouping+0x40>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003648:	4013      	ands	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <__NVIC_SetPriorityGrouping+0x44>)
 8003656:	4313      	orrs	r3, r2
 8003658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800365a:	4a04      	ldr	r2, [pc, #16]	; (800366c <__NVIC_SetPriorityGrouping+0x40>)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	60d3      	str	r3, [r2, #12]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000ed00 	.word	0xe000ed00
 8003670:	05fa0000 	.word	0x05fa0000

08003674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <__NVIC_GetPriorityGrouping+0x18>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	f003 0307 	and.w	r3, r3, #7
}
 8003682:	4618      	mov	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800369a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	db0b      	blt.n	80036ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	f003 021f 	and.w	r2, r3, #31
 80036a8:	4907      	ldr	r1, [pc, #28]	; (80036c8 <__NVIC_EnableIRQ+0x38>)
 80036aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	2001      	movs	r0, #1
 80036b2:	fa00 f202 	lsl.w	r2, r0, r2
 80036b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000e100 	.word	0xe000e100

080036cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	6039      	str	r1, [r7, #0]
 80036d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	db0a      	blt.n	80036f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	490c      	ldr	r1, [pc, #48]	; (8003718 <__NVIC_SetPriority+0x4c>)
 80036e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ea:	0112      	lsls	r2, r2, #4
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	440b      	add	r3, r1
 80036f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f4:	e00a      	b.n	800370c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	4908      	ldr	r1, [pc, #32]	; (800371c <__NVIC_SetPriority+0x50>)
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	3b04      	subs	r3, #4
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	440b      	add	r3, r1
 800370a:	761a      	strb	r2, [r3, #24]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000e100 	.word	0xe000e100
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003720:	b480      	push	{r7}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f1c3 0307 	rsb	r3, r3, #7
 800373a:	2b04      	cmp	r3, #4
 800373c:	bf28      	it	cs
 800373e:	2304      	movcs	r3, #4
 8003740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3304      	adds	r3, #4
 8003746:	2b06      	cmp	r3, #6
 8003748:	d902      	bls.n	8003750 <NVIC_EncodePriority+0x30>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3b03      	subs	r3, #3
 800374e:	e000      	b.n	8003752 <NVIC_EncodePriority+0x32>
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	f04f 32ff 	mov.w	r2, #4294967295
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43da      	mvns	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	401a      	ands	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003768:	f04f 31ff 	mov.w	r1, #4294967295
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43d9      	mvns	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	4313      	orrs	r3, r2
         );
}
 800377a:	4618      	mov	r0, r3
 800377c:	3724      	adds	r7, #36	; 0x24
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003798:	d301      	bcc.n	800379e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800379a:	2301      	movs	r3, #1
 800379c:	e00f      	b.n	80037be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <SysTick_Config+0x40>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037a6:	210f      	movs	r1, #15
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	f7ff ff8e 	bl	80036cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <SysTick_Config+0x40>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037b6:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <SysTick_Config+0x40>)
 80037b8:	2207      	movs	r2, #7
 80037ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	e000e010 	.word	0xe000e010

080037cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ff29 	bl	800362c <__NVIC_SetPriorityGrouping>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	4603      	mov	r3, r0
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037f0:	f7ff ff40 	bl	8003674 <__NVIC_GetPriorityGrouping>
 80037f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff ff90 	bl	8003720 <NVIC_EncodePriority>
 8003800:	4602      	mov	r2, r0
 8003802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff5f 	bl	80036cc <__NVIC_SetPriority>
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	4603      	mov	r3, r0
 800381e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff33 	bl	8003690 <__NVIC_EnableIRQ>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ffa4 	bl	8003788 <SysTick_Config>
 8003840:	4603      	mov	r3, r0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b098      	sub	sp, #96	; 0x60
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003854:	4a84      	ldr	r2, [pc, #528]	; (8003a68 <HAL_FDCAN_Init+0x21c>)
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	4611      	mov	r1, r2
 800385c:	224c      	movs	r2, #76	; 0x4c
 800385e:	4618      	mov	r0, r3
 8003860:	f008 f8c2 	bl	800b9e8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e1ca      	b.n	8003c04 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7e      	ldr	r2, [pc, #504]	; (8003a6c <HAL_FDCAN_Init+0x220>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d106      	bne.n	8003886 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003880:	461a      	mov	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fe fb24 	bl	8001ee8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0210 	bic.w	r2, r2, #16
 80038ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b0:	f7fe ff32 	bl	8002718 <HAL_GetTick>
 80038b4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80038b6:	e014      	b.n	80038e2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80038b8:	f7fe ff2e 	bl	8002718 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b0a      	cmp	r3, #10
 80038c4:	d90d      	bls.n	80038e2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2203      	movs	r2, #3
 80038da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e190      	b.n	8003c04 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d0e3      	beq.n	80038b8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003900:	f7fe ff0a 	bl	8002718 <HAL_GetTick>
 8003904:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003906:	e014      	b.n	8003932 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003908:	f7fe ff06 	bl	8002718 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b0a      	cmp	r3, #10
 8003914:	d90d      	bls.n	8003932 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800391c:	f043 0201 	orr.w	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e168      	b.n	8003c04 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0e3      	beq.n	8003908 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0202 	orr.w	r2, r2, #2
 800394e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7c1b      	ldrb	r3, [r3, #16]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d108      	bne.n	800396a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003966:	619a      	str	r2, [r3, #24]
 8003968:	e007      	b.n	800397a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003978:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7c5b      	ldrb	r3, [r3, #17]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d108      	bne.n	8003994 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003990:	619a      	str	r2, [r3, #24]
 8003992:	e007      	b.n	80039a4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7c9b      	ldrb	r3, [r3, #18]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d108      	bne.n	80039be <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039ba:	619a      	str	r2, [r3, #24]
 80039bc:	e007      	b.n	80039ce <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039cc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80039f2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0210 	bic.w	r2, r2, #16
 8003a02:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d108      	bne.n	8003a1e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0204 	orr.w	r2, r2, #4
 8003a1a:	619a      	str	r2, [r3, #24]
 8003a1c:	e030      	b.n	8003a80 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02c      	beq.n	8003a80 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d020      	beq.n	8003a70 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a3c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0210 	orr.w	r2, r2, #16
 8003a4c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d114      	bne.n	8003a80 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0220 	orr.w	r2, r2, #32
 8003a64:	619a      	str	r2, [r3, #24]
 8003a66:	e00b      	b.n	8003a80 <HAL_FDCAN_Init+0x234>
 8003a68:	0800c8f8 	.word	0x0800c8f8
 8003a6c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0220 	orr.w	r2, r2, #32
 8003a7e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003a90:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003a98:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003aa8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003aaa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab4:	d115      	bne.n	8003ae2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ac4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	3b01      	subs	r3, #1
 8003acc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003ace:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003ade:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ae0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b08:	4413      	add	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d012      	beq.n	8003b34 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003b16:	f023 0107 	bic.w	r1, r3, #7
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b24:	4413      	add	r3, r2
 8003b26:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b44:	f023 0107 	bic.w	r1, r3, #7
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b52:	4413      	add	r3, r2
 8003b54:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d013      	beq.n	8003b92 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b72:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b80:	4413      	add	r3, r2
 8003b82:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003b86:	011a      	lsls	r2, r3, #4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d013      	beq.n	8003bc2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ba2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <HAL_FDCAN_Init+0x3c0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d107      	bne.n	8003bdc <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f022 0203 	bic.w	r2, r2, #3
 8003bda:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fd89 	bl	800470c <FDCAN_CalcultateRamBlockAddresses>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003c00:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3760      	adds	r7, #96	; 0x60
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	4000a000 	.word	0x4000a000

08003c10 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c20:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d002      	beq.n	8003c2e <HAL_FDCAN_ConfigFilter+0x1e>
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d157      	bne.n	8003cde <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d12b      	bne.n	8003c8e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	d10d      	bne.n	8003c5a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003c4a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003c50:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003c52:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e00e      	b.n	8003c78 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003c66:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003c6e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	e025      	b.n	8003cda <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	075a      	lsls	r2, r3, #29
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b07      	cmp	r3, #7
 8003ca2:	d103      	bne.n	8003cac <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e006      	b.n	8003cba <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	079a      	lsls	r2, r3, #30
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e008      	b.n	8003cf0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ce4:	f043 0202 	orr.w	r2, r3, #2
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d111      	bne.n	8003d34 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e008      	b.n	8003d46 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d3a:	f043 0204 	orr.w	r2, r3, #4
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b08b      	sub	sp, #44	; 0x2c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003d6c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003d6e:	7efb      	ldrb	r3, [r7, #27]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	f040 814b 	bne.w	800400c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d14d      	bne.n	8003e18 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d92:	f043 0220 	orr.w	r2, r3, #32
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e13e      	b.n	800401e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003db6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e12c      	b.n	800401e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dcc:	0e1b      	lsrs	r3, r3, #24
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d10b      	bne.n	8003dee <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dde:	0fdb      	lsrs	r3, r3, #31
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003de8:	d101      	bne.n	8003dee <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003dea:	2301      	movs	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	69f9      	ldr	r1, [r7, #28]
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e069      	b.n	8003eec <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b41      	cmp	r3, #65	; 0x41
 8003e1c:	d14d      	bne.n	8003eba <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0ed      	b.n	800401e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0db      	b.n	800401e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e6e:	0e1b      	lsrs	r3, r3, #24
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10b      	bne.n	8003e90 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e80:	0fdb      	lsrs	r3, r3, #31
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8a:	d101      	bne.n	8003e90 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eac:	69f9      	ldr	r1, [r7, #28]
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb8:	e018      	b.n	8003eec <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d309      	bcc.n	8003ed8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0a2      	b.n	800401e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0c9b      	lsrs	r3, r3, #18
 8003f06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e005      	b.n	8003f1c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	3304      	adds	r3, #4
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	0e1b      	lsrs	r3, r3, #24
 8003f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0fda      	lsrs	r2, r3, #31
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	3304      	adds	r3, #4
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	e00a      	b.n	8003fa6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	441a      	add	r2, r3
 8003f96:	6839      	ldr	r1, [r7, #0]
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	440b      	add	r3, r1
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	623b      	str	r3, [r7, #32]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	0c1b      	lsrs	r3, r3, #16
 8003fac:	4a1f      	ldr	r2, [pc, #124]	; (800402c <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003fae:	5cd3      	ldrb	r3, [r2, r3]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d3eb      	bcc.n	8003f90 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d105      	bne.n	8003fca <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003fc8:	e01e      	b.n	8004008 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b41      	cmp	r3, #65	; 0x41
 8003fce:	d105      	bne.n	8003fdc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003fda:	e015      	b.n	8004008 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b1f      	cmp	r3, #31
 8003fe0:	d808      	bhi.n	8003ff4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	fa01 f202 	lsl.w	r2, r1, r2
 8003fee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003ff2:	e009      	b.n	8004008 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 021f 	and.w	r2, r3, #31
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f202 	lsl.w	r2, r1, r2
 8004004:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e008      	b.n	800401e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004012:	f043 0208 	orr.w	r2, r3, #8
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	372c      	adds	r7, #44	; 0x2c
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	0800c954 	.word	0x0800c954

08004030 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004042:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d002      	beq.n	8004050 <HAL_FDCAN_ActivateNotification+0x20>
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d155      	bne.n	80040fc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d108      	bne.n	8004070 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	65da      	str	r2, [r3, #92]	; 0x5c
 800406e:	e014      	b.n	800409a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	d108      	bne.n	8004092 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0202 	orr.w	r2, r2, #2
 800408e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004090:	e003      	b.n	800409a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2203      	movs	r2, #3
 8004098:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d009      	beq.n	80040b8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_FDCAN_ActivateNotification+0xec>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	430b      	orrs	r3, r1
 80040e8:	6553      	str	r3, [r2, #84]	; 0x54
 80040ea:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <HAL_FDCAN_ActivateNotification+0xf0>)
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	0f9b      	lsrs	r3, r3, #30
 80040f2:	490b      	ldr	r1, [pc, #44]	; (8004120 <HAL_FDCAN_ActivateNotification+0xf0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e008      	b.n	800410e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004102:	f043 0202 	orr.w	r2, r3, #2
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	3fcfffff 	.word	0x3fcfffff
 8004120:	4000a800 	.word	0x4000a800

08004124 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b092      	sub	sp, #72	; 0x48
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800412c:	4b90      	ldr	r3, [pc, #576]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	079b      	lsls	r3, r3, #30
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004134:	4b8e      	ldr	r3, [pc, #568]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	079b      	lsls	r3, r3, #30
 800413a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800413c:	4013      	ands	r3, r2
 800413e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004146:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800414a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004154:	4013      	ands	r3, r2
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800416c:	4013      	ands	r3, r2
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004184:	4013      	ands	r3, r2
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419c:	4013      	ands	r3, r2
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b4:	4013      	ands	r3, r2
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d011      	beq.n	80041ea <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041dc:	651a      	str	r2, [r3, #80]	; 0x50
 80041de:	4b64      	ldr	r3, [pc, #400]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fa45 	bl	8004674 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01e      	beq.n	8004236 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d017      	beq.n	8004236 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421a:	4013      	ands	r3, r2
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004226:	651a      	str	r2, [r3, #80]	; 0x50
 8004228:	4b51      	ldr	r3, [pc, #324]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800422e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fa00 	bl	8004636 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00d      	beq.n	8004258 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004242:	4b4c      	ldr	r3, [pc, #304]	; (8004374 <HAL_FDCAN_IRQHandler+0x250>)
 8004244:	400b      	ands	r3, r1
 8004246:	6513      	str	r3, [r2, #80]	; 0x50
 8004248:	4a49      	ldr	r2, [pc, #292]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 800424a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424c:	0f9b      	lsrs	r3, r3, #30
 800424e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004250:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9c4 	bl	80045e0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00d      	beq.n	800427a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004264:	4b43      	ldr	r3, [pc, #268]	; (8004374 <HAL_FDCAN_IRQHandler+0x250>)
 8004266:	400b      	ands	r3, r1
 8004268:	6513      	str	r3, [r2, #80]	; 0x50
 800426a:	4a41      	ldr	r2, [pc, #260]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 800426c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426e:	0f9b      	lsrs	r3, r3, #30
 8004270:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f9be 	bl	80045f6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800427a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004286:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <HAL_FDCAN_IRQHandler+0x250>)
 8004288:	400b      	ands	r3, r1
 800428a:	6513      	str	r3, [r2, #80]	; 0x50
 800428c:	4a38      	ldr	r2, [pc, #224]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004290:	0f9b      	lsrs	r3, r3, #30
 8004292:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004294:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fc94 	bl	8000bc4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042a8:	4b32      	ldr	r3, [pc, #200]	; (8004374 <HAL_FDCAN_IRQHandler+0x250>)
 80042aa:	400b      	ands	r3, r1
 80042ac:	6513      	str	r3, [r2, #80]	; 0x50
 80042ae:	4a30      	ldr	r2, [pc, #192]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 80042b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b2:	0f9b      	lsrs	r3, r3, #30
 80042b4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80042b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fc fca7 	bl	8000c0c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d011      	beq.n	80042f0 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f98e 	bl	800460c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01e      	beq.n	800433c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004308:	2b00      	cmp	r3, #0
 800430a:	d017      	beq.n	800433c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800431e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004320:	4013      	ands	r3, r2
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432c:	651a      	str	r2, [r3, #80]	; 0x50
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 8004330:	2200      	movs	r2, #0
 8004332:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f972 	bl	8004620 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00f      	beq.n	8004378 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004360:	651a      	str	r2, [r3, #80]	; 0x50
 8004362:	4b03      	ldr	r3, [pc, #12]	; (8004370 <HAL_FDCAN_IRQHandler+0x24c>)
 8004364:	2200      	movs	r2, #0
 8004366:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7fc fc73 	bl	8000c54 <HAL_FDCAN_RxBufferNewMessageCallback>
 800436e:	e003      	b.n	8004378 <HAL_FDCAN_IRQHandler+0x254>
 8004370:	4000a800 	.word	0x4000a800
 8004374:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d011      	beq.n	80043aa <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800439c:	651a      	str	r2, [r3, #80]	; 0x50
 800439e:	4b8d      	ldr	r3, [pc, #564]	; (80045d4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f951 	bl	800464c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d011      	beq.n	80043dc <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043ce:	651a      	str	r2, [r3, #80]	; 0x50
 80043d0:	4b80      	ldr	r3, [pc, #512]	; (80045d4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f942 	bl	8004660 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00f      	beq.n	8004418 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004400:	651a      	str	r2, [r3, #80]	; 0x50
 8004402:	4b74      	ldr	r3, [pc, #464]	; (80045d4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004404:	2200      	movs	r2, #0
 8004406:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800440e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004424:	4b6c      	ldr	r3, [pc, #432]	; (80045d8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004426:	400b      	ands	r3, r1
 8004428:	6513      	str	r3, [r2, #80]	; 0x50
 800442a:	4a6a      	ldr	r2, [pc, #424]	; (80045d4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	0f9b      	lsrs	r3, r3, #30
 8004430:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f931 	bl	800469c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	2b00      	cmp	r3, #0
 800443e:	d011      	beq.n	8004464 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004446:	4b64      	ldr	r3, [pc, #400]	; (80045d8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004448:	400b      	ands	r3, r1
 800444a:	6513      	str	r3, [r2, #80]	; 0x50
 800444c:	4a61      	ldr	r2, [pc, #388]	; (80045d4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	0f9b      	lsrs	r3, r3, #30
 8004452:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800445a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a5c      	ldr	r2, [pc, #368]	; (80045dc <HAL_FDCAN_IRQHandler+0x4b8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	f040 80a6 	bne.w	80045bc <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 809e 	beq.w	80045bc <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004494:	4013      	ands	r3, r2
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044a2:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	6a3a      	ldr	r2, [r7, #32]
 80044ac:	4013      	ands	r3, r2
 80044ae:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80044ba:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80044d2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80044ea:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4013      	ands	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8d2 	bl	80046b2 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	6a3a      	ldr	r2, [r7, #32]
 800451a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800451c:	6a39      	ldr	r1, [r7, #32]
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f8d2 	bl	80046c8 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01b      	beq.n	800456a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d014      	beq.n	800456a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	0c1b      	lsrs	r3, r3, #16
 8004548:	b29b      	uxth	r3, r3
 800454a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004556:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2240      	movs	r2, #64	; 0x40
 800455e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	6939      	ldr	r1, [r7, #16]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f8ba 	bl	80046de <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004578:	69f9      	ldr	r1, [r7, #28]
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f8bb 	bl	80046f6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f85e 	bl	8004688 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80045cc:	bf00      	nop
 80045ce:	3748      	adds	r7, #72	; 0x48
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	4000a800 	.word	0x4000a800
 80045d8:	3fcfffff 	.word	0x3fcfffff
 80045dc:	4000a000 	.word	0x4000a000

080045e0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004722:	4ba7      	ldr	r3, [pc, #668]	; (80049c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004724:	4013      	ands	r3, r2
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	0091      	lsls	r1, r2, #2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	430b      	orrs	r3, r1
 8004730:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	041a      	lsls	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	4413      	add	r3, r2
 8004758:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004762:	4b97      	ldr	r3, [pc, #604]	; (80049c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004764:	4013      	ands	r3, r2
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	0091      	lsls	r1, r2, #2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	430b      	orrs	r3, r1
 8004770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004784:	041a      	lsls	r2, r3, #16
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	4413      	add	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80047a4:	4b86      	ldr	r3, [pc, #536]	; (80049c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	0091      	lsls	r1, r2, #2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	041a      	lsls	r2, r3, #16
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80047ec:	4b74      	ldr	r3, [pc, #464]	; (80049c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	0091      	lsls	r1, r2, #2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004806:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480e:	041a      	lsls	r2, r3, #16
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4413      	add	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004836:	4013      	ands	r3, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	0091      	lsls	r1, r2, #2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	430b      	orrs	r3, r1
 8004842:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4413      	add	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004860:	4b57      	ldr	r3, [pc, #348]	; (80049c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	0091      	lsls	r1, r2, #2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	430b      	orrs	r3, r1
 800486e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800487a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	041a      	lsls	r2, r3, #16
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	4413      	add	r3, r2
 8004898:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	0091      	lsls	r1, r2, #2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	430b      	orrs	r3, r1
 80048b0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80048bc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c4:	041a      	lsls	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80048d8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e0:	061a      	lsls	r2, r3, #24
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80048f2:	4413      	add	r3, r2
 80048f4:	009a      	lsls	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	441a      	add	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	441a      	add	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	441a      	add	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d915      	bls.n	80049e8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80049bc:	e006      	b.n	80049cc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80049be:	bf00      	nop
 80049c0:	ffff0003 	.word	0xffff0003
 80049c4:	10002b00 	.word	0x10002b00
 80049c8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049d2:	f043 0220 	orr.w	r2, r3, #32
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2203      	movs	r2, #3
 80049e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e010      	b.n	8004a0a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e005      	b.n	80049fc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3304      	adds	r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d3f3      	bcc.n	80049f0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop

08004a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004a26:	4b89      	ldr	r3, [pc, #548]	; (8004c4c <HAL_GPIO_Init+0x234>)
 8004a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a2a:	e194      	b.n	8004d56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	2101      	movs	r1, #1
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	fa01 f303 	lsl.w	r3, r1, r3
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8186 	beq.w	8004d50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d005      	beq.n	8004a5c <HAL_GPIO_Init+0x44>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d130      	bne.n	8004abe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	2203      	movs	r2, #3
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a92:	2201      	movs	r2, #1
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 0201 	and.w	r2, r3, #1
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d017      	beq.n	8004afa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d123      	bne.n	8004b4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	08da      	lsrs	r2, r3, #3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3208      	adds	r2, #8
 8004b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	220f      	movs	r2, #15
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4013      	ands	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	08da      	lsrs	r2, r3, #3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3208      	adds	r2, #8
 8004b48:	69b9      	ldr	r1, [r7, #24]
 8004b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	2203      	movs	r2, #3
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 0203 	and.w	r2, r3, #3
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80e0 	beq.w	8004d50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b90:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <HAL_GPIO_Init+0x238>)
 8004b92:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004b96:	4a2e      	ldr	r2, [pc, #184]	; (8004c50 <HAL_GPIO_Init+0x238>)
 8004b98:	f043 0302 	orr.w	r3, r3, #2
 8004b9c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_GPIO_Init+0x238>)
 8004ba2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bae:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <HAL_GPIO_Init+0x23c>)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	220f      	movs	r2, #15
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43db      	mvns	r3, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a20      	ldr	r2, [pc, #128]	; (8004c58 <HAL_GPIO_Init+0x240>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d052      	beq.n	8004c80 <HAL_GPIO_Init+0x268>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <HAL_GPIO_Init+0x244>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d031      	beq.n	8004c46 <HAL_GPIO_Init+0x22e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <HAL_GPIO_Init+0x248>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d02b      	beq.n	8004c42 <HAL_GPIO_Init+0x22a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <HAL_GPIO_Init+0x24c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d025      	beq.n	8004c3e <HAL_GPIO_Init+0x226>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <HAL_GPIO_Init+0x250>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d01f      	beq.n	8004c3a <HAL_GPIO_Init+0x222>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <HAL_GPIO_Init+0x254>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d019      	beq.n	8004c36 <HAL_GPIO_Init+0x21e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a1a      	ldr	r2, [pc, #104]	; (8004c70 <HAL_GPIO_Init+0x258>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_GPIO_Init+0x21a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_GPIO_Init+0x25c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00d      	beq.n	8004c2e <HAL_GPIO_Init+0x216>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_GPIO_Init+0x260>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d007      	beq.n	8004c2a <HAL_GPIO_Init+0x212>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a17      	ldr	r2, [pc, #92]	; (8004c7c <HAL_GPIO_Init+0x264>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d101      	bne.n	8004c26 <HAL_GPIO_Init+0x20e>
 8004c22:	2309      	movs	r3, #9
 8004c24:	e02d      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c26:	230a      	movs	r3, #10
 8004c28:	e02b      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	e029      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c2e:	2307      	movs	r3, #7
 8004c30:	e027      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c32:	2306      	movs	r3, #6
 8004c34:	e025      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c36:	2305      	movs	r3, #5
 8004c38:	e023      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	e021      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e01f      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e01d      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e01b      	b.n	8004c82 <HAL_GPIO_Init+0x26a>
 8004c4a:	bf00      	nop
 8004c4c:	58000080 	.word	0x58000080
 8004c50:	58024400 	.word	0x58024400
 8004c54:	58000400 	.word	0x58000400
 8004c58:	58020000 	.word	0x58020000
 8004c5c:	58020400 	.word	0x58020400
 8004c60:	58020800 	.word	0x58020800
 8004c64:	58020c00 	.word	0x58020c00
 8004c68:	58021000 	.word	0x58021000
 8004c6c:	58021400 	.word	0x58021400
 8004c70:	58021800 	.word	0x58021800
 8004c74:	58021c00 	.word	0x58021c00
 8004c78:	58022000 	.word	0x58022000
 8004c7c:	58022400 	.word	0x58022400
 8004c80:	2300      	movs	r3, #0
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	f002 0203 	and.w	r2, r2, #3
 8004c88:	0092      	lsls	r2, r2, #2
 8004c8a:	4093      	lsls	r3, r2
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c92:	4938      	ldr	r1, [pc, #224]	; (8004d74 <HAL_GPIO_Init+0x35c>)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	3302      	adds	r3, #2
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4013      	ands	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	3301      	adds	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f47f ae63 	bne.w	8004a2c <HAL_GPIO_Init+0x14>
  }
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	3724      	adds	r7, #36	; 0x24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	58000400 	.word	0x58000400

08004d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
 8004d84:	4613      	mov	r3, r2
 8004d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d88:	787b      	ldrb	r3, [r7, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d94:	e003      	b.n	8004d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d96:	887b      	ldrh	r3, [r7, #2]
 8004d98:	041a      	lsls	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	619a      	str	r2, [r3, #24]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004db4:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004dc0:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d001      	beq.n	8004dd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e040      	b.n	8004e54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e03e      	b.n	8004e54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004dd6:	4b21      	ldr	r3, [pc, #132]	; (8004e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004dde:	491f      	ldr	r1, [pc, #124]	; (8004e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004de6:	f7fd fc97 	bl	8002718 <HAL_GetTick>
 8004dea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004dec:	e009      	b.n	8004e02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004dee:	f7fd fc93 	bl	8002718 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dfc:	d901      	bls.n	8004e02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e028      	b.n	8004e54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e02:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0e:	d1ee      	bne.n	8004dee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b1e      	cmp	r3, #30
 8004e14:	d008      	beq.n	8004e28 <HAL_PWREx_ConfigSupply+0x7c>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b2e      	cmp	r3, #46	; 0x2e
 8004e1a:	d005      	beq.n	8004e28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b1d      	cmp	r3, #29
 8004e20:	d002      	beq.n	8004e28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b2d      	cmp	r3, #45	; 0x2d
 8004e26:	d114      	bne.n	8004e52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004e28:	f7fd fc76 	bl	8002718 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e2e:	e009      	b.n	8004e44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e30:	f7fd fc72 	bl	8002718 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e3e:	d901      	bls.n	8004e44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e007      	b.n	8004e54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d1ee      	bne.n	8004e30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	58024800 	.word	0x58024800

08004e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e3f3      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80b3 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e80:	4b9e      	ldr	r3, [pc, #632]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e8a:	4b9c      	ldr	r3, [pc, #624]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d007      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x46>
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	2b18      	cmp	r3, #24
 8004e9a:	d112      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x62>
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d10d      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea6:	4b95      	ldr	r3, [pc, #596]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 8098 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x184>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 8093 	bne.w	8004fe4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e3cb      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_OscConfig+0x7a>
 8004ecc:	4b8b      	ldr	r3, [pc, #556]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a8a      	ldr	r2, [pc, #552]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	e058      	b.n	8004f8c <HAL_RCC_OscConfig+0x12c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d112      	bne.n	8004f08 <HAL_RCC_OscConfig+0xa8>
 8004ee2:	4b86      	ldr	r3, [pc, #536]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a85      	ldr	r2, [pc, #532]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	4b83      	ldr	r3, [pc, #524]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a82      	ldr	r2, [pc, #520]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004ef4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	4b80      	ldr	r3, [pc, #512]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a7f      	ldr	r2, [pc, #508]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e041      	b.n	8004f8c <HAL_RCC_OscConfig+0x12c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f10:	d112      	bne.n	8004f38 <HAL_RCC_OscConfig+0xd8>
 8004f12:	4b7a      	ldr	r3, [pc, #488]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a79      	ldr	r2, [pc, #484]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	4b77      	ldr	r3, [pc, #476]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a76      	ldr	r2, [pc, #472]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	4b74      	ldr	r3, [pc, #464]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a73      	ldr	r2, [pc, #460]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e029      	b.n	8004f8c <HAL_RCC_OscConfig+0x12c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004f40:	d112      	bne.n	8004f68 <HAL_RCC_OscConfig+0x108>
 8004f42:	4b6e      	ldr	r3, [pc, #440]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6d      	ldr	r2, [pc, #436]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4b6b      	ldr	r3, [pc, #428]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a6a      	ldr	r2, [pc, #424]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b68      	ldr	r3, [pc, #416]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a67      	ldr	r2, [pc, #412]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e011      	b.n	8004f8c <HAL_RCC_OscConfig+0x12c>
 8004f68:	4b64      	ldr	r3, [pc, #400]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a63      	ldr	r2, [pc, #396]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	4b61      	ldr	r3, [pc, #388]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a60      	ldr	r2, [pc, #384]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b5e      	ldr	r3, [pc, #376]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a5d      	ldr	r2, [pc, #372]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004f86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fd fbc0 	bl	8002718 <HAL_GetTick>
 8004f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fd fbbc 	bl	8002718 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	; 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e355      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fae:	4b53      	ldr	r3, [pc, #332]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x13c>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fd fbac 	bl	8002718 <HAL_GetTick>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fc4:	f7fd fba8 	bl	8002718 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	; 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e341      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fd6:	4b49      	ldr	r3, [pc, #292]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x164>
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 808c 	beq.w	800510c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff4:	4b41      	ldr	r3, [pc, #260]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ffc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ffe:	4b3f      	ldr	r3, [pc, #252]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_RCC_OscConfig+0x1ba>
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	2b18      	cmp	r3, #24
 800500e:	d137      	bne.n	8005080 <HAL_RCC_OscConfig+0x220>
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d132      	bne.n	8005080 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800501a:	4b38      	ldr	r3, [pc, #224]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_RCC_OscConfig+0x1d2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e313      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005032:	4b32      	ldr	r3, [pc, #200]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 0219 	bic.w	r2, r3, #25
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	492f      	ldr	r1, [pc, #188]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005044:	f7fd fb68 	bl	8002718 <HAL_GetTick>
 8005048:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800504c:	f7fd fb64 	bl	8002718 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e2fd      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800505e:	4b27      	ldr	r3, [pc, #156]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	4920      	ldr	r1, [pc, #128]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 800507a:	4313      	orrs	r3, r2
 800507c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800507e:	e045      	b.n	800510c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d026      	beq.n	80050d6 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005088:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 0219 	bic.w	r2, r3, #25
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4919      	ldr	r1, [pc, #100]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509a:	f7fd fb3d 	bl	8002718 <HAL_GetTick>
 800509e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a2:	f7fd fb39 	bl	8002718 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e2d2      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050b4:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c0:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	061b      	lsls	r3, r3, #24
 80050ce:	490b      	ldr	r1, [pc, #44]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	604b      	str	r3, [r1, #4]
 80050d4:	e01a      	b.n	800510c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a08      	ldr	r2, [pc, #32]	; (80050fc <HAL_RCC_OscConfig+0x29c>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e2:	f7fd fb19 	bl	8002718 <HAL_GetTick>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ea:	f7fd fb15 	bl	8002718 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d903      	bls.n	8005100 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e2ae      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
 80050fc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005100:	4b99      	ldr	r3, [pc, #612]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1ee      	bne.n	80050ea <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	2b00      	cmp	r3, #0
 8005116:	d06a      	beq.n	80051ee <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005118:	4b93      	ldr	r3, [pc, #588]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005120:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005122:	4b91      	ldr	r3, [pc, #580]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b08      	cmp	r3, #8
 800512c:	d007      	beq.n	800513e <HAL_RCC_OscConfig+0x2de>
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b18      	cmp	r3, #24
 8005132:	d11b      	bne.n	800516c <HAL_RCC_OscConfig+0x30c>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b01      	cmp	r3, #1
 800513c:	d116      	bne.n	800516c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800513e:	4b8a      	ldr	r3, [pc, #552]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_RCC_OscConfig+0x2f6>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	2b80      	cmp	r3, #128	; 0x80
 8005150:	d001      	beq.n	8005156 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e281      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005156:	4b84      	ldr	r3, [pc, #528]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	4980      	ldr	r1, [pc, #512]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005166:	4313      	orrs	r3, r2
 8005168:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800516a:	e040      	b.n	80051ee <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d023      	beq.n	80051bc <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005174:	4b7c      	ldr	r3, [pc, #496]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a7b      	ldr	r2, [pc, #492]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800517a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd faca 	bl	8002718 <HAL_GetTick>
 8005184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005188:	f7fd fac6 	bl	8002718 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e25f      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800519a:	4b73      	ldr	r3, [pc, #460]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051a6:	4b70      	ldr	r3, [pc, #448]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	061b      	lsls	r3, r3, #24
 80051b4:	496c      	ldr	r1, [pc, #432]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60cb      	str	r3, [r1, #12]
 80051ba:	e018      	b.n	80051ee <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80051bc:	4b6a      	ldr	r3, [pc, #424]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a69      	ldr	r2, [pc, #420]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 80051c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fd faa6 	bl	8002718 <HAL_GetTick>
 80051cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80051d0:	f7fd faa2 	bl	8002718 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e23b      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051e2:	4b61      	ldr	r3, [pc, #388]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d036      	beq.n	8005268 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d019      	beq.n	8005236 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005202:	4b59      	ldr	r3, [pc, #356]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	4a58      	ldr	r2, [pc, #352]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520e:	f7fd fa83 	bl	8002718 <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005216:	f7fd fa7f 	bl	8002718 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e218      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005228:	4b4f      	ldr	r3, [pc, #316]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800522a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x3b6>
 8005234:	e018      	b.n	8005268 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005236:	4b4c      	ldr	r3, [pc, #304]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523a:	4a4b      	ldr	r2, [pc, #300]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005242:	f7fd fa69 	bl	8002718 <HAL_GetTick>
 8005246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800524a:	f7fd fa65 	bl	8002718 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e1fe      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800525c:	4b42      	ldr	r3, [pc, #264]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d036      	beq.n	80052e2 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d019      	beq.n	80052b0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800527c:	4b3a      	ldr	r3, [pc, #232]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a39      	ldr	r2, [pc, #228]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005282:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005286:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005288:	f7fd fa46 	bl	8002718 <HAL_GetTick>
 800528c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005290:	f7fd fa42 	bl	8002718 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e1db      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052a2:	4b31      	ldr	r3, [pc, #196]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x430>
 80052ae:	e018      	b.n	80052e2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052b0:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a2c      	ldr	r2, [pc, #176]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 80052b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052bc:	f7fd fa2c 	bl	8002718 <HAL_GetTick>
 80052c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80052c4:	f7fd fa28 	bl	8002718 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e1c1      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052d6:	4b24      	ldr	r3, [pc, #144]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80af 	beq.w	800544e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052f0:	4b1e      	ldr	r3, [pc, #120]	; (800536c <HAL_RCC_OscConfig+0x50c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1d      	ldr	r2, [pc, #116]	; (800536c <HAL_RCC_OscConfig+0x50c>)
 80052f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052fc:	f7fd fa0c 	bl	8002718 <HAL_GetTick>
 8005300:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005304:	f7fd fa08 	bl	8002718 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b64      	cmp	r3, #100	; 0x64
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e1a1      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_RCC_OscConfig+0x50c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d106      	bne.n	8005338 <HAL_RCC_OscConfig+0x4d8>
 800532a:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	4a0e      	ldr	r2, [pc, #56]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	6713      	str	r3, [r2, #112]	; 0x70
 8005336:	e05b      	b.n	80053f0 <HAL_RCC_OscConfig+0x590>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d117      	bne.n	8005370 <HAL_RCC_OscConfig+0x510>
 8005340:	4b09      	ldr	r3, [pc, #36]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	6713      	str	r3, [r2, #112]	; 0x70
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800534e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005350:	4a05      	ldr	r2, [pc, #20]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 8005352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005356:	6713      	str	r3, [r2, #112]	; 0x70
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	4a02      	ldr	r2, [pc, #8]	; (8005368 <HAL_RCC_OscConfig+0x508>)
 800535e:	f023 0304 	bic.w	r3, r3, #4
 8005362:	6713      	str	r3, [r2, #112]	; 0x70
 8005364:	e044      	b.n	80053f0 <HAL_RCC_OscConfig+0x590>
 8005366:	bf00      	nop
 8005368:	58024400 	.word	0x58024400
 800536c:	58024800 	.word	0x58024800
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b05      	cmp	r3, #5
 8005376:	d112      	bne.n	800539e <HAL_RCC_OscConfig+0x53e>
 8005378:	4b95      	ldr	r3, [pc, #596]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537c:	4a94      	ldr	r2, [pc, #592]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800537e:	f043 0304 	orr.w	r3, r3, #4
 8005382:	6713      	str	r3, [r2, #112]	; 0x70
 8005384:	4b92      	ldr	r3, [pc, #584]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	4a91      	ldr	r2, [pc, #580]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800538a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800538e:	6713      	str	r3, [r2, #112]	; 0x70
 8005390:	4b8f      	ldr	r3, [pc, #572]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a8e      	ldr	r2, [pc, #568]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
 800539c:	e028      	b.n	80053f0 <HAL_RCC_OscConfig+0x590>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b85      	cmp	r3, #133	; 0x85
 80053a4:	d112      	bne.n	80053cc <HAL_RCC_OscConfig+0x56c>
 80053a6:	4b8a      	ldr	r3, [pc, #552]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	4a89      	ldr	r2, [pc, #548]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053ac:	f043 0304 	orr.w	r3, r3, #4
 80053b0:	6713      	str	r3, [r2, #112]	; 0x70
 80053b2:	4b87      	ldr	r3, [pc, #540]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	4a86      	ldr	r2, [pc, #536]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053bc:	6713      	str	r3, [r2, #112]	; 0x70
 80053be:	4b84      	ldr	r3, [pc, #528]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c2:	4a83      	ldr	r2, [pc, #524]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ca:	e011      	b.n	80053f0 <HAL_RCC_OscConfig+0x590>
 80053cc:	4b80      	ldr	r3, [pc, #512]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	4a7f      	ldr	r2, [pc, #508]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	6713      	str	r3, [r2, #112]	; 0x70
 80053d8:	4b7d      	ldr	r3, [pc, #500]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	4a7c      	ldr	r2, [pc, #496]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053de:	f023 0304 	bic.w	r3, r3, #4
 80053e2:	6713      	str	r3, [r2, #112]	; 0x70
 80053e4:	4b7a      	ldr	r3, [pc, #488]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	4a79      	ldr	r2, [pc, #484]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80053ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d015      	beq.n	8005424 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fd f98e 	bl	8002718 <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053fe:	e00a      	b.n	8005416 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005400:	f7fd f98a 	bl	8002718 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f241 3288 	movw	r2, #5000	; 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e121      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005416:	4b6e      	ldr	r3, [pc, #440]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0ee      	beq.n	8005400 <HAL_RCC_OscConfig+0x5a0>
 8005422:	e014      	b.n	800544e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fd f978 	bl	8002718 <HAL_GetTick>
 8005428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800542a:	e00a      	b.n	8005442 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542c:	f7fd f974 	bl	8002718 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	; 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e10b      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005442:	4b63      	ldr	r3, [pc, #396]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1ee      	bne.n	800542c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8100 	beq.w	8005658 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005458:	4b5d      	ldr	r3, [pc, #372]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005460:	2b18      	cmp	r3, #24
 8005462:	f000 80bb 	beq.w	80055dc <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	2b02      	cmp	r3, #2
 800546c:	f040 8095 	bne.w	800559a <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005470:	4b57      	ldr	r3, [pc, #348]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a56      	ldr	r2, [pc, #344]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800547a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fd f94c 	bl	8002718 <HAL_GetTick>
 8005480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005484:	f7fd f948 	bl	8002718 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e0e1      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005496:	4b4e      	ldr	r3, [pc, #312]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a2:	4b4b      	ldr	r3, [pc, #300]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80054a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a6:	4b4b      	ldr	r3, [pc, #300]	; (80055d4 <HAL_RCC_OscConfig+0x774>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	430a      	orrs	r2, r1
 80054b6:	4946      	ldr	r1, [pc, #280]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	628b      	str	r3, [r1, #40]	; 0x28
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	3b01      	subs	r3, #1
 80054c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	3b01      	subs	r3, #1
 80054cc:	025b      	lsls	r3, r3, #9
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	3b01      	subs	r3, #1
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e4:	3b01      	subs	r3, #1
 80054e6:	061b      	lsls	r3, r3, #24
 80054e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054ec:	4938      	ldr	r1, [pc, #224]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80054f2:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	4a36      	ldr	r2, [pc, #216]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054fe:	4b34      	ldr	r3, [pc, #208]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005502:	4b35      	ldr	r3, [pc, #212]	; (80055d8 <HAL_RCC_OscConfig+0x778>)
 8005504:	4013      	ands	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800550a:	00d2      	lsls	r2, r2, #3
 800550c:	4930      	ldr	r1, [pc, #192]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800550e:	4313      	orrs	r3, r2
 8005510:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005512:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	f023 020c 	bic.w	r2, r3, #12
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	492c      	ldr	r1, [pc, #176]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005520:	4313      	orrs	r3, r2
 8005522:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005524:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	f023 0202 	bic.w	r2, r3, #2
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	4927      	ldr	r1, [pc, #156]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005532:	4313      	orrs	r3, r2
 8005534:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005536:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	4a25      	ldr	r2, [pc, #148]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005542:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800554e:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	4a1f      	ldr	r2, [pc, #124]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800555a:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005566:	4b1a      	ldr	r3, [pc, #104]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a19      	ldr	r2, [pc, #100]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800556c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005572:	f7fd f8d1 	bl	8002718 <HAL_GetTick>
 8005576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557a:	f7fd f8cd 	bl	8002718 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e066      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800558c:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x71a>
 8005598:	e05e      	b.n	8005658 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559a:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a0c      	ldr	r2, [pc, #48]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80055a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fd f8b7 	bl	8002718 <HAL_GetTick>
 80055aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ae:	f7fd f8b3 	bl	8002718 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e04c      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <HAL_RCC_OscConfig+0x770>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f0      	bne.n	80055ae <HAL_RCC_OscConfig+0x74e>
 80055cc:	e044      	b.n	8005658 <HAL_RCC_OscConfig+0x7f8>
 80055ce:	bf00      	nop
 80055d0:	58024400 	.word	0x58024400
 80055d4:	fffffc0c 	.word	0xfffffc0c
 80055d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055dc:	4b21      	ldr	r3, [pc, #132]	; (8005664 <HAL_RCC_OscConfig+0x804>)
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055e2:	4b20      	ldr	r3, [pc, #128]	; (8005664 <HAL_RCC_OscConfig+0x804>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d031      	beq.n	8005654 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f003 0203 	and.w	r2, r3, #3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d12a      	bne.n	8005654 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d122      	bne.n	8005654 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800561a:	429a      	cmp	r2, r3
 800561c:	d11a      	bne.n	8005654 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	0a5b      	lsrs	r3, r3, #9
 8005622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800562c:	429a      	cmp	r2, r3
 800562e:	d111      	bne.n	8005654 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	0c1b      	lsrs	r3, r3, #16
 8005634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d108      	bne.n	8005654 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	0e1b      	lsrs	r3, r3, #24
 8005646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3730      	adds	r7, #48	; 0x30
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400

08005668 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e19c      	b.n	80059b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800567c:	4b8a      	ldr	r3, [pc, #552]	; (80058a8 <HAL_RCC_ClockConfig+0x240>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d910      	bls.n	80056ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568a:	4b87      	ldr	r3, [pc, #540]	; (80058a8 <HAL_RCC_ClockConfig+0x240>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 020f 	bic.w	r2, r3, #15
 8005692:	4985      	ldr	r1, [pc, #532]	; (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	4313      	orrs	r3, r2
 8005698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b83      	ldr	r3, [pc, #524]	; (80058a8 <HAL_RCC_ClockConfig+0x240>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e184      	b.n	80059b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d010      	beq.n	80056da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	4b7b      	ldr	r3, [pc, #492]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d908      	bls.n	80056da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056c8:	4b78      	ldr	r3, [pc, #480]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	4975      	ldr	r1, [pc, #468]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d010      	beq.n	8005708 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	4b70      	ldr	r3, [pc, #448]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d908      	bls.n	8005708 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056f6:	4b6d      	ldr	r3, [pc, #436]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	496a      	ldr	r1, [pc, #424]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005704:	4313      	orrs	r3, r2
 8005706:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d010      	beq.n	8005736 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	4b64      	ldr	r3, [pc, #400]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005720:	429a      	cmp	r2, r3
 8005722:	d908      	bls.n	8005736 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005724:	4b61      	ldr	r3, [pc, #388]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	495e      	ldr	r1, [pc, #376]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005732:	4313      	orrs	r3, r2
 8005734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d010      	beq.n	8005764 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	4b59      	ldr	r3, [pc, #356]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800574e:	429a      	cmp	r2, r3
 8005750:	d908      	bls.n	8005764 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005752:	4b56      	ldr	r3, [pc, #344]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4953      	ldr	r1, [pc, #332]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005760:	4313      	orrs	r3, r2
 8005762:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d010      	beq.n	8005792 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	4b4d      	ldr	r3, [pc, #308]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	429a      	cmp	r2, r3
 800577e:	d908      	bls.n	8005792 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b4a      	ldr	r3, [pc, #296]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	f023 020f 	bic.w	r2, r3, #15
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4947      	ldr	r1, [pc, #284]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 800578e:	4313      	orrs	r3, r2
 8005790:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d055      	beq.n	800584a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800579e:	4b43      	ldr	r3, [pc, #268]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	4940      	ldr	r1, [pc, #256]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d107      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057b8:	4b3c      	ldr	r3, [pc, #240]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d121      	bne.n	8005808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0f6      	b.n	80059b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d107      	bne.n	80057e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057d0:	4b36      	ldr	r3, [pc, #216]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d115      	bne.n	8005808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0ea      	b.n	80059b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d107      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057e8:	4b30      	ldr	r3, [pc, #192]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0de      	b.n	80059b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057f8:	4b2c      	ldr	r3, [pc, #176]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e0d6      	b.n	80059b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005808:	4b28      	ldr	r3, [pc, #160]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f023 0207 	bic.w	r2, r3, #7
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	4925      	ldr	r1, [pc, #148]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005816:	4313      	orrs	r3, r2
 8005818:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581a:	f7fc ff7d 	bl	8002718 <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005820:	e00a      	b.n	8005838 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005822:	f7fc ff79 	bl	8002718 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005830:	4293      	cmp	r3, r2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e0be      	b.n	80059b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005838:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	429a      	cmp	r2, r3
 8005848:	d1eb      	bne.n	8005822 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d010      	beq.n	8005878 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	4b14      	ldr	r3, [pc, #80]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	429a      	cmp	r2, r3
 8005864:	d208      	bcs.n	8005878 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005866:	4b11      	ldr	r3, [pc, #68]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f023 020f 	bic.w	r2, r3, #15
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	490e      	ldr	r1, [pc, #56]	; (80058ac <HAL_RCC_ClockConfig+0x244>)
 8005874:	4313      	orrs	r3, r2
 8005876:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005878:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <HAL_RCC_ClockConfig+0x240>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d214      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 020f 	bic.w	r2, r3, #15
 800588e:	4906      	ldr	r1, [pc, #24]	; (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	4313      	orrs	r3, r2
 8005894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <HAL_RCC_ClockConfig+0x240>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d005      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e086      	b.n	80059b6 <HAL_RCC_ClockConfig+0x34e>
 80058a8:	52002000 	.word	0x52002000
 80058ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d010      	beq.n	80058de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d208      	bcs.n	80058de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058cc:	4b3c      	ldr	r3, [pc, #240]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	4939      	ldr	r1, [pc, #228]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d010      	beq.n	800590c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695a      	ldr	r2, [r3, #20]
 80058ee:	4b34      	ldr	r3, [pc, #208]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d208      	bcs.n	800590c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058fa:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	492e      	ldr	r1, [pc, #184]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 8005908:	4313      	orrs	r3, r2
 800590a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	d010      	beq.n	800593a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	4b28      	ldr	r3, [pc, #160]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005924:	429a      	cmp	r2, r3
 8005926:	d208      	bcs.n	800593a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005928:	4b25      	ldr	r3, [pc, #148]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	4922      	ldr	r1, [pc, #136]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 8005936:	4313      	orrs	r3, r2
 8005938:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d010      	beq.n	8005968 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69da      	ldr	r2, [r3, #28]
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005952:	429a      	cmp	r2, r3
 8005954:	d208      	bcs.n	8005968 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005956:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	4917      	ldr	r1, [pc, #92]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 8005964:	4313      	orrs	r3, r2
 8005966:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005968:	f000 f834 	bl	80059d4 <HAL_RCC_GetSysClockFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	0a1b      	lsrs	r3, r3, #8
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	4912      	ldr	r1, [pc, #72]	; (80059c4 <HAL_RCC_ClockConfig+0x35c>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
 8005984:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <HAL_RCC_ClockConfig+0x358>)
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	4a0d      	ldr	r2, [pc, #52]	; (80059c4 <HAL_RCC_ClockConfig+0x35c>)
 8005990:	5cd3      	ldrb	r3, [r2, r3]
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <HAL_RCC_ClockConfig+0x360>)
 800599e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059a0:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <HAL_RCC_ClockConfig+0x364>)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <HAL_RCC_ClockConfig+0x368>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fc fe6a 	bl	8002684 <HAL_InitTick>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	58024400 	.word	0x58024400
 80059c4:	0800c944 	.word	0x0800c944
 80059c8:	2400000c 	.word	0x2400000c
 80059cc:	24000008 	.word	0x24000008
 80059d0:	24000010 	.word	0x24000010

080059d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059da:	4bb3      	ldr	r3, [pc, #716]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e2:	2b18      	cmp	r3, #24
 80059e4:	f200 8155 	bhi.w	8005c92 <HAL_RCC_GetSysClockFreq+0x2be>
 80059e8:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a55 	.word	0x08005a55
 80059f4:	08005c93 	.word	0x08005c93
 80059f8:	08005c93 	.word	0x08005c93
 80059fc:	08005c93 	.word	0x08005c93
 8005a00:	08005c93 	.word	0x08005c93
 8005a04:	08005c93 	.word	0x08005c93
 8005a08:	08005c93 	.word	0x08005c93
 8005a0c:	08005c93 	.word	0x08005c93
 8005a10:	08005a7b 	.word	0x08005a7b
 8005a14:	08005c93 	.word	0x08005c93
 8005a18:	08005c93 	.word	0x08005c93
 8005a1c:	08005c93 	.word	0x08005c93
 8005a20:	08005c93 	.word	0x08005c93
 8005a24:	08005c93 	.word	0x08005c93
 8005a28:	08005c93 	.word	0x08005c93
 8005a2c:	08005c93 	.word	0x08005c93
 8005a30:	08005a81 	.word	0x08005a81
 8005a34:	08005c93 	.word	0x08005c93
 8005a38:	08005c93 	.word	0x08005c93
 8005a3c:	08005c93 	.word	0x08005c93
 8005a40:	08005c93 	.word	0x08005c93
 8005a44:	08005c93 	.word	0x08005c93
 8005a48:	08005c93 	.word	0x08005c93
 8005a4c:	08005c93 	.word	0x08005c93
 8005a50:	08005a87 	.word	0x08005a87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a54:	4b94      	ldr	r3, [pc, #592]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d009      	beq.n	8005a74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a60:	4b91      	ldr	r3, [pc, #580]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	08db      	lsrs	r3, r3, #3
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	4a90      	ldr	r2, [pc, #576]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005a72:	e111      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a74:	4b8d      	ldr	r3, [pc, #564]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a76:	61bb      	str	r3, [r7, #24]
    break;
 8005a78:	e10e      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005a7a:	4b8d      	ldr	r3, [pc, #564]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a7c:	61bb      	str	r3, [r7, #24]
    break;
 8005a7e:	e10b      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005a80:	4b8c      	ldr	r3, [pc, #560]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a82:	61bb      	str	r3, [r7, #24]
    break;
 8005a84:	e108      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a86:	4b88      	ldr	r3, [pc, #544]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005a90:	4b85      	ldr	r3, [pc, #532]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a9c:	4b82      	ldr	r3, [pc, #520]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005aa6:	4b80      	ldr	r3, [pc, #512]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	08db      	lsrs	r3, r3, #3
 8005aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80e1 	beq.w	8005c8c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	f000 8083 	beq.w	8005bd8 <HAL_RCC_GetSysClockFreq+0x204>
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	f200 80a1 	bhi.w	8005c1c <HAL_RCC_GetSysClockFreq+0x248>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x114>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d056      	beq.n	8005b94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ae6:	e099      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae8:	4b6f      	ldr	r3, [pc, #444]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d02d      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005af4:	4b6c      	ldr	r3, [pc, #432]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	08db      	lsrs	r3, r3, #3
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	4a6b      	ldr	r2, [pc, #428]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
 8005b04:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	ee07 3a90 	vmov	s15, r3
 8005b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b62      	ldr	r3, [pc, #392]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b32:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005b4e:	e087      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b51      	ldr	r3, [pc, #324]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b76:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b92:	e065      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005cc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba6:	4b40      	ldr	r3, [pc, #256]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bd6:	e043      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005cc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bea:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bfe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c1a:	e021      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005cc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c5e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	0a5b      	lsrs	r3, r3, #9
 8005c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c84:	ee17 3a90 	vmov	r3, s15
 8005c88:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005c8a:	e005      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61bb      	str	r3, [r7, #24]
    break;
 8005c90:	e002      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005c92:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c94:	61bb      	str	r3, [r7, #24]
    break;
 8005c96:	bf00      	nop
  }

  return sysclockfreq;
 8005c98:	69bb      	ldr	r3, [r7, #24]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3724      	adds	r7, #36	; 0x24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	58024400 	.word	0x58024400
 8005cac:	03d09000 	.word	0x03d09000
 8005cb0:	003d0900 	.word	0x003d0900
 8005cb4:	016e3600 	.word	0x016e3600
 8005cb8:	46000000 	.word	0x46000000
 8005cbc:	4c742400 	.word	0x4c742400
 8005cc0:	4a742400 	.word	0x4a742400
 8005cc4:	4bb71b00 	.word	0x4bb71b00

08005cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005cce:	f7ff fe81 	bl	80059d4 <HAL_RCC_GetSysClockFreq>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	490f      	ldr	r1, [pc, #60]	; (8005d1c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ce0:	5ccb      	ldrb	r3, [r1, r3]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cea:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <HAL_RCC_GetHCLKFreq+0x54>)
 8005cf6:	5cd3      	ldrb	r3, [r2, r3]
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d06:	4a07      	ldr	r2, [pc, #28]	; (8005d24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	58024400 	.word	0x58024400
 8005d1c:	0800c944 	.word	0x0800c944
 8005d20:	2400000c 	.word	0x2400000c
 8005d24:	24000008 	.word	0x24000008

08005d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005d2c:	f7ff ffcc 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005d30:	4602      	mov	r2, r0
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	091b      	lsrs	r3, r3, #4
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	4904      	ldr	r1, [pc, #16]	; (8005d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d3e:	5ccb      	ldrb	r3, [r1, r3]
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	58024400 	.word	0x58024400
 8005d50:	0800c944 	.word	0x0800c944

08005d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005d58:	f7ff ffb6 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	4904      	ldr	r1, [pc, #16]	; (8005d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	0800c944 	.word	0x0800c944

08005d80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d88:	2300      	movs	r3, #0
 8005d8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d03f      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005da4:	d02a      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005da6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005daa:	d824      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005dac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db0:	d018      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db6:	d81e      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc0:	d007      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005dc2:	e018      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc4:	4ba6      	ldr	r3, [pc, #664]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	4aa5      	ldr	r2, [pc, #660]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005dd0:	e015      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 ff17 	bl	8007c0c <RCCEx_PLL2_Config>
 8005dde:	4603      	mov	r3, r0
 8005de0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005de2:	e00c      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3324      	adds	r3, #36	; 0x24
 8005de8:	2102      	movs	r1, #2
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 ffc0 	bl	8007d70 <RCCEx_PLL3_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005df4:	e003      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dfa:	e000      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d109      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e04:	4b96      	ldr	r3, [pc, #600]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e10:	4993      	ldr	r1, [pc, #588]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	650b      	str	r3, [r1, #80]	; 0x50
 8005e16:	e001      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d03d      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d826      	bhi.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005e4d 	.word	0x08005e4d
 8005e3c:	08005e5b 	.word	0x08005e5b
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	08005e85 	.word	0x08005e85
 8005e48:	08005e85 	.word	0x08005e85
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e4c:	4b84      	ldr	r3, [pc, #528]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	4a83      	ldr	r2, [pc, #524]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e58:	e015      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 fed3 	bl	8007c0c <RCCEx_PLL2_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e6a:	e00c      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3324      	adds	r3, #36	; 0x24
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 ff7c 	bl	8007d70 <RCCEx_PLL3_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e7c:	e003      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
      break;
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e8c:	4b74      	ldr	r3, [pc, #464]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	f023 0207 	bic.w	r2, r3, #7
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e98:	4971      	ldr	r1, [pc, #452]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e9e:	e001      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d04a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005eb8:	d031      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005eba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ebe:	d82b      	bhi.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec4:	d02d      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eca:	d825      	bhi.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ecc:	2bc0      	cmp	r3, #192	; 0xc0
 8005ece:	d02a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005ed0:	2bc0      	cmp	r3, #192	; 0xc0
 8005ed2:	d821      	bhi.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ed4:	2b80      	cmp	r3, #128	; 0x80
 8005ed6:	d016      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005ed8:	2b80      	cmp	r3, #128	; 0x80
 8005eda:	d81d      	bhi.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005ee0:	2b40      	cmp	r3, #64	; 0x40
 8005ee2:	d007      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005ee4:	e018      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee6:	4b5e      	ldr	r3, [pc, #376]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	4a5d      	ldr	r2, [pc, #372]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005ef2:	e019      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 fe86 	bl	8007c0c <RCCEx_PLL2_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005f04:	e010      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3324      	adds	r3, #36	; 0x24
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 ff2f 	bl	8007d70 <RCCEx_PLL3_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005f16:	e007      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1c:	e004      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005f2e:	4b4c      	ldr	r3, [pc, #304]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f32:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3a:	4949      	ldr	r1, [pc, #292]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	650b      	str	r3, [r1, #80]	; 0x50
 8005f40:	e001      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d04f      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f56:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f5a:	d036      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005f5c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f60:	d830      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f66:	d032      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f6c:	d82a      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005f6e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f72:	d02e      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8005f74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f78:	d824      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7e:	d018      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f84:	d81e      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8e:	d007      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005f90:	e018      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f92:	4b33      	ldr	r3, [pc, #204]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	4a32      	ldr	r2, [pc, #200]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005f9e:	e019      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 fe30 	bl	8007c0c <RCCEx_PLL2_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005fb0:	e010      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3324      	adds	r3, #36	; 0x24
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 fed9 	bl	8007d70 <RCCEx_PLL3_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005fc2:	e007      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc8:	e004      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005fda:	4b21      	ldr	r3, [pc, #132]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fde:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe6:	491e      	ldr	r1, [pc, #120]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	650b      	str	r3, [r1, #80]	; 0x50
 8005fec:	e001      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d034      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006002:	2b30      	cmp	r3, #48	; 0x30
 8006004:	d01c      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006006:	2b30      	cmp	r3, #48	; 0x30
 8006008:	d817      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800600a:	2b20      	cmp	r3, #32
 800600c:	d00c      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800600e:	2b20      	cmp	r3, #32
 8006010:	d813      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d016      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8006016:	2b10      	cmp	r3, #16
 8006018:	d10f      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800601a:	4b11      	ldr	r3, [pc, #68]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	4a10      	ldr	r2, [pc, #64]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006026:	e00e      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3304      	adds	r3, #4
 800602c:	2102      	movs	r1, #2
 800602e:	4618      	mov	r0, r3
 8006030:	f001 fdec 	bl	8007c0c <RCCEx_PLL2_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006038:	e005      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]
      break;
 800603e:	e002      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8006040:	bf00      	nop
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8006044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800604c:	4b04      	ldr	r3, [pc, #16]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800604e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006058:	4901      	ldr	r1, [pc, #4]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800605a:	4313      	orrs	r3, r2
 800605c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800605e:	e003      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8006060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d047      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800607c:	d030      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800607e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006082:	d82a      	bhi.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006084:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006088:	d02c      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800608a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800608e:	d824      	bhi.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006094:	d018      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609a:	d81e      	bhi.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80060a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a4:	d007      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80060a6:	e018      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a8:	4bb0      	ldr	r3, [pc, #704]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	4aaf      	ldr	r2, [pc, #700]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80060b4:	e017      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3304      	adds	r3, #4
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 fda5 	bl	8007c0c <RCCEx_PLL2_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80060c6:	e00e      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3324      	adds	r3, #36	; 0x24
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fe4e 	bl	8007d70 <RCCEx_PLL3_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80060d8:	e005      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]
      break;
 80060de:	e002      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80060e0:	bf00      	nop
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80060e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80060ec:	4b9f      	ldr	r3, [pc, #636]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f8:	499c      	ldr	r1, [pc, #624]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	650b      	str	r3, [r1, #80]	; 0x50
 80060fe:	e001      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d049      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006118:	d02e      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800611a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800611e:	d828      	bhi.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006124:	d02a      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800612a:	d822      	bhi.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800612c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006130:	d026      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006132:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006136:	d81c      	bhi.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613c:	d010      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800613e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006142:	d816      	bhi.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01d      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d111      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3304      	adds	r3, #4
 8006152:	2101      	movs	r1, #1
 8006154:	4618      	mov	r0, r3
 8006156:	f001 fd59 	bl	8007c0c <RCCEx_PLL2_Config>
 800615a:	4603      	mov	r3, r0
 800615c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800615e:	e012      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3324      	adds	r3, #36	; 0x24
 8006164:	2101      	movs	r1, #1
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fe02 	bl	8007d70 <RCCEx_PLL3_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006170:	e009      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
      break;
 8006176:	e006      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006178:	bf00      	nop
 800617a:	e004      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800617c:	bf00      	nop
 800617e:	e002      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006180:	bf00      	nop
 8006182:	e000      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800618c:	4b77      	ldr	r3, [pc, #476]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006198:	4974      	ldr	r1, [pc, #464]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800619a:	4313      	orrs	r3, r2
 800619c:	650b      	str	r3, [r1, #80]	; 0x50
 800619e:	e001      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d053      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061b6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80061ba:	d034      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80061bc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80061c0:	d82e      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80061c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061c6:	d030      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80061c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061cc:	d828      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d2:	d02c      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d822      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80061da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061de:	d028      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80061e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061e4:	d81c      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80061e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ea:	d010      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80061ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061f0:	d816      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01f      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80061f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061fa:	d111      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	2101      	movs	r1, #1
 8006202:	4618      	mov	r0, r3
 8006204:	f001 fd02 	bl	8007c0c <RCCEx_PLL2_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800620c:	e014      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3324      	adds	r3, #36	; 0x24
 8006212:	2101      	movs	r1, #1
 8006214:	4618      	mov	r0, r3
 8006216:	f001 fdab 	bl	8007d70 <RCCEx_PLL3_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800621e:	e00b      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
      break;
 8006224:	e008      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006226:	bf00      	nop
 8006228:	e006      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800622a:	bf00      	nop
 800622c:	e004      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800622e:	bf00      	nop
 8006230:	e002      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800623e:	4b4b      	ldr	r3, [pc, #300]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006242:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800624c:	4947      	ldr	r1, [pc, #284]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800624e:	4313      	orrs	r3, r2
 8006250:	658b      	str	r3, [r1, #88]	; 0x58
 8006252:	e001      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d02f      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800626c:	d00e      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800626e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006272:	d814      	bhi.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d015      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800627c:	d10f      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627e:	4b3b      	ldr	r3, [pc, #236]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	4a3a      	ldr	r2, [pc, #232]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006288:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800628a:	e00c      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3304      	adds	r3, #4
 8006290:	2101      	movs	r1, #1
 8006292:	4618      	mov	r0, r3
 8006294:	f001 fcba 	bl	8007c0c <RCCEx_PLL2_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800629c:	e003      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	75fb      	strb	r3, [r7, #23]
      break;
 80062a2:	e000      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80062a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062ac:	4b2f      	ldr	r3, [pc, #188]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b8:	492c      	ldr	r1, [pc, #176]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	650b      	str	r3, [r1, #80]	; 0x50
 80062be:	e001      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d032      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d81b      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	08006317 	.word	0x08006317
 80062e4:	080062f1 	.word	0x080062f1
 80062e8:	080062ff 	.word	0x080062ff
 80062ec:	08006317 	.word	0x08006317
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f0:	4b1e      	ldr	r3, [pc, #120]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	4a1d      	ldr	r2, [pc, #116]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80062f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80062fc:	e00c      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	2102      	movs	r1, #2
 8006304:	4618      	mov	r0, r3
 8006306:	f001 fc81 	bl	8007c0c <RCCEx_PLL2_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800630e:	e003      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]
      break;
 8006314:	e000      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8006316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006322:	f023 0203 	bic.w	r2, r3, #3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	4910      	ldr	r1, [pc, #64]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800632c:	4313      	orrs	r3, r2
 800632e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006330:	e001      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
 8006334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 808a 	beq.w	8006458 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006344:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800634a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006350:	f7fc f9e2 	bl	8002718 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006356:	e00d      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006358:	f7fc f9de 	bl	8002718 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d906      	bls.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	75fb      	strb	r3, [r7, #23]
        break;
 800636a:	e009      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800636c:	58024400 	.word	0x58024400
 8006370:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006374:	4bba      	ldr	r3, [pc, #744]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0eb      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d166      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006386:	4bb7      	ldr	r3, [pc, #732]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006388:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006390:	4053      	eors	r3, r2
 8006392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006396:	2b00      	cmp	r3, #0
 8006398:	d013      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800639a:	4bb2      	ldr	r3, [pc, #712]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800639c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063a4:	4baf      	ldr	r3, [pc, #700]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a8:	4aae      	ldr	r2, [pc, #696]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063b0:	4bac      	ldr	r3, [pc, #688]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b4:	4aab      	ldr	r2, [pc, #684]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063bc:	4aa9      	ldr	r2, [pc, #676]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063cc:	d115      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ce:	f7fc f9a3 	bl	8002718 <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063d4:	e00b      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d6:	f7fc f99f 	bl	8002718 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d902      	bls.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	75fb      	strb	r3, [r7, #23]
            break;
 80063ec:	e005      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ee:	4b9d      	ldr	r3, [pc, #628]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0ed      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80063fa:	7dfb      	ldrb	r3, [r7, #23]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d126      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800640a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800640e:	d10d      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8006410:	4b94      	ldr	r3, [pc, #592]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800641e:	0919      	lsrs	r1, r3, #4
 8006420:	4b91      	ldr	r3, [pc, #580]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006422:	400b      	ands	r3, r1
 8006424:	498f      	ldr	r1, [pc, #572]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006426:	4313      	orrs	r3, r2
 8006428:	610b      	str	r3, [r1, #16]
 800642a:	e005      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800642c:	4b8d      	ldr	r3, [pc, #564]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	4a8c      	ldr	r2, [pc, #560]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006432:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006436:	6113      	str	r3, [r2, #16]
 8006438:	4b8a      	ldr	r3, [pc, #552]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800643a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006446:	4987      	ldr	r1, [pc, #540]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006448:	4313      	orrs	r3, r2
 800644a:	670b      	str	r3, [r1, #112]	; 0x70
 800644c:	e004      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	75bb      	strb	r3, [r7, #22]
 8006452:	e001      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d07f      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646a:	2b28      	cmp	r3, #40	; 0x28
 800646c:	d866      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006543 	.word	0x08006543
 8006478:	0800653d 	.word	0x0800653d
 800647c:	0800653d 	.word	0x0800653d
 8006480:	0800653d 	.word	0x0800653d
 8006484:	0800653d 	.word	0x0800653d
 8006488:	0800653d 	.word	0x0800653d
 800648c:	0800653d 	.word	0x0800653d
 8006490:	0800653d 	.word	0x0800653d
 8006494:	08006519 	.word	0x08006519
 8006498:	0800653d 	.word	0x0800653d
 800649c:	0800653d 	.word	0x0800653d
 80064a0:	0800653d 	.word	0x0800653d
 80064a4:	0800653d 	.word	0x0800653d
 80064a8:	0800653d 	.word	0x0800653d
 80064ac:	0800653d 	.word	0x0800653d
 80064b0:	0800653d 	.word	0x0800653d
 80064b4:	0800652b 	.word	0x0800652b
 80064b8:	0800653d 	.word	0x0800653d
 80064bc:	0800653d 	.word	0x0800653d
 80064c0:	0800653d 	.word	0x0800653d
 80064c4:	0800653d 	.word	0x0800653d
 80064c8:	0800653d 	.word	0x0800653d
 80064cc:	0800653d 	.word	0x0800653d
 80064d0:	0800653d 	.word	0x0800653d
 80064d4:	08006543 	.word	0x08006543
 80064d8:	0800653d 	.word	0x0800653d
 80064dc:	0800653d 	.word	0x0800653d
 80064e0:	0800653d 	.word	0x0800653d
 80064e4:	0800653d 	.word	0x0800653d
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	0800653d 	.word	0x0800653d
 80064f0:	0800653d 	.word	0x0800653d
 80064f4:	08006543 	.word	0x08006543
 80064f8:	0800653d 	.word	0x0800653d
 80064fc:	0800653d 	.word	0x0800653d
 8006500:	0800653d 	.word	0x0800653d
 8006504:	0800653d 	.word	0x0800653d
 8006508:	0800653d 	.word	0x0800653d
 800650c:	0800653d 	.word	0x0800653d
 8006510:	0800653d 	.word	0x0800653d
 8006514:	08006543 	.word	0x08006543
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3304      	adds	r3, #4
 800651c:	2101      	movs	r1, #1
 800651e:	4618      	mov	r0, r3
 8006520:	f001 fb74 	bl	8007c0c <RCCEx_PLL2_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006528:	e00c      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3324      	adds	r3, #36	; 0x24
 800652e:	2101      	movs	r1, #1
 8006530:	4618      	mov	r0, r3
 8006532:	f001 fc1d 	bl	8007d70 <RCCEx_PLL3_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800653a:	e003      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	75fb      	strb	r3, [r7, #23]
      break;
 8006540:	e000      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8006542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800654a:	4b46      	ldr	r3, [pc, #280]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006558:	4942      	ldr	r1, [pc, #264]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800655a:	4313      	orrs	r3, r2
 800655c:	654b      	str	r3, [r1, #84]	; 0x54
 800655e:	e001      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d038      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006574:	2b05      	cmp	r3, #5
 8006576:	d821      	bhi.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006578:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	080065c3 	.word	0x080065c3
 8006584:	08006599 	.word	0x08006599
 8006588:	080065ab 	.word	0x080065ab
 800658c:	080065c3 	.word	0x080065c3
 8006590:	080065c3 	.word	0x080065c3
 8006594:	080065c3 	.word	0x080065c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3304      	adds	r3, #4
 800659c:	2101      	movs	r1, #1
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 fb34 	bl	8007c0c <RCCEx_PLL2_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80065a8:	e00c      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3324      	adds	r3, #36	; 0x24
 80065ae:	2101      	movs	r1, #1
 80065b0:	4618      	mov	r0, r3
 80065b2:	f001 fbdd 	bl	8007d70 <RCCEx_PLL3_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80065ba:	e003      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	75fb      	strb	r3, [r7, #23]
      break;
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80065c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80065ca:	4b26      	ldr	r3, [pc, #152]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f023 0207 	bic.w	r2, r3, #7
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d6:	4923      	ldr	r1, [pc, #140]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	654b      	str	r3, [r1, #84]	; 0x54
 80065dc:	e001      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d040      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065f4:	2b05      	cmp	r3, #5
 80065f6:	d821      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006643 	.word	0x08006643
 8006604:	08006619 	.word	0x08006619
 8006608:	0800662b 	.word	0x0800662b
 800660c:	08006643 	.word	0x08006643
 8006610:	08006643 	.word	0x08006643
 8006614:	08006643 	.word	0x08006643
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	2101      	movs	r1, #1
 800661e:	4618      	mov	r0, r3
 8006620:	f001 faf4 	bl	8007c0c <RCCEx_PLL2_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006628:	e00c      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3324      	adds	r3, #36	; 0x24
 800662e:	2101      	movs	r1, #1
 8006630:	4618      	mov	r0, r3
 8006632:	f001 fb9d 	bl	8007d70 <RCCEx_PLL3_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800663a:	e003      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	75fb      	strb	r3, [r7, #23]
      break;
 8006640:	e000      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d110      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800664c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664e:	f023 0207 	bic.w	r2, r3, #7
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006658:	4902      	ldr	r1, [pc, #8]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800665a:	4313      	orrs	r3, r2
 800665c:	658b      	str	r3, [r1, #88]	; 0x58
 800665e:	e007      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006660:	58024800 	.word	0x58024800
 8006664:	58024400 	.word	0x58024400
 8006668:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0320 	and.w	r3, r3, #32
 8006678:	2b00      	cmp	r3, #0
 800667a:	d04b      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006686:	d02e      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800668c:	d828      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800668e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006692:	d02a      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006698:	d822      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800669a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800669e:	d026      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80066a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066a4:	d81c      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80066a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066aa:	d010      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80066ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b0:	d816      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d01d      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80066b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ba:	d111      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3304      	adds	r3, #4
 80066c0:	2100      	movs	r1, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 faa2 	bl	8007c0c <RCCEx_PLL2_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80066cc:	e012      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3324      	adds	r3, #36	; 0x24
 80066d2:	2102      	movs	r1, #2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 fb4b 	bl	8007d70 <RCCEx_PLL3_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80066de:	e009      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	75fb      	strb	r3, [r7, #23]
      break;
 80066e4:	e006      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80066e6:	bf00      	nop
 80066e8:	e004      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80066f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10a      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066fa:	4bb3      	ldr	r3, [pc, #716]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006708:	49af      	ldr	r1, [pc, #700]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800670a:	4313      	orrs	r3, r2
 800670c:	654b      	str	r3, [r1, #84]	; 0x54
 800670e:	e001      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d04b      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006726:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800672a:	d02e      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800672c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006730:	d828      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006736:	d02a      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673c:	d822      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800673e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006742:	d026      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006748:	d81c      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800674a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674e:	d010      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006754:	d816      	bhi.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01d      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800675a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675e:	d111      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	2100      	movs	r1, #0
 8006766:	4618      	mov	r0, r3
 8006768:	f001 fa50 	bl	8007c0c <RCCEx_PLL2_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006770:	e012      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3324      	adds	r3, #36	; 0x24
 8006776:	2102      	movs	r1, #2
 8006778:	4618      	mov	r0, r3
 800677a:	f001 faf9 	bl	8007d70 <RCCEx_PLL3_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006782:	e009      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
      break;
 8006788:	e006      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800678a:	bf00      	nop
 800678c:	e004      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800678e:	bf00      	nop
 8006790:	e002      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006792:	bf00      	nop
 8006794:	e000      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800679e:	4b8a      	ldr	r3, [pc, #552]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80067a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067ac:	4986      	ldr	r1, [pc, #536]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	658b      	str	r3, [r1, #88]	; 0x58
 80067b2:	e001      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
 80067b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d04b      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067ce:	d02e      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80067d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067d4:	d828      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80067d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067da:	d02a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80067dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e0:	d822      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80067e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067e6:	d026      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80067e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067ec:	d81c      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80067ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067f2:	d010      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80067f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067f8:	d816      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01d      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80067fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006802:	d111      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f001 f9fe 	bl	8007c0c <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006814:	e012      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3324      	adds	r3, #36	; 0x24
 800681a:	2102      	movs	r1, #2
 800681c:	4618      	mov	r0, r3
 800681e:	f001 faa7 	bl	8007d70 <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006826:	e009      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	75fb      	strb	r3, [r7, #23]
      break;
 800682c:	e006      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800682e:	bf00      	nop
 8006830:	e004      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800683a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10a      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006842:	4b61      	ldr	r3, [pc, #388]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006850:	495d      	ldr	r1, [pc, #372]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006852:	4313      	orrs	r3, r2
 8006854:	658b      	str	r3, [r1, #88]	; 0x58
 8006856:	e001      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	d10a      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3324      	adds	r3, #36	; 0x24
 8006878:	2102      	movs	r1, #2
 800687a:	4618      	mov	r0, r3
 800687c:	f001 fa78 	bl	8007d70 <RCCEx_PLL3_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800688a:	4b4f      	ldr	r3, [pc, #316]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	494b      	ldr	r1, [pc, #300]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800689a:	4313      	orrs	r3, r2
 800689c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01a      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b4:	d10a      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	3324      	adds	r3, #36	; 0x24
 80068ba:	2102      	movs	r1, #2
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 fa57 	bl	8007d70 <RCCEx_PLL3_Config>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068cc:	4b3e      	ldr	r3, [pc, #248]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80068ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068da:	493b      	ldr	r1, [pc, #236]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d034      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f6:	d01d      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80068f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068fc:	d817      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8006902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006906:	d009      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006908:	e011      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3304      	adds	r3, #4
 800690e:	2100      	movs	r1, #0
 8006910:	4618      	mov	r0, r3
 8006912:	f001 f97b 	bl	8007c0c <RCCEx_PLL2_Config>
 8006916:	4603      	mov	r3, r0
 8006918:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800691a:	e00c      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3324      	adds	r3, #36	; 0x24
 8006920:	2102      	movs	r1, #2
 8006922:	4618      	mov	r0, r3
 8006924:	f001 fa24 	bl	8007d70 <RCCEx_PLL3_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800692c:	e003      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	75fb      	strb	r3, [r7, #23]
      break;
 8006932:	e000      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800693c:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006940:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800694a:	491f      	ldr	r1, [pc, #124]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800694c:	4313      	orrs	r3, r2
 800694e:	658b      	str	r3, [r1, #88]	; 0x58
 8006950:	e001      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d036      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006968:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800696c:	d01c      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800696e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006972:	d816      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006978:	d003      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800697a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800697e:	d007      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006980:	e00f      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006982:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	4a10      	ldr	r2, [pc, #64]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800698c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800698e:	e00c      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3324      	adds	r3, #36	; 0x24
 8006994:	2101      	movs	r1, #1
 8006996:	4618      	mov	r0, r3
 8006998:	f001 f9ea 	bl	8007d70 <RCCEx_PLL3_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80069a0:	e003      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
      break;
 80069a6:	e000      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80069a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10d      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80069b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069be:	4902      	ldr	r1, [pc, #8]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	654b      	str	r3, [r1, #84]	; 0x54
 80069c4:	e004      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80069c6:	bf00      	nop
 80069c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d029      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80069e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e8:	d007      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80069ea:	e00f      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ec:	4b69      	ldr	r3, [pc, #420]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	4a68      	ldr	r2, [pc, #416]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80069f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80069f8:	e00b      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3304      	adds	r3, #4
 80069fe:	2102      	movs	r1, #2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f001 f903 	bl	8007c0c <RCCEx_PLL2_Config>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006a0a:	e002      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d109      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a18:	4b5e      	ldr	r3, [pc, #376]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a24:	495b      	ldr	r1, [pc, #364]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a2a:	e001      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3324      	adds	r3, #36	; 0x24
 8006a40:	2102      	movs	r1, #2
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 f994 	bl	8007d70 <RCCEx_PLL3_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d032      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a68:	d017      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8006a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a6e:	d811      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a74:	d013      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8006a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7a:	d80b      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d010      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8006a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a84:	d106      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a86:	4b43      	ldr	r3, [pc, #268]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	4a42      	ldr	r2, [pc, #264]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006a92:	e007      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	75fb      	strb	r3, [r7, #23]
      break;
 8006a98:	e004      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8006a9a:	bf00      	nop
 8006a9c:	e002      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8006a9e:	bf00      	nop
 8006aa0:	e000      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8006aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006aaa:	4b3a      	ldr	r3, [pc, #232]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab8:	4936      	ldr	r1, [pc, #216]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	654b      	str	r3, [r1, #84]	; 0x54
 8006abe:	e001      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ad0:	4b30      	ldr	r3, [pc, #192]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006adc:	492d      	ldr	r1, [pc, #180]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006aee:	4b29      	ldr	r3, [pc, #164]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afa:	4926      	ldr	r1, [pc, #152]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006b0c:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b18:	491e      	ldr	r1, [pc, #120]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b2a:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	4a19      	ldr	r2, [pc, #100]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b34:	6113      	str	r3, [r2, #16]
 8006b36:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b40:	4914      	ldr	r1, [pc, #80]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	da08      	bge.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b4e:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5a:	490e      	ldr	r1, [pc, #56]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d009      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b6c:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7a:	4906      	ldr	r1, [pc, #24]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006b80:	7dbb      	ldrb	r3, [r7, #22]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e000      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	58024400 	.word	0x58024400

08006b98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b090      	sub	sp, #64	; 0x40
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba6:	f040 8089 	bne.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006baa:	4ba8      	ldr	r3, [pc, #672]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d87d      	bhi.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bd5 	.word	0x08006bd5
 8006bc4:	08006bf9 	.word	0x08006bf9
 8006bc8:	08006c1d 	.word	0x08006c1d
 8006bcc:	08006cb1 	.word	0x08006cb1
 8006bd0:	08006c41 	.word	0x08006c41

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bd4:	4b9d      	ldr	r3, [pc, #628]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006be0:	d107      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 febe 	bl	8007968 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bf0:	e3f5      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf6:	e3f2      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bf8:	4b94      	ldr	r3, [pc, #592]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c04:	d107      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c06:	f107 0318 	add.w	r3, r7, #24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fc04 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c14:	e3e3      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c1a:	e3e0      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c1c:	4b8b      	ldr	r3, [pc, #556]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c28:	d107      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c2a:	f107 030c 	add.w	r3, r7, #12
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fd46 	bl	80076c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c38:	e3d1      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c3e:	e3ce      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c40:	4b82      	ldr	r3, [pc, #520]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c4a:	4b80      	ldr	r3, [pc, #512]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d109      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c5c:	4b7b      	ldr	r3, [pc, #492]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	4a7a      	ldr	r2, [pc, #488]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6e:	e01e      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c70:	4b76      	ldr	r3, [pc, #472]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7c:	d106      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c84:	d102      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c86:	4b73      	ldr	r3, [pc, #460]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c8a:	e010      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c8c:	4b6f      	ldr	r3, [pc, #444]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c98:	d106      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca0:	d102      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ca2:	4b6d      	ldr	r3, [pc, #436]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca6:	e002      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006cac:	e397      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006cae:	e396      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006cb0:	4b6a      	ldr	r3, [pc, #424]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cb4:	e393      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cba:	e390      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc2:	f040 8095 	bne.w	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8006cc6:	4b61      	ldr	r3, [pc, #388]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006cce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd6:	d04d      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cde:	f200 8084 	bhi.w	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	2bc0      	cmp	r3, #192	; 0xc0
 8006ce6:	d07d      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2bc0      	cmp	r3, #192	; 0xc0
 8006cec:	d87d      	bhi.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	2b80      	cmp	r3, #128	; 0x80
 8006cf2:	d02d      	beq.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	2b80      	cmp	r3, #128	; 0x80
 8006cf8:	d877      	bhi.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d012      	beq.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006d06:	e070      	b.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d08:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d14:	d107      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fe24 	bl	8007968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d24:	e35b      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d2a:	e358      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d2c:	4b47      	ldr	r3, [pc, #284]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d38:	d107      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d3a:	f107 0318 	add.w	r3, r7, #24
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fb6a 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d48:	e349      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d4e:	e346      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d50:	4b3e      	ldr	r3, [pc, #248]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d5c:	d107      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d5e:	f107 030c 	add.w	r3, r7, #12
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fcac 	bl	80076c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d6c:	e337      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d72:	e334      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d74:	4b35      	ldr	r3, [pc, #212]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d7e:	4b33      	ldr	r3, [pc, #204]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d10c      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d90:	4b2e      	ldr	r3, [pc, #184]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	4a2d      	ldr	r2, [pc, #180]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da2:	e01e      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006da4:	4b29      	ldr	r3, [pc, #164]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db0:	d106      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006db8:	d102      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006dba:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dbe:	e010      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dc0:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dcc:	d106      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd4:	d102      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dda:	e002      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006de0:	e2fd      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006de2:	e2fc      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006de4:	4b1d      	ldr	r3, [pc, #116]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de8:	e2f9      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dee:	e2f6      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df6:	f040 80a7 	bne.w	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006dfa:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfe:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006e02:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e0a:	d05f      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e12:	f200 8096 	bhi.w	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e1c:	f000 808e 	beq.w	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e26:	f200 808c 	bhi.w	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e30:	d03a      	beq.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e38:	f200 8083 	bhi.w	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00e      	beq.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e48:	d01c      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8006e4a:	e07a      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006e4c:	58024400 	.word	0x58024400
 8006e50:	03d09000 	.word	0x03d09000
 8006e54:	003d0900 	.word	0x003d0900
 8006e58:	016e3600 	.word	0x016e3600
 8006e5c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e60:	4ba8      	ldr	r3, [pc, #672]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fd78 	bl	8007968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e7c:	e2af      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e82:	e2ac      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e84:	4b9f      	ldr	r3, [pc, #636]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e90:	d107      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e92:	f107 0318 	add.w	r3, r7, #24
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fabe 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ea0:	e29d      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea6:	e29a      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ea8:	4b96      	ldr	r3, [pc, #600]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb4:	d107      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eb6:	f107 030c 	add.w	r3, r7, #12
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fc00 	bl	80076c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ec4:	e28b      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eca:	e288      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ecc:	4b8d      	ldr	r3, [pc, #564]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ed4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ed6:	4b8b      	ldr	r3, [pc, #556]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d109      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ee8:	4b86      	ldr	r3, [pc, #536]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	08db      	lsrs	r3, r3, #3
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	4a85      	ldr	r2, [pc, #532]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006efa:	e01e      	b.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006efc:	4b81      	ldr	r3, [pc, #516]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f08:	d106      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f10:	d102      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f12:	4b7e      	ldr	r3, [pc, #504]	; (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f16:	e010      	b.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f18:	4b7a      	ldr	r3, [pc, #488]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f24:	d106      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f2c:	d102      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f2e:	4b78      	ldr	r3, [pc, #480]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f32:	e002      	b.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8006f38:	e251      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006f3a:	e250      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f3c:	4b75      	ldr	r3, [pc, #468]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f40:	e24d      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f46:	e24a      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4e:	f040 809c 	bne.w	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006f52:	4b6c      	ldr	r3, [pc, #432]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f56:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006f5a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f62:	d054      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f6a:	f200 808b 	bhi.w	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f74:	f000 8083 	beq.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f7e:	f200 8081 	bhi.w	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f88:	d02f      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f90:	d878      	bhi.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9e:	d012      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8006fa0:	e070      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fa2:	4b58      	ldr	r3, [pc, #352]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fae:	d107      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fcd7 	bl	8007968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fbe:	e20e      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc4:	e20b      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fc6:	4b4f      	ldr	r3, [pc, #316]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fd2:	d107      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd4:	f107 0318 	add.w	r3, r7, #24
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fa1d 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fe2:	e1fc      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fe8:	e1f9      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fea:	4b46      	ldr	r3, [pc, #280]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff6:	d107      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff8:	f107 030c 	add.w	r3, r7, #12
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fb5f 	bl	80076c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007006:	e1ea      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800700c:	e1e7      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800700e:	4b3d      	ldr	r3, [pc, #244]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007016:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007018:	4b3a      	ldr	r3, [pc, #232]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b04      	cmp	r3, #4
 8007022:	d10c      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800702a:	4b36      	ldr	r3, [pc, #216]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	4a34      	ldr	r2, [pc, #208]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007036:	fa22 f303 	lsr.w	r3, r2, r3
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800703c:	e01e      	b.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800703e:	4b31      	ldr	r3, [pc, #196]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800704a:	d106      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 800704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007052:	d102      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007054:	4b2d      	ldr	r3, [pc, #180]	; (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007058:	e010      	b.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800705a:	4b2a      	ldr	r3, [pc, #168]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007066:	d106      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706e:	d102      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007070:	4b27      	ldr	r3, [pc, #156]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007074:	e002      	b.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800707a:	e1b0      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800707c:	e1af      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800707e:	4b25      	ldr	r3, [pc, #148]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007082:	e1ac      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007088:	e1a9      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007090:	d17d      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800709a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a2:	d039      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070aa:	d86d      	bhi.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b8:	d012      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80070ba:	e065      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070bc:	4b11      	ldr	r3, [pc, #68]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070c8:	d107      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ca:	f107 0318 	add.w	r3, r7, #24
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 f9a2 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070d8:	e181      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070de:	e17e      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ec:	d107      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ee:	f107 030c 	add.w	r3, r7, #12
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fae4 	bl	80076c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070fc:	e16f      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007102:	e16c      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007104:	58024400 	.word	0x58024400
 8007108:	03d09000 	.word	0x03d09000
 800710c:	003d0900 	.word	0x003d0900
 8007110:	016e3600 	.word	0x016e3600
 8007114:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007118:	4ba0      	ldr	r3, [pc, #640]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800711a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007120:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007122:	4b9e      	ldr	r3, [pc, #632]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b04      	cmp	r3, #4
 800712c:	d10c      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007130:	2b00      	cmp	r3, #0
 8007132:	d109      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007134:	4b99      	ldr	r3, [pc, #612]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	08db      	lsrs	r3, r3, #3
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	4a98      	ldr	r2, [pc, #608]	; (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007146:	e01e      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007148:	4b94      	ldr	r3, [pc, #592]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007154:	d106      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800715c:	d102      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800715e:	4b91      	ldr	r3, [pc, #580]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007162:	e010      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007164:	4b8d      	ldr	r3, [pc, #564]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007170:	d106      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8007172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007178:	d102      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800717a:	4b8b      	ldr	r3, [pc, #556]	; (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800717e:	e002      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007184:	e12b      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007186:	e12a      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800718c:	e127      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007194:	d133      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007196:	4b81      	ldr	r3, [pc, #516]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ac:	d012      	beq.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80071ae:	e023      	b.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071b0:	4b7a      	ldr	r3, [pc, #488]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071bc:	d107      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fbd0 	bl	8007968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071cc:	e107      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d2:	e104      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071d4:	4b71      	ldr	r3, [pc, #452]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071e0:	d107      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e2:	f107 0318 	add.w	r3, r7, #24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 f916 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071f0:	e0f5      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f6:	e0f2      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071fc:	e0ef      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007204:	f040 8091 	bne.w	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007208:	4b64      	ldr	r3, [pc, #400]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800720a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007210:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007218:	f000 8081 	beq.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007222:	d87f      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800722a:	d06b      	beq.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007232:	d877      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d056      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007242:	d86f      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800724a:	d03b      	beq.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007252:	d867      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725a:	d021      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007262:	d85f      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007270:	d004      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8007272:	e057      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007274:	f000 f8ba 	bl	80073ec <HAL_RCCEx_GetD3PCLK1Freq>
 8007278:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800727a:	e0b0      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800727c:	4b47      	ldr	r3, [pc, #284]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007288:	d107      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800728a:	f107 0318 	add.w	r3, r7, #24
 800728e:	4618      	mov	r0, r3
 8007290:	f000 f8c2 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007298:	e0a1      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800729e:	e09e      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072a0:	4b3e      	ldr	r3, [pc, #248]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ac:	d107      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ae:	f107 030c 	add.w	r3, r7, #12
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fa04 	bl	80076c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072bc:	e08f      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c2:	e08c      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072c4:	4b35      	ldr	r3, [pc, #212]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d109      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072d0:	4b32      	ldr	r3, [pc, #200]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	08db      	lsrs	r3, r3, #3
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	4a31      	ldr	r2, [pc, #196]	; (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072e2:	e07c      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e8:	e079      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072ea:	4b2c      	ldr	r3, [pc, #176]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f6:	d102      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 80072f8:	4b2a      	ldr	r3, [pc, #168]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072fc:	e06f      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007302:	e06c      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007304:	4b25      	ldr	r3, [pc, #148]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007310:	d102      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8007312:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007314:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007316:	e062      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800731c:	e05f      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800731e:	4b23      	ldr	r3, [pc, #140]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8007320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007322:	e05c      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007328:	e059      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007330:	d153      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007332:	4b1a      	ldr	r3, [pc, #104]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007336:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800733a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007342:	d035      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734a:	d843      	bhi.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007358:	d00d      	beq.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800735a:	e03b      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800735c:	4b0f      	ldr	r3, [pc, #60]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007368:	d102      	bne.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 800736a:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800736c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800736e:	e036      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007374:	e033      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007376:	4b09      	ldr	r3, [pc, #36]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800737e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007382:	d107      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007388:	4618      	mov	r0, r3
 800738a:	f000 faed 	bl	8007968 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007392:	e024      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007398:	e021      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800739a:	bf00      	nop
 800739c:	58024400 	.word	0x58024400
 80073a0:	03d09000 	.word	0x03d09000
 80073a4:	003d0900 	.word	0x003d0900
 80073a8:	016e3600 	.word	0x016e3600
 80073ac:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073b0:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073bc:	d107      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073be:	f107 0318 	add.w	r3, r7, #24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 f828 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80073cc:	e007      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073d2:	e004      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073d8:	e001      	b.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80073de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3740      	adds	r7, #64	; 0x40
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	58024400 	.word	0x58024400

080073ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80073f0:	f7fe fc6a 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 80073f4:	4602      	mov	r2, r0
 80073f6:	4b06      	ldr	r3, [pc, #24]	; (8007410 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	091b      	lsrs	r3, r3, #4
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	4904      	ldr	r1, [pc, #16]	; (8007414 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007402:	5ccb      	ldrb	r3, [r1, r3]
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800740c:	4618      	mov	r0, r3
 800740e:	bd80      	pop	{r7, pc}
 8007410:	58024400 	.word	0x58024400
 8007414:	0800c944 	.word	0x0800c944

08007418 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007418:	b480      	push	{r7}
 800741a:	b089      	sub	sp, #36	; 0x24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007420:	4ba1      	ldr	r3, [pc, #644]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800742a:	4b9f      	ldr	r3, [pc, #636]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742e:	0b1b      	lsrs	r3, r3, #12
 8007430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007434:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007436:	4b9c      	ldr	r3, [pc, #624]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	091b      	lsrs	r3, r3, #4
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007442:	4b99      	ldr	r3, [pc, #612]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007446:	08db      	lsrs	r3, r3, #3
 8007448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	fb02 f303 	mul.w	r3, r2, r3
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8111 	beq.w	8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b02      	cmp	r3, #2
 800746a:	f000 8083 	beq.w	8007574 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	2b02      	cmp	r3, #2
 8007472:	f200 80a1 	bhi.w	80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d056      	beq.n	8007530 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007482:	e099      	b.n	80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007484:	4b88      	ldr	r3, [pc, #544]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b00      	cmp	r3, #0
 800748e:	d02d      	beq.n	80074ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007490:	4b85      	ldr	r3, [pc, #532]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	08db      	lsrs	r3, r3, #3
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	4a84      	ldr	r2, [pc, #528]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
 80074a0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ba:	4b7b      	ldr	r3, [pc, #492]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074ea:	e087      	b.n	80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fe:	4b6a      	ldr	r3, [pc, #424]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007512:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800752e:	e065      	b.n	80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800753e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007542:	4b59      	ldr	r3, [pc, #356]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007552:	ed97 6a03 	vldr	s12, [r7, #12]
 8007556:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800755a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007572:	e043      	b.n	80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007586:	4b48      	ldr	r3, [pc, #288]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007596:	ed97 6a03 	vldr	s12, [r7, #12]
 800759a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800759e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075b6:	e021      	b.n	80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ca:	4b37      	ldr	r3, [pc, #220]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075da:	ed97 6a03 	vldr	s12, [r7, #12]
 80075de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80075fc:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	0a5b      	lsrs	r3, r3, #9
 8007602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007616:	edd7 6a07 	vldr	s13, [r7, #28]
 800761a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007622:	ee17 2a90 	vmov	r2, s15
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800762a:	4b1f      	ldr	r3, [pc, #124]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	0c1b      	lsrs	r3, r3, #16
 8007630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007640:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007644:	edd7 6a07 	vldr	s13, [r7, #28]
 8007648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007650:	ee17 2a90 	vmov	r2, s15
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007658:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	0e1b      	lsrs	r3, r3, #24
 800765e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800766e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007672:	edd7 6a07 	vldr	s13, [r7, #28]
 8007676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800767a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767e:	ee17 2a90 	vmov	r2, s15
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007686:	e008      	b.n	800769a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	609a      	str	r2, [r3, #8]
}
 800769a:	bf00      	nop
 800769c:	3724      	adds	r7, #36	; 0x24
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	58024400 	.word	0x58024400
 80076ac:	03d09000 	.word	0x03d09000
 80076b0:	46000000 	.word	0x46000000
 80076b4:	4c742400 	.word	0x4c742400
 80076b8:	4a742400 	.word	0x4a742400
 80076bc:	4bb71b00 	.word	0x4bb71b00

080076c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b089      	sub	sp, #36	; 0x24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076c8:	4ba1      	ldr	r3, [pc, #644]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80076d2:	4b9f      	ldr	r3, [pc, #636]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	0d1b      	lsrs	r3, r3, #20
 80076d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076de:	4b9c      	ldr	r3, [pc, #624]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	0a1b      	lsrs	r3, r3, #8
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80076ea:	4b99      	ldr	r3, [pc, #612]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ee:	08db      	lsrs	r3, r3, #3
 80076f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	fb02 f303 	mul.w	r3, r2, r3
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8111 	beq.w	8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	2b02      	cmp	r3, #2
 8007712:	f000 8083 	beq.w	800781c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b02      	cmp	r3, #2
 800771a:	f200 80a1 	bhi.w	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d056      	beq.n	80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800772a:	e099      	b.n	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800772c:	4b88      	ldr	r3, [pc, #544]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d02d      	beq.n	8007794 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007738:	4b85      	ldr	r3, [pc, #532]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	08db      	lsrs	r3, r3, #3
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	4a84      	ldr	r2, [pc, #528]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007744:	fa22 f303 	lsr.w	r3, r2, r3
 8007748:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007762:	4b7b      	ldr	r3, [pc, #492]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007772:	ed97 6a03 	vldr	s12, [r7, #12]
 8007776:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800777a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007792:	e087      	b.n	80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a6:	4b6a      	ldr	r3, [pc, #424]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077d6:	e065      	b.n	80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ea:	4b59      	ldr	r3, [pc, #356]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800781a:	e043      	b.n	80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007826:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007964 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800782a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782e:	4b48      	ldr	r3, [pc, #288]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007842:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800784a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800785e:	e021      	b.n	80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800786e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007872:	4b37      	ldr	r3, [pc, #220]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007882:	ed97 6a03 	vldr	s12, [r7, #12]
 8007886:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800788a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80078a4:	4b2a      	ldr	r3, [pc, #168]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	0a5b      	lsrs	r3, r3, #9
 80078aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078be:	edd7 6a07 	vldr	s13, [r7, #28]
 80078c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ca:	ee17 2a90 	vmov	r2, s15
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80078d2:	4b1f      	ldr	r3, [pc, #124]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	0c1b      	lsrs	r3, r3, #16
 80078d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f8:	ee17 2a90 	vmov	r2, s15
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007900:	4b13      	ldr	r3, [pc, #76]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	0e1b      	lsrs	r3, r3, #24
 8007906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800791a:	edd7 6a07 	vldr	s13, [r7, #28]
 800791e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007926:	ee17 2a90 	vmov	r2, s15
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800792e:	e008      	b.n	8007942 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	609a      	str	r2, [r3, #8]
}
 8007942:	bf00      	nop
 8007944:	3724      	adds	r7, #36	; 0x24
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	58024400 	.word	0x58024400
 8007954:	03d09000 	.word	0x03d09000
 8007958:	46000000 	.word	0x46000000
 800795c:	4c742400 	.word	0x4c742400
 8007960:	4a742400 	.word	0x4a742400
 8007964:	4bb71b00 	.word	0x4bb71b00

08007968 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007968:	b480      	push	{r7}
 800796a:	b089      	sub	sp, #36	; 0x24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007970:	4ba0      	ldr	r3, [pc, #640]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800797a:	4b9e      	ldr	r3, [pc, #632]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	091b      	lsrs	r3, r3, #4
 8007980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007984:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007986:	4b9b      	ldr	r3, [pc, #620]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007990:	4b98      	ldr	r3, [pc, #608]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007994:	08db      	lsrs	r3, r3, #3
 8007996:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	fb02 f303 	mul.w	r3, r2, r3
 80079a0:	ee07 3a90 	vmov	s15, r3
 80079a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 8111 	beq.w	8007bd6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	f000 8083 	beq.w	8007ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	f200 80a1 	bhi.w	8007b06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d056      	beq.n	8007a7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80079d0:	e099      	b.n	8007b06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d2:	4b88      	ldr	r3, [pc, #544]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d02d      	beq.n	8007a3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079de:	4b85      	ldr	r3, [pc, #532]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	4a83      	ldr	r2, [pc, #524]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	ee07 3a90 	vmov	s15, r3
 8007a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a08:	4b7a      	ldr	r3, [pc, #488]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a10:	ee07 3a90 	vmov	s15, r3
 8007a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a18:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a1c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007bfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a34:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a38:	e087      	b.n	8007b4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	ee07 3a90 	vmov	s15, r3
 8007a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a4c:	4b69      	ldr	r3, [pc, #420]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a60:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007bfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a7c:	e065      	b.n	8007b4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	ee07 3a90 	vmov	s15, r3
 8007a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c04 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a90:	4b58      	ldr	r3, [pc, #352]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007bfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007abc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ac0:	e043      	b.n	8007b4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	ee07 3a90 	vmov	s15, r3
 8007ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007acc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad4:	4b47      	ldr	r3, [pc, #284]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007bfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b04:	e021      	b.n	8007b4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b10:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b18:	4b36      	ldr	r3, [pc, #216]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b20:	ee07 3a90 	vmov	s15, r3
 8007b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b28:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007bfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b48:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007b4a:	4b2a      	ldr	r3, [pc, #168]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4e:	0a5b      	lsrs	r3, r3, #9
 8007b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b54:	ee07 3a90 	vmov	s15, r3
 8007b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b70:	ee17 2a90 	vmov	r2, s15
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007b78:	4b1e      	ldr	r3, [pc, #120]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b9e:	ee17 2a90 	vmov	r2, s15
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007ba6:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007baa:	0e1b      	lsrs	r3, r3, #24
 8007bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bcc:	ee17 2a90 	vmov	r2, s15
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007bd4:	e008      	b.n	8007be8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	609a      	str	r2, [r3, #8]
}
 8007be8:	bf00      	nop
 8007bea:	3724      	adds	r7, #36	; 0x24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	58024400 	.word	0x58024400
 8007bf8:	03d09000 	.word	0x03d09000
 8007bfc:	46000000 	.word	0x46000000
 8007c00:	4c742400 	.word	0x4c742400
 8007c04:	4a742400 	.word	0x4a742400
 8007c08:	4bb71b00 	.word	0x4bb71b00

08007c0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c1a:	4b53      	ldr	r3, [pc, #332]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d101      	bne.n	8007c2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e099      	b.n	8007d5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c2a:	4b4f      	ldr	r3, [pc, #316]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a4e      	ldr	r2, [pc, #312]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c36:	f7fa fd6f 	bl	8002718 <HAL_GetTick>
 8007c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c3c:	e008      	b.n	8007c50 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c3e:	f7fa fd6b 	bl	8002718 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e086      	b.n	8007d5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c50:	4b45      	ldr	r3, [pc, #276]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1f0      	bne.n	8007c3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c5c:	4b42      	ldr	r3, [pc, #264]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	031b      	lsls	r3, r3, #12
 8007c6a:	493f      	ldr	r1, [pc, #252]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	628b      	str	r3, [r1, #40]	; 0x28
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	025b      	lsls	r3, r3, #9
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	431a      	orrs	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	041b      	lsls	r3, r3, #16
 8007c8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	061b      	lsls	r3, r3, #24
 8007c9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ca0:	4931      	ldr	r1, [pc, #196]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ca6:	4b30      	ldr	r3, [pc, #192]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	492d      	ldr	r1, [pc, #180]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cb8:	4b2b      	ldr	r3, [pc, #172]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	f023 0220 	bic.w	r2, r3, #32
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	4928      	ldr	r1, [pc, #160]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cca:	4b27      	ldr	r3, [pc, #156]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	4a26      	ldr	r2, [pc, #152]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	f023 0310 	bic.w	r3, r3, #16
 8007cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cd6:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cda:	4b24      	ldr	r3, [pc, #144]	; (8007d6c <RCCEx_PLL2_Config+0x160>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	69d2      	ldr	r2, [r2, #28]
 8007ce2:	00d2      	lsls	r2, r2, #3
 8007ce4:	4920      	ldr	r1, [pc, #128]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cea:	4b1f      	ldr	r3, [pc, #124]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	4a1e      	ldr	r2, [pc, #120]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cf0:	f043 0310 	orr.w	r3, r3, #16
 8007cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d106      	bne.n	8007d0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	4a19      	ldr	r2, [pc, #100]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d08:	e00f      	b.n	8007d2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d106      	bne.n	8007d1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d10:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	4a14      	ldr	r2, [pc, #80]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d1c:	e005      	b.n	8007d2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d22:	4a11      	ldr	r2, [pc, #68]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d2a:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a0e      	ldr	r2, [pc, #56]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d36:	f7fa fcef 	bl	8002718 <HAL_GetTick>
 8007d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d3c:	e008      	b.n	8007d50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d3e:	f7fa fceb 	bl	8002718 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d901      	bls.n	8007d50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e006      	b.n	8007d5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <RCCEx_PLL2_Config+0x15c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0f0      	beq.n	8007d3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	ffff0007 	.word	0xffff0007

08007d70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d7e:	4b53      	ldr	r3, [pc, #332]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d101      	bne.n	8007d8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e099      	b.n	8007ec2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d8e:	4b4f      	ldr	r3, [pc, #316]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a4e      	ldr	r2, [pc, #312]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9a:	f7fa fcbd 	bl	8002718 <HAL_GetTick>
 8007d9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007da0:	e008      	b.n	8007db4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007da2:	f7fa fcb9 	bl	8002718 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d901      	bls.n	8007db4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e086      	b.n	8007ec2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007db4:	4b45      	ldr	r3, [pc, #276]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1f0      	bne.n	8007da2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007dc0:	4b42      	ldr	r3, [pc, #264]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	051b      	lsls	r3, r3, #20
 8007dce:	493f      	ldr	r1, [pc, #252]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	628b      	str	r3, [r1, #40]	; 0x28
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	025b      	lsls	r3, r3, #9
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	061b      	lsls	r3, r3, #24
 8007e00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e04:	4931      	ldr	r1, [pc, #196]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e0a:	4b30      	ldr	r3, [pc, #192]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	492d      	ldr	r1, [pc, #180]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e1c:	4b2b      	ldr	r3, [pc, #172]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	4928      	ldr	r1, [pc, #160]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e2e:	4b27      	ldr	r3, [pc, #156]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	4a26      	ldr	r2, [pc, #152]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e3a:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3e:	4b24      	ldr	r3, [pc, #144]	; (8007ed0 <RCCEx_PLL3_Config+0x160>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	69d2      	ldr	r2, [r2, #28]
 8007e46:	00d2      	lsls	r2, r2, #3
 8007e48:	4920      	ldr	r1, [pc, #128]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e4e:	4b1f      	ldr	r3, [pc, #124]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	4a1e      	ldr	r2, [pc, #120]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e60:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	4a19      	ldr	r2, [pc, #100]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e6c:	e00f      	b.n	8007e8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d106      	bne.n	8007e82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e74:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	4a14      	ldr	r2, [pc, #80]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e80:	e005      	b.n	8007e8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e82:	4b12      	ldr	r3, [pc, #72]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	4a11      	ldr	r2, [pc, #68]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a0e      	ldr	r2, [pc, #56]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e9a:	f7fa fc3d 	bl	8002718 <HAL_GetTick>
 8007e9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ea0:	e008      	b.n	8007eb4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ea2:	f7fa fc39 	bl	8002718 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d901      	bls.n	8007eb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e006      	b.n	8007ec2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <RCCEx_PLL3_Config+0x15c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0f0      	beq.n	8007ea2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	ffff0007 	.word	0xffff0007

08007ed4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e0f1      	b.n	80080ca <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a78      	ldr	r2, [pc, #480]	; (80080d4 <HAL_SPI_Init+0x200>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <HAL_SPI_Init+0x42>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a77      	ldr	r2, [pc, #476]	; (80080d8 <HAL_SPI_Init+0x204>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00a      	beq.n	8007f16 <HAL_SPI_Init+0x42>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a75      	ldr	r2, [pc, #468]	; (80080dc <HAL_SPI_Init+0x208>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d005      	beq.n	8007f16 <HAL_SPI_Init+0x42>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	2b0f      	cmp	r3, #15
 8007f10:	d901      	bls.n	8007f16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e0d9      	b.n	80080ca <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 f880 	bl	800901c <SPI_GetPacketSize>
 8007f1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a6c      	ldr	r2, [pc, #432]	; (80080d4 <HAL_SPI_Init+0x200>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00c      	beq.n	8007f42 <HAL_SPI_Init+0x6e>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a6a      	ldr	r2, [pc, #424]	; (80080d8 <HAL_SPI_Init+0x204>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d007      	beq.n	8007f42 <HAL_SPI_Init+0x6e>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a69      	ldr	r2, [pc, #420]	; (80080dc <HAL_SPI_Init+0x208>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d002      	beq.n	8007f42 <HAL_SPI_Init+0x6e>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b08      	cmp	r3, #8
 8007f40:	d811      	bhi.n	8007f66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f46:	4a63      	ldr	r2, [pc, #396]	; (80080d4 <HAL_SPI_Init+0x200>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d009      	beq.n	8007f60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a61      	ldr	r2, [pc, #388]	; (80080d8 <HAL_SPI_Init+0x204>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <HAL_SPI_Init+0x8c>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a60      	ldr	r2, [pc, #384]	; (80080dc <HAL_SPI_Init+0x208>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d104      	bne.n	8007f6a <HAL_SPI_Init+0x96>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d901      	bls.n	8007f6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e0af      	b.n	80080ca <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7fa f828 	bl	8001fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0201 	bic.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007fa6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fb0:	d119      	bne.n	8007fe6 <HAL_SPI_Init+0x112>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fba:	d103      	bne.n	8007fc4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d008      	beq.n	8007fd6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10c      	bne.n	8007fe6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fd4:	d107      	bne.n	8007fe6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fe4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69da      	ldr	r2, [r3, #28]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	ea42 0103 	orr.w	r1, r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	431a      	orrs	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	431a      	orrs	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	431a      	orrs	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803a:	431a      	orrs	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	431a      	orrs	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008046:	ea42 0103 	orr.w	r1, r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d113      	bne.n	8008086 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008070:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008084:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0201 	bic.w	r2, r2, #1
 8008094:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40013000 	.word	0x40013000
 80080d8:	40003800 	.word	0x40003800
 80080dc:	40003c00 	.word	0x40003c00

080080e0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	; 0x28
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3320      	adds	r3, #32
 80080f6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_SPI_Transmit+0x2a>
 8008106:	2302      	movs	r3, #2
 8008108:	e1d7      	b.n	80084ba <HAL_SPI_Transmit+0x3da>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008112:	f7fa fb01 	bl	8002718 <HAL_GetTick>
 8008116:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b01      	cmp	r3, #1
 8008122:	d007      	beq.n	8008134 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008124:	2302      	movs	r3, #2
 8008126:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008130:	7efb      	ldrb	r3, [r7, #27]
 8008132:	e1c2      	b.n	80084ba <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <HAL_SPI_Transmit+0x60>
 800813a:	88fb      	ldrh	r3, [r7, #6]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d107      	bne.n	8008150 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800814c:	7efb      	ldrb	r3, [r7, #27]
 800814e:	e1b4      	b.n	80084ba <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2203      	movs	r2, #3
 8008154:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	88fa      	ldrh	r2, [r7, #6]
 800816a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	88fa      	ldrh	r2, [r7, #6]
 8008172:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80081a0:	d107      	bne.n	80081b2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	4b96      	ldr	r3, [pc, #600]	; (8008414 <HAL_SPI_Transmit+0x334>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	88f9      	ldrh	r1, [r7, #6]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	430b      	orrs	r3, r1
 80081c4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f042 0201 	orr.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081de:	d107      	bne.n	80081f0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	2b0f      	cmp	r3, #15
 80081f6:	d947      	bls.n	8008288 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80081f8:	e03f      	b.n	800827a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b02      	cmp	r3, #2
 8008206:	d114      	bne.n	8008232 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6812      	ldr	r2, [r2, #0]
 8008212:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008218:	1d1a      	adds	r2, r3, #4
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008224:	b29b      	uxth	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008230:	e023      	b.n	800827a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008232:	f7fa fa71 	bl	8002718 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	429a      	cmp	r2, r3
 8008240:	d803      	bhi.n	800824a <HAL_SPI_Transmit+0x16a>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d102      	bne.n	8008250 <HAL_SPI_Transmit+0x170>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d114      	bne.n	800827a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 fe15 	bl	8008e80 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008264:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e11f      	b.n	80084ba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1b9      	bne.n	80081fa <HAL_SPI_Transmit+0x11a>
 8008286:	e0f2      	b.n	800846e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	2b07      	cmp	r3, #7
 800828e:	f240 80e7 	bls.w	8008460 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008292:	e05d      	b.n	8008350 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d132      	bne.n	8008308 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d918      	bls.n	80082e0 <HAL_SPI_Transmit+0x200>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d014      	beq.n	80082e0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6812      	ldr	r2, [r2, #0]
 80082c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b02      	subs	r3, #2
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80082de:	e037      	b.n	8008350 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e4:	881a      	ldrh	r2, [r3, #0]
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ee:	1c9a      	adds	r2, r3, #2
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	3b01      	subs	r3, #1
 80082fe:	b29a      	uxth	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008306:	e023      	b.n	8008350 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008308:	f7fa fa06 	bl	8002718 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d803      	bhi.n	8008320 <HAL_SPI_Transmit+0x240>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831e:	d102      	bne.n	8008326 <HAL_SPI_Transmit+0x246>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d114      	bne.n	8008350 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fdaa 	bl	8008e80 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800833a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e0b4      	b.n	80084ba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008356:	b29b      	uxth	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d19b      	bne.n	8008294 <HAL_SPI_Transmit+0x1b4>
 800835c:	e087      	b.n	800846e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	2b02      	cmp	r3, #2
 800836a:	d155      	bne.n	8008418 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b03      	cmp	r3, #3
 8008376:	d918      	bls.n	80083aa <HAL_SPI_Transmit+0x2ca>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837c:	2b40      	cmp	r3, #64	; 0x40
 800837e:	d914      	bls.n	80083aa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008390:	1d1a      	adds	r2, r3, #4
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800839c:	b29b      	uxth	r3, r3
 800839e:	3b04      	subs	r3, #4
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80083a8:	e05a      	b.n	8008460 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d917      	bls.n	80083e6 <HAL_SPI_Transmit+0x306>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d013      	beq.n	80083e6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c2:	881a      	ldrh	r2, [r3, #0]
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083cc:	1c9a      	adds	r2, r3, #2
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b02      	subs	r3, #2
 80083dc:	b29a      	uxth	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80083e4:	e03c      	b.n	8008460 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3320      	adds	r3, #32
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008410:	e026      	b.n	8008460 <HAL_SPI_Transmit+0x380>
 8008412:	bf00      	nop
 8008414:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008418:	f7fa f97e 	bl	8002718 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d803      	bhi.n	8008430 <HAL_SPI_Transmit+0x350>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842e:	d102      	bne.n	8008436 <HAL_SPI_Transmit+0x356>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d114      	bne.n	8008460 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fd22 	bl	8008e80 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800844a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e02c      	b.n	80084ba <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008466:	b29b      	uxth	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	f47f af78 	bne.w	800835e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2200      	movs	r2, #0
 8008476:	2108      	movs	r1, #8
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fda1 	bl	8008fc0 <SPI_WaitOnFlagUntilTimeout>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800848a:	f043 0220 	orr.w	r2, r3, #32
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 fcf3 	bl	8008e80 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e000      	b.n	80084ba <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80084b8:	7efb      	ldrb	r3, [r7, #27]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3720      	adds	r7, #32
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop

080084c4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	; 0x28
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	4613      	mov	r3, r2
 80084d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3330      	adds	r3, #48	; 0x30
 80084de:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084e8:	d112      	bne.n	8008510 <HAL_SPI_Receive+0x4c>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10e      	bne.n	8008510 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2204      	movs	r2, #4
 80084f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80084fa:	88fa      	ldrh	r2, [r7, #6]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	4613      	mov	r3, r2
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f9ce 	bl	80088a8 <HAL_SPI_TransmitReceive>
 800850c:	4603      	mov	r3, r0
 800850e:	e1c7      	b.n	80088a0 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008516:	2b01      	cmp	r3, #1
 8008518:	d101      	bne.n	800851e <HAL_SPI_Receive+0x5a>
 800851a:	2302      	movs	r3, #2
 800851c:	e1c0      	b.n	80088a0 <HAL_SPI_Receive+0x3dc>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008526:	f7fa f8f7 	bl	8002718 <HAL_GetTick>
 800852a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b01      	cmp	r3, #1
 8008536:	d007      	beq.n	8008548 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008538:	2302      	movs	r3, #2
 800853a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008544:	7ffb      	ldrb	r3, [r7, #31]
 8008546:	e1ab      	b.n	80088a0 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <HAL_SPI_Receive+0x90>
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d107      	bne.n	8008564 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008560:	7ffb      	ldrb	r3, [r7, #31]
 8008562:	e19d      	b.n	80088a0 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2204      	movs	r2, #4
 8008568:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	88fa      	ldrh	r2, [r7, #6]
 800857e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	88fa      	ldrh	r2, [r7, #6]
 8008586:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80085b4:	d107      	bne.n	80085c6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b94      	ldr	r3, [pc, #592]	; (8008820 <HAL_SPI_Receive+0x35c>)
 80085ce:	4013      	ands	r3, r2
 80085d0:	88f9      	ldrh	r1, [r7, #6]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	430b      	orrs	r3, r1
 80085d8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0201 	orr.w	r2, r2, #1
 80085e8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085f2:	d107      	bne.n	8008604 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008602:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	2b0f      	cmp	r3, #15
 800860a:	d948      	bls.n	800869e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800860c:	e040      	b.n	8008690 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	695a      	ldr	r2, [r3, #20]
 8008614:	f248 0308 	movw	r3, #32776	; 0x8008
 8008618:	4013      	ands	r3, r2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d014      	beq.n	8008648 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008626:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008628:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800862e:	1d1a      	adds	r2, r3, #4
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800863a:	b29b      	uxth	r3, r3
 800863c:	3b01      	subs	r3, #1
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008646:	e023      	b.n	8008690 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008648:	f7fa f866 	bl	8002718 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d803      	bhi.n	8008660 <HAL_SPI_Receive+0x19c>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d102      	bne.n	8008666 <HAL_SPI_Receive+0x1a2>
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d114      	bne.n	8008690 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fc0a 	bl	8008e80 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800867a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e107      	b.n	80088a0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008696:	b29b      	uxth	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1b8      	bne.n	800860e <HAL_SPI_Receive+0x14a>
 800869c:	e0ed      	b.n	800887a <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2b07      	cmp	r3, #7
 80086a4:	f240 80e2 	bls.w	800886c <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80086a8:	e05b      	b.n	8008762 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d030      	beq.n	800871a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d014      	beq.n	80086f0 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80086d0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	3b02      	subs	r3, #2
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80086ee:	e038      	b.n	8008762 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	8812      	ldrh	r2, [r2, #0]
 80086f8:	b292      	uxth	r2, r2
 80086fa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008700:	1c9a      	adds	r2, r3, #2
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800870c:	b29b      	uxth	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	b29a      	uxth	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008718:	e023      	b.n	8008762 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800871a:	f7f9 fffd 	bl	8002718 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d803      	bhi.n	8008732 <HAL_SPI_Receive+0x26e>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008730:	d102      	bne.n	8008738 <HAL_SPI_Receive+0x274>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d114      	bne.n	8008762 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 fba1 	bl	8008e80 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800874c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e09e      	b.n	80088a0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008768:	b29b      	uxth	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d19d      	bne.n	80086aa <HAL_SPI_Receive+0x1e6>
 800876e:	e084      	b.n	800887a <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d052      	beq.n	8008824 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d014      	beq.n	80087b6 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008794:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008796:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b04      	subs	r3, #4
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80087b4:	e05a      	b.n	800886c <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80087c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087c4:	d914      	bls.n	80087f0 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	8812      	ldrh	r2, [r2, #0]
 80087ce:	b292      	uxth	r2, r2
 80087d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d6:	1c9a      	adds	r2, r3, #2
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	3b02      	subs	r3, #2
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80087ee:	e03d      	b.n	800886c <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087fc:	7812      	ldrb	r2, [r2, #0]
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008812:	b29b      	uxth	r3, r3
 8008814:	3b01      	subs	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800881e:	e025      	b.n	800886c <HAL_SPI_Receive+0x3a8>
 8008820:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008824:	f7f9 ff78 	bl	8002718 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	429a      	cmp	r2, r3
 8008832:	d803      	bhi.n	800883c <HAL_SPI_Receive+0x378>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883a:	d102      	bne.n	8008842 <HAL_SPI_Receive+0x37e>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d114      	bne.n	800886c <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fb1c 	bl	8008e80 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008856:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e019      	b.n	80088a0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	f47f af7b 	bne.w	8008770 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 fb00 	bl	8008e80 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800889e:	7ffb      	ldrb	r3, [r7, #31]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08e      	sub	sp, #56	; 0x38
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3320      	adds	r3, #32
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3330      	adds	r3, #48	; 0x30
 80088ca:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <HAL_SPI_TransmitReceive+0x32>
 80088d6:	2302      	movs	r3, #2
 80088d8:	e2ce      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x5d0>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088e2:	f7f9 ff19 	bl	8002718 <HAL_GetTick>
 80088e6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80088e8:	887b      	ldrh	r3, [r7, #2]
 80088ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80088ec:	887b      	ldrh	r3, [r7, #2]
 80088ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80088f6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80088fe:	7efb      	ldrb	r3, [r7, #27]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d014      	beq.n	800892e <HAL_SPI_TransmitReceive+0x86>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800890a:	d106      	bne.n	800891a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008910:	2b00      	cmp	r3, #0
 8008912:	d102      	bne.n	800891a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008914:	7efb      	ldrb	r3, [r7, #27]
 8008916:	2b04      	cmp	r3, #4
 8008918:	d009      	beq.n	800892e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800891a:	2302      	movs	r3, #2
 800891c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800892c:	e2a4      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_SPI_TransmitReceive+0x98>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <HAL_SPI_TransmitReceive+0x98>
 800893a:	887b      	ldrh	r3, [r7, #2]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d109      	bne.n	8008954 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800894e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008952:	e291      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b04      	cmp	r3, #4
 800895e:	d003      	beq.n	8008968 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2205      	movs	r2, #5
 8008964:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	887a      	ldrh	r2, [r7, #2]
 800897a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	887a      	ldrh	r2, [r7, #2]
 8008982:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	887a      	ldrh	r2, [r7, #2]
 8008990:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	887a      	ldrh	r2, [r7, #2]
 8008998:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	4b9f      	ldr	r3, [pc, #636]	; (8008c2c <HAL_SPI_TransmitReceive+0x384>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	8879      	ldrh	r1, [r7, #2]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	6812      	ldr	r2, [r2, #0]
 80089b8:	430b      	orrs	r3, r1
 80089ba:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089d4:	d107      	bne.n	80089e6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	2b0f      	cmp	r3, #15
 80089ec:	d970      	bls.n	8008ad0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80089ee:	e068      	b.n	8008ac2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d11a      	bne.n	8008a34 <HAL_SPI_TransmitReceive+0x18c>
 80089fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d017      	beq.n	8008a34 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6812      	ldr	r2, [r2, #0]
 8008a0e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a14:	1d1a      	adds	r2, r3, #4
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a32:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	695a      	ldr	r2, [r3, #20]
 8008a3a:	f248 0308 	movw	r3, #32776	; 0x8008
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01a      	beq.n	8008a7a <HAL_SPI_TransmitReceive+0x1d2>
 8008a44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d017      	beq.n	8008a7a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a54:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a5a:	1d1a      	adds	r2, r3, #4
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a78:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a7a:	f7f9 fe4d 	bl	8002718 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d803      	bhi.n	8008a92 <HAL_SPI_TransmitReceive+0x1ea>
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a90:	d102      	bne.n	8008a98 <HAL_SPI_TransmitReceive+0x1f0>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d114      	bne.n	8008ac2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f9f1 	bl	8008e80 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e1da      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ac2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d193      	bne.n	80089f0 <HAL_SPI_TransmitReceive+0x148>
 8008ac8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d190      	bne.n	80089f0 <HAL_SPI_TransmitReceive+0x148>
 8008ace:	e1ac      	b.n	8008e2a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	2b07      	cmp	r3, #7
 8008ad6:	f240 81a0 	bls.w	8008e1a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ada:	e0a9      	b.n	8008c30 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d139      	bne.n	8008b5e <HAL_SPI_TransmitReceive+0x2b6>
 8008aea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d036      	beq.n	8008b5e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008af0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d91c      	bls.n	8008b30 <HAL_SPI_TransmitReceive+0x288>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d018      	beq.n	8008b30 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0e:	1d1a      	adds	r2, r3, #4
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b02      	subs	r3, #2
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008b2e:	e016      	b.n	8008b5e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b34:	881a      	ldrh	r2, [r3, #0]
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3e:	1c9a      	adds	r2, r3, #2
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d03a      	beq.n	8008be2 <HAL_SPI_TransmitReceive+0x33a>
 8008b6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d037      	beq.n	8008be2 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d018      	beq.n	8008bb2 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b8a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b90:	1d1a      	adds	r2, r3, #4
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3b02      	subs	r3, #2
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008bb0:	e017      	b.n	8008be2 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb6:	6a3a      	ldr	r2, [r7, #32]
 8008bb8:	8812      	ldrh	r2, [r2, #0]
 8008bba:	b292      	uxth	r2, r2
 8008bbc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc2:	1c9a      	adds	r2, r3, #2
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008be0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008be2:	f7f9 fd99 	bl	8002718 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d803      	bhi.n	8008bfa <HAL_SPI_TransmitReceive+0x352>
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf8:	d102      	bne.n	8008c00 <HAL_SPI_TransmitReceive+0x358>
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d117      	bne.n	8008c30 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 f93d 	bl	8008e80 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e126      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x5d0>
 8008c2a:	bf00      	nop
 8008c2c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008c30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f47f af52 	bne.w	8008adc <HAL_SPI_TransmitReceive+0x234>
 8008c38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f47f af4e 	bne.w	8008adc <HAL_SPI_TransmitReceive+0x234>
 8008c40:	e0f3      	b.n	8008e2a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	f003 0302 	and.w	r3, r3, #2
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d15a      	bne.n	8008d06 <HAL_SPI_TransmitReceive+0x45e>
 8008c50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d057      	beq.n	8008d06 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008c56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d91c      	bls.n	8008c96 <HAL_SPI_TransmitReceive+0x3ee>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c60:	2b40      	cmp	r3, #64	; 0x40
 8008c62:	d918      	bls.n	8008c96 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6812      	ldr	r2, [r2, #0]
 8008c6e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c74:	1d1a      	adds	r2, r3, #4
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	3b04      	subs	r3, #4
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c92:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c94:	e037      	b.n	8008d06 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008c96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d91b      	bls.n	8008cd4 <HAL_SPI_TransmitReceive+0x42c>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d017      	beq.n	8008cd4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca8:	881a      	ldrh	r2, [r3, #0]
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb2:	1c9a      	adds	r2, r3, #2
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	3b02      	subs	r3, #2
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008cd2:	e018      	b.n	8008d06 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3320      	adds	r3, #32
 8008cde:	7812      	ldrb	r2, [r2, #0]
 8008ce0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d04:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d05e      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x52a>
 8008d14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d05b      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d018      	beq.n	8008d5a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d32:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d38:	1d1a      	adds	r2, r3, #4
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b04      	subs	r3, #4
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008d58:	e03b      	b.n	8008dd2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d68:	d918      	bls.n	8008d9c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d6e:	6a3a      	ldr	r2, [r7, #32]
 8008d70:	8812      	ldrh	r2, [r2, #0]
 8008d72:	b292      	uxth	r2, r2
 8008d74:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d7a:	1c9a      	adds	r2, r3, #2
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	3b02      	subs	r3, #2
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d98:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008d9a:	e01a      	b.n	8008dd2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008da8:	7812      	ldrb	r2, [r2, #0]
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008dd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dd2:	f7f9 fca1 	bl	8002718 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d803      	bhi.n	8008dea <HAL_SPI_TransmitReceive+0x542>
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de8:	d102      	bne.n	8008df0 <HAL_SPI_TransmitReceive+0x548>
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d114      	bne.n	8008e1a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 f845 	bl	8008e80 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e02e      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f47f af10 	bne.w	8008c42 <HAL_SPI_TransmitReceive+0x39a>
 8008e22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f47f af0c 	bne.w	8008c42 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	2200      	movs	r2, #0
 8008e32:	2108      	movs	r1, #8
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f8c3 	bl	8008fc0 <SPI_WaitOnFlagUntilTimeout>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d007      	beq.n	8008e50 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e46:	f043 0220 	orr.w	r2, r3, #32
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 f815 	bl	8008e80 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e001      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8008e74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3730      	adds	r7, #48	; 0x30
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	699a      	ldr	r2, [r3, #24]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0208 	orr.w	r2, r2, #8
 8008e9e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699a      	ldr	r2, [r3, #24]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0210 	orr.w	r2, r2, #16
 8008eae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0201 	bic.w	r2, r2, #1
 8008ebe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6919      	ldr	r1, [r3, #16]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	4b3c      	ldr	r3, [pc, #240]	; (8008fbc <SPI_CloseTransfer+0x13c>)
 8008ecc:	400b      	ands	r3, r1
 8008ece:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008ede:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	d014      	beq.n	8008f16 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00f      	beq.n	8008f16 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008efc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	699a      	ldr	r2, [r3, #24]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f042 0220 	orr.w	r2, r2, #32
 8008f14:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d014      	beq.n	8008f4c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00f      	beq.n	8008f4c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f32:	f043 0204 	orr.w	r2, r3, #4
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f4a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00f      	beq.n	8008f76 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f5c:	f043 0201 	orr.w	r2, r3, #1
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f74:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00f      	beq.n	8008fa0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f86:	f043 0208 	orr.w	r2, r3, #8
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	699a      	ldr	r2, [r3, #24]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f9e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008fb0:	bf00      	nop
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	fffffc90 	.word	0xfffffc90

08008fc0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fd0:	e010      	b.n	8008ff4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fd2:	f7f9 fba1 	bl	8002718 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d803      	bhi.n	8008fea <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe8:	d102      	bne.n	8008ff0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e00f      	b.n	8009014 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	695a      	ldr	r2, [r3, #20]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	429a      	cmp	r2, r3
 8009002:	bf0c      	ite	eq
 8009004:	2301      	moveq	r3, #1
 8009006:	2300      	movne	r3, #0
 8009008:	b2db      	uxtb	r3, r3
 800900a:	461a      	mov	r2, r3
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	429a      	cmp	r2, r3
 8009010:	d0df      	beq.n	8008fd2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	095b      	lsrs	r3, r3, #5
 800902a:	3301      	adds	r3, #1
 800902c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	3301      	adds	r3, #1
 8009034:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	3307      	adds	r3, #7
 800903a:	08db      	lsrs	r3, r3, #3
 800903c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	fb02 f303 	mul.w	r3, r2, r3
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e049      	b.n	80090f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d106      	bne.n	800907e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7f9 f80f 	bl	800209c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2202      	movs	r2, #2
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3304      	adds	r3, #4
 800908e:	4619      	mov	r1, r3
 8009090:	4610      	mov	r0, r2
 8009092:	f000 fd03 	bl	8009a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e049      	b.n	80091a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f841 	bl	80091ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3304      	adds	r3, #4
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	f000 fcac 	bl	8009a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
	...

080091c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d109      	bne.n	80091e8 <HAL_TIM_PWM_Start+0x24>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	bf14      	ite	ne
 80091e0:	2301      	movne	r3, #1
 80091e2:	2300      	moveq	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	e03c      	b.n	8009262 <HAL_TIM_PWM_Start+0x9e>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	d109      	bne.n	8009202 <HAL_TIM_PWM_Start+0x3e>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	bf14      	ite	ne
 80091fa:	2301      	movne	r3, #1
 80091fc:	2300      	moveq	r3, #0
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	e02f      	b.n	8009262 <HAL_TIM_PWM_Start+0x9e>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b08      	cmp	r3, #8
 8009206:	d109      	bne.n	800921c <HAL_TIM_PWM_Start+0x58>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	bf14      	ite	ne
 8009214:	2301      	movne	r3, #1
 8009216:	2300      	moveq	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	e022      	b.n	8009262 <HAL_TIM_PWM_Start+0x9e>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b0c      	cmp	r3, #12
 8009220:	d109      	bne.n	8009236 <HAL_TIM_PWM_Start+0x72>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b01      	cmp	r3, #1
 800922c:	bf14      	ite	ne
 800922e:	2301      	movne	r3, #1
 8009230:	2300      	moveq	r3, #0
 8009232:	b2db      	uxtb	r3, r3
 8009234:	e015      	b.n	8009262 <HAL_TIM_PWM_Start+0x9e>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b10      	cmp	r3, #16
 800923a:	d109      	bne.n	8009250 <HAL_TIM_PWM_Start+0x8c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b01      	cmp	r3, #1
 8009246:	bf14      	ite	ne
 8009248:	2301      	movne	r3, #1
 800924a:	2300      	moveq	r3, #0
 800924c:	b2db      	uxtb	r3, r3
 800924e:	e008      	b.n	8009262 <HAL_TIM_PWM_Start+0x9e>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b01      	cmp	r3, #1
 800925a:	bf14      	ite	ne
 800925c:	2301      	movne	r3, #1
 800925e:	2300      	moveq	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e0a1      	b.n	80093ae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d104      	bne.n	800927a <HAL_TIM_PWM_Start+0xb6>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009278:	e023      	b.n	80092c2 <HAL_TIM_PWM_Start+0xfe>
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b04      	cmp	r3, #4
 800927e:	d104      	bne.n	800928a <HAL_TIM_PWM_Start+0xc6>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009288:	e01b      	b.n	80092c2 <HAL_TIM_PWM_Start+0xfe>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b08      	cmp	r3, #8
 800928e:	d104      	bne.n	800929a <HAL_TIM_PWM_Start+0xd6>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009298:	e013      	b.n	80092c2 <HAL_TIM_PWM_Start+0xfe>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b0c      	cmp	r3, #12
 800929e:	d104      	bne.n	80092aa <HAL_TIM_PWM_Start+0xe6>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092a8:	e00b      	b.n	80092c2 <HAL_TIM_PWM_Start+0xfe>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b10      	cmp	r3, #16
 80092ae:	d104      	bne.n	80092ba <HAL_TIM_PWM_Start+0xf6>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092b8:	e003      	b.n	80092c2 <HAL_TIM_PWM_Start+0xfe>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2202      	movs	r2, #2
 80092be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2201      	movs	r2, #1
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fff4 	bl	800a2b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a38      	ldr	r2, [pc, #224]	; (80093b8 <HAL_TIM_PWM_Start+0x1f4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d013      	beq.n	8009302 <HAL_TIM_PWM_Start+0x13e>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a37      	ldr	r2, [pc, #220]	; (80093bc <HAL_TIM_PWM_Start+0x1f8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00e      	beq.n	8009302 <HAL_TIM_PWM_Start+0x13e>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a35      	ldr	r2, [pc, #212]	; (80093c0 <HAL_TIM_PWM_Start+0x1fc>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d009      	beq.n	8009302 <HAL_TIM_PWM_Start+0x13e>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a34      	ldr	r2, [pc, #208]	; (80093c4 <HAL_TIM_PWM_Start+0x200>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d004      	beq.n	8009302 <HAL_TIM_PWM_Start+0x13e>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a32      	ldr	r2, [pc, #200]	; (80093c8 <HAL_TIM_PWM_Start+0x204>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d101      	bne.n	8009306 <HAL_TIM_PWM_Start+0x142>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <HAL_TIM_PWM_Start+0x144>
 8009306:	2300      	movs	r3, #0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d007      	beq.n	800931c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800931a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a25      	ldr	r2, [pc, #148]	; (80093b8 <HAL_TIM_PWM_Start+0x1f4>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d022      	beq.n	800936c <HAL_TIM_PWM_Start+0x1a8>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800932e:	d01d      	beq.n	800936c <HAL_TIM_PWM_Start+0x1a8>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a25      	ldr	r2, [pc, #148]	; (80093cc <HAL_TIM_PWM_Start+0x208>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d018      	beq.n	800936c <HAL_TIM_PWM_Start+0x1a8>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a24      	ldr	r2, [pc, #144]	; (80093d0 <HAL_TIM_PWM_Start+0x20c>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d013      	beq.n	800936c <HAL_TIM_PWM_Start+0x1a8>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a22      	ldr	r2, [pc, #136]	; (80093d4 <HAL_TIM_PWM_Start+0x210>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d00e      	beq.n	800936c <HAL_TIM_PWM_Start+0x1a8>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1a      	ldr	r2, [pc, #104]	; (80093bc <HAL_TIM_PWM_Start+0x1f8>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d009      	beq.n	800936c <HAL_TIM_PWM_Start+0x1a8>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a1e      	ldr	r2, [pc, #120]	; (80093d8 <HAL_TIM_PWM_Start+0x214>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d004      	beq.n	800936c <HAL_TIM_PWM_Start+0x1a8>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a16      	ldr	r2, [pc, #88]	; (80093c0 <HAL_TIM_PWM_Start+0x1fc>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d115      	bne.n	8009398 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	4b1a      	ldr	r3, [pc, #104]	; (80093dc <HAL_TIM_PWM_Start+0x218>)
 8009374:	4013      	ands	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b06      	cmp	r3, #6
 800937c:	d015      	beq.n	80093aa <HAL_TIM_PWM_Start+0x1e6>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009384:	d011      	beq.n	80093aa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f042 0201 	orr.w	r2, r2, #1
 8009394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009396:	e008      	b.n	80093aa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0201 	orr.w	r2, r2, #1
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	e000      	b.n	80093ac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	40010000 	.word	0x40010000
 80093bc:	40010400 	.word	0x40010400
 80093c0:	40014000 	.word	0x40014000
 80093c4:	40014400 	.word	0x40014400
 80093c8:	40014800 	.word	0x40014800
 80093cc:	40000400 	.word	0x40000400
 80093d0:	40000800 	.word	0x40000800
 80093d4:	40000c00 	.word	0x40000c00
 80093d8:	40001800 	.word	0x40001800
 80093dc:	00010007 	.word	0x00010007

080093e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d122      	bne.n	800943c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b02      	cmp	r3, #2
 8009402:	d11b      	bne.n	800943c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0202 	mvn.w	r2, #2
 800940c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fb1c 	bl	8009a60 <HAL_TIM_IC_CaptureCallback>
 8009428:	e005      	b.n	8009436 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fb0e 	bl	8009a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fb1f 	bl	8009a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0304 	and.w	r3, r3, #4
 8009446:	2b04      	cmp	r3, #4
 8009448:	d122      	bne.n	8009490 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0304 	and.w	r3, r3, #4
 8009454:	2b04      	cmp	r3, #4
 8009456:	d11b      	bne.n	8009490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0204 	mvn.w	r2, #4
 8009460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2202      	movs	r2, #2
 8009466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 faf2 	bl	8009a60 <HAL_TIM_IC_CaptureCallback>
 800947c:	e005      	b.n	800948a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fae4 	bl	8009a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 faf5 	bl	8009a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f003 0308 	and.w	r3, r3, #8
 800949a:	2b08      	cmp	r3, #8
 800949c:	d122      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b08      	cmp	r3, #8
 80094aa:	d11b      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0208 	mvn.w	r2, #8
 80094b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2204      	movs	r2, #4
 80094ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fac8 	bl	8009a60 <HAL_TIM_IC_CaptureCallback>
 80094d0:	e005      	b.n	80094de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 faba 	bl	8009a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 facb 	bl	8009a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	f003 0310 	and.w	r3, r3, #16
 80094ee:	2b10      	cmp	r3, #16
 80094f0:	d122      	bne.n	8009538 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f003 0310 	and.w	r3, r3, #16
 80094fc:	2b10      	cmp	r3, #16
 80094fe:	d11b      	bne.n	8009538 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f06f 0210 	mvn.w	r2, #16
 8009508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2208      	movs	r2, #8
 800950e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa9e 	bl	8009a60 <HAL_TIM_IC_CaptureCallback>
 8009524:	e005      	b.n	8009532 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fa90 	bl	8009a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 faa1 	bl	8009a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10e      	bne.n	8009564 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b01      	cmp	r3, #1
 8009552:	d107      	bne.n	8009564 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0201 	mvn.w	r2, #1
 800955c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fa6a 	bl	8009a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956e:	2b80      	cmp	r3, #128	; 0x80
 8009570:	d10e      	bne.n	8009590 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957c:	2b80      	cmp	r3, #128	; 0x80
 800957e:	d107      	bne.n	8009590 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fff2 	bl	800a574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800959e:	d10e      	bne.n	80095be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095aa:	2b80      	cmp	r3, #128	; 0x80
 80095ac:	d107      	bne.n	80095be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 ffe5 	bl	800a588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c8:	2b40      	cmp	r3, #64	; 0x40
 80095ca:	d10e      	bne.n	80095ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d6:	2b40      	cmp	r3, #64	; 0x40
 80095d8:	d107      	bne.n	80095ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fa4f 	bl	8009a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b20      	cmp	r3, #32
 80095f6:	d10e      	bne.n	8009616 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b20      	cmp	r3, #32
 8009604:	d107      	bne.n	8009616 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f06f 0220 	mvn.w	r2, #32
 800960e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 ffa5 	bl	800a560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009636:	2b01      	cmp	r3, #1
 8009638:	d101      	bne.n	800963e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800963a:	2302      	movs	r3, #2
 800963c:	e0ff      	b.n	800983e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b14      	cmp	r3, #20
 800964a:	f200 80f0 	bhi.w	800982e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800964e:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	080096a9 	.word	0x080096a9
 8009658:	0800982f 	.word	0x0800982f
 800965c:	0800982f 	.word	0x0800982f
 8009660:	0800982f 	.word	0x0800982f
 8009664:	080096e9 	.word	0x080096e9
 8009668:	0800982f 	.word	0x0800982f
 800966c:	0800982f 	.word	0x0800982f
 8009670:	0800982f 	.word	0x0800982f
 8009674:	0800972b 	.word	0x0800972b
 8009678:	0800982f 	.word	0x0800982f
 800967c:	0800982f 	.word	0x0800982f
 8009680:	0800982f 	.word	0x0800982f
 8009684:	0800976b 	.word	0x0800976b
 8009688:	0800982f 	.word	0x0800982f
 800968c:	0800982f 	.word	0x0800982f
 8009690:	0800982f 	.word	0x0800982f
 8009694:	080097ad 	.word	0x080097ad
 8009698:	0800982f 	.word	0x0800982f
 800969c:	0800982f 	.word	0x0800982f
 80096a0:	0800982f 	.word	0x0800982f
 80096a4:	080097ed 	.word	0x080097ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 fa8e 	bl	8009bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699a      	ldr	r2, [r3, #24]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0208 	orr.w	r2, r2, #8
 80096c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	699a      	ldr	r2, [r3, #24]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 0204 	bic.w	r2, r2, #4
 80096d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6999      	ldr	r1, [r3, #24]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	691a      	ldr	r2, [r3, #16]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	619a      	str	r2, [r3, #24]
      break;
 80096e6:	e0a5      	b.n	8009834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68b9      	ldr	r1, [r7, #8]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 fafe 	bl	8009cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	699a      	ldr	r2, [r3, #24]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6999      	ldr	r1, [r3, #24]
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	021a      	lsls	r2, r3, #8
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	430a      	orrs	r2, r1
 8009726:	619a      	str	r2, [r3, #24]
      break;
 8009728:	e084      	b.n	8009834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68b9      	ldr	r1, [r7, #8]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 fb67 	bl	8009e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69da      	ldr	r2, [r3, #28]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f042 0208 	orr.w	r2, r2, #8
 8009744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69da      	ldr	r2, [r3, #28]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0204 	bic.w	r2, r2, #4
 8009754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	69d9      	ldr	r1, [r3, #28]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	691a      	ldr	r2, [r3, #16]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	430a      	orrs	r2, r1
 8009766:	61da      	str	r2, [r3, #28]
      break;
 8009768:	e064      	b.n	8009834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fbcf 	bl	8009f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69da      	ldr	r2, [r3, #28]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69da      	ldr	r2, [r3, #28]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69d9      	ldr	r1, [r3, #28]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	021a      	lsls	r2, r3, #8
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	61da      	str	r2, [r3, #28]
      break;
 80097aa:	e043      	b.n	8009834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68b9      	ldr	r1, [r7, #8]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 fc18 	bl	8009fe8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f042 0208 	orr.w	r2, r2, #8
 80097c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f022 0204 	bic.w	r2, r2, #4
 80097d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	691a      	ldr	r2, [r3, #16]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80097ea:	e023      	b.n	8009834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68b9      	ldr	r1, [r7, #8]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f000 fc5c 	bl	800a0b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009806:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009816:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	021a      	lsls	r2, r3, #8
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800982c:	e002      	b.n	8009834 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	75fb      	strb	r3, [r7, #23]
      break;
 8009832:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800983c:	7dfb      	ldrb	r3, [r7, #23]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop

08009848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800985c:	2b01      	cmp	r3, #1
 800985e:	d101      	bne.n	8009864 <HAL_TIM_ConfigClockSource+0x1c>
 8009860:	2302      	movs	r3, #2
 8009862:	e0dc      	b.n	8009a1e <HAL_TIM_ConfigClockSource+0x1d6>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	4b6a      	ldr	r3, [pc, #424]	; (8009a28 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009880:	4013      	ands	r3, r2
 8009882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800988a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a64      	ldr	r2, [pc, #400]	; (8009a2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800989a:	4293      	cmp	r3, r2
 800989c:	f000 80a9 	beq.w	80099f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80098a0:	4a62      	ldr	r2, [pc, #392]	; (8009a2c <HAL_TIM_ConfigClockSource+0x1e4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	f200 80ae 	bhi.w	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80098a8:	4a61      	ldr	r2, [pc, #388]	; (8009a30 <HAL_TIM_ConfigClockSource+0x1e8>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	f000 80a1 	beq.w	80099f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80098b0:	4a5f      	ldr	r2, [pc, #380]	; (8009a30 <HAL_TIM_ConfigClockSource+0x1e8>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	f200 80a6 	bhi.w	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80098b8:	4a5e      	ldr	r2, [pc, #376]	; (8009a34 <HAL_TIM_ConfigClockSource+0x1ec>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	f000 8099 	beq.w	80099f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80098c0:	4a5c      	ldr	r2, [pc, #368]	; (8009a34 <HAL_TIM_ConfigClockSource+0x1ec>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	f200 809e 	bhi.w	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80098c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80098cc:	f000 8091 	beq.w	80099f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80098d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80098d4:	f200 8096 	bhi.w	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80098d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098dc:	f000 8089 	beq.w	80099f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80098e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098e4:	f200 808e 	bhi.w	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80098e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ec:	d03e      	beq.n	800996c <HAL_TIM_ConfigClockSource+0x124>
 80098ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098f2:	f200 8087 	bhi.w	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098fa:	f000 8086 	beq.w	8009a0a <HAL_TIM_ConfigClockSource+0x1c2>
 80098fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009902:	d87f      	bhi.n	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 8009904:	2b70      	cmp	r3, #112	; 0x70
 8009906:	d01a      	beq.n	800993e <HAL_TIM_ConfigClockSource+0xf6>
 8009908:	2b70      	cmp	r3, #112	; 0x70
 800990a:	d87b      	bhi.n	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 800990c:	2b60      	cmp	r3, #96	; 0x60
 800990e:	d050      	beq.n	80099b2 <HAL_TIM_ConfigClockSource+0x16a>
 8009910:	2b60      	cmp	r3, #96	; 0x60
 8009912:	d877      	bhi.n	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 8009914:	2b50      	cmp	r3, #80	; 0x50
 8009916:	d03c      	beq.n	8009992 <HAL_TIM_ConfigClockSource+0x14a>
 8009918:	2b50      	cmp	r3, #80	; 0x50
 800991a:	d873      	bhi.n	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 800991c:	2b40      	cmp	r3, #64	; 0x40
 800991e:	d058      	beq.n	80099d2 <HAL_TIM_ConfigClockSource+0x18a>
 8009920:	2b40      	cmp	r3, #64	; 0x40
 8009922:	d86f      	bhi.n	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 8009924:	2b30      	cmp	r3, #48	; 0x30
 8009926:	d064      	beq.n	80099f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009928:	2b30      	cmp	r3, #48	; 0x30
 800992a:	d86b      	bhi.n	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 800992c:	2b20      	cmp	r3, #32
 800992e:	d060      	beq.n	80099f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009930:	2b20      	cmp	r3, #32
 8009932:	d867      	bhi.n	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d05c      	beq.n	80099f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009938:	2b10      	cmp	r3, #16
 800993a:	d05a      	beq.n	80099f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800993c:	e062      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	6899      	ldr	r1, [r3, #8]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f000 fc93 	bl	800a278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	609a      	str	r2, [r3, #8]
      break;
 800996a:	e04f      	b.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6818      	ldr	r0, [r3, #0]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	6899      	ldr	r1, [r3, #8]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f000 fc7c 	bl	800a278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689a      	ldr	r2, [r3, #8]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800998e:	609a      	str	r2, [r3, #8]
      break;
 8009990:	e03c      	b.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	6859      	ldr	r1, [r3, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	461a      	mov	r2, r3
 80099a0:	f000 fbec 	bl	800a17c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2150      	movs	r1, #80	; 0x50
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 fc46 	bl	800a23c <TIM_ITRx_SetConfig>
      break;
 80099b0:	e02c      	b.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6818      	ldr	r0, [r3, #0]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	6859      	ldr	r1, [r3, #4]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	461a      	mov	r2, r3
 80099c0:	f000 fc0b 	bl	800a1da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2160      	movs	r1, #96	; 0x60
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fc36 	bl	800a23c <TIM_ITRx_SetConfig>
      break;
 80099d0:	e01c      	b.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	6859      	ldr	r1, [r3, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	461a      	mov	r2, r3
 80099e0:	f000 fbcc 	bl	800a17c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2140      	movs	r1, #64	; 0x40
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 fc26 	bl	800a23c <TIM_ITRx_SetConfig>
      break;
 80099f0:	e00c      	b.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4619      	mov	r1, r3
 80099fc:	4610      	mov	r0, r2
 80099fe:	f000 fc1d 	bl	800a23c <TIM_ITRx_SetConfig>
      break;
 8009a02:	e003      	b.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	73fb      	strb	r3, [r7, #15]
      break;
 8009a08:	e000      	b.n	8009a0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	ffceff88 	.word	0xffceff88
 8009a2c:	00100040 	.word	0x00100040
 8009a30:	00100030 	.word	0x00100030
 8009a34:	00100020 	.word	0x00100020

08009a38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a40      	ldr	r2, [pc, #256]	; (8009bb0 <TIM_Base_SetConfig+0x114>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d013      	beq.n	8009adc <TIM_Base_SetConfig+0x40>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aba:	d00f      	beq.n	8009adc <TIM_Base_SetConfig+0x40>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a3d      	ldr	r2, [pc, #244]	; (8009bb4 <TIM_Base_SetConfig+0x118>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00b      	beq.n	8009adc <TIM_Base_SetConfig+0x40>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a3c      	ldr	r2, [pc, #240]	; (8009bb8 <TIM_Base_SetConfig+0x11c>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d007      	beq.n	8009adc <TIM_Base_SetConfig+0x40>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a3b      	ldr	r2, [pc, #236]	; (8009bbc <TIM_Base_SetConfig+0x120>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d003      	beq.n	8009adc <TIM_Base_SetConfig+0x40>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a3a      	ldr	r2, [pc, #232]	; (8009bc0 <TIM_Base_SetConfig+0x124>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d108      	bne.n	8009aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a2f      	ldr	r2, [pc, #188]	; (8009bb0 <TIM_Base_SetConfig+0x114>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d01f      	beq.n	8009b36 <TIM_Base_SetConfig+0x9a>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009afc:	d01b      	beq.n	8009b36 <TIM_Base_SetConfig+0x9a>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a2c      	ldr	r2, [pc, #176]	; (8009bb4 <TIM_Base_SetConfig+0x118>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d017      	beq.n	8009b36 <TIM_Base_SetConfig+0x9a>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a2b      	ldr	r2, [pc, #172]	; (8009bb8 <TIM_Base_SetConfig+0x11c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d013      	beq.n	8009b36 <TIM_Base_SetConfig+0x9a>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a2a      	ldr	r2, [pc, #168]	; (8009bbc <TIM_Base_SetConfig+0x120>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00f      	beq.n	8009b36 <TIM_Base_SetConfig+0x9a>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a29      	ldr	r2, [pc, #164]	; (8009bc0 <TIM_Base_SetConfig+0x124>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d00b      	beq.n	8009b36 <TIM_Base_SetConfig+0x9a>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a28      	ldr	r2, [pc, #160]	; (8009bc4 <TIM_Base_SetConfig+0x128>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d007      	beq.n	8009b36 <TIM_Base_SetConfig+0x9a>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a27      	ldr	r2, [pc, #156]	; (8009bc8 <TIM_Base_SetConfig+0x12c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d003      	beq.n	8009b36 <TIM_Base_SetConfig+0x9a>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a26      	ldr	r2, [pc, #152]	; (8009bcc <TIM_Base_SetConfig+0x130>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d108      	bne.n	8009b48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	689a      	ldr	r2, [r3, #8]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a10      	ldr	r2, [pc, #64]	; (8009bb0 <TIM_Base_SetConfig+0x114>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d00f      	beq.n	8009b94 <TIM_Base_SetConfig+0xf8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a12      	ldr	r2, [pc, #72]	; (8009bc0 <TIM_Base_SetConfig+0x124>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d00b      	beq.n	8009b94 <TIM_Base_SetConfig+0xf8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a11      	ldr	r2, [pc, #68]	; (8009bc4 <TIM_Base_SetConfig+0x128>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d007      	beq.n	8009b94 <TIM_Base_SetConfig+0xf8>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a10      	ldr	r2, [pc, #64]	; (8009bc8 <TIM_Base_SetConfig+0x12c>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d003      	beq.n	8009b94 <TIM_Base_SetConfig+0xf8>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a0f      	ldr	r2, [pc, #60]	; (8009bcc <TIM_Base_SetConfig+0x130>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d103      	bne.n	8009b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	691a      	ldr	r2, [r3, #16]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	615a      	str	r2, [r3, #20]
}
 8009ba2:	bf00      	nop
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	40010000 	.word	0x40010000
 8009bb4:	40000400 	.word	0x40000400
 8009bb8:	40000800 	.word	0x40000800
 8009bbc:	40000c00 	.word	0x40000c00
 8009bc0:	40010400 	.word	0x40010400
 8009bc4:	40014000 	.word	0x40014000
 8009bc8:	40014400 	.word	0x40014400
 8009bcc:	40014800 	.word	0x40014800

08009bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	f023 0201 	bic.w	r2, r3, #1
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4b37      	ldr	r3, [pc, #220]	; (8009cd8 <TIM_OC1_SetConfig+0x108>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f023 0303 	bic.w	r3, r3, #3
 8009c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f023 0302 	bic.w	r3, r3, #2
 8009c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a2d      	ldr	r2, [pc, #180]	; (8009cdc <TIM_OC1_SetConfig+0x10c>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d00f      	beq.n	8009c4c <TIM_OC1_SetConfig+0x7c>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a2c      	ldr	r2, [pc, #176]	; (8009ce0 <TIM_OC1_SetConfig+0x110>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d00b      	beq.n	8009c4c <TIM_OC1_SetConfig+0x7c>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a2b      	ldr	r2, [pc, #172]	; (8009ce4 <TIM_OC1_SetConfig+0x114>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d007      	beq.n	8009c4c <TIM_OC1_SetConfig+0x7c>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a2a      	ldr	r2, [pc, #168]	; (8009ce8 <TIM_OC1_SetConfig+0x118>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d003      	beq.n	8009c4c <TIM_OC1_SetConfig+0x7c>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a29      	ldr	r2, [pc, #164]	; (8009cec <TIM_OC1_SetConfig+0x11c>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d10c      	bne.n	8009c66 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f023 0308 	bic.w	r3, r3, #8
 8009c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f023 0304 	bic.w	r3, r3, #4
 8009c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a1c      	ldr	r2, [pc, #112]	; (8009cdc <TIM_OC1_SetConfig+0x10c>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d00f      	beq.n	8009c8e <TIM_OC1_SetConfig+0xbe>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a1b      	ldr	r2, [pc, #108]	; (8009ce0 <TIM_OC1_SetConfig+0x110>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d00b      	beq.n	8009c8e <TIM_OC1_SetConfig+0xbe>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a1a      	ldr	r2, [pc, #104]	; (8009ce4 <TIM_OC1_SetConfig+0x114>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d007      	beq.n	8009c8e <TIM_OC1_SetConfig+0xbe>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a19      	ldr	r2, [pc, #100]	; (8009ce8 <TIM_OC1_SetConfig+0x118>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d003      	beq.n	8009c8e <TIM_OC1_SetConfig+0xbe>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a18      	ldr	r2, [pc, #96]	; (8009cec <TIM_OC1_SetConfig+0x11c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d111      	bne.n	8009cb2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	621a      	str	r2, [r3, #32]
}
 8009ccc:	bf00      	nop
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	fffeff8f 	.word	0xfffeff8f
 8009cdc:	40010000 	.word	0x40010000
 8009ce0:	40010400 	.word	0x40010400
 8009ce4:	40014000 	.word	0x40014000
 8009ce8:	40014400 	.word	0x40014400
 8009cec:	40014800 	.word	0x40014800

08009cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	f023 0210 	bic.w	r2, r3, #16
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	4b34      	ldr	r3, [pc, #208]	; (8009dec <TIM_OC2_SetConfig+0xfc>)
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f023 0320 	bic.w	r3, r3, #32
 8009d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	011b      	lsls	r3, r3, #4
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a29      	ldr	r2, [pc, #164]	; (8009df0 <TIM_OC2_SetConfig+0x100>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d003      	beq.n	8009d58 <TIM_OC2_SetConfig+0x68>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a28      	ldr	r2, [pc, #160]	; (8009df4 <TIM_OC2_SetConfig+0x104>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d10d      	bne.n	8009d74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	011b      	lsls	r3, r3, #4
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a1e      	ldr	r2, [pc, #120]	; (8009df0 <TIM_OC2_SetConfig+0x100>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d00f      	beq.n	8009d9c <TIM_OC2_SetConfig+0xac>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a1d      	ldr	r2, [pc, #116]	; (8009df4 <TIM_OC2_SetConfig+0x104>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00b      	beq.n	8009d9c <TIM_OC2_SetConfig+0xac>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a1c      	ldr	r2, [pc, #112]	; (8009df8 <TIM_OC2_SetConfig+0x108>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d007      	beq.n	8009d9c <TIM_OC2_SetConfig+0xac>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a1b      	ldr	r2, [pc, #108]	; (8009dfc <TIM_OC2_SetConfig+0x10c>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d003      	beq.n	8009d9c <TIM_OC2_SetConfig+0xac>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a1a      	ldr	r2, [pc, #104]	; (8009e00 <TIM_OC2_SetConfig+0x110>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d113      	bne.n	8009dc4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	621a      	str	r2, [r3, #32]
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	feff8fff 	.word	0xfeff8fff
 8009df0:	40010000 	.word	0x40010000
 8009df4:	40010400 	.word	0x40010400
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40014400 	.word	0x40014400
 8009e00:	40014800 	.word	0x40014800

08009e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4b33      	ldr	r3, [pc, #204]	; (8009efc <TIM_OC3_SetConfig+0xf8>)
 8009e30:	4013      	ands	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f023 0303 	bic.w	r3, r3, #3
 8009e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	021b      	lsls	r3, r3, #8
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a28      	ldr	r2, [pc, #160]	; (8009f00 <TIM_OC3_SetConfig+0xfc>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d003      	beq.n	8009e6a <TIM_OC3_SetConfig+0x66>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a27      	ldr	r2, [pc, #156]	; (8009f04 <TIM_OC3_SetConfig+0x100>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d10d      	bne.n	8009e86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	021b      	lsls	r3, r3, #8
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a1d      	ldr	r2, [pc, #116]	; (8009f00 <TIM_OC3_SetConfig+0xfc>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00f      	beq.n	8009eae <TIM_OC3_SetConfig+0xaa>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a1c      	ldr	r2, [pc, #112]	; (8009f04 <TIM_OC3_SetConfig+0x100>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d00b      	beq.n	8009eae <TIM_OC3_SetConfig+0xaa>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a1b      	ldr	r2, [pc, #108]	; (8009f08 <TIM_OC3_SetConfig+0x104>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d007      	beq.n	8009eae <TIM_OC3_SetConfig+0xaa>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a1a      	ldr	r2, [pc, #104]	; (8009f0c <TIM_OC3_SetConfig+0x108>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d003      	beq.n	8009eae <TIM_OC3_SetConfig+0xaa>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a19      	ldr	r2, [pc, #100]	; (8009f10 <TIM_OC3_SetConfig+0x10c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d113      	bne.n	8009ed6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	621a      	str	r2, [r3, #32]
}
 8009ef0:	bf00      	nop
 8009ef2:	371c      	adds	r7, #28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	fffeff8f 	.word	0xfffeff8f
 8009f00:	40010000 	.word	0x40010000
 8009f04:	40010400 	.word	0x40010400
 8009f08:	40014000 	.word	0x40014000
 8009f0c:	40014400 	.word	0x40014400
 8009f10:	40014800 	.word	0x40014800

08009f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	69db      	ldr	r3, [r3, #28]
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	4b24      	ldr	r3, [pc, #144]	; (8009fd0 <TIM_OC4_SetConfig+0xbc>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	021b      	lsls	r3, r3, #8
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	031b      	lsls	r3, r3, #12
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a19      	ldr	r2, [pc, #100]	; (8009fd4 <TIM_OC4_SetConfig+0xc0>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d00f      	beq.n	8009f94 <TIM_OC4_SetConfig+0x80>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a18      	ldr	r2, [pc, #96]	; (8009fd8 <TIM_OC4_SetConfig+0xc4>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d00b      	beq.n	8009f94 <TIM_OC4_SetConfig+0x80>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a17      	ldr	r2, [pc, #92]	; (8009fdc <TIM_OC4_SetConfig+0xc8>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d007      	beq.n	8009f94 <TIM_OC4_SetConfig+0x80>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a16      	ldr	r2, [pc, #88]	; (8009fe0 <TIM_OC4_SetConfig+0xcc>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d003      	beq.n	8009f94 <TIM_OC4_SetConfig+0x80>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a15      	ldr	r2, [pc, #84]	; (8009fe4 <TIM_OC4_SetConfig+0xd0>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d109      	bne.n	8009fa8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	019b      	lsls	r3, r3, #6
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	621a      	str	r2, [r3, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	feff8fff 	.word	0xfeff8fff
 8009fd4:	40010000 	.word	0x40010000
 8009fd8:	40010400 	.word	0x40010400
 8009fdc:	40014000 	.word	0x40014000
 8009fe0:	40014400 	.word	0x40014400
 8009fe4:	40014800 	.word	0x40014800

08009fe8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4b21      	ldr	r3, [pc, #132]	; (800a098 <TIM_OC5_SetConfig+0xb0>)
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	4313      	orrs	r3, r2
 800a020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a028:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	041b      	lsls	r3, r3, #16
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	4313      	orrs	r3, r2
 800a034:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a18      	ldr	r2, [pc, #96]	; (800a09c <TIM_OC5_SetConfig+0xb4>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d00f      	beq.n	800a05e <TIM_OC5_SetConfig+0x76>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a17      	ldr	r2, [pc, #92]	; (800a0a0 <TIM_OC5_SetConfig+0xb8>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d00b      	beq.n	800a05e <TIM_OC5_SetConfig+0x76>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a16      	ldr	r2, [pc, #88]	; (800a0a4 <TIM_OC5_SetConfig+0xbc>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d007      	beq.n	800a05e <TIM_OC5_SetConfig+0x76>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a15      	ldr	r2, [pc, #84]	; (800a0a8 <TIM_OC5_SetConfig+0xc0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d003      	beq.n	800a05e <TIM_OC5_SetConfig+0x76>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a14      	ldr	r2, [pc, #80]	; (800a0ac <TIM_OC5_SetConfig+0xc4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d109      	bne.n	800a072 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a064:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	021b      	lsls	r3, r3, #8
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	4313      	orrs	r3, r2
 800a070:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	621a      	str	r2, [r3, #32]
}
 800a08c:	bf00      	nop
 800a08e:	371c      	adds	r7, #28
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	fffeff8f 	.word	0xfffeff8f
 800a09c:	40010000 	.word	0x40010000
 800a0a0:	40010400 	.word	0x40010400
 800a0a4:	40014000 	.word	0x40014000
 800a0a8:	40014400 	.word	0x40014400
 800a0ac:	40014800 	.word	0x40014800

0800a0b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	4b22      	ldr	r3, [pc, #136]	; (800a164 <TIM_OC6_SetConfig+0xb4>)
 800a0dc:	4013      	ands	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	021b      	lsls	r3, r3, #8
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	051b      	lsls	r3, r3, #20
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a19      	ldr	r2, [pc, #100]	; (800a168 <TIM_OC6_SetConfig+0xb8>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d00f      	beq.n	800a128 <TIM_OC6_SetConfig+0x78>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a18      	ldr	r2, [pc, #96]	; (800a16c <TIM_OC6_SetConfig+0xbc>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d00b      	beq.n	800a128 <TIM_OC6_SetConfig+0x78>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a17      	ldr	r2, [pc, #92]	; (800a170 <TIM_OC6_SetConfig+0xc0>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d007      	beq.n	800a128 <TIM_OC6_SetConfig+0x78>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a16      	ldr	r2, [pc, #88]	; (800a174 <TIM_OC6_SetConfig+0xc4>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d003      	beq.n	800a128 <TIM_OC6_SetConfig+0x78>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a15      	ldr	r2, [pc, #84]	; (800a178 <TIM_OC6_SetConfig+0xc8>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d109      	bne.n	800a13c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a12e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	029b      	lsls	r3, r3, #10
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	4313      	orrs	r3, r2
 800a13a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	feff8fff 	.word	0xfeff8fff
 800a168:	40010000 	.word	0x40010000
 800a16c:	40010400 	.word	0x40010400
 800a170:	40014000 	.word	0x40014000
 800a174:	40014400 	.word	0x40014400
 800a178:	40014800 	.word	0x40014800

0800a17c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	f023 0201 	bic.w	r2, r3, #1
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f023 030a 	bic.w	r3, r3, #10
 800a1b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	621a      	str	r2, [r3, #32]
}
 800a1ce:	bf00      	nop
 800a1d0:	371c      	adds	r7, #28
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b087      	sub	sp, #28
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	f023 0210 	bic.w	r2, r3, #16
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	031b      	lsls	r3, r3, #12
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a216:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	011b      	lsls	r3, r3, #4
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	4313      	orrs	r3, r2
 800a220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	621a      	str	r2, [r3, #32]
}
 800a22e:	bf00      	nop
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
	...

0800a23c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	4b09      	ldr	r3, [pc, #36]	; (800a274 <TIM_ITRx_SetConfig+0x38>)
 800a250:	4013      	ands	r3, r2
 800a252:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4313      	orrs	r3, r2
 800a25a:	f043 0307 	orr.w	r3, r3, #7
 800a25e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	609a      	str	r2, [r3, #8]
}
 800a266:	bf00      	nop
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	ffcfff8f 	.word	0xffcfff8f

0800a278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	021a      	lsls	r2, r3, #8
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	431a      	orrs	r2, r3
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	609a      	str	r2, [r3, #8]
}
 800a2ac:	bf00      	nop
 800a2ae:	371c      	adds	r7, #28
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f003 031f 	and.w	r3, r3, #31
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a1a      	ldr	r2, [r3, #32]
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	43db      	mvns	r3, r3
 800a2da:	401a      	ands	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a1a      	ldr	r2, [r3, #32]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f003 031f 	and.w	r3, r3, #31
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	621a      	str	r2, [r3, #32]
}
 800a2f6:	bf00      	nop
 800a2f8:	371c      	adds	r7, #28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
	...

0800a304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a314:	2b01      	cmp	r3, #1
 800a316:	d101      	bne.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a318:	2302      	movs	r3, #2
 800a31a:	e06d      	b.n	800a3f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a30      	ldr	r2, [pc, #192]	; (800a404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d004      	beq.n	800a350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a2f      	ldr	r2, [pc, #188]	; (800a408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d108      	bne.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	4313      	orrs	r3, r2
 800a360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	4313      	orrs	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a20      	ldr	r2, [pc, #128]	; (800a404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d022      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a38e:	d01d      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a1d      	ldr	r2, [pc, #116]	; (800a40c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d018      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a1c      	ldr	r2, [pc, #112]	; (800a410 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d013      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1a      	ldr	r2, [pc, #104]	; (800a414 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d00e      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a15      	ldr	r2, [pc, #84]	; (800a408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d009      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a16      	ldr	r2, [pc, #88]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d004      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a15      	ldr	r2, [pc, #84]	; (800a41c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d10c      	bne.n	800a3e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	40010000 	.word	0x40010000
 800a408:	40010400 	.word	0x40010400
 800a40c:	40000400 	.word	0x40000400
 800a410:	40000800 	.word	0x40000800
 800a414:	40000c00 	.word	0x40000c00
 800a418:	40001800 	.word	0x40001800
 800a41c:	40014000 	.word	0x40014000

0800a420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a434:	2b01      	cmp	r3, #1
 800a436:	d101      	bne.n	800a43c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a438:	2302      	movs	r3, #2
 800a43a:	e087      	b.n	800a54c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	4313      	orrs	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4313      	orrs	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	4313      	orrs	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	4313      	orrs	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	041b      	lsls	r3, r3, #16
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a27      	ldr	r2, [pc, #156]	; (800a558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d004      	beq.n	800a4ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a25      	ldr	r2, [pc, #148]	; (800a55c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d106      	bne.n	800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	69db      	ldr	r3, [r3, #28]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a1e      	ldr	r2, [pc, #120]	; (800a558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d004      	beq.n	800a4ec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a1d      	ldr	r2, [pc, #116]	; (800a55c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d126      	bne.n	800a53a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	051b      	lsls	r3, r3, #20
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	4313      	orrs	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	4313      	orrs	r3, r2
 800a516:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a0e      	ldr	r2, [pc, #56]	; (800a558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d004      	beq.n	800a52c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a0d      	ldr	r2, [pc, #52]	; (800a55c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d106      	bne.n	800a53a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a536:	4313      	orrs	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	40010000 	.word	0x40010000
 800a55c:	40010400 	.word	0x40010400

0800a560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e042      	b.n	800a634 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7f7 fe4b 	bl	800225c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2224      	movs	r2, #36	; 0x24
 800a5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0201 	bic.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f8c2 	bl	800a768 <UART_SetConfig>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d101      	bne.n	800a5ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e022      	b.n	800a634 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 ff14 	bl	800b424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a60a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	689a      	ldr	r2, [r3, #8]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a61a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f042 0201 	orr.w	r2, r2, #1
 800a62a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 ff9b 	bl	800b568 <UART_CheckIdleState>
 800a632:	4603      	mov	r3, r0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08a      	sub	sp, #40	; 0x28
 800a640:	af02      	add	r7, sp, #8
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	4613      	mov	r3, r2
 800a64a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a652:	2b20      	cmp	r3, #32
 800a654:	f040 8083 	bne.w	800a75e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <HAL_UART_Transmit+0x28>
 800a65e:	88fb      	ldrh	r3, [r7, #6]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e07b      	b.n	800a760 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d101      	bne.n	800a676 <HAL_UART_Transmit+0x3a>
 800a672:	2302      	movs	r3, #2
 800a674:	e074      	b.n	800a760 <HAL_UART_Transmit+0x124>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2221      	movs	r2, #33	; 0x21
 800a68a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a68e:	f7f8 f843 	bl	8002718 <HAL_GetTick>
 800a692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	88fa      	ldrh	r2, [r7, #6]
 800a698:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	88fa      	ldrh	r2, [r7, #6]
 800a6a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ac:	d108      	bne.n	800a6c0 <HAL_UART_Transmit+0x84>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d104      	bne.n	800a6c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	61bb      	str	r3, [r7, #24]
 800a6be:	e003      	b.n	800a6c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a6d0:	e02c      	b.n	800a72c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2180      	movs	r1, #128	; 0x80
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 ff8e 	bl	800b5fe <UART_WaitOnFlagUntilTimeout>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e039      	b.n	800a760 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10b      	bne.n	800a70a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a700:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	3302      	adds	r3, #2
 800a706:	61bb      	str	r3, [r7, #24]
 800a708:	e007      	b.n	800a71a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	781a      	ldrb	r2, [r3, #0]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	3301      	adds	r3, #1
 800a718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a720:	b29b      	uxth	r3, r3
 800a722:	3b01      	subs	r3, #1
 800a724:	b29a      	uxth	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a732:	b29b      	uxth	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1cc      	bne.n	800a6d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2200      	movs	r2, #0
 800a740:	2140      	movs	r1, #64	; 0x40
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 ff5b 	bl	800b5fe <UART_WaitOnFlagUntilTimeout>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	e006      	b.n	800a760 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2220      	movs	r2, #32
 800a756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	e000      	b.n	800a760 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a75e:	2302      	movs	r3, #2
  }
}
 800a760:	4618      	mov	r0, r3
 800a762:	3720      	adds	r7, #32
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a768:	b5b0      	push	{r4, r5, r7, lr}
 800a76a:	b08e      	sub	sp, #56	; 0x38
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689a      	ldr	r2, [r3, #8]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	431a      	orrs	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	4bbf      	ldr	r3, [pc, #764]	; (800aa94 <UART_SetConfig+0x32c>)
 800a796:	4013      	ands	r3, r2
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	6812      	ldr	r2, [r2, #0]
 800a79c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68da      	ldr	r2, [r3, #12]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	430a      	orrs	r2, r1
 800a7b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4ab5      	ldr	r2, [pc, #724]	; (800aa98 <UART_SetConfig+0x330>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d004      	beq.n	800a7d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	4bb0      	ldr	r3, [pc, #704]	; (800aa9c <UART_SetConfig+0x334>)
 800a7da:	4013      	ands	r3, r2
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	6812      	ldr	r2, [r2, #0]
 800a7e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7e2:	430b      	orrs	r3, r1
 800a7e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	f023 010f 	bic.w	r1, r3, #15
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4aa7      	ldr	r2, [pc, #668]	; (800aaa0 <UART_SetConfig+0x338>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d176      	bne.n	800a8f4 <UART_SetConfig+0x18c>
 800a806:	4ba7      	ldr	r3, [pc, #668]	; (800aaa4 <UART_SetConfig+0x33c>)
 800a808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a80e:	2b28      	cmp	r3, #40	; 0x28
 800a810:	d86c      	bhi.n	800a8ec <UART_SetConfig+0x184>
 800a812:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <UART_SetConfig+0xb0>)
 800a814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a818:	0800a8bd 	.word	0x0800a8bd
 800a81c:	0800a8ed 	.word	0x0800a8ed
 800a820:	0800a8ed 	.word	0x0800a8ed
 800a824:	0800a8ed 	.word	0x0800a8ed
 800a828:	0800a8ed 	.word	0x0800a8ed
 800a82c:	0800a8ed 	.word	0x0800a8ed
 800a830:	0800a8ed 	.word	0x0800a8ed
 800a834:	0800a8ed 	.word	0x0800a8ed
 800a838:	0800a8c5 	.word	0x0800a8c5
 800a83c:	0800a8ed 	.word	0x0800a8ed
 800a840:	0800a8ed 	.word	0x0800a8ed
 800a844:	0800a8ed 	.word	0x0800a8ed
 800a848:	0800a8ed 	.word	0x0800a8ed
 800a84c:	0800a8ed 	.word	0x0800a8ed
 800a850:	0800a8ed 	.word	0x0800a8ed
 800a854:	0800a8ed 	.word	0x0800a8ed
 800a858:	0800a8cd 	.word	0x0800a8cd
 800a85c:	0800a8ed 	.word	0x0800a8ed
 800a860:	0800a8ed 	.word	0x0800a8ed
 800a864:	0800a8ed 	.word	0x0800a8ed
 800a868:	0800a8ed 	.word	0x0800a8ed
 800a86c:	0800a8ed 	.word	0x0800a8ed
 800a870:	0800a8ed 	.word	0x0800a8ed
 800a874:	0800a8ed 	.word	0x0800a8ed
 800a878:	0800a8d5 	.word	0x0800a8d5
 800a87c:	0800a8ed 	.word	0x0800a8ed
 800a880:	0800a8ed 	.word	0x0800a8ed
 800a884:	0800a8ed 	.word	0x0800a8ed
 800a888:	0800a8ed 	.word	0x0800a8ed
 800a88c:	0800a8ed 	.word	0x0800a8ed
 800a890:	0800a8ed 	.word	0x0800a8ed
 800a894:	0800a8ed 	.word	0x0800a8ed
 800a898:	0800a8dd 	.word	0x0800a8dd
 800a89c:	0800a8ed 	.word	0x0800a8ed
 800a8a0:	0800a8ed 	.word	0x0800a8ed
 800a8a4:	0800a8ed 	.word	0x0800a8ed
 800a8a8:	0800a8ed 	.word	0x0800a8ed
 800a8ac:	0800a8ed 	.word	0x0800a8ed
 800a8b0:	0800a8ed 	.word	0x0800a8ed
 800a8b4:	0800a8ed 	.word	0x0800a8ed
 800a8b8:	0800a8e5 	.word	0x0800a8e5
 800a8bc:	2301      	movs	r3, #1
 800a8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8c2:	e326      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a8c4:	2304      	movs	r3, #4
 800a8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ca:	e322      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8d2:	e31e      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a8d4:	2310      	movs	r3, #16
 800a8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8da:	e31a      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a8dc:	2320      	movs	r3, #32
 800a8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8e2:	e316      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a8e4:	2340      	movs	r3, #64	; 0x40
 800a8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ea:	e312      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a8ec:	2380      	movs	r3, #128	; 0x80
 800a8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8f2:	e30e      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a6b      	ldr	r2, [pc, #428]	; (800aaa8 <UART_SetConfig+0x340>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d130      	bne.n	800a960 <UART_SetConfig+0x1f8>
 800a8fe:	4b69      	ldr	r3, [pc, #420]	; (800aaa4 <UART_SetConfig+0x33c>)
 800a900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	2b05      	cmp	r3, #5
 800a908:	d826      	bhi.n	800a958 <UART_SetConfig+0x1f0>
 800a90a:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <UART_SetConfig+0x1a8>)
 800a90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a910:	0800a929 	.word	0x0800a929
 800a914:	0800a931 	.word	0x0800a931
 800a918:	0800a939 	.word	0x0800a939
 800a91c:	0800a941 	.word	0x0800a941
 800a920:	0800a949 	.word	0x0800a949
 800a924:	0800a951 	.word	0x0800a951
 800a928:	2300      	movs	r3, #0
 800a92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a92e:	e2f0      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a930:	2304      	movs	r3, #4
 800a932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a936:	e2ec      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a938:	2308      	movs	r3, #8
 800a93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a93e:	e2e8      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a940:	2310      	movs	r3, #16
 800a942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a946:	e2e4      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a948:	2320      	movs	r3, #32
 800a94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a94e:	e2e0      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a950:	2340      	movs	r3, #64	; 0x40
 800a952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a956:	e2dc      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a958:	2380      	movs	r3, #128	; 0x80
 800a95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95e:	e2d8      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a51      	ldr	r2, [pc, #324]	; (800aaac <UART_SetConfig+0x344>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d130      	bne.n	800a9cc <UART_SetConfig+0x264>
 800a96a:	4b4e      	ldr	r3, [pc, #312]	; (800aaa4 <UART_SetConfig+0x33c>)
 800a96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a96e:	f003 0307 	and.w	r3, r3, #7
 800a972:	2b05      	cmp	r3, #5
 800a974:	d826      	bhi.n	800a9c4 <UART_SetConfig+0x25c>
 800a976:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <UART_SetConfig+0x214>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a995 	.word	0x0800a995
 800a980:	0800a99d 	.word	0x0800a99d
 800a984:	0800a9a5 	.word	0x0800a9a5
 800a988:	0800a9ad 	.word	0x0800a9ad
 800a98c:	0800a9b5 	.word	0x0800a9b5
 800a990:	0800a9bd 	.word	0x0800a9bd
 800a994:	2300      	movs	r3, #0
 800a996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a99a:	e2ba      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a99c:	2304      	movs	r3, #4
 800a99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9a2:	e2b6      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a9a4:	2308      	movs	r3, #8
 800a9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9aa:	e2b2      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a9ac:	2310      	movs	r3, #16
 800a9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9b2:	e2ae      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a9b4:	2320      	movs	r3, #32
 800a9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ba:	e2aa      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a9bc:	2340      	movs	r3, #64	; 0x40
 800a9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9c2:	e2a6      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a9c4:	2380      	movs	r3, #128	; 0x80
 800a9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ca:	e2a2      	b.n	800af12 <UART_SetConfig+0x7aa>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a37      	ldr	r2, [pc, #220]	; (800aab0 <UART_SetConfig+0x348>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d130      	bne.n	800aa38 <UART_SetConfig+0x2d0>
 800a9d6:	4b33      	ldr	r3, [pc, #204]	; (800aaa4 <UART_SetConfig+0x33c>)
 800a9d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9da:	f003 0307 	and.w	r3, r3, #7
 800a9de:	2b05      	cmp	r3, #5
 800a9e0:	d826      	bhi.n	800aa30 <UART_SetConfig+0x2c8>
 800a9e2:	a201      	add	r2, pc, #4	; (adr r2, 800a9e8 <UART_SetConfig+0x280>)
 800a9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e8:	0800aa01 	.word	0x0800aa01
 800a9ec:	0800aa09 	.word	0x0800aa09
 800a9f0:	0800aa11 	.word	0x0800aa11
 800a9f4:	0800aa19 	.word	0x0800aa19
 800a9f8:	0800aa21 	.word	0x0800aa21
 800a9fc:	0800aa29 	.word	0x0800aa29
 800aa00:	2300      	movs	r3, #0
 800aa02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa06:	e284      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa08:	2304      	movs	r3, #4
 800aa0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa0e:	e280      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa10:	2308      	movs	r3, #8
 800aa12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa16:	e27c      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa18:	2310      	movs	r3, #16
 800aa1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa1e:	e278      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa20:	2320      	movs	r3, #32
 800aa22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa26:	e274      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa28:	2340      	movs	r3, #64	; 0x40
 800aa2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2e:	e270      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa30:	2380      	movs	r3, #128	; 0x80
 800aa32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa36:	e26c      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1d      	ldr	r2, [pc, #116]	; (800aab4 <UART_SetConfig+0x34c>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d142      	bne.n	800aac8 <UART_SetConfig+0x360>
 800aa42:	4b18      	ldr	r3, [pc, #96]	; (800aaa4 <UART_SetConfig+0x33c>)
 800aa44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	2b05      	cmp	r3, #5
 800aa4c:	d838      	bhi.n	800aac0 <UART_SetConfig+0x358>
 800aa4e:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <UART_SetConfig+0x2ec>)
 800aa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa54:	0800aa6d 	.word	0x0800aa6d
 800aa58:	0800aa75 	.word	0x0800aa75
 800aa5c:	0800aa7d 	.word	0x0800aa7d
 800aa60:	0800aa85 	.word	0x0800aa85
 800aa64:	0800aa8d 	.word	0x0800aa8d
 800aa68:	0800aab9 	.word	0x0800aab9
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa72:	e24e      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa74:	2304      	movs	r3, #4
 800aa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa7a:	e24a      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa7c:	2308      	movs	r3, #8
 800aa7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa82:	e246      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa84:	2310      	movs	r3, #16
 800aa86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa8a:	e242      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa8c:	2320      	movs	r3, #32
 800aa8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa92:	e23e      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aa94:	cfff69f3 	.word	0xcfff69f3
 800aa98:	58000c00 	.word	0x58000c00
 800aa9c:	11fff4ff 	.word	0x11fff4ff
 800aaa0:	40011000 	.word	0x40011000
 800aaa4:	58024400 	.word	0x58024400
 800aaa8:	40004400 	.word	0x40004400
 800aaac:	40004800 	.word	0x40004800
 800aab0:	40004c00 	.word	0x40004c00
 800aab4:	40005000 	.word	0x40005000
 800aab8:	2340      	movs	r3, #64	; 0x40
 800aaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aabe:	e228      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aac0:	2380      	movs	r3, #128	; 0x80
 800aac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aac6:	e224      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4ab1      	ldr	r2, [pc, #708]	; (800ad94 <UART_SetConfig+0x62c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d176      	bne.n	800abc0 <UART_SetConfig+0x458>
 800aad2:	4bb1      	ldr	r3, [pc, #708]	; (800ad98 <UART_SetConfig+0x630>)
 800aad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aada:	2b28      	cmp	r3, #40	; 0x28
 800aadc:	d86c      	bhi.n	800abb8 <UART_SetConfig+0x450>
 800aade:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <UART_SetConfig+0x37c>)
 800aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae4:	0800ab89 	.word	0x0800ab89
 800aae8:	0800abb9 	.word	0x0800abb9
 800aaec:	0800abb9 	.word	0x0800abb9
 800aaf0:	0800abb9 	.word	0x0800abb9
 800aaf4:	0800abb9 	.word	0x0800abb9
 800aaf8:	0800abb9 	.word	0x0800abb9
 800aafc:	0800abb9 	.word	0x0800abb9
 800ab00:	0800abb9 	.word	0x0800abb9
 800ab04:	0800ab91 	.word	0x0800ab91
 800ab08:	0800abb9 	.word	0x0800abb9
 800ab0c:	0800abb9 	.word	0x0800abb9
 800ab10:	0800abb9 	.word	0x0800abb9
 800ab14:	0800abb9 	.word	0x0800abb9
 800ab18:	0800abb9 	.word	0x0800abb9
 800ab1c:	0800abb9 	.word	0x0800abb9
 800ab20:	0800abb9 	.word	0x0800abb9
 800ab24:	0800ab99 	.word	0x0800ab99
 800ab28:	0800abb9 	.word	0x0800abb9
 800ab2c:	0800abb9 	.word	0x0800abb9
 800ab30:	0800abb9 	.word	0x0800abb9
 800ab34:	0800abb9 	.word	0x0800abb9
 800ab38:	0800abb9 	.word	0x0800abb9
 800ab3c:	0800abb9 	.word	0x0800abb9
 800ab40:	0800abb9 	.word	0x0800abb9
 800ab44:	0800aba1 	.word	0x0800aba1
 800ab48:	0800abb9 	.word	0x0800abb9
 800ab4c:	0800abb9 	.word	0x0800abb9
 800ab50:	0800abb9 	.word	0x0800abb9
 800ab54:	0800abb9 	.word	0x0800abb9
 800ab58:	0800abb9 	.word	0x0800abb9
 800ab5c:	0800abb9 	.word	0x0800abb9
 800ab60:	0800abb9 	.word	0x0800abb9
 800ab64:	0800aba9 	.word	0x0800aba9
 800ab68:	0800abb9 	.word	0x0800abb9
 800ab6c:	0800abb9 	.word	0x0800abb9
 800ab70:	0800abb9 	.word	0x0800abb9
 800ab74:	0800abb9 	.word	0x0800abb9
 800ab78:	0800abb9 	.word	0x0800abb9
 800ab7c:	0800abb9 	.word	0x0800abb9
 800ab80:	0800abb9 	.word	0x0800abb9
 800ab84:	0800abb1 	.word	0x0800abb1
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab8e:	e1c0      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ab90:	2304      	movs	r3, #4
 800ab92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab96:	e1bc      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ab98:	2308      	movs	r3, #8
 800ab9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab9e:	e1b8      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aba0:	2310      	movs	r3, #16
 800aba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aba6:	e1b4      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aba8:	2320      	movs	r3, #32
 800abaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abae:	e1b0      	b.n	800af12 <UART_SetConfig+0x7aa>
 800abb0:	2340      	movs	r3, #64	; 0x40
 800abb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb6:	e1ac      	b.n	800af12 <UART_SetConfig+0x7aa>
 800abb8:	2380      	movs	r3, #128	; 0x80
 800abba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abbe:	e1a8      	b.n	800af12 <UART_SetConfig+0x7aa>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a75      	ldr	r2, [pc, #468]	; (800ad9c <UART_SetConfig+0x634>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d130      	bne.n	800ac2c <UART_SetConfig+0x4c4>
 800abca:	4b73      	ldr	r3, [pc, #460]	; (800ad98 <UART_SetConfig+0x630>)
 800abcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abce:	f003 0307 	and.w	r3, r3, #7
 800abd2:	2b05      	cmp	r3, #5
 800abd4:	d826      	bhi.n	800ac24 <UART_SetConfig+0x4bc>
 800abd6:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <UART_SetConfig+0x474>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800abf5 	.word	0x0800abf5
 800abe0:	0800abfd 	.word	0x0800abfd
 800abe4:	0800ac05 	.word	0x0800ac05
 800abe8:	0800ac0d 	.word	0x0800ac0d
 800abec:	0800ac15 	.word	0x0800ac15
 800abf0:	0800ac1d 	.word	0x0800ac1d
 800abf4:	2300      	movs	r3, #0
 800abf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abfa:	e18a      	b.n	800af12 <UART_SetConfig+0x7aa>
 800abfc:	2304      	movs	r3, #4
 800abfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac02:	e186      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac04:	2308      	movs	r3, #8
 800ac06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0a:	e182      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac12:	e17e      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac14:	2320      	movs	r3, #32
 800ac16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1a:	e17a      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac1c:	2340      	movs	r3, #64	; 0x40
 800ac1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac22:	e176      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac24:	2380      	movs	r3, #128	; 0x80
 800ac26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2a:	e172      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a5b      	ldr	r2, [pc, #364]	; (800ada0 <UART_SetConfig+0x638>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d130      	bne.n	800ac98 <UART_SetConfig+0x530>
 800ac36:	4b58      	ldr	r3, [pc, #352]	; (800ad98 <UART_SetConfig+0x630>)
 800ac38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3a:	f003 0307 	and.w	r3, r3, #7
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	d826      	bhi.n	800ac90 <UART_SetConfig+0x528>
 800ac42:	a201      	add	r2, pc, #4	; (adr r2, 800ac48 <UART_SetConfig+0x4e0>)
 800ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac48:	0800ac61 	.word	0x0800ac61
 800ac4c:	0800ac69 	.word	0x0800ac69
 800ac50:	0800ac71 	.word	0x0800ac71
 800ac54:	0800ac79 	.word	0x0800ac79
 800ac58:	0800ac81 	.word	0x0800ac81
 800ac5c:	0800ac89 	.word	0x0800ac89
 800ac60:	2300      	movs	r3, #0
 800ac62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac66:	e154      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac68:	2304      	movs	r3, #4
 800ac6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6e:	e150      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac70:	2308      	movs	r3, #8
 800ac72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac76:	e14c      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac78:	2310      	movs	r3, #16
 800ac7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac7e:	e148      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac80:	2320      	movs	r3, #32
 800ac82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac86:	e144      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac88:	2340      	movs	r3, #64	; 0x40
 800ac8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8e:	e140      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac90:	2380      	movs	r3, #128	; 0x80
 800ac92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac96:	e13c      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a41      	ldr	r2, [pc, #260]	; (800ada4 <UART_SetConfig+0x63c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	f040 8082 	bne.w	800ada8 <UART_SetConfig+0x640>
 800aca4:	4b3c      	ldr	r3, [pc, #240]	; (800ad98 <UART_SetConfig+0x630>)
 800aca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acac:	2b28      	cmp	r3, #40	; 0x28
 800acae:	d86d      	bhi.n	800ad8c <UART_SetConfig+0x624>
 800acb0:	a201      	add	r2, pc, #4	; (adr r2, 800acb8 <UART_SetConfig+0x550>)
 800acb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb6:	bf00      	nop
 800acb8:	0800ad5d 	.word	0x0800ad5d
 800acbc:	0800ad8d 	.word	0x0800ad8d
 800acc0:	0800ad8d 	.word	0x0800ad8d
 800acc4:	0800ad8d 	.word	0x0800ad8d
 800acc8:	0800ad8d 	.word	0x0800ad8d
 800accc:	0800ad8d 	.word	0x0800ad8d
 800acd0:	0800ad8d 	.word	0x0800ad8d
 800acd4:	0800ad8d 	.word	0x0800ad8d
 800acd8:	0800ad65 	.word	0x0800ad65
 800acdc:	0800ad8d 	.word	0x0800ad8d
 800ace0:	0800ad8d 	.word	0x0800ad8d
 800ace4:	0800ad8d 	.word	0x0800ad8d
 800ace8:	0800ad8d 	.word	0x0800ad8d
 800acec:	0800ad8d 	.word	0x0800ad8d
 800acf0:	0800ad8d 	.word	0x0800ad8d
 800acf4:	0800ad8d 	.word	0x0800ad8d
 800acf8:	0800ad6d 	.word	0x0800ad6d
 800acfc:	0800ad8d 	.word	0x0800ad8d
 800ad00:	0800ad8d 	.word	0x0800ad8d
 800ad04:	0800ad8d 	.word	0x0800ad8d
 800ad08:	0800ad8d 	.word	0x0800ad8d
 800ad0c:	0800ad8d 	.word	0x0800ad8d
 800ad10:	0800ad8d 	.word	0x0800ad8d
 800ad14:	0800ad8d 	.word	0x0800ad8d
 800ad18:	0800ad75 	.word	0x0800ad75
 800ad1c:	0800ad8d 	.word	0x0800ad8d
 800ad20:	0800ad8d 	.word	0x0800ad8d
 800ad24:	0800ad8d 	.word	0x0800ad8d
 800ad28:	0800ad8d 	.word	0x0800ad8d
 800ad2c:	0800ad8d 	.word	0x0800ad8d
 800ad30:	0800ad8d 	.word	0x0800ad8d
 800ad34:	0800ad8d 	.word	0x0800ad8d
 800ad38:	0800ad7d 	.word	0x0800ad7d
 800ad3c:	0800ad8d 	.word	0x0800ad8d
 800ad40:	0800ad8d 	.word	0x0800ad8d
 800ad44:	0800ad8d 	.word	0x0800ad8d
 800ad48:	0800ad8d 	.word	0x0800ad8d
 800ad4c:	0800ad8d 	.word	0x0800ad8d
 800ad50:	0800ad8d 	.word	0x0800ad8d
 800ad54:	0800ad8d 	.word	0x0800ad8d
 800ad58:	0800ad85 	.word	0x0800ad85
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad62:	e0d6      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ad64:	2304      	movs	r3, #4
 800ad66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad6a:	e0d2      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ad6c:	2308      	movs	r3, #8
 800ad6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad72:	e0ce      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ad74:	2310      	movs	r3, #16
 800ad76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad7a:	e0ca      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ad7c:	2320      	movs	r3, #32
 800ad7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad82:	e0c6      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ad84:	2340      	movs	r3, #64	; 0x40
 800ad86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad8a:	e0c2      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ad8c:	2380      	movs	r3, #128	; 0x80
 800ad8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad92:	e0be      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ad94:	40011400 	.word	0x40011400
 800ad98:	58024400 	.word	0x58024400
 800ad9c:	40007800 	.word	0x40007800
 800ada0:	40007c00 	.word	0x40007c00
 800ada4:	40011800 	.word	0x40011800
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4aad      	ldr	r2, [pc, #692]	; (800b064 <UART_SetConfig+0x8fc>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d176      	bne.n	800aea0 <UART_SetConfig+0x738>
 800adb2:	4bad      	ldr	r3, [pc, #692]	; (800b068 <UART_SetConfig+0x900>)
 800adb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adba:	2b28      	cmp	r3, #40	; 0x28
 800adbc:	d86c      	bhi.n	800ae98 <UART_SetConfig+0x730>
 800adbe:	a201      	add	r2, pc, #4	; (adr r2, 800adc4 <UART_SetConfig+0x65c>)
 800adc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc4:	0800ae69 	.word	0x0800ae69
 800adc8:	0800ae99 	.word	0x0800ae99
 800adcc:	0800ae99 	.word	0x0800ae99
 800add0:	0800ae99 	.word	0x0800ae99
 800add4:	0800ae99 	.word	0x0800ae99
 800add8:	0800ae99 	.word	0x0800ae99
 800addc:	0800ae99 	.word	0x0800ae99
 800ade0:	0800ae99 	.word	0x0800ae99
 800ade4:	0800ae71 	.word	0x0800ae71
 800ade8:	0800ae99 	.word	0x0800ae99
 800adec:	0800ae99 	.word	0x0800ae99
 800adf0:	0800ae99 	.word	0x0800ae99
 800adf4:	0800ae99 	.word	0x0800ae99
 800adf8:	0800ae99 	.word	0x0800ae99
 800adfc:	0800ae99 	.word	0x0800ae99
 800ae00:	0800ae99 	.word	0x0800ae99
 800ae04:	0800ae79 	.word	0x0800ae79
 800ae08:	0800ae99 	.word	0x0800ae99
 800ae0c:	0800ae99 	.word	0x0800ae99
 800ae10:	0800ae99 	.word	0x0800ae99
 800ae14:	0800ae99 	.word	0x0800ae99
 800ae18:	0800ae99 	.word	0x0800ae99
 800ae1c:	0800ae99 	.word	0x0800ae99
 800ae20:	0800ae99 	.word	0x0800ae99
 800ae24:	0800ae81 	.word	0x0800ae81
 800ae28:	0800ae99 	.word	0x0800ae99
 800ae2c:	0800ae99 	.word	0x0800ae99
 800ae30:	0800ae99 	.word	0x0800ae99
 800ae34:	0800ae99 	.word	0x0800ae99
 800ae38:	0800ae99 	.word	0x0800ae99
 800ae3c:	0800ae99 	.word	0x0800ae99
 800ae40:	0800ae99 	.word	0x0800ae99
 800ae44:	0800ae89 	.word	0x0800ae89
 800ae48:	0800ae99 	.word	0x0800ae99
 800ae4c:	0800ae99 	.word	0x0800ae99
 800ae50:	0800ae99 	.word	0x0800ae99
 800ae54:	0800ae99 	.word	0x0800ae99
 800ae58:	0800ae99 	.word	0x0800ae99
 800ae5c:	0800ae99 	.word	0x0800ae99
 800ae60:	0800ae99 	.word	0x0800ae99
 800ae64:	0800ae91 	.word	0x0800ae91
 800ae68:	2301      	movs	r3, #1
 800ae6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6e:	e050      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ae70:	2304      	movs	r3, #4
 800ae72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae76:	e04c      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ae78:	2308      	movs	r3, #8
 800ae7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7e:	e048      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ae80:	2310      	movs	r3, #16
 800ae82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae86:	e044      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ae88:	2320      	movs	r3, #32
 800ae8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae8e:	e040      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ae90:	2340      	movs	r3, #64	; 0x40
 800ae92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae96:	e03c      	b.n	800af12 <UART_SetConfig+0x7aa>
 800ae98:	2380      	movs	r3, #128	; 0x80
 800ae9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae9e:	e038      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a71      	ldr	r2, [pc, #452]	; (800b06c <UART_SetConfig+0x904>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d130      	bne.n	800af0c <UART_SetConfig+0x7a4>
 800aeaa:	4b6f      	ldr	r3, [pc, #444]	; (800b068 <UART_SetConfig+0x900>)
 800aeac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeae:	f003 0307 	and.w	r3, r3, #7
 800aeb2:	2b05      	cmp	r3, #5
 800aeb4:	d826      	bhi.n	800af04 <UART_SetConfig+0x79c>
 800aeb6:	a201      	add	r2, pc, #4	; (adr r2, 800aebc <UART_SetConfig+0x754>)
 800aeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebc:	0800aed5 	.word	0x0800aed5
 800aec0:	0800aedd 	.word	0x0800aedd
 800aec4:	0800aee5 	.word	0x0800aee5
 800aec8:	0800aeed 	.word	0x0800aeed
 800aecc:	0800aef5 	.word	0x0800aef5
 800aed0:	0800aefd 	.word	0x0800aefd
 800aed4:	2302      	movs	r3, #2
 800aed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeda:	e01a      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aedc:	2304      	movs	r3, #4
 800aede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee2:	e016      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aee4:	2308      	movs	r3, #8
 800aee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeea:	e012      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aeec:	2310      	movs	r3, #16
 800aeee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef2:	e00e      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aef4:	2320      	movs	r3, #32
 800aef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aefa:	e00a      	b.n	800af12 <UART_SetConfig+0x7aa>
 800aefc:	2340      	movs	r3, #64	; 0x40
 800aefe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af02:	e006      	b.n	800af12 <UART_SetConfig+0x7aa>
 800af04:	2380      	movs	r3, #128	; 0x80
 800af06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af0a:	e002      	b.n	800af12 <UART_SetConfig+0x7aa>
 800af0c:	2380      	movs	r3, #128	; 0x80
 800af0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a55      	ldr	r2, [pc, #340]	; (800b06c <UART_SetConfig+0x904>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	f040 80f0 	bne.w	800b0fe <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af22:	2b20      	cmp	r3, #32
 800af24:	dc46      	bgt.n	800afb4 <UART_SetConfig+0x84c>
 800af26:	2b02      	cmp	r3, #2
 800af28:	db75      	blt.n	800b016 <UART_SetConfig+0x8ae>
 800af2a:	3b02      	subs	r3, #2
 800af2c:	2b1e      	cmp	r3, #30
 800af2e:	d872      	bhi.n	800b016 <UART_SetConfig+0x8ae>
 800af30:	a201      	add	r2, pc, #4	; (adr r2, 800af38 <UART_SetConfig+0x7d0>)
 800af32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af36:	bf00      	nop
 800af38:	0800afbb 	.word	0x0800afbb
 800af3c:	0800b017 	.word	0x0800b017
 800af40:	0800afc3 	.word	0x0800afc3
 800af44:	0800b017 	.word	0x0800b017
 800af48:	0800b017 	.word	0x0800b017
 800af4c:	0800b017 	.word	0x0800b017
 800af50:	0800afd3 	.word	0x0800afd3
 800af54:	0800b017 	.word	0x0800b017
 800af58:	0800b017 	.word	0x0800b017
 800af5c:	0800b017 	.word	0x0800b017
 800af60:	0800b017 	.word	0x0800b017
 800af64:	0800b017 	.word	0x0800b017
 800af68:	0800b017 	.word	0x0800b017
 800af6c:	0800b017 	.word	0x0800b017
 800af70:	0800afe3 	.word	0x0800afe3
 800af74:	0800b017 	.word	0x0800b017
 800af78:	0800b017 	.word	0x0800b017
 800af7c:	0800b017 	.word	0x0800b017
 800af80:	0800b017 	.word	0x0800b017
 800af84:	0800b017 	.word	0x0800b017
 800af88:	0800b017 	.word	0x0800b017
 800af8c:	0800b017 	.word	0x0800b017
 800af90:	0800b017 	.word	0x0800b017
 800af94:	0800b017 	.word	0x0800b017
 800af98:	0800b017 	.word	0x0800b017
 800af9c:	0800b017 	.word	0x0800b017
 800afa0:	0800b017 	.word	0x0800b017
 800afa4:	0800b017 	.word	0x0800b017
 800afa8:	0800b017 	.word	0x0800b017
 800afac:	0800b017 	.word	0x0800b017
 800afb0:	0800b009 	.word	0x0800b009
 800afb4:	2b40      	cmp	r3, #64	; 0x40
 800afb6:	d02a      	beq.n	800b00e <UART_SetConfig+0x8a6>
 800afb8:	e02d      	b.n	800b016 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800afba:	f7fc fa17 	bl	80073ec <HAL_RCCEx_GetD3PCLK1Freq>
 800afbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800afc0:	e02f      	b.n	800b022 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc2:	f107 0314 	add.w	r3, r7, #20
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fc fa26 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afd0:	e027      	b.n	800b022 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afd2:	f107 0308 	add.w	r3, r7, #8
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fc fb72 	bl	80076c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afe0:	e01f      	b.n	800b022 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afe2:	4b21      	ldr	r3, [pc, #132]	; (800b068 <UART_SetConfig+0x900>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0320 	and.w	r3, r3, #32
 800afea:	2b00      	cmp	r3, #0
 800afec:	d009      	beq.n	800b002 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afee:	4b1e      	ldr	r3, [pc, #120]	; (800b068 <UART_SetConfig+0x900>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	08db      	lsrs	r3, r3, #3
 800aff4:	f003 0303 	and.w	r3, r3, #3
 800aff8:	4a1d      	ldr	r2, [pc, #116]	; (800b070 <UART_SetConfig+0x908>)
 800affa:	fa22 f303 	lsr.w	r3, r2, r3
 800affe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b000:	e00f      	b.n	800b022 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800b002:	4b1b      	ldr	r3, [pc, #108]	; (800b070 <UART_SetConfig+0x908>)
 800b004:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b006:	e00c      	b.n	800b022 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b008:	4b1a      	ldr	r3, [pc, #104]	; (800b074 <UART_SetConfig+0x90c>)
 800b00a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b00c:	e009      	b.n	800b022 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b00e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b012:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b014:	e005      	b.n	800b022 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800b016:	2300      	movs	r3, #0
 800b018:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b020:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 81e6 	beq.w	800b3f6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	4a12      	ldr	r2, [pc, #72]	; (800b078 <UART_SetConfig+0x910>)
 800b030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b034:	461a      	mov	r2, r3
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	fbb3 f3f2 	udiv	r3, r3, r2
 800b03c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	4613      	mov	r3, r2
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	4413      	add	r3, r2
 800b048:	6a3a      	ldr	r2, [r7, #32]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d305      	bcc.n	800b05a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b054:	6a3a      	ldr	r2, [r7, #32]
 800b056:	429a      	cmp	r2, r3
 800b058:	d910      	bls.n	800b07c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b060:	e1c9      	b.n	800b3f6 <UART_SetConfig+0xc8e>
 800b062:	bf00      	nop
 800b064:	40011c00 	.word	0x40011c00
 800b068:	58024400 	.word	0x58024400
 800b06c:	58000c00 	.word	0x58000c00
 800b070:	03d09000 	.word	0x03d09000
 800b074:	003d0900 	.word	0x003d0900
 800b078:	0800c964 	.word	0x0800c964
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07e:	4618      	mov	r0, r3
 800b080:	f04f 0100 	mov.w	r1, #0
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	4ac1      	ldr	r2, [pc, #772]	; (800b390 <UART_SetConfig+0xc28>)
 800b08a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b08e:	b29a      	uxth	r2, r3
 800b090:	f04f 0300 	mov.w	r3, #0
 800b094:	f7f5 f97c 	bl	8000390 <__aeabi_uldivmod>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4610      	mov	r0, r2
 800b09e:	4619      	mov	r1, r3
 800b0a0:	f04f 0200 	mov.w	r2, #0
 800b0a4:	f04f 0300 	mov.w	r3, #0
 800b0a8:	020b      	lsls	r3, r1, #8
 800b0aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0ae:	0202      	lsls	r2, r0, #8
 800b0b0:	6879      	ldr	r1, [r7, #4]
 800b0b2:	6849      	ldr	r1, [r1, #4]
 800b0b4:	0849      	lsrs	r1, r1, #1
 800b0b6:	4608      	mov	r0, r1
 800b0b8:	f04f 0100 	mov.w	r1, #0
 800b0bc:	1814      	adds	r4, r2, r0
 800b0be:	eb43 0501 	adc.w	r5, r3, r1
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f04f 0300 	mov.w	r3, #0
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	f7f5 f95e 	bl	8000390 <__aeabi_uldivmod>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4613      	mov	r3, r2
 800b0da:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0e2:	d308      	bcc.n	800b0f6 <UART_SetConfig+0x98e>
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0ea:	d204      	bcs.n	800b0f6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0f2:	60da      	str	r2, [r3, #12]
 800b0f4:	e17f      	b.n	800b3f6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b0fc:	e17b      	b.n	800b3f6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b106:	f040 80bd 	bne.w	800b284 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800b10a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b10e:	2b20      	cmp	r3, #32
 800b110:	dc48      	bgt.n	800b1a4 <UART_SetConfig+0xa3c>
 800b112:	2b00      	cmp	r3, #0
 800b114:	db7b      	blt.n	800b20e <UART_SetConfig+0xaa6>
 800b116:	2b20      	cmp	r3, #32
 800b118:	d879      	bhi.n	800b20e <UART_SetConfig+0xaa6>
 800b11a:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <UART_SetConfig+0x9b8>)
 800b11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b120:	0800b1ab 	.word	0x0800b1ab
 800b124:	0800b1b3 	.word	0x0800b1b3
 800b128:	0800b20f 	.word	0x0800b20f
 800b12c:	0800b20f 	.word	0x0800b20f
 800b130:	0800b1bb 	.word	0x0800b1bb
 800b134:	0800b20f 	.word	0x0800b20f
 800b138:	0800b20f 	.word	0x0800b20f
 800b13c:	0800b20f 	.word	0x0800b20f
 800b140:	0800b1cb 	.word	0x0800b1cb
 800b144:	0800b20f 	.word	0x0800b20f
 800b148:	0800b20f 	.word	0x0800b20f
 800b14c:	0800b20f 	.word	0x0800b20f
 800b150:	0800b20f 	.word	0x0800b20f
 800b154:	0800b20f 	.word	0x0800b20f
 800b158:	0800b20f 	.word	0x0800b20f
 800b15c:	0800b20f 	.word	0x0800b20f
 800b160:	0800b1db 	.word	0x0800b1db
 800b164:	0800b20f 	.word	0x0800b20f
 800b168:	0800b20f 	.word	0x0800b20f
 800b16c:	0800b20f 	.word	0x0800b20f
 800b170:	0800b20f 	.word	0x0800b20f
 800b174:	0800b20f 	.word	0x0800b20f
 800b178:	0800b20f 	.word	0x0800b20f
 800b17c:	0800b20f 	.word	0x0800b20f
 800b180:	0800b20f 	.word	0x0800b20f
 800b184:	0800b20f 	.word	0x0800b20f
 800b188:	0800b20f 	.word	0x0800b20f
 800b18c:	0800b20f 	.word	0x0800b20f
 800b190:	0800b20f 	.word	0x0800b20f
 800b194:	0800b20f 	.word	0x0800b20f
 800b198:	0800b20f 	.word	0x0800b20f
 800b19c:	0800b20f 	.word	0x0800b20f
 800b1a0:	0800b201 	.word	0x0800b201
 800b1a4:	2b40      	cmp	r3, #64	; 0x40
 800b1a6:	d02e      	beq.n	800b206 <UART_SetConfig+0xa9e>
 800b1a8:	e031      	b.n	800b20e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1aa:	f7fa fdbd 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 800b1ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b1b0:	e033      	b.n	800b21a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1b2:	f7fa fdcf 	bl	8005d54 <HAL_RCC_GetPCLK2Freq>
 800b1b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b1b8:	e02f      	b.n	800b21a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ba:	f107 0314 	add.w	r3, r7, #20
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fc f92a 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1c8:	e027      	b.n	800b21a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ca:	f107 0308 	add.w	r3, r7, #8
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fc fa76 	bl	80076c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1d8:	e01f      	b.n	800b21a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1da:	4b6e      	ldr	r3, [pc, #440]	; (800b394 <UART_SetConfig+0xc2c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0320 	and.w	r3, r3, #32
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d009      	beq.n	800b1fa <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1e6:	4b6b      	ldr	r3, [pc, #428]	; (800b394 <UART_SetConfig+0xc2c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	08db      	lsrs	r3, r3, #3
 800b1ec:	f003 0303 	and.w	r3, r3, #3
 800b1f0:	4a69      	ldr	r2, [pc, #420]	; (800b398 <UART_SetConfig+0xc30>)
 800b1f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1f8:	e00f      	b.n	800b21a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800b1fa:	4b67      	ldr	r3, [pc, #412]	; (800b398 <UART_SetConfig+0xc30>)
 800b1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1fe:	e00c      	b.n	800b21a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b200:	4b66      	ldr	r3, [pc, #408]	; (800b39c <UART_SetConfig+0xc34>)
 800b202:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b204:	e009      	b.n	800b21a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b20a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b20c:	e005      	b.n	800b21a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800b20e:	2300      	movs	r3, #0
 800b210:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b218:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 80ea 	beq.w	800b3f6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	4a5a      	ldr	r2, [pc, #360]	; (800b390 <UART_SetConfig+0xc28>)
 800b228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b22c:	461a      	mov	r2, r3
 800b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b230:	fbb3 f3f2 	udiv	r3, r3, r2
 800b234:	005a      	lsls	r2, r3, #1
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	085b      	lsrs	r3, r3, #1
 800b23c:	441a      	add	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	fbb2 f3f3 	udiv	r3, r2, r3
 800b246:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	2b0f      	cmp	r3, #15
 800b24c:	d916      	bls.n	800b27c <UART_SetConfig+0xb14>
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b254:	d212      	bcs.n	800b27c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	b29b      	uxth	r3, r3
 800b25a:	f023 030f 	bic.w	r3, r3, #15
 800b25e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b262:	085b      	lsrs	r3, r3, #1
 800b264:	b29b      	uxth	r3, r3
 800b266:	f003 0307 	and.w	r3, r3, #7
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b26e:	4313      	orrs	r3, r2
 800b270:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b278:	60da      	str	r2, [r3, #12]
 800b27a:	e0bc      	b.n	800b3f6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b282:	e0b8      	b.n	800b3f6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b284:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b288:	2b20      	cmp	r3, #32
 800b28a:	dc4b      	bgt.n	800b324 <UART_SetConfig+0xbbc>
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f2c0 8087 	blt.w	800b3a0 <UART_SetConfig+0xc38>
 800b292:	2b20      	cmp	r3, #32
 800b294:	f200 8084 	bhi.w	800b3a0 <UART_SetConfig+0xc38>
 800b298:	a201      	add	r2, pc, #4	; (adr r2, 800b2a0 <UART_SetConfig+0xb38>)
 800b29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29e:	bf00      	nop
 800b2a0:	0800b32b 	.word	0x0800b32b
 800b2a4:	0800b333 	.word	0x0800b333
 800b2a8:	0800b3a1 	.word	0x0800b3a1
 800b2ac:	0800b3a1 	.word	0x0800b3a1
 800b2b0:	0800b33b 	.word	0x0800b33b
 800b2b4:	0800b3a1 	.word	0x0800b3a1
 800b2b8:	0800b3a1 	.word	0x0800b3a1
 800b2bc:	0800b3a1 	.word	0x0800b3a1
 800b2c0:	0800b34b 	.word	0x0800b34b
 800b2c4:	0800b3a1 	.word	0x0800b3a1
 800b2c8:	0800b3a1 	.word	0x0800b3a1
 800b2cc:	0800b3a1 	.word	0x0800b3a1
 800b2d0:	0800b3a1 	.word	0x0800b3a1
 800b2d4:	0800b3a1 	.word	0x0800b3a1
 800b2d8:	0800b3a1 	.word	0x0800b3a1
 800b2dc:	0800b3a1 	.word	0x0800b3a1
 800b2e0:	0800b35b 	.word	0x0800b35b
 800b2e4:	0800b3a1 	.word	0x0800b3a1
 800b2e8:	0800b3a1 	.word	0x0800b3a1
 800b2ec:	0800b3a1 	.word	0x0800b3a1
 800b2f0:	0800b3a1 	.word	0x0800b3a1
 800b2f4:	0800b3a1 	.word	0x0800b3a1
 800b2f8:	0800b3a1 	.word	0x0800b3a1
 800b2fc:	0800b3a1 	.word	0x0800b3a1
 800b300:	0800b3a1 	.word	0x0800b3a1
 800b304:	0800b3a1 	.word	0x0800b3a1
 800b308:	0800b3a1 	.word	0x0800b3a1
 800b30c:	0800b3a1 	.word	0x0800b3a1
 800b310:	0800b3a1 	.word	0x0800b3a1
 800b314:	0800b3a1 	.word	0x0800b3a1
 800b318:	0800b3a1 	.word	0x0800b3a1
 800b31c:	0800b3a1 	.word	0x0800b3a1
 800b320:	0800b381 	.word	0x0800b381
 800b324:	2b40      	cmp	r3, #64	; 0x40
 800b326:	d02e      	beq.n	800b386 <UART_SetConfig+0xc1e>
 800b328:	e03a      	b.n	800b3a0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b32a:	f7fa fcfd 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 800b32e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b330:	e03c      	b.n	800b3ac <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b332:	f7fa fd0f 	bl	8005d54 <HAL_RCC_GetPCLK2Freq>
 800b336:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b338:	e038      	b.n	800b3ac <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b33a:	f107 0314 	add.w	r3, r7, #20
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fc f86a 	bl	8007418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b348:	e030      	b.n	800b3ac <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b34a:	f107 0308 	add.w	r3, r7, #8
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fc f9b6 	bl	80076c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b358:	e028      	b.n	800b3ac <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b35a:	4b0e      	ldr	r3, [pc, #56]	; (800b394 <UART_SetConfig+0xc2c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 0320 	and.w	r3, r3, #32
 800b362:	2b00      	cmp	r3, #0
 800b364:	d009      	beq.n	800b37a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b366:	4b0b      	ldr	r3, [pc, #44]	; (800b394 <UART_SetConfig+0xc2c>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	08db      	lsrs	r3, r3, #3
 800b36c:	f003 0303 	and.w	r3, r3, #3
 800b370:	4a09      	ldr	r2, [pc, #36]	; (800b398 <UART_SetConfig+0xc30>)
 800b372:	fa22 f303 	lsr.w	r3, r2, r3
 800b376:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b378:	e018      	b.n	800b3ac <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800b37a:	4b07      	ldr	r3, [pc, #28]	; (800b398 <UART_SetConfig+0xc30>)
 800b37c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b37e:	e015      	b.n	800b3ac <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b380:	4b06      	ldr	r3, [pc, #24]	; (800b39c <UART_SetConfig+0xc34>)
 800b382:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b384:	e012      	b.n	800b3ac <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b38a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b38c:	e00e      	b.n	800b3ac <UART_SetConfig+0xc44>
 800b38e:	bf00      	nop
 800b390:	0800c964 	.word	0x0800c964
 800b394:	58024400 	.word	0x58024400
 800b398:	03d09000 	.word	0x03d09000
 800b39c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b3aa:	bf00      	nop
    }

    if (pclk != 0U)
 800b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d021      	beq.n	800b3f6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	4a1a      	ldr	r2, [pc, #104]	; (800b420 <UART_SetConfig+0xcb8>)
 800b3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	085b      	lsrs	r3, r3, #1
 800b3ca:	441a      	add	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d8:	2b0f      	cmp	r3, #15
 800b3da:	d909      	bls.n	800b3f0 <UART_SetConfig+0xc88>
 800b3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e2:	d205      	bcs.n	800b3f0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	60da      	str	r2, [r3, #12]
 800b3ee:	e002      	b.n	800b3f6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b412:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b416:	4618      	mov	r0, r3
 800b418:	3738      	adds	r7, #56	; 0x38
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bdb0      	pop	{r4, r5, r7, pc}
 800b41e:	bf00      	nop
 800b420:	0800c964 	.word	0x0800c964

0800b424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00a      	beq.n	800b44e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00a      	beq.n	800b470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	430a      	orrs	r2, r1
 800b46e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b496:	f003 0308 	and.w	r3, r3, #8
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00a      	beq.n	800b4b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	430a      	orrs	r2, r1
 800b4b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b8:	f003 0310 	and.w	r3, r3, #16
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00a      	beq.n	800b4d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4da:	f003 0320 	and.w	r3, r3, #32
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00a      	beq.n	800b4f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b500:	2b00      	cmp	r3, #0
 800b502:	d01a      	beq.n	800b53a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	430a      	orrs	r2, r1
 800b518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b51e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b522:	d10a      	bne.n	800b53a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	605a      	str	r2, [r3, #4]
  }
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af02      	add	r7, sp, #8
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b578:	f7f7 f8ce 	bl	8002718 <HAL_GetTick>
 800b57c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0308 	and.w	r3, r3, #8
 800b588:	2b08      	cmp	r3, #8
 800b58a:	d10e      	bne.n	800b5aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b58c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f82f 	bl	800b5fe <UART_WaitOnFlagUntilTimeout>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e025      	b.n	800b5f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	d10e      	bne.n	800b5d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f819 	bl	800b5fe <UART_WaitOnFlagUntilTimeout>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e00f      	b.n	800b5f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b09c      	sub	sp, #112	; 0x70
 800b602:	af00      	add	r7, sp, #0
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	603b      	str	r3, [r7, #0]
 800b60a:	4613      	mov	r3, r2
 800b60c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b60e:	e0a9      	b.n	800b764 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b616:	f000 80a5 	beq.w	800b764 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b61a:	f7f7 f87d 	bl	8002718 <HAL_GetTick>
 800b61e:	4602      	mov	r2, r0
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b626:	429a      	cmp	r2, r3
 800b628:	d302      	bcc.n	800b630 <UART_WaitOnFlagUntilTimeout+0x32>
 800b62a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d140      	bne.n	800b6b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b638:	e853 3f00 	ldrex	r3, [r3]
 800b63c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b640:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b644:	667b      	str	r3, [r7, #100]	; 0x64
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b64e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b650:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b652:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b654:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b656:	e841 2300 	strex	r3, r2, [r1]
 800b65a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b65c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1e6      	bne.n	800b630 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3308      	adds	r3, #8
 800b668:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66c:	e853 3f00 	ldrex	r3, [r3]
 800b670:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	f023 0301 	bic.w	r3, r3, #1
 800b678:	663b      	str	r3, [r7, #96]	; 0x60
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3308      	adds	r3, #8
 800b680:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b682:	64ba      	str	r2, [r7, #72]	; 0x48
 800b684:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b686:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b68a:	e841 2300 	strex	r3, r2, [r1]
 800b68e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1e5      	bne.n	800b662 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2220      	movs	r2, #32
 800b69a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e069      	b.n	800b786 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d051      	beq.n	800b764 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	69db      	ldr	r3, [r3, #28]
 800b6c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6ce:	d149      	bne.n	800b764 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e2:	e853 3f00 	ldrex	r3, [r3]
 800b6e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b6ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b700:	e841 2300 	strex	r3, r2, [r1]
 800b704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1e6      	bne.n	800b6da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3308      	adds	r3, #8
 800b712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	e853 3f00 	ldrex	r3, [r3]
 800b71a:	613b      	str	r3, [r7, #16]
   return(result);
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f023 0301 	bic.w	r3, r3, #1
 800b722:	66bb      	str	r3, [r7, #104]	; 0x68
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3308      	adds	r3, #8
 800b72a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b72c:	623a      	str	r2, [r7, #32]
 800b72e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b730:	69f9      	ldr	r1, [r7, #28]
 800b732:	6a3a      	ldr	r2, [r7, #32]
 800b734:	e841 2300 	strex	r3, r2, [r1]
 800b738:	61bb      	str	r3, [r7, #24]
   return(result);
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1e5      	bne.n	800b70c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2220      	movs	r2, #32
 800b744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2220      	movs	r2, #32
 800b74c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2220      	movs	r2, #32
 800b754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b760:	2303      	movs	r3, #3
 800b762:	e010      	b.n	800b786 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	69da      	ldr	r2, [r3, #28]
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	4013      	ands	r3, r2
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	429a      	cmp	r2, r3
 800b772:	bf0c      	ite	eq
 800b774:	2301      	moveq	r3, #1
 800b776:	2300      	movne	r3, #0
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	461a      	mov	r2, r3
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	429a      	cmp	r2, r3
 800b780:	f43f af46 	beq.w	800b610 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3770      	adds	r7, #112	; 0x70
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b78e:	b480      	push	{r7}
 800b790:	b085      	sub	sp, #20
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d101      	bne.n	800b7a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	e027      	b.n	800b7f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2224      	movs	r2, #36	; 0x24
 800b7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f022 0201 	bic.w	r2, r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b7d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b810:	2b01      	cmp	r3, #1
 800b812:	d101      	bne.n	800b818 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b814:	2302      	movs	r3, #2
 800b816:	e02d      	b.n	800b874 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2224      	movs	r2, #36	; 0x24
 800b824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f022 0201 	bic.w	r2, r2, #1
 800b83e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f84f 	bl	800b8f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2220      	movs	r2, #32
 800b866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d101      	bne.n	800b894 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b890:	2302      	movs	r3, #2
 800b892:	e02d      	b.n	800b8f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2224      	movs	r2, #36	; 0x24
 800b8a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f022 0201 	bic.w	r2, r2, #1
 800b8ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f811 	bl	800b8f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b904:	2b00      	cmp	r3, #0
 800b906:	d108      	bne.n	800b91a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b918:	e031      	b.n	800b97e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b91a:	2310      	movs	r3, #16
 800b91c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b91e:	2310      	movs	r3, #16
 800b920:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	0e5b      	lsrs	r3, r3, #25
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	f003 0307 	and.w	r3, r3, #7
 800b930:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	0f5b      	lsrs	r3, r3, #29
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	f003 0307 	and.w	r3, r3, #7
 800b940:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	7b3a      	ldrb	r2, [r7, #12]
 800b946:	4911      	ldr	r1, [pc, #68]	; (800b98c <UARTEx_SetNbDataToProcess+0x94>)
 800b948:	5c8a      	ldrb	r2, [r1, r2]
 800b94a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b94e:	7b3a      	ldrb	r2, [r7, #12]
 800b950:	490f      	ldr	r1, [pc, #60]	; (800b990 <UARTEx_SetNbDataToProcess+0x98>)
 800b952:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b954:	fb93 f3f2 	sdiv	r3, r3, r2
 800b958:	b29a      	uxth	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	7b7a      	ldrb	r2, [r7, #13]
 800b964:	4909      	ldr	r1, [pc, #36]	; (800b98c <UARTEx_SetNbDataToProcess+0x94>)
 800b966:	5c8a      	ldrb	r2, [r1, r2]
 800b968:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b96c:	7b7a      	ldrb	r2, [r7, #13]
 800b96e:	4908      	ldr	r1, [pc, #32]	; (800b990 <UARTEx_SetNbDataToProcess+0x98>)
 800b970:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b972:	fb93 f3f2 	sdiv	r3, r3, r2
 800b976:	b29a      	uxth	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b97e:	bf00      	nop
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	0800c97c 	.word	0x0800c97c
 800b990:	0800c984 	.word	0x0800c984

0800b994 <__errno>:
 800b994:	4b01      	ldr	r3, [pc, #4]	; (800b99c <__errno+0x8>)
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	24000018 	.word	0x24000018

0800b9a0 <__libc_init_array>:
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	4d0d      	ldr	r5, [pc, #52]	; (800b9d8 <__libc_init_array+0x38>)
 800b9a4:	4c0d      	ldr	r4, [pc, #52]	; (800b9dc <__libc_init_array+0x3c>)
 800b9a6:	1b64      	subs	r4, r4, r5
 800b9a8:	10a4      	asrs	r4, r4, #2
 800b9aa:	2600      	movs	r6, #0
 800b9ac:	42a6      	cmp	r6, r4
 800b9ae:	d109      	bne.n	800b9c4 <__libc_init_array+0x24>
 800b9b0:	4d0b      	ldr	r5, [pc, #44]	; (800b9e0 <__libc_init_array+0x40>)
 800b9b2:	4c0c      	ldr	r4, [pc, #48]	; (800b9e4 <__libc_init_array+0x44>)
 800b9b4:	f000 ff84 	bl	800c8c0 <_init>
 800b9b8:	1b64      	subs	r4, r4, r5
 800b9ba:	10a4      	asrs	r4, r4, #2
 800b9bc:	2600      	movs	r6, #0
 800b9be:	42a6      	cmp	r6, r4
 800b9c0:	d105      	bne.n	800b9ce <__libc_init_array+0x2e>
 800b9c2:	bd70      	pop	{r4, r5, r6, pc}
 800b9c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9c8:	4798      	blx	r3
 800b9ca:	3601      	adds	r6, #1
 800b9cc:	e7ee      	b.n	800b9ac <__libc_init_array+0xc>
 800b9ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9d2:	4798      	blx	r3
 800b9d4:	3601      	adds	r6, #1
 800b9d6:	e7f2      	b.n	800b9be <__libc_init_array+0x1e>
 800b9d8:	0800ca2c 	.word	0x0800ca2c
 800b9dc:	0800ca2c 	.word	0x0800ca2c
 800b9e0:	0800ca2c 	.word	0x0800ca2c
 800b9e4:	0800ca30 	.word	0x0800ca30

0800b9e8 <memcpy>:
 800b9e8:	440a      	add	r2, r1
 800b9ea:	4291      	cmp	r1, r2
 800b9ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9f0:	d100      	bne.n	800b9f4 <memcpy+0xc>
 800b9f2:	4770      	bx	lr
 800b9f4:	b510      	push	{r4, lr}
 800b9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9fe:	4291      	cmp	r1, r2
 800ba00:	d1f9      	bne.n	800b9f6 <memcpy+0xe>
 800ba02:	bd10      	pop	{r4, pc}

0800ba04 <memset>:
 800ba04:	4402      	add	r2, r0
 800ba06:	4603      	mov	r3, r0
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d100      	bne.n	800ba0e <memset+0xa>
 800ba0c:	4770      	bx	lr
 800ba0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba12:	e7f9      	b.n	800ba08 <memset+0x4>

0800ba14 <iprintf>:
 800ba14:	b40f      	push	{r0, r1, r2, r3}
 800ba16:	4b0a      	ldr	r3, [pc, #40]	; (800ba40 <iprintf+0x2c>)
 800ba18:	b513      	push	{r0, r1, r4, lr}
 800ba1a:	681c      	ldr	r4, [r3, #0]
 800ba1c:	b124      	cbz	r4, 800ba28 <iprintf+0x14>
 800ba1e:	69a3      	ldr	r3, [r4, #24]
 800ba20:	b913      	cbnz	r3, 800ba28 <iprintf+0x14>
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 f866 	bl	800baf4 <__sinit>
 800ba28:	ab05      	add	r3, sp, #20
 800ba2a:	9a04      	ldr	r2, [sp, #16]
 800ba2c:	68a1      	ldr	r1, [r4, #8]
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 f983 	bl	800bd3c <_vfiprintf_r>
 800ba36:	b002      	add	sp, #8
 800ba38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba3c:	b004      	add	sp, #16
 800ba3e:	4770      	bx	lr
 800ba40:	24000018 	.word	0x24000018

0800ba44 <std>:
 800ba44:	2300      	movs	r3, #0
 800ba46:	b510      	push	{r4, lr}
 800ba48:	4604      	mov	r4, r0
 800ba4a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba52:	6083      	str	r3, [r0, #8]
 800ba54:	8181      	strh	r1, [r0, #12]
 800ba56:	6643      	str	r3, [r0, #100]	; 0x64
 800ba58:	81c2      	strh	r2, [r0, #14]
 800ba5a:	6183      	str	r3, [r0, #24]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	2208      	movs	r2, #8
 800ba60:	305c      	adds	r0, #92	; 0x5c
 800ba62:	f7ff ffcf 	bl	800ba04 <memset>
 800ba66:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <std+0x38>)
 800ba68:	6263      	str	r3, [r4, #36]	; 0x24
 800ba6a:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <std+0x3c>)
 800ba6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba6e:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <std+0x40>)
 800ba70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba72:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <std+0x44>)
 800ba74:	6224      	str	r4, [r4, #32]
 800ba76:	6323      	str	r3, [r4, #48]	; 0x30
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	bf00      	nop
 800ba7c:	0800c2e5 	.word	0x0800c2e5
 800ba80:	0800c307 	.word	0x0800c307
 800ba84:	0800c33f 	.word	0x0800c33f
 800ba88:	0800c363 	.word	0x0800c363

0800ba8c <_cleanup_r>:
 800ba8c:	4901      	ldr	r1, [pc, #4]	; (800ba94 <_cleanup_r+0x8>)
 800ba8e:	f000 b8af 	b.w	800bbf0 <_fwalk_reent>
 800ba92:	bf00      	nop
 800ba94:	0800c63d 	.word	0x0800c63d

0800ba98 <__sfmoreglue>:
 800ba98:	b570      	push	{r4, r5, r6, lr}
 800ba9a:	1e4a      	subs	r2, r1, #1
 800ba9c:	2568      	movs	r5, #104	; 0x68
 800ba9e:	4355      	muls	r5, r2
 800baa0:	460e      	mov	r6, r1
 800baa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800baa6:	f000 f8c5 	bl	800bc34 <_malloc_r>
 800baaa:	4604      	mov	r4, r0
 800baac:	b140      	cbz	r0, 800bac0 <__sfmoreglue+0x28>
 800baae:	2100      	movs	r1, #0
 800bab0:	e9c0 1600 	strd	r1, r6, [r0]
 800bab4:	300c      	adds	r0, #12
 800bab6:	60a0      	str	r0, [r4, #8]
 800bab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800babc:	f7ff ffa2 	bl	800ba04 <memset>
 800bac0:	4620      	mov	r0, r4
 800bac2:	bd70      	pop	{r4, r5, r6, pc}

0800bac4 <__sfp_lock_acquire>:
 800bac4:	4801      	ldr	r0, [pc, #4]	; (800bacc <__sfp_lock_acquire+0x8>)
 800bac6:	f000 b8b3 	b.w	800bc30 <__retarget_lock_acquire_recursive>
 800baca:	bf00      	nop
 800bacc:	24000500 	.word	0x24000500

0800bad0 <__sfp_lock_release>:
 800bad0:	4801      	ldr	r0, [pc, #4]	; (800bad8 <__sfp_lock_release+0x8>)
 800bad2:	f000 b8ae 	b.w	800bc32 <__retarget_lock_release_recursive>
 800bad6:	bf00      	nop
 800bad8:	24000500 	.word	0x24000500

0800badc <__sinit_lock_acquire>:
 800badc:	4801      	ldr	r0, [pc, #4]	; (800bae4 <__sinit_lock_acquire+0x8>)
 800bade:	f000 b8a7 	b.w	800bc30 <__retarget_lock_acquire_recursive>
 800bae2:	bf00      	nop
 800bae4:	240004fb 	.word	0x240004fb

0800bae8 <__sinit_lock_release>:
 800bae8:	4801      	ldr	r0, [pc, #4]	; (800baf0 <__sinit_lock_release+0x8>)
 800baea:	f000 b8a2 	b.w	800bc32 <__retarget_lock_release_recursive>
 800baee:	bf00      	nop
 800baf0:	240004fb 	.word	0x240004fb

0800baf4 <__sinit>:
 800baf4:	b510      	push	{r4, lr}
 800baf6:	4604      	mov	r4, r0
 800baf8:	f7ff fff0 	bl	800badc <__sinit_lock_acquire>
 800bafc:	69a3      	ldr	r3, [r4, #24]
 800bafe:	b11b      	cbz	r3, 800bb08 <__sinit+0x14>
 800bb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb04:	f7ff bff0 	b.w	800bae8 <__sinit_lock_release>
 800bb08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb0c:	6523      	str	r3, [r4, #80]	; 0x50
 800bb0e:	4b13      	ldr	r3, [pc, #76]	; (800bb5c <__sinit+0x68>)
 800bb10:	4a13      	ldr	r2, [pc, #76]	; (800bb60 <__sinit+0x6c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb16:	42a3      	cmp	r3, r4
 800bb18:	bf04      	itt	eq
 800bb1a:	2301      	moveq	r3, #1
 800bb1c:	61a3      	streq	r3, [r4, #24]
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 f820 	bl	800bb64 <__sfp>
 800bb24:	6060      	str	r0, [r4, #4]
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 f81c 	bl	800bb64 <__sfp>
 800bb2c:	60a0      	str	r0, [r4, #8]
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 f818 	bl	800bb64 <__sfp>
 800bb34:	2200      	movs	r2, #0
 800bb36:	60e0      	str	r0, [r4, #12]
 800bb38:	2104      	movs	r1, #4
 800bb3a:	6860      	ldr	r0, [r4, #4]
 800bb3c:	f7ff ff82 	bl	800ba44 <std>
 800bb40:	68a0      	ldr	r0, [r4, #8]
 800bb42:	2201      	movs	r2, #1
 800bb44:	2109      	movs	r1, #9
 800bb46:	f7ff ff7d 	bl	800ba44 <std>
 800bb4a:	68e0      	ldr	r0, [r4, #12]
 800bb4c:	2202      	movs	r2, #2
 800bb4e:	2112      	movs	r1, #18
 800bb50:	f7ff ff78 	bl	800ba44 <std>
 800bb54:	2301      	movs	r3, #1
 800bb56:	61a3      	str	r3, [r4, #24]
 800bb58:	e7d2      	b.n	800bb00 <__sinit+0xc>
 800bb5a:	bf00      	nop
 800bb5c:	0800c98c 	.word	0x0800c98c
 800bb60:	0800ba8d 	.word	0x0800ba8d

0800bb64 <__sfp>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	4607      	mov	r7, r0
 800bb68:	f7ff ffac 	bl	800bac4 <__sfp_lock_acquire>
 800bb6c:	4b1e      	ldr	r3, [pc, #120]	; (800bbe8 <__sfp+0x84>)
 800bb6e:	681e      	ldr	r6, [r3, #0]
 800bb70:	69b3      	ldr	r3, [r6, #24]
 800bb72:	b913      	cbnz	r3, 800bb7a <__sfp+0x16>
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff ffbd 	bl	800baf4 <__sinit>
 800bb7a:	3648      	adds	r6, #72	; 0x48
 800bb7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	d503      	bpl.n	800bb8c <__sfp+0x28>
 800bb84:	6833      	ldr	r3, [r6, #0]
 800bb86:	b30b      	cbz	r3, 800bbcc <__sfp+0x68>
 800bb88:	6836      	ldr	r6, [r6, #0]
 800bb8a:	e7f7      	b.n	800bb7c <__sfp+0x18>
 800bb8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb90:	b9d5      	cbnz	r5, 800bbc8 <__sfp+0x64>
 800bb92:	4b16      	ldr	r3, [pc, #88]	; (800bbec <__sfp+0x88>)
 800bb94:	60e3      	str	r3, [r4, #12]
 800bb96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb9a:	6665      	str	r5, [r4, #100]	; 0x64
 800bb9c:	f000 f847 	bl	800bc2e <__retarget_lock_init_recursive>
 800bba0:	f7ff ff96 	bl	800bad0 <__sfp_lock_release>
 800bba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbac:	6025      	str	r5, [r4, #0]
 800bbae:	61a5      	str	r5, [r4, #24]
 800bbb0:	2208      	movs	r2, #8
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbb8:	f7ff ff24 	bl	800ba04 <memset>
 800bbbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc8:	3468      	adds	r4, #104	; 0x68
 800bbca:	e7d9      	b.n	800bb80 <__sfp+0x1c>
 800bbcc:	2104      	movs	r1, #4
 800bbce:	4638      	mov	r0, r7
 800bbd0:	f7ff ff62 	bl	800ba98 <__sfmoreglue>
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	6030      	str	r0, [r6, #0]
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d1d5      	bne.n	800bb88 <__sfp+0x24>
 800bbdc:	f7ff ff78 	bl	800bad0 <__sfp_lock_release>
 800bbe0:	230c      	movs	r3, #12
 800bbe2:	603b      	str	r3, [r7, #0]
 800bbe4:	e7ee      	b.n	800bbc4 <__sfp+0x60>
 800bbe6:	bf00      	nop
 800bbe8:	0800c98c 	.word	0x0800c98c
 800bbec:	ffff0001 	.word	0xffff0001

0800bbf0 <_fwalk_reent>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	4606      	mov	r6, r0
 800bbf6:	4688      	mov	r8, r1
 800bbf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbfc:	2700      	movs	r7, #0
 800bbfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc02:	f1b9 0901 	subs.w	r9, r9, #1
 800bc06:	d505      	bpl.n	800bc14 <_fwalk_reent+0x24>
 800bc08:	6824      	ldr	r4, [r4, #0]
 800bc0a:	2c00      	cmp	r4, #0
 800bc0c:	d1f7      	bne.n	800bbfe <_fwalk_reent+0xe>
 800bc0e:	4638      	mov	r0, r7
 800bc10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc14:	89ab      	ldrh	r3, [r5, #12]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d907      	bls.n	800bc2a <_fwalk_reent+0x3a>
 800bc1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	d003      	beq.n	800bc2a <_fwalk_reent+0x3a>
 800bc22:	4629      	mov	r1, r5
 800bc24:	4630      	mov	r0, r6
 800bc26:	47c0      	blx	r8
 800bc28:	4307      	orrs	r7, r0
 800bc2a:	3568      	adds	r5, #104	; 0x68
 800bc2c:	e7e9      	b.n	800bc02 <_fwalk_reent+0x12>

0800bc2e <__retarget_lock_init_recursive>:
 800bc2e:	4770      	bx	lr

0800bc30 <__retarget_lock_acquire_recursive>:
 800bc30:	4770      	bx	lr

0800bc32 <__retarget_lock_release_recursive>:
 800bc32:	4770      	bx	lr

0800bc34 <_malloc_r>:
 800bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc36:	1ccd      	adds	r5, r1, #3
 800bc38:	f025 0503 	bic.w	r5, r5, #3
 800bc3c:	3508      	adds	r5, #8
 800bc3e:	2d0c      	cmp	r5, #12
 800bc40:	bf38      	it	cc
 800bc42:	250c      	movcc	r5, #12
 800bc44:	2d00      	cmp	r5, #0
 800bc46:	4606      	mov	r6, r0
 800bc48:	db01      	blt.n	800bc4e <_malloc_r+0x1a>
 800bc4a:	42a9      	cmp	r1, r5
 800bc4c:	d903      	bls.n	800bc56 <_malloc_r+0x22>
 800bc4e:	230c      	movs	r3, #12
 800bc50:	6033      	str	r3, [r6, #0]
 800bc52:	2000      	movs	r0, #0
 800bc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc56:	f000 fda3 	bl	800c7a0 <__malloc_lock>
 800bc5a:	4921      	ldr	r1, [pc, #132]	; (800bce0 <_malloc_r+0xac>)
 800bc5c:	680a      	ldr	r2, [r1, #0]
 800bc5e:	4614      	mov	r4, r2
 800bc60:	b99c      	cbnz	r4, 800bc8a <_malloc_r+0x56>
 800bc62:	4f20      	ldr	r7, [pc, #128]	; (800bce4 <_malloc_r+0xb0>)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	b923      	cbnz	r3, 800bc72 <_malloc_r+0x3e>
 800bc68:	4621      	mov	r1, r4
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f000 fb2a 	bl	800c2c4 <_sbrk_r>
 800bc70:	6038      	str	r0, [r7, #0]
 800bc72:	4629      	mov	r1, r5
 800bc74:	4630      	mov	r0, r6
 800bc76:	f000 fb25 	bl	800c2c4 <_sbrk_r>
 800bc7a:	1c43      	adds	r3, r0, #1
 800bc7c:	d123      	bne.n	800bcc6 <_malloc_r+0x92>
 800bc7e:	230c      	movs	r3, #12
 800bc80:	6033      	str	r3, [r6, #0]
 800bc82:	4630      	mov	r0, r6
 800bc84:	f000 fd92 	bl	800c7ac <__malloc_unlock>
 800bc88:	e7e3      	b.n	800bc52 <_malloc_r+0x1e>
 800bc8a:	6823      	ldr	r3, [r4, #0]
 800bc8c:	1b5b      	subs	r3, r3, r5
 800bc8e:	d417      	bmi.n	800bcc0 <_malloc_r+0x8c>
 800bc90:	2b0b      	cmp	r3, #11
 800bc92:	d903      	bls.n	800bc9c <_malloc_r+0x68>
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	441c      	add	r4, r3
 800bc98:	6025      	str	r5, [r4, #0]
 800bc9a:	e004      	b.n	800bca6 <_malloc_r+0x72>
 800bc9c:	6863      	ldr	r3, [r4, #4]
 800bc9e:	42a2      	cmp	r2, r4
 800bca0:	bf0c      	ite	eq
 800bca2:	600b      	streq	r3, [r1, #0]
 800bca4:	6053      	strne	r3, [r2, #4]
 800bca6:	4630      	mov	r0, r6
 800bca8:	f000 fd80 	bl	800c7ac <__malloc_unlock>
 800bcac:	f104 000b 	add.w	r0, r4, #11
 800bcb0:	1d23      	adds	r3, r4, #4
 800bcb2:	f020 0007 	bic.w	r0, r0, #7
 800bcb6:	1ac2      	subs	r2, r0, r3
 800bcb8:	d0cc      	beq.n	800bc54 <_malloc_r+0x20>
 800bcba:	1a1b      	subs	r3, r3, r0
 800bcbc:	50a3      	str	r3, [r4, r2]
 800bcbe:	e7c9      	b.n	800bc54 <_malloc_r+0x20>
 800bcc0:	4622      	mov	r2, r4
 800bcc2:	6864      	ldr	r4, [r4, #4]
 800bcc4:	e7cc      	b.n	800bc60 <_malloc_r+0x2c>
 800bcc6:	1cc4      	adds	r4, r0, #3
 800bcc8:	f024 0403 	bic.w	r4, r4, #3
 800bccc:	42a0      	cmp	r0, r4
 800bcce:	d0e3      	beq.n	800bc98 <_malloc_r+0x64>
 800bcd0:	1a21      	subs	r1, r4, r0
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f000 faf6 	bl	800c2c4 <_sbrk_r>
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d1dd      	bne.n	800bc98 <_malloc_r+0x64>
 800bcdc:	e7cf      	b.n	800bc7e <_malloc_r+0x4a>
 800bcde:	bf00      	nop
 800bce0:	2400009c 	.word	0x2400009c
 800bce4:	240000a0 	.word	0x240000a0

0800bce8 <__sfputc_r>:
 800bce8:	6893      	ldr	r3, [r2, #8]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	b410      	push	{r4}
 800bcf0:	6093      	str	r3, [r2, #8]
 800bcf2:	da08      	bge.n	800bd06 <__sfputc_r+0x1e>
 800bcf4:	6994      	ldr	r4, [r2, #24]
 800bcf6:	42a3      	cmp	r3, r4
 800bcf8:	db01      	blt.n	800bcfe <__sfputc_r+0x16>
 800bcfa:	290a      	cmp	r1, #10
 800bcfc:	d103      	bne.n	800bd06 <__sfputc_r+0x1e>
 800bcfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd02:	f000 bb33 	b.w	800c36c <__swbuf_r>
 800bd06:	6813      	ldr	r3, [r2, #0]
 800bd08:	1c58      	adds	r0, r3, #1
 800bd0a:	6010      	str	r0, [r2, #0]
 800bd0c:	7019      	strb	r1, [r3, #0]
 800bd0e:	4608      	mov	r0, r1
 800bd10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <__sfputs_r>:
 800bd16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd18:	4606      	mov	r6, r0
 800bd1a:	460f      	mov	r7, r1
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	18d5      	adds	r5, r2, r3
 800bd20:	42ac      	cmp	r4, r5
 800bd22:	d101      	bne.n	800bd28 <__sfputs_r+0x12>
 800bd24:	2000      	movs	r0, #0
 800bd26:	e007      	b.n	800bd38 <__sfputs_r+0x22>
 800bd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2c:	463a      	mov	r2, r7
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7ff ffda 	bl	800bce8 <__sfputc_r>
 800bd34:	1c43      	adds	r3, r0, #1
 800bd36:	d1f3      	bne.n	800bd20 <__sfputs_r+0xa>
 800bd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd3c <_vfiprintf_r>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	460d      	mov	r5, r1
 800bd42:	b09d      	sub	sp, #116	; 0x74
 800bd44:	4614      	mov	r4, r2
 800bd46:	4698      	mov	r8, r3
 800bd48:	4606      	mov	r6, r0
 800bd4a:	b118      	cbz	r0, 800bd54 <_vfiprintf_r+0x18>
 800bd4c:	6983      	ldr	r3, [r0, #24]
 800bd4e:	b90b      	cbnz	r3, 800bd54 <_vfiprintf_r+0x18>
 800bd50:	f7ff fed0 	bl	800baf4 <__sinit>
 800bd54:	4b89      	ldr	r3, [pc, #548]	; (800bf7c <_vfiprintf_r+0x240>)
 800bd56:	429d      	cmp	r5, r3
 800bd58:	d11b      	bne.n	800bd92 <_vfiprintf_r+0x56>
 800bd5a:	6875      	ldr	r5, [r6, #4]
 800bd5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd5e:	07d9      	lsls	r1, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_vfiprintf_r+0x32>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	059a      	lsls	r2, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_vfiprintf_r+0x32>
 800bd68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd6a:	f7ff ff61 	bl	800bc30 <__retarget_lock_acquire_recursive>
 800bd6e:	89ab      	ldrh	r3, [r5, #12]
 800bd70:	071b      	lsls	r3, r3, #28
 800bd72:	d501      	bpl.n	800bd78 <_vfiprintf_r+0x3c>
 800bd74:	692b      	ldr	r3, [r5, #16]
 800bd76:	b9eb      	cbnz	r3, 800bdb4 <_vfiprintf_r+0x78>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f000 fb5a 	bl	800c434 <__swsetup_r>
 800bd80:	b1c0      	cbz	r0, 800bdb4 <_vfiprintf_r+0x78>
 800bd82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd84:	07dc      	lsls	r4, r3, #31
 800bd86:	d50e      	bpl.n	800bda6 <_vfiprintf_r+0x6a>
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	b01d      	add	sp, #116	; 0x74
 800bd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd92:	4b7b      	ldr	r3, [pc, #492]	; (800bf80 <_vfiprintf_r+0x244>)
 800bd94:	429d      	cmp	r5, r3
 800bd96:	d101      	bne.n	800bd9c <_vfiprintf_r+0x60>
 800bd98:	68b5      	ldr	r5, [r6, #8]
 800bd9a:	e7df      	b.n	800bd5c <_vfiprintf_r+0x20>
 800bd9c:	4b79      	ldr	r3, [pc, #484]	; (800bf84 <_vfiprintf_r+0x248>)
 800bd9e:	429d      	cmp	r5, r3
 800bda0:	bf08      	it	eq
 800bda2:	68f5      	ldreq	r5, [r6, #12]
 800bda4:	e7da      	b.n	800bd5c <_vfiprintf_r+0x20>
 800bda6:	89ab      	ldrh	r3, [r5, #12]
 800bda8:	0598      	lsls	r0, r3, #22
 800bdaa:	d4ed      	bmi.n	800bd88 <_vfiprintf_r+0x4c>
 800bdac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdae:	f7ff ff40 	bl	800bc32 <__retarget_lock_release_recursive>
 800bdb2:	e7e9      	b.n	800bd88 <_vfiprintf_r+0x4c>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb8:	2320      	movs	r3, #32
 800bdba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdc2:	2330      	movs	r3, #48	; 0x30
 800bdc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf88 <_vfiprintf_r+0x24c>
 800bdc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdcc:	f04f 0901 	mov.w	r9, #1
 800bdd0:	4623      	mov	r3, r4
 800bdd2:	469a      	mov	sl, r3
 800bdd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdd8:	b10a      	cbz	r2, 800bdde <_vfiprintf_r+0xa2>
 800bdda:	2a25      	cmp	r2, #37	; 0x25
 800bddc:	d1f9      	bne.n	800bdd2 <_vfiprintf_r+0x96>
 800bdde:	ebba 0b04 	subs.w	fp, sl, r4
 800bde2:	d00b      	beq.n	800bdfc <_vfiprintf_r+0xc0>
 800bde4:	465b      	mov	r3, fp
 800bde6:	4622      	mov	r2, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	4630      	mov	r0, r6
 800bdec:	f7ff ff93 	bl	800bd16 <__sfputs_r>
 800bdf0:	3001      	adds	r0, #1
 800bdf2:	f000 80aa 	beq.w	800bf4a <_vfiprintf_r+0x20e>
 800bdf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdf8:	445a      	add	r2, fp
 800bdfa:	9209      	str	r2, [sp, #36]	; 0x24
 800bdfc:	f89a 3000 	ldrb.w	r3, [sl]
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 80a2 	beq.w	800bf4a <_vfiprintf_r+0x20e>
 800be06:	2300      	movs	r3, #0
 800be08:	f04f 32ff 	mov.w	r2, #4294967295
 800be0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be10:	f10a 0a01 	add.w	sl, sl, #1
 800be14:	9304      	str	r3, [sp, #16]
 800be16:	9307      	str	r3, [sp, #28]
 800be18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be1c:	931a      	str	r3, [sp, #104]	; 0x68
 800be1e:	4654      	mov	r4, sl
 800be20:	2205      	movs	r2, #5
 800be22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be26:	4858      	ldr	r0, [pc, #352]	; (800bf88 <_vfiprintf_r+0x24c>)
 800be28:	f7f4 fa62 	bl	80002f0 <memchr>
 800be2c:	9a04      	ldr	r2, [sp, #16]
 800be2e:	b9d8      	cbnz	r0, 800be68 <_vfiprintf_r+0x12c>
 800be30:	06d1      	lsls	r1, r2, #27
 800be32:	bf44      	itt	mi
 800be34:	2320      	movmi	r3, #32
 800be36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be3a:	0713      	lsls	r3, r2, #28
 800be3c:	bf44      	itt	mi
 800be3e:	232b      	movmi	r3, #43	; 0x2b
 800be40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be44:	f89a 3000 	ldrb.w	r3, [sl]
 800be48:	2b2a      	cmp	r3, #42	; 0x2a
 800be4a:	d015      	beq.n	800be78 <_vfiprintf_r+0x13c>
 800be4c:	9a07      	ldr	r2, [sp, #28]
 800be4e:	4654      	mov	r4, sl
 800be50:	2000      	movs	r0, #0
 800be52:	f04f 0c0a 	mov.w	ip, #10
 800be56:	4621      	mov	r1, r4
 800be58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be5c:	3b30      	subs	r3, #48	; 0x30
 800be5e:	2b09      	cmp	r3, #9
 800be60:	d94e      	bls.n	800bf00 <_vfiprintf_r+0x1c4>
 800be62:	b1b0      	cbz	r0, 800be92 <_vfiprintf_r+0x156>
 800be64:	9207      	str	r2, [sp, #28]
 800be66:	e014      	b.n	800be92 <_vfiprintf_r+0x156>
 800be68:	eba0 0308 	sub.w	r3, r0, r8
 800be6c:	fa09 f303 	lsl.w	r3, r9, r3
 800be70:	4313      	orrs	r3, r2
 800be72:	9304      	str	r3, [sp, #16]
 800be74:	46a2      	mov	sl, r4
 800be76:	e7d2      	b.n	800be1e <_vfiprintf_r+0xe2>
 800be78:	9b03      	ldr	r3, [sp, #12]
 800be7a:	1d19      	adds	r1, r3, #4
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	9103      	str	r1, [sp, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	bfbb      	ittet	lt
 800be84:	425b      	neglt	r3, r3
 800be86:	f042 0202 	orrlt.w	r2, r2, #2
 800be8a:	9307      	strge	r3, [sp, #28]
 800be8c:	9307      	strlt	r3, [sp, #28]
 800be8e:	bfb8      	it	lt
 800be90:	9204      	strlt	r2, [sp, #16]
 800be92:	7823      	ldrb	r3, [r4, #0]
 800be94:	2b2e      	cmp	r3, #46	; 0x2e
 800be96:	d10c      	bne.n	800beb2 <_vfiprintf_r+0x176>
 800be98:	7863      	ldrb	r3, [r4, #1]
 800be9a:	2b2a      	cmp	r3, #42	; 0x2a
 800be9c:	d135      	bne.n	800bf0a <_vfiprintf_r+0x1ce>
 800be9e:	9b03      	ldr	r3, [sp, #12]
 800bea0:	1d1a      	adds	r2, r3, #4
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	9203      	str	r2, [sp, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	bfb8      	it	lt
 800beaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800beae:	3402      	adds	r4, #2
 800beb0:	9305      	str	r3, [sp, #20]
 800beb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf98 <_vfiprintf_r+0x25c>
 800beb6:	7821      	ldrb	r1, [r4, #0]
 800beb8:	2203      	movs	r2, #3
 800beba:	4650      	mov	r0, sl
 800bebc:	f7f4 fa18 	bl	80002f0 <memchr>
 800bec0:	b140      	cbz	r0, 800bed4 <_vfiprintf_r+0x198>
 800bec2:	2340      	movs	r3, #64	; 0x40
 800bec4:	eba0 000a 	sub.w	r0, r0, sl
 800bec8:	fa03 f000 	lsl.w	r0, r3, r0
 800becc:	9b04      	ldr	r3, [sp, #16]
 800bece:	4303      	orrs	r3, r0
 800bed0:	3401      	adds	r4, #1
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bed8:	482c      	ldr	r0, [pc, #176]	; (800bf8c <_vfiprintf_r+0x250>)
 800beda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bede:	2206      	movs	r2, #6
 800bee0:	f7f4 fa06 	bl	80002f0 <memchr>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d03f      	beq.n	800bf68 <_vfiprintf_r+0x22c>
 800bee8:	4b29      	ldr	r3, [pc, #164]	; (800bf90 <_vfiprintf_r+0x254>)
 800beea:	bb1b      	cbnz	r3, 800bf34 <_vfiprintf_r+0x1f8>
 800beec:	9b03      	ldr	r3, [sp, #12]
 800beee:	3307      	adds	r3, #7
 800bef0:	f023 0307 	bic.w	r3, r3, #7
 800bef4:	3308      	adds	r3, #8
 800bef6:	9303      	str	r3, [sp, #12]
 800bef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800befa:	443b      	add	r3, r7
 800befc:	9309      	str	r3, [sp, #36]	; 0x24
 800befe:	e767      	b.n	800bdd0 <_vfiprintf_r+0x94>
 800bf00:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf04:	460c      	mov	r4, r1
 800bf06:	2001      	movs	r0, #1
 800bf08:	e7a5      	b.n	800be56 <_vfiprintf_r+0x11a>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	3401      	adds	r4, #1
 800bf0e:	9305      	str	r3, [sp, #20]
 800bf10:	4619      	mov	r1, r3
 800bf12:	f04f 0c0a 	mov.w	ip, #10
 800bf16:	4620      	mov	r0, r4
 800bf18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf1c:	3a30      	subs	r2, #48	; 0x30
 800bf1e:	2a09      	cmp	r2, #9
 800bf20:	d903      	bls.n	800bf2a <_vfiprintf_r+0x1ee>
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0c5      	beq.n	800beb2 <_vfiprintf_r+0x176>
 800bf26:	9105      	str	r1, [sp, #20]
 800bf28:	e7c3      	b.n	800beb2 <_vfiprintf_r+0x176>
 800bf2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf2e:	4604      	mov	r4, r0
 800bf30:	2301      	movs	r3, #1
 800bf32:	e7f0      	b.n	800bf16 <_vfiprintf_r+0x1da>
 800bf34:	ab03      	add	r3, sp, #12
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	462a      	mov	r2, r5
 800bf3a:	4b16      	ldr	r3, [pc, #88]	; (800bf94 <_vfiprintf_r+0x258>)
 800bf3c:	a904      	add	r1, sp, #16
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f3af 8000 	nop.w
 800bf44:	4607      	mov	r7, r0
 800bf46:	1c78      	adds	r0, r7, #1
 800bf48:	d1d6      	bne.n	800bef8 <_vfiprintf_r+0x1bc>
 800bf4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf4c:	07d9      	lsls	r1, r3, #31
 800bf4e:	d405      	bmi.n	800bf5c <_vfiprintf_r+0x220>
 800bf50:	89ab      	ldrh	r3, [r5, #12]
 800bf52:	059a      	lsls	r2, r3, #22
 800bf54:	d402      	bmi.n	800bf5c <_vfiprintf_r+0x220>
 800bf56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf58:	f7ff fe6b 	bl	800bc32 <__retarget_lock_release_recursive>
 800bf5c:	89ab      	ldrh	r3, [r5, #12]
 800bf5e:	065b      	lsls	r3, r3, #25
 800bf60:	f53f af12 	bmi.w	800bd88 <_vfiprintf_r+0x4c>
 800bf64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf66:	e711      	b.n	800bd8c <_vfiprintf_r+0x50>
 800bf68:	ab03      	add	r3, sp, #12
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	462a      	mov	r2, r5
 800bf6e:	4b09      	ldr	r3, [pc, #36]	; (800bf94 <_vfiprintf_r+0x258>)
 800bf70:	a904      	add	r1, sp, #16
 800bf72:	4630      	mov	r0, r6
 800bf74:	f000 f880 	bl	800c078 <_printf_i>
 800bf78:	e7e4      	b.n	800bf44 <_vfiprintf_r+0x208>
 800bf7a:	bf00      	nop
 800bf7c:	0800c9b0 	.word	0x0800c9b0
 800bf80:	0800c9d0 	.word	0x0800c9d0
 800bf84:	0800c990 	.word	0x0800c990
 800bf88:	0800c9f0 	.word	0x0800c9f0
 800bf8c:	0800c9fa 	.word	0x0800c9fa
 800bf90:	00000000 	.word	0x00000000
 800bf94:	0800bd17 	.word	0x0800bd17
 800bf98:	0800c9f6 	.word	0x0800c9f6

0800bf9c <_printf_common>:
 800bf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa0:	4616      	mov	r6, r2
 800bfa2:	4699      	mov	r9, r3
 800bfa4:	688a      	ldr	r2, [r1, #8]
 800bfa6:	690b      	ldr	r3, [r1, #16]
 800bfa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfac:	4293      	cmp	r3, r2
 800bfae:	bfb8      	it	lt
 800bfb0:	4613      	movlt	r3, r2
 800bfb2:	6033      	str	r3, [r6, #0]
 800bfb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfb8:	4607      	mov	r7, r0
 800bfba:	460c      	mov	r4, r1
 800bfbc:	b10a      	cbz	r2, 800bfc2 <_printf_common+0x26>
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	6033      	str	r3, [r6, #0]
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	0699      	lsls	r1, r3, #26
 800bfc6:	bf42      	ittt	mi
 800bfc8:	6833      	ldrmi	r3, [r6, #0]
 800bfca:	3302      	addmi	r3, #2
 800bfcc:	6033      	strmi	r3, [r6, #0]
 800bfce:	6825      	ldr	r5, [r4, #0]
 800bfd0:	f015 0506 	ands.w	r5, r5, #6
 800bfd4:	d106      	bne.n	800bfe4 <_printf_common+0x48>
 800bfd6:	f104 0a19 	add.w	sl, r4, #25
 800bfda:	68e3      	ldr	r3, [r4, #12]
 800bfdc:	6832      	ldr	r2, [r6, #0]
 800bfde:	1a9b      	subs	r3, r3, r2
 800bfe0:	42ab      	cmp	r3, r5
 800bfe2:	dc26      	bgt.n	800c032 <_printf_common+0x96>
 800bfe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfe8:	1e13      	subs	r3, r2, #0
 800bfea:	6822      	ldr	r2, [r4, #0]
 800bfec:	bf18      	it	ne
 800bfee:	2301      	movne	r3, #1
 800bff0:	0692      	lsls	r2, r2, #26
 800bff2:	d42b      	bmi.n	800c04c <_printf_common+0xb0>
 800bff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bff8:	4649      	mov	r1, r9
 800bffa:	4638      	mov	r0, r7
 800bffc:	47c0      	blx	r8
 800bffe:	3001      	adds	r0, #1
 800c000:	d01e      	beq.n	800c040 <_printf_common+0xa4>
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	68e5      	ldr	r5, [r4, #12]
 800c006:	6832      	ldr	r2, [r6, #0]
 800c008:	f003 0306 	and.w	r3, r3, #6
 800c00c:	2b04      	cmp	r3, #4
 800c00e:	bf08      	it	eq
 800c010:	1aad      	subeq	r5, r5, r2
 800c012:	68a3      	ldr	r3, [r4, #8]
 800c014:	6922      	ldr	r2, [r4, #16]
 800c016:	bf0c      	ite	eq
 800c018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c01c:	2500      	movne	r5, #0
 800c01e:	4293      	cmp	r3, r2
 800c020:	bfc4      	itt	gt
 800c022:	1a9b      	subgt	r3, r3, r2
 800c024:	18ed      	addgt	r5, r5, r3
 800c026:	2600      	movs	r6, #0
 800c028:	341a      	adds	r4, #26
 800c02a:	42b5      	cmp	r5, r6
 800c02c:	d11a      	bne.n	800c064 <_printf_common+0xc8>
 800c02e:	2000      	movs	r0, #0
 800c030:	e008      	b.n	800c044 <_printf_common+0xa8>
 800c032:	2301      	movs	r3, #1
 800c034:	4652      	mov	r2, sl
 800c036:	4649      	mov	r1, r9
 800c038:	4638      	mov	r0, r7
 800c03a:	47c0      	blx	r8
 800c03c:	3001      	adds	r0, #1
 800c03e:	d103      	bne.n	800c048 <_printf_common+0xac>
 800c040:	f04f 30ff 	mov.w	r0, #4294967295
 800c044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c048:	3501      	adds	r5, #1
 800c04a:	e7c6      	b.n	800bfda <_printf_common+0x3e>
 800c04c:	18e1      	adds	r1, r4, r3
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	2030      	movs	r0, #48	; 0x30
 800c052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c056:	4422      	add	r2, r4
 800c058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c05c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c060:	3302      	adds	r3, #2
 800c062:	e7c7      	b.n	800bff4 <_printf_common+0x58>
 800c064:	2301      	movs	r3, #1
 800c066:	4622      	mov	r2, r4
 800c068:	4649      	mov	r1, r9
 800c06a:	4638      	mov	r0, r7
 800c06c:	47c0      	blx	r8
 800c06e:	3001      	adds	r0, #1
 800c070:	d0e6      	beq.n	800c040 <_printf_common+0xa4>
 800c072:	3601      	adds	r6, #1
 800c074:	e7d9      	b.n	800c02a <_printf_common+0x8e>
	...

0800c078 <_printf_i>:
 800c078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c07c:	460c      	mov	r4, r1
 800c07e:	4691      	mov	r9, r2
 800c080:	7e27      	ldrb	r7, [r4, #24]
 800c082:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c084:	2f78      	cmp	r7, #120	; 0x78
 800c086:	4680      	mov	r8, r0
 800c088:	469a      	mov	sl, r3
 800c08a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c08e:	d807      	bhi.n	800c0a0 <_printf_i+0x28>
 800c090:	2f62      	cmp	r7, #98	; 0x62
 800c092:	d80a      	bhi.n	800c0aa <_printf_i+0x32>
 800c094:	2f00      	cmp	r7, #0
 800c096:	f000 80d8 	beq.w	800c24a <_printf_i+0x1d2>
 800c09a:	2f58      	cmp	r7, #88	; 0x58
 800c09c:	f000 80a3 	beq.w	800c1e6 <_printf_i+0x16e>
 800c0a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c0a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0a8:	e03a      	b.n	800c120 <_printf_i+0xa8>
 800c0aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0ae:	2b15      	cmp	r3, #21
 800c0b0:	d8f6      	bhi.n	800c0a0 <_printf_i+0x28>
 800c0b2:	a001      	add	r0, pc, #4	; (adr r0, 800c0b8 <_printf_i+0x40>)
 800c0b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c125 	.word	0x0800c125
 800c0c0:	0800c0a1 	.word	0x0800c0a1
 800c0c4:	0800c0a1 	.word	0x0800c0a1
 800c0c8:	0800c0a1 	.word	0x0800c0a1
 800c0cc:	0800c0a1 	.word	0x0800c0a1
 800c0d0:	0800c125 	.word	0x0800c125
 800c0d4:	0800c0a1 	.word	0x0800c0a1
 800c0d8:	0800c0a1 	.word	0x0800c0a1
 800c0dc:	0800c0a1 	.word	0x0800c0a1
 800c0e0:	0800c0a1 	.word	0x0800c0a1
 800c0e4:	0800c231 	.word	0x0800c231
 800c0e8:	0800c155 	.word	0x0800c155
 800c0ec:	0800c213 	.word	0x0800c213
 800c0f0:	0800c0a1 	.word	0x0800c0a1
 800c0f4:	0800c0a1 	.word	0x0800c0a1
 800c0f8:	0800c253 	.word	0x0800c253
 800c0fc:	0800c0a1 	.word	0x0800c0a1
 800c100:	0800c155 	.word	0x0800c155
 800c104:	0800c0a1 	.word	0x0800c0a1
 800c108:	0800c0a1 	.word	0x0800c0a1
 800c10c:	0800c21b 	.word	0x0800c21b
 800c110:	680b      	ldr	r3, [r1, #0]
 800c112:	1d1a      	adds	r2, r3, #4
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	600a      	str	r2, [r1, #0]
 800c118:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c11c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c120:	2301      	movs	r3, #1
 800c122:	e0a3      	b.n	800c26c <_printf_i+0x1f4>
 800c124:	6825      	ldr	r5, [r4, #0]
 800c126:	6808      	ldr	r0, [r1, #0]
 800c128:	062e      	lsls	r6, r5, #24
 800c12a:	f100 0304 	add.w	r3, r0, #4
 800c12e:	d50a      	bpl.n	800c146 <_printf_i+0xce>
 800c130:	6805      	ldr	r5, [r0, #0]
 800c132:	600b      	str	r3, [r1, #0]
 800c134:	2d00      	cmp	r5, #0
 800c136:	da03      	bge.n	800c140 <_printf_i+0xc8>
 800c138:	232d      	movs	r3, #45	; 0x2d
 800c13a:	426d      	negs	r5, r5
 800c13c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c140:	485e      	ldr	r0, [pc, #376]	; (800c2bc <_printf_i+0x244>)
 800c142:	230a      	movs	r3, #10
 800c144:	e019      	b.n	800c17a <_printf_i+0x102>
 800c146:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c14a:	6805      	ldr	r5, [r0, #0]
 800c14c:	600b      	str	r3, [r1, #0]
 800c14e:	bf18      	it	ne
 800c150:	b22d      	sxthne	r5, r5
 800c152:	e7ef      	b.n	800c134 <_printf_i+0xbc>
 800c154:	680b      	ldr	r3, [r1, #0]
 800c156:	6825      	ldr	r5, [r4, #0]
 800c158:	1d18      	adds	r0, r3, #4
 800c15a:	6008      	str	r0, [r1, #0]
 800c15c:	0628      	lsls	r0, r5, #24
 800c15e:	d501      	bpl.n	800c164 <_printf_i+0xec>
 800c160:	681d      	ldr	r5, [r3, #0]
 800c162:	e002      	b.n	800c16a <_printf_i+0xf2>
 800c164:	0669      	lsls	r1, r5, #25
 800c166:	d5fb      	bpl.n	800c160 <_printf_i+0xe8>
 800c168:	881d      	ldrh	r5, [r3, #0]
 800c16a:	4854      	ldr	r0, [pc, #336]	; (800c2bc <_printf_i+0x244>)
 800c16c:	2f6f      	cmp	r7, #111	; 0x6f
 800c16e:	bf0c      	ite	eq
 800c170:	2308      	moveq	r3, #8
 800c172:	230a      	movne	r3, #10
 800c174:	2100      	movs	r1, #0
 800c176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c17a:	6866      	ldr	r6, [r4, #4]
 800c17c:	60a6      	str	r6, [r4, #8]
 800c17e:	2e00      	cmp	r6, #0
 800c180:	bfa2      	ittt	ge
 800c182:	6821      	ldrge	r1, [r4, #0]
 800c184:	f021 0104 	bicge.w	r1, r1, #4
 800c188:	6021      	strge	r1, [r4, #0]
 800c18a:	b90d      	cbnz	r5, 800c190 <_printf_i+0x118>
 800c18c:	2e00      	cmp	r6, #0
 800c18e:	d04d      	beq.n	800c22c <_printf_i+0x1b4>
 800c190:	4616      	mov	r6, r2
 800c192:	fbb5 f1f3 	udiv	r1, r5, r3
 800c196:	fb03 5711 	mls	r7, r3, r1, r5
 800c19a:	5dc7      	ldrb	r7, [r0, r7]
 800c19c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1a0:	462f      	mov	r7, r5
 800c1a2:	42bb      	cmp	r3, r7
 800c1a4:	460d      	mov	r5, r1
 800c1a6:	d9f4      	bls.n	800c192 <_printf_i+0x11a>
 800c1a8:	2b08      	cmp	r3, #8
 800c1aa:	d10b      	bne.n	800c1c4 <_printf_i+0x14c>
 800c1ac:	6823      	ldr	r3, [r4, #0]
 800c1ae:	07df      	lsls	r7, r3, #31
 800c1b0:	d508      	bpl.n	800c1c4 <_printf_i+0x14c>
 800c1b2:	6923      	ldr	r3, [r4, #16]
 800c1b4:	6861      	ldr	r1, [r4, #4]
 800c1b6:	4299      	cmp	r1, r3
 800c1b8:	bfde      	ittt	le
 800c1ba:	2330      	movle	r3, #48	; 0x30
 800c1bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1c4:	1b92      	subs	r2, r2, r6
 800c1c6:	6122      	str	r2, [r4, #16]
 800c1c8:	f8cd a000 	str.w	sl, [sp]
 800c1cc:	464b      	mov	r3, r9
 800c1ce:	aa03      	add	r2, sp, #12
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	4640      	mov	r0, r8
 800c1d4:	f7ff fee2 	bl	800bf9c <_printf_common>
 800c1d8:	3001      	adds	r0, #1
 800c1da:	d14c      	bne.n	800c276 <_printf_i+0x1fe>
 800c1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e0:	b004      	add	sp, #16
 800c1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1e6:	4835      	ldr	r0, [pc, #212]	; (800c2bc <_printf_i+0x244>)
 800c1e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1ec:	6823      	ldr	r3, [r4, #0]
 800c1ee:	680e      	ldr	r6, [r1, #0]
 800c1f0:	061f      	lsls	r7, r3, #24
 800c1f2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c1f6:	600e      	str	r6, [r1, #0]
 800c1f8:	d514      	bpl.n	800c224 <_printf_i+0x1ac>
 800c1fa:	07d9      	lsls	r1, r3, #31
 800c1fc:	bf44      	itt	mi
 800c1fe:	f043 0320 	orrmi.w	r3, r3, #32
 800c202:	6023      	strmi	r3, [r4, #0]
 800c204:	b91d      	cbnz	r5, 800c20e <_printf_i+0x196>
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	f023 0320 	bic.w	r3, r3, #32
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	2310      	movs	r3, #16
 800c210:	e7b0      	b.n	800c174 <_printf_i+0xfc>
 800c212:	6823      	ldr	r3, [r4, #0]
 800c214:	f043 0320 	orr.w	r3, r3, #32
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	2378      	movs	r3, #120	; 0x78
 800c21c:	4828      	ldr	r0, [pc, #160]	; (800c2c0 <_printf_i+0x248>)
 800c21e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c222:	e7e3      	b.n	800c1ec <_printf_i+0x174>
 800c224:	065e      	lsls	r6, r3, #25
 800c226:	bf48      	it	mi
 800c228:	b2ad      	uxthmi	r5, r5
 800c22a:	e7e6      	b.n	800c1fa <_printf_i+0x182>
 800c22c:	4616      	mov	r6, r2
 800c22e:	e7bb      	b.n	800c1a8 <_printf_i+0x130>
 800c230:	680b      	ldr	r3, [r1, #0]
 800c232:	6826      	ldr	r6, [r4, #0]
 800c234:	6960      	ldr	r0, [r4, #20]
 800c236:	1d1d      	adds	r5, r3, #4
 800c238:	600d      	str	r5, [r1, #0]
 800c23a:	0635      	lsls	r5, r6, #24
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	d501      	bpl.n	800c244 <_printf_i+0x1cc>
 800c240:	6018      	str	r0, [r3, #0]
 800c242:	e002      	b.n	800c24a <_printf_i+0x1d2>
 800c244:	0671      	lsls	r1, r6, #25
 800c246:	d5fb      	bpl.n	800c240 <_printf_i+0x1c8>
 800c248:	8018      	strh	r0, [r3, #0]
 800c24a:	2300      	movs	r3, #0
 800c24c:	6123      	str	r3, [r4, #16]
 800c24e:	4616      	mov	r6, r2
 800c250:	e7ba      	b.n	800c1c8 <_printf_i+0x150>
 800c252:	680b      	ldr	r3, [r1, #0]
 800c254:	1d1a      	adds	r2, r3, #4
 800c256:	600a      	str	r2, [r1, #0]
 800c258:	681e      	ldr	r6, [r3, #0]
 800c25a:	6862      	ldr	r2, [r4, #4]
 800c25c:	2100      	movs	r1, #0
 800c25e:	4630      	mov	r0, r6
 800c260:	f7f4 f846 	bl	80002f0 <memchr>
 800c264:	b108      	cbz	r0, 800c26a <_printf_i+0x1f2>
 800c266:	1b80      	subs	r0, r0, r6
 800c268:	6060      	str	r0, [r4, #4]
 800c26a:	6863      	ldr	r3, [r4, #4]
 800c26c:	6123      	str	r3, [r4, #16]
 800c26e:	2300      	movs	r3, #0
 800c270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c274:	e7a8      	b.n	800c1c8 <_printf_i+0x150>
 800c276:	6923      	ldr	r3, [r4, #16]
 800c278:	4632      	mov	r2, r6
 800c27a:	4649      	mov	r1, r9
 800c27c:	4640      	mov	r0, r8
 800c27e:	47d0      	blx	sl
 800c280:	3001      	adds	r0, #1
 800c282:	d0ab      	beq.n	800c1dc <_printf_i+0x164>
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	079b      	lsls	r3, r3, #30
 800c288:	d413      	bmi.n	800c2b2 <_printf_i+0x23a>
 800c28a:	68e0      	ldr	r0, [r4, #12]
 800c28c:	9b03      	ldr	r3, [sp, #12]
 800c28e:	4298      	cmp	r0, r3
 800c290:	bfb8      	it	lt
 800c292:	4618      	movlt	r0, r3
 800c294:	e7a4      	b.n	800c1e0 <_printf_i+0x168>
 800c296:	2301      	movs	r3, #1
 800c298:	4632      	mov	r2, r6
 800c29a:	4649      	mov	r1, r9
 800c29c:	4640      	mov	r0, r8
 800c29e:	47d0      	blx	sl
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	d09b      	beq.n	800c1dc <_printf_i+0x164>
 800c2a4:	3501      	adds	r5, #1
 800c2a6:	68e3      	ldr	r3, [r4, #12]
 800c2a8:	9903      	ldr	r1, [sp, #12]
 800c2aa:	1a5b      	subs	r3, r3, r1
 800c2ac:	42ab      	cmp	r3, r5
 800c2ae:	dcf2      	bgt.n	800c296 <_printf_i+0x21e>
 800c2b0:	e7eb      	b.n	800c28a <_printf_i+0x212>
 800c2b2:	2500      	movs	r5, #0
 800c2b4:	f104 0619 	add.w	r6, r4, #25
 800c2b8:	e7f5      	b.n	800c2a6 <_printf_i+0x22e>
 800c2ba:	bf00      	nop
 800c2bc:	0800ca01 	.word	0x0800ca01
 800c2c0:	0800ca12 	.word	0x0800ca12

0800c2c4 <_sbrk_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d06      	ldr	r5, [pc, #24]	; (800c2e0 <_sbrk_r+0x1c>)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	602b      	str	r3, [r5, #0]
 800c2d0:	f7f6 f8c4 	bl	800245c <_sbrk>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_sbrk_r+0x1a>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_sbrk_r+0x1a>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	24000504 	.word	0x24000504

0800c2e4 <__sread>:
 800c2e4:	b510      	push	{r4, lr}
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ec:	f000 fab4 	bl	800c858 <_read_r>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	bfab      	itete	ge
 800c2f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c2f8:	181b      	addge	r3, r3, r0
 800c2fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2fe:	bfac      	ite	ge
 800c300:	6563      	strge	r3, [r4, #84]	; 0x54
 800c302:	81a3      	strhlt	r3, [r4, #12]
 800c304:	bd10      	pop	{r4, pc}

0800c306 <__swrite>:
 800c306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30a:	461f      	mov	r7, r3
 800c30c:	898b      	ldrh	r3, [r1, #12]
 800c30e:	05db      	lsls	r3, r3, #23
 800c310:	4605      	mov	r5, r0
 800c312:	460c      	mov	r4, r1
 800c314:	4616      	mov	r6, r2
 800c316:	d505      	bpl.n	800c324 <__swrite+0x1e>
 800c318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c31c:	2302      	movs	r3, #2
 800c31e:	2200      	movs	r2, #0
 800c320:	f000 f9c8 	bl	800c6b4 <_lseek_r>
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c32a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c32e:	81a3      	strh	r3, [r4, #12]
 800c330:	4632      	mov	r2, r6
 800c332:	463b      	mov	r3, r7
 800c334:	4628      	mov	r0, r5
 800c336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c33a:	f000 b869 	b.w	800c410 <_write_r>

0800c33e <__sseek>:
 800c33e:	b510      	push	{r4, lr}
 800c340:	460c      	mov	r4, r1
 800c342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c346:	f000 f9b5 	bl	800c6b4 <_lseek_r>
 800c34a:	1c43      	adds	r3, r0, #1
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	bf15      	itete	ne
 800c350:	6560      	strne	r0, [r4, #84]	; 0x54
 800c352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c35a:	81a3      	strheq	r3, [r4, #12]
 800c35c:	bf18      	it	ne
 800c35e:	81a3      	strhne	r3, [r4, #12]
 800c360:	bd10      	pop	{r4, pc}

0800c362 <__sclose>:
 800c362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c366:	f000 b8d3 	b.w	800c510 <_close_r>
	...

0800c36c <__swbuf_r>:
 800c36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36e:	460e      	mov	r6, r1
 800c370:	4614      	mov	r4, r2
 800c372:	4605      	mov	r5, r0
 800c374:	b118      	cbz	r0, 800c37e <__swbuf_r+0x12>
 800c376:	6983      	ldr	r3, [r0, #24]
 800c378:	b90b      	cbnz	r3, 800c37e <__swbuf_r+0x12>
 800c37a:	f7ff fbbb 	bl	800baf4 <__sinit>
 800c37e:	4b21      	ldr	r3, [pc, #132]	; (800c404 <__swbuf_r+0x98>)
 800c380:	429c      	cmp	r4, r3
 800c382:	d12b      	bne.n	800c3dc <__swbuf_r+0x70>
 800c384:	686c      	ldr	r4, [r5, #4]
 800c386:	69a3      	ldr	r3, [r4, #24]
 800c388:	60a3      	str	r3, [r4, #8]
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	071a      	lsls	r2, r3, #28
 800c38e:	d52f      	bpl.n	800c3f0 <__swbuf_r+0x84>
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	b36b      	cbz	r3, 800c3f0 <__swbuf_r+0x84>
 800c394:	6923      	ldr	r3, [r4, #16]
 800c396:	6820      	ldr	r0, [r4, #0]
 800c398:	1ac0      	subs	r0, r0, r3
 800c39a:	6963      	ldr	r3, [r4, #20]
 800c39c:	b2f6      	uxtb	r6, r6
 800c39e:	4283      	cmp	r3, r0
 800c3a0:	4637      	mov	r7, r6
 800c3a2:	dc04      	bgt.n	800c3ae <__swbuf_r+0x42>
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f000 f948 	bl	800c63c <_fflush_r>
 800c3ac:	bb30      	cbnz	r0, 800c3fc <__swbuf_r+0x90>
 800c3ae:	68a3      	ldr	r3, [r4, #8]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	60a3      	str	r3, [r4, #8]
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	6022      	str	r2, [r4, #0]
 800c3ba:	701e      	strb	r6, [r3, #0]
 800c3bc:	6963      	ldr	r3, [r4, #20]
 800c3be:	3001      	adds	r0, #1
 800c3c0:	4283      	cmp	r3, r0
 800c3c2:	d004      	beq.n	800c3ce <__swbuf_r+0x62>
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	07db      	lsls	r3, r3, #31
 800c3c8:	d506      	bpl.n	800c3d8 <__swbuf_r+0x6c>
 800c3ca:	2e0a      	cmp	r6, #10
 800c3cc:	d104      	bne.n	800c3d8 <__swbuf_r+0x6c>
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f000 f933 	bl	800c63c <_fflush_r>
 800c3d6:	b988      	cbnz	r0, 800c3fc <__swbuf_r+0x90>
 800c3d8:	4638      	mov	r0, r7
 800c3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <__swbuf_r+0x9c>)
 800c3de:	429c      	cmp	r4, r3
 800c3e0:	d101      	bne.n	800c3e6 <__swbuf_r+0x7a>
 800c3e2:	68ac      	ldr	r4, [r5, #8]
 800c3e4:	e7cf      	b.n	800c386 <__swbuf_r+0x1a>
 800c3e6:	4b09      	ldr	r3, [pc, #36]	; (800c40c <__swbuf_r+0xa0>)
 800c3e8:	429c      	cmp	r4, r3
 800c3ea:	bf08      	it	eq
 800c3ec:	68ec      	ldreq	r4, [r5, #12]
 800c3ee:	e7ca      	b.n	800c386 <__swbuf_r+0x1a>
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 f81e 	bl	800c434 <__swsetup_r>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d0cb      	beq.n	800c394 <__swbuf_r+0x28>
 800c3fc:	f04f 37ff 	mov.w	r7, #4294967295
 800c400:	e7ea      	b.n	800c3d8 <__swbuf_r+0x6c>
 800c402:	bf00      	nop
 800c404:	0800c9b0 	.word	0x0800c9b0
 800c408:	0800c9d0 	.word	0x0800c9d0
 800c40c:	0800c990 	.word	0x0800c990

0800c410 <_write_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4d07      	ldr	r5, [pc, #28]	; (800c430 <_write_r+0x20>)
 800c414:	4604      	mov	r4, r0
 800c416:	4608      	mov	r0, r1
 800c418:	4611      	mov	r1, r2
 800c41a:	2200      	movs	r2, #0
 800c41c:	602a      	str	r2, [r5, #0]
 800c41e:	461a      	mov	r2, r3
 800c420:	f7f4 fbbc 	bl	8000b9c <_write>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	d102      	bne.n	800c42e <_write_r+0x1e>
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	b103      	cbz	r3, 800c42e <_write_r+0x1e>
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
 800c430:	24000504 	.word	0x24000504

0800c434 <__swsetup_r>:
 800c434:	4b32      	ldr	r3, [pc, #200]	; (800c500 <__swsetup_r+0xcc>)
 800c436:	b570      	push	{r4, r5, r6, lr}
 800c438:	681d      	ldr	r5, [r3, #0]
 800c43a:	4606      	mov	r6, r0
 800c43c:	460c      	mov	r4, r1
 800c43e:	b125      	cbz	r5, 800c44a <__swsetup_r+0x16>
 800c440:	69ab      	ldr	r3, [r5, #24]
 800c442:	b913      	cbnz	r3, 800c44a <__swsetup_r+0x16>
 800c444:	4628      	mov	r0, r5
 800c446:	f7ff fb55 	bl	800baf4 <__sinit>
 800c44a:	4b2e      	ldr	r3, [pc, #184]	; (800c504 <__swsetup_r+0xd0>)
 800c44c:	429c      	cmp	r4, r3
 800c44e:	d10f      	bne.n	800c470 <__swsetup_r+0x3c>
 800c450:	686c      	ldr	r4, [r5, #4]
 800c452:	89a3      	ldrh	r3, [r4, #12]
 800c454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c458:	0719      	lsls	r1, r3, #28
 800c45a:	d42c      	bmi.n	800c4b6 <__swsetup_r+0x82>
 800c45c:	06dd      	lsls	r5, r3, #27
 800c45e:	d411      	bmi.n	800c484 <__swsetup_r+0x50>
 800c460:	2309      	movs	r3, #9
 800c462:	6033      	str	r3, [r6, #0]
 800c464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c468:	81a3      	strh	r3, [r4, #12]
 800c46a:	f04f 30ff 	mov.w	r0, #4294967295
 800c46e:	e03e      	b.n	800c4ee <__swsetup_r+0xba>
 800c470:	4b25      	ldr	r3, [pc, #148]	; (800c508 <__swsetup_r+0xd4>)
 800c472:	429c      	cmp	r4, r3
 800c474:	d101      	bne.n	800c47a <__swsetup_r+0x46>
 800c476:	68ac      	ldr	r4, [r5, #8]
 800c478:	e7eb      	b.n	800c452 <__swsetup_r+0x1e>
 800c47a:	4b24      	ldr	r3, [pc, #144]	; (800c50c <__swsetup_r+0xd8>)
 800c47c:	429c      	cmp	r4, r3
 800c47e:	bf08      	it	eq
 800c480:	68ec      	ldreq	r4, [r5, #12]
 800c482:	e7e6      	b.n	800c452 <__swsetup_r+0x1e>
 800c484:	0758      	lsls	r0, r3, #29
 800c486:	d512      	bpl.n	800c4ae <__swsetup_r+0x7a>
 800c488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c48a:	b141      	cbz	r1, 800c49e <__swsetup_r+0x6a>
 800c48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c490:	4299      	cmp	r1, r3
 800c492:	d002      	beq.n	800c49a <__swsetup_r+0x66>
 800c494:	4630      	mov	r0, r6
 800c496:	f000 f98f 	bl	800c7b8 <_free_r>
 800c49a:	2300      	movs	r3, #0
 800c49c:	6363      	str	r3, [r4, #52]	; 0x34
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4a4:	81a3      	strh	r3, [r4, #12]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	6063      	str	r3, [r4, #4]
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	f043 0308 	orr.w	r3, r3, #8
 800c4b4:	81a3      	strh	r3, [r4, #12]
 800c4b6:	6923      	ldr	r3, [r4, #16]
 800c4b8:	b94b      	cbnz	r3, 800c4ce <__swsetup_r+0x9a>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4c4:	d003      	beq.n	800c4ce <__swsetup_r+0x9a>
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f000 f929 	bl	800c720 <__smakebuf_r>
 800c4ce:	89a0      	ldrh	r0, [r4, #12]
 800c4d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4d4:	f010 0301 	ands.w	r3, r0, #1
 800c4d8:	d00a      	beq.n	800c4f0 <__swsetup_r+0xbc>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60a3      	str	r3, [r4, #8]
 800c4de:	6963      	ldr	r3, [r4, #20]
 800c4e0:	425b      	negs	r3, r3
 800c4e2:	61a3      	str	r3, [r4, #24]
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	b943      	cbnz	r3, 800c4fa <__swsetup_r+0xc6>
 800c4e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4ec:	d1ba      	bne.n	800c464 <__swsetup_r+0x30>
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}
 800c4f0:	0781      	lsls	r1, r0, #30
 800c4f2:	bf58      	it	pl
 800c4f4:	6963      	ldrpl	r3, [r4, #20]
 800c4f6:	60a3      	str	r3, [r4, #8]
 800c4f8:	e7f4      	b.n	800c4e4 <__swsetup_r+0xb0>
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	e7f7      	b.n	800c4ee <__swsetup_r+0xba>
 800c4fe:	bf00      	nop
 800c500:	24000018 	.word	0x24000018
 800c504:	0800c9b0 	.word	0x0800c9b0
 800c508:	0800c9d0 	.word	0x0800c9d0
 800c50c:	0800c990 	.word	0x0800c990

0800c510 <_close_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	; (800c52c <_close_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f5 ff69 	bl	80023f2 <_close>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_close_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_close_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	24000504 	.word	0x24000504

0800c530 <__sflush_r>:
 800c530:	898a      	ldrh	r2, [r1, #12]
 800c532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c536:	4605      	mov	r5, r0
 800c538:	0710      	lsls	r0, r2, #28
 800c53a:	460c      	mov	r4, r1
 800c53c:	d458      	bmi.n	800c5f0 <__sflush_r+0xc0>
 800c53e:	684b      	ldr	r3, [r1, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	dc05      	bgt.n	800c550 <__sflush_r+0x20>
 800c544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c546:	2b00      	cmp	r3, #0
 800c548:	dc02      	bgt.n	800c550 <__sflush_r+0x20>
 800c54a:	2000      	movs	r0, #0
 800c54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c552:	2e00      	cmp	r6, #0
 800c554:	d0f9      	beq.n	800c54a <__sflush_r+0x1a>
 800c556:	2300      	movs	r3, #0
 800c558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c55c:	682f      	ldr	r7, [r5, #0]
 800c55e:	602b      	str	r3, [r5, #0]
 800c560:	d032      	beq.n	800c5c8 <__sflush_r+0x98>
 800c562:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	075a      	lsls	r2, r3, #29
 800c568:	d505      	bpl.n	800c576 <__sflush_r+0x46>
 800c56a:	6863      	ldr	r3, [r4, #4]
 800c56c:	1ac0      	subs	r0, r0, r3
 800c56e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c570:	b10b      	cbz	r3, 800c576 <__sflush_r+0x46>
 800c572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c574:	1ac0      	subs	r0, r0, r3
 800c576:	2300      	movs	r3, #0
 800c578:	4602      	mov	r2, r0
 800c57a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c57c:	6a21      	ldr	r1, [r4, #32]
 800c57e:	4628      	mov	r0, r5
 800c580:	47b0      	blx	r6
 800c582:	1c43      	adds	r3, r0, #1
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	d106      	bne.n	800c596 <__sflush_r+0x66>
 800c588:	6829      	ldr	r1, [r5, #0]
 800c58a:	291d      	cmp	r1, #29
 800c58c:	d82c      	bhi.n	800c5e8 <__sflush_r+0xb8>
 800c58e:	4a2a      	ldr	r2, [pc, #168]	; (800c638 <__sflush_r+0x108>)
 800c590:	40ca      	lsrs	r2, r1
 800c592:	07d6      	lsls	r6, r2, #31
 800c594:	d528      	bpl.n	800c5e8 <__sflush_r+0xb8>
 800c596:	2200      	movs	r2, #0
 800c598:	6062      	str	r2, [r4, #4]
 800c59a:	04d9      	lsls	r1, r3, #19
 800c59c:	6922      	ldr	r2, [r4, #16]
 800c59e:	6022      	str	r2, [r4, #0]
 800c5a0:	d504      	bpl.n	800c5ac <__sflush_r+0x7c>
 800c5a2:	1c42      	adds	r2, r0, #1
 800c5a4:	d101      	bne.n	800c5aa <__sflush_r+0x7a>
 800c5a6:	682b      	ldr	r3, [r5, #0]
 800c5a8:	b903      	cbnz	r3, 800c5ac <__sflush_r+0x7c>
 800c5aa:	6560      	str	r0, [r4, #84]	; 0x54
 800c5ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ae:	602f      	str	r7, [r5, #0]
 800c5b0:	2900      	cmp	r1, #0
 800c5b2:	d0ca      	beq.n	800c54a <__sflush_r+0x1a>
 800c5b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5b8:	4299      	cmp	r1, r3
 800c5ba:	d002      	beq.n	800c5c2 <__sflush_r+0x92>
 800c5bc:	4628      	mov	r0, r5
 800c5be:	f000 f8fb 	bl	800c7b8 <_free_r>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	6360      	str	r0, [r4, #52]	; 0x34
 800c5c6:	e7c1      	b.n	800c54c <__sflush_r+0x1c>
 800c5c8:	6a21      	ldr	r1, [r4, #32]
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	47b0      	blx	r6
 800c5d0:	1c41      	adds	r1, r0, #1
 800c5d2:	d1c7      	bne.n	800c564 <__sflush_r+0x34>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0c4      	beq.n	800c564 <__sflush_r+0x34>
 800c5da:	2b1d      	cmp	r3, #29
 800c5dc:	d001      	beq.n	800c5e2 <__sflush_r+0xb2>
 800c5de:	2b16      	cmp	r3, #22
 800c5e0:	d101      	bne.n	800c5e6 <__sflush_r+0xb6>
 800c5e2:	602f      	str	r7, [r5, #0]
 800c5e4:	e7b1      	b.n	800c54a <__sflush_r+0x1a>
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5ec:	81a3      	strh	r3, [r4, #12]
 800c5ee:	e7ad      	b.n	800c54c <__sflush_r+0x1c>
 800c5f0:	690f      	ldr	r7, [r1, #16]
 800c5f2:	2f00      	cmp	r7, #0
 800c5f4:	d0a9      	beq.n	800c54a <__sflush_r+0x1a>
 800c5f6:	0793      	lsls	r3, r2, #30
 800c5f8:	680e      	ldr	r6, [r1, #0]
 800c5fa:	bf08      	it	eq
 800c5fc:	694b      	ldreq	r3, [r1, #20]
 800c5fe:	600f      	str	r7, [r1, #0]
 800c600:	bf18      	it	ne
 800c602:	2300      	movne	r3, #0
 800c604:	eba6 0807 	sub.w	r8, r6, r7
 800c608:	608b      	str	r3, [r1, #8]
 800c60a:	f1b8 0f00 	cmp.w	r8, #0
 800c60e:	dd9c      	ble.n	800c54a <__sflush_r+0x1a>
 800c610:	6a21      	ldr	r1, [r4, #32]
 800c612:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c614:	4643      	mov	r3, r8
 800c616:	463a      	mov	r2, r7
 800c618:	4628      	mov	r0, r5
 800c61a:	47b0      	blx	r6
 800c61c:	2800      	cmp	r0, #0
 800c61e:	dc06      	bgt.n	800c62e <__sflush_r+0xfe>
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c626:	81a3      	strh	r3, [r4, #12]
 800c628:	f04f 30ff 	mov.w	r0, #4294967295
 800c62c:	e78e      	b.n	800c54c <__sflush_r+0x1c>
 800c62e:	4407      	add	r7, r0
 800c630:	eba8 0800 	sub.w	r8, r8, r0
 800c634:	e7e9      	b.n	800c60a <__sflush_r+0xda>
 800c636:	bf00      	nop
 800c638:	20400001 	.word	0x20400001

0800c63c <_fflush_r>:
 800c63c:	b538      	push	{r3, r4, r5, lr}
 800c63e:	690b      	ldr	r3, [r1, #16]
 800c640:	4605      	mov	r5, r0
 800c642:	460c      	mov	r4, r1
 800c644:	b913      	cbnz	r3, 800c64c <_fflush_r+0x10>
 800c646:	2500      	movs	r5, #0
 800c648:	4628      	mov	r0, r5
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	b118      	cbz	r0, 800c656 <_fflush_r+0x1a>
 800c64e:	6983      	ldr	r3, [r0, #24]
 800c650:	b90b      	cbnz	r3, 800c656 <_fflush_r+0x1a>
 800c652:	f7ff fa4f 	bl	800baf4 <__sinit>
 800c656:	4b14      	ldr	r3, [pc, #80]	; (800c6a8 <_fflush_r+0x6c>)
 800c658:	429c      	cmp	r4, r3
 800c65a:	d11b      	bne.n	800c694 <_fflush_r+0x58>
 800c65c:	686c      	ldr	r4, [r5, #4]
 800c65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0ef      	beq.n	800c646 <_fflush_r+0xa>
 800c666:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c668:	07d0      	lsls	r0, r2, #31
 800c66a:	d404      	bmi.n	800c676 <_fflush_r+0x3a>
 800c66c:	0599      	lsls	r1, r3, #22
 800c66e:	d402      	bmi.n	800c676 <_fflush_r+0x3a>
 800c670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c672:	f7ff fadd 	bl	800bc30 <__retarget_lock_acquire_recursive>
 800c676:	4628      	mov	r0, r5
 800c678:	4621      	mov	r1, r4
 800c67a:	f7ff ff59 	bl	800c530 <__sflush_r>
 800c67e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c680:	07da      	lsls	r2, r3, #31
 800c682:	4605      	mov	r5, r0
 800c684:	d4e0      	bmi.n	800c648 <_fflush_r+0xc>
 800c686:	89a3      	ldrh	r3, [r4, #12]
 800c688:	059b      	lsls	r3, r3, #22
 800c68a:	d4dd      	bmi.n	800c648 <_fflush_r+0xc>
 800c68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c68e:	f7ff fad0 	bl	800bc32 <__retarget_lock_release_recursive>
 800c692:	e7d9      	b.n	800c648 <_fflush_r+0xc>
 800c694:	4b05      	ldr	r3, [pc, #20]	; (800c6ac <_fflush_r+0x70>)
 800c696:	429c      	cmp	r4, r3
 800c698:	d101      	bne.n	800c69e <_fflush_r+0x62>
 800c69a:	68ac      	ldr	r4, [r5, #8]
 800c69c:	e7df      	b.n	800c65e <_fflush_r+0x22>
 800c69e:	4b04      	ldr	r3, [pc, #16]	; (800c6b0 <_fflush_r+0x74>)
 800c6a0:	429c      	cmp	r4, r3
 800c6a2:	bf08      	it	eq
 800c6a4:	68ec      	ldreq	r4, [r5, #12]
 800c6a6:	e7da      	b.n	800c65e <_fflush_r+0x22>
 800c6a8:	0800c9b0 	.word	0x0800c9b0
 800c6ac:	0800c9d0 	.word	0x0800c9d0
 800c6b0:	0800c990 	.word	0x0800c990

0800c6b4 <_lseek_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	4d07      	ldr	r5, [pc, #28]	; (800c6d4 <_lseek_r+0x20>)
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	4608      	mov	r0, r1
 800c6bc:	4611      	mov	r1, r2
 800c6be:	2200      	movs	r2, #0
 800c6c0:	602a      	str	r2, [r5, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	f7f5 febc 	bl	8002440 <_lseek>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d102      	bne.n	800c6d2 <_lseek_r+0x1e>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b103      	cbz	r3, 800c6d2 <_lseek_r+0x1e>
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	24000504 	.word	0x24000504

0800c6d8 <__swhatbuf_r>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	460e      	mov	r6, r1
 800c6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e0:	2900      	cmp	r1, #0
 800c6e2:	b096      	sub	sp, #88	; 0x58
 800c6e4:	4614      	mov	r4, r2
 800c6e6:	461d      	mov	r5, r3
 800c6e8:	da07      	bge.n	800c6fa <__swhatbuf_r+0x22>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	602b      	str	r3, [r5, #0]
 800c6ee:	89b3      	ldrh	r3, [r6, #12]
 800c6f0:	061a      	lsls	r2, r3, #24
 800c6f2:	d410      	bmi.n	800c716 <__swhatbuf_r+0x3e>
 800c6f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6f8:	e00e      	b.n	800c718 <__swhatbuf_r+0x40>
 800c6fa:	466a      	mov	r2, sp
 800c6fc:	f000 f8be 	bl	800c87c <_fstat_r>
 800c700:	2800      	cmp	r0, #0
 800c702:	dbf2      	blt.n	800c6ea <__swhatbuf_r+0x12>
 800c704:	9a01      	ldr	r2, [sp, #4]
 800c706:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c70a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c70e:	425a      	negs	r2, r3
 800c710:	415a      	adcs	r2, r3
 800c712:	602a      	str	r2, [r5, #0]
 800c714:	e7ee      	b.n	800c6f4 <__swhatbuf_r+0x1c>
 800c716:	2340      	movs	r3, #64	; 0x40
 800c718:	2000      	movs	r0, #0
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	b016      	add	sp, #88	; 0x58
 800c71e:	bd70      	pop	{r4, r5, r6, pc}

0800c720 <__smakebuf_r>:
 800c720:	898b      	ldrh	r3, [r1, #12]
 800c722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c724:	079d      	lsls	r5, r3, #30
 800c726:	4606      	mov	r6, r0
 800c728:	460c      	mov	r4, r1
 800c72a:	d507      	bpl.n	800c73c <__smakebuf_r+0x1c>
 800c72c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	6123      	str	r3, [r4, #16]
 800c734:	2301      	movs	r3, #1
 800c736:	6163      	str	r3, [r4, #20]
 800c738:	b002      	add	sp, #8
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	ab01      	add	r3, sp, #4
 800c73e:	466a      	mov	r2, sp
 800c740:	f7ff ffca 	bl	800c6d8 <__swhatbuf_r>
 800c744:	9900      	ldr	r1, [sp, #0]
 800c746:	4605      	mov	r5, r0
 800c748:	4630      	mov	r0, r6
 800c74a:	f7ff fa73 	bl	800bc34 <_malloc_r>
 800c74e:	b948      	cbnz	r0, 800c764 <__smakebuf_r+0x44>
 800c750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c754:	059a      	lsls	r2, r3, #22
 800c756:	d4ef      	bmi.n	800c738 <__smakebuf_r+0x18>
 800c758:	f023 0303 	bic.w	r3, r3, #3
 800c75c:	f043 0302 	orr.w	r3, r3, #2
 800c760:	81a3      	strh	r3, [r4, #12]
 800c762:	e7e3      	b.n	800c72c <__smakebuf_r+0xc>
 800c764:	4b0d      	ldr	r3, [pc, #52]	; (800c79c <__smakebuf_r+0x7c>)
 800c766:	62b3      	str	r3, [r6, #40]	; 0x28
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	6020      	str	r0, [r4, #0]
 800c76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c770:	81a3      	strh	r3, [r4, #12]
 800c772:	9b00      	ldr	r3, [sp, #0]
 800c774:	6163      	str	r3, [r4, #20]
 800c776:	9b01      	ldr	r3, [sp, #4]
 800c778:	6120      	str	r0, [r4, #16]
 800c77a:	b15b      	cbz	r3, 800c794 <__smakebuf_r+0x74>
 800c77c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c780:	4630      	mov	r0, r6
 800c782:	f000 f88d 	bl	800c8a0 <_isatty_r>
 800c786:	b128      	cbz	r0, 800c794 <__smakebuf_r+0x74>
 800c788:	89a3      	ldrh	r3, [r4, #12]
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	f043 0301 	orr.w	r3, r3, #1
 800c792:	81a3      	strh	r3, [r4, #12]
 800c794:	89a0      	ldrh	r0, [r4, #12]
 800c796:	4305      	orrs	r5, r0
 800c798:	81a5      	strh	r5, [r4, #12]
 800c79a:	e7cd      	b.n	800c738 <__smakebuf_r+0x18>
 800c79c:	0800ba8d 	.word	0x0800ba8d

0800c7a0 <__malloc_lock>:
 800c7a0:	4801      	ldr	r0, [pc, #4]	; (800c7a8 <__malloc_lock+0x8>)
 800c7a2:	f7ff ba45 	b.w	800bc30 <__retarget_lock_acquire_recursive>
 800c7a6:	bf00      	nop
 800c7a8:	240004fc 	.word	0x240004fc

0800c7ac <__malloc_unlock>:
 800c7ac:	4801      	ldr	r0, [pc, #4]	; (800c7b4 <__malloc_unlock+0x8>)
 800c7ae:	f7ff ba40 	b.w	800bc32 <__retarget_lock_release_recursive>
 800c7b2:	bf00      	nop
 800c7b4:	240004fc 	.word	0x240004fc

0800c7b8 <_free_r>:
 800c7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7ba:	2900      	cmp	r1, #0
 800c7bc:	d048      	beq.n	800c850 <_free_r+0x98>
 800c7be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7c2:	9001      	str	r0, [sp, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f1a1 0404 	sub.w	r4, r1, #4
 800c7ca:	bfb8      	it	lt
 800c7cc:	18e4      	addlt	r4, r4, r3
 800c7ce:	f7ff ffe7 	bl	800c7a0 <__malloc_lock>
 800c7d2:	4a20      	ldr	r2, [pc, #128]	; (800c854 <_free_r+0x9c>)
 800c7d4:	9801      	ldr	r0, [sp, #4]
 800c7d6:	6813      	ldr	r3, [r2, #0]
 800c7d8:	4615      	mov	r5, r2
 800c7da:	b933      	cbnz	r3, 800c7ea <_free_r+0x32>
 800c7dc:	6063      	str	r3, [r4, #4]
 800c7de:	6014      	str	r4, [r2, #0]
 800c7e0:	b003      	add	sp, #12
 800c7e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7e6:	f7ff bfe1 	b.w	800c7ac <__malloc_unlock>
 800c7ea:	42a3      	cmp	r3, r4
 800c7ec:	d90b      	bls.n	800c806 <_free_r+0x4e>
 800c7ee:	6821      	ldr	r1, [r4, #0]
 800c7f0:	1862      	adds	r2, r4, r1
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	bf04      	itt	eq
 800c7f6:	681a      	ldreq	r2, [r3, #0]
 800c7f8:	685b      	ldreq	r3, [r3, #4]
 800c7fa:	6063      	str	r3, [r4, #4]
 800c7fc:	bf04      	itt	eq
 800c7fe:	1852      	addeq	r2, r2, r1
 800c800:	6022      	streq	r2, [r4, #0]
 800c802:	602c      	str	r4, [r5, #0]
 800c804:	e7ec      	b.n	800c7e0 <_free_r+0x28>
 800c806:	461a      	mov	r2, r3
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	b10b      	cbz	r3, 800c810 <_free_r+0x58>
 800c80c:	42a3      	cmp	r3, r4
 800c80e:	d9fa      	bls.n	800c806 <_free_r+0x4e>
 800c810:	6811      	ldr	r1, [r2, #0]
 800c812:	1855      	adds	r5, r2, r1
 800c814:	42a5      	cmp	r5, r4
 800c816:	d10b      	bne.n	800c830 <_free_r+0x78>
 800c818:	6824      	ldr	r4, [r4, #0]
 800c81a:	4421      	add	r1, r4
 800c81c:	1854      	adds	r4, r2, r1
 800c81e:	42a3      	cmp	r3, r4
 800c820:	6011      	str	r1, [r2, #0]
 800c822:	d1dd      	bne.n	800c7e0 <_free_r+0x28>
 800c824:	681c      	ldr	r4, [r3, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	6053      	str	r3, [r2, #4]
 800c82a:	4421      	add	r1, r4
 800c82c:	6011      	str	r1, [r2, #0]
 800c82e:	e7d7      	b.n	800c7e0 <_free_r+0x28>
 800c830:	d902      	bls.n	800c838 <_free_r+0x80>
 800c832:	230c      	movs	r3, #12
 800c834:	6003      	str	r3, [r0, #0]
 800c836:	e7d3      	b.n	800c7e0 <_free_r+0x28>
 800c838:	6825      	ldr	r5, [r4, #0]
 800c83a:	1961      	adds	r1, r4, r5
 800c83c:	428b      	cmp	r3, r1
 800c83e:	bf04      	itt	eq
 800c840:	6819      	ldreq	r1, [r3, #0]
 800c842:	685b      	ldreq	r3, [r3, #4]
 800c844:	6063      	str	r3, [r4, #4]
 800c846:	bf04      	itt	eq
 800c848:	1949      	addeq	r1, r1, r5
 800c84a:	6021      	streq	r1, [r4, #0]
 800c84c:	6054      	str	r4, [r2, #4]
 800c84e:	e7c7      	b.n	800c7e0 <_free_r+0x28>
 800c850:	b003      	add	sp, #12
 800c852:	bd30      	pop	{r4, r5, pc}
 800c854:	2400009c 	.word	0x2400009c

0800c858 <_read_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4d07      	ldr	r5, [pc, #28]	; (800c878 <_read_r+0x20>)
 800c85c:	4604      	mov	r4, r0
 800c85e:	4608      	mov	r0, r1
 800c860:	4611      	mov	r1, r2
 800c862:	2200      	movs	r2, #0
 800c864:	602a      	str	r2, [r5, #0]
 800c866:	461a      	mov	r2, r3
 800c868:	f7f5 fda6 	bl	80023b8 <_read>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	d102      	bne.n	800c876 <_read_r+0x1e>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	b103      	cbz	r3, 800c876 <_read_r+0x1e>
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	24000504 	.word	0x24000504

0800c87c <_fstat_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	4d07      	ldr	r5, [pc, #28]	; (800c89c <_fstat_r+0x20>)
 800c880:	2300      	movs	r3, #0
 800c882:	4604      	mov	r4, r0
 800c884:	4608      	mov	r0, r1
 800c886:	4611      	mov	r1, r2
 800c888:	602b      	str	r3, [r5, #0]
 800c88a:	f7f5 fdbe 	bl	800240a <_fstat>
 800c88e:	1c43      	adds	r3, r0, #1
 800c890:	d102      	bne.n	800c898 <_fstat_r+0x1c>
 800c892:	682b      	ldr	r3, [r5, #0]
 800c894:	b103      	cbz	r3, 800c898 <_fstat_r+0x1c>
 800c896:	6023      	str	r3, [r4, #0]
 800c898:	bd38      	pop	{r3, r4, r5, pc}
 800c89a:	bf00      	nop
 800c89c:	24000504 	.word	0x24000504

0800c8a0 <_isatty_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4d06      	ldr	r5, [pc, #24]	; (800c8bc <_isatty_r+0x1c>)
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	602b      	str	r3, [r5, #0]
 800c8ac:	f7f5 fdbd 	bl	800242a <_isatty>
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d102      	bne.n	800c8ba <_isatty_r+0x1a>
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	b103      	cbz	r3, 800c8ba <_isatty_r+0x1a>
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	24000504 	.word	0x24000504

0800c8c0 <_init>:
 800c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c2:	bf00      	nop
 800c8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c6:	bc08      	pop	{r3}
 800c8c8:	469e      	mov	lr, r3
 800c8ca:	4770      	bx	lr

0800c8cc <_fini>:
 800c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ce:	bf00      	nop
 800c8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d2:	bc08      	pop	{r3}
 800c8d4:	469e      	mov	lr, r3
 800c8d6:	4770      	bx	lr
