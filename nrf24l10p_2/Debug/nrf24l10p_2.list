
nrf24l10p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c308  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800c5b8  0800c5b8  0001c5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c6f8  0800c6f8  0001c6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c700  0800c700  0001c700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c704  0800c704  0001c704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800c708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000048c  2400007c  0800c784  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000508  0800c784  00020508  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e406  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f1c  00000000  00000000  0004e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a98  00000000  00000000  000523d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001970  00000000  00000000  00053e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000356c1  00000000  00000000  000557d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ea22  00000000  00000000  0008ae99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00163940  00000000  00000000  000a98bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020d1fb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007c9c  00000000  00000000  0020d250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c5a0 	.word	0x0800c5a0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	0800c5a0 	.word	0x0800c5a0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <CS_Select>:
#define NRF24_CSN_PORT   GPIOD
#define NRF24_CSN_PIN    GPIO_PIN_15


void CS_Select (void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <CS_Select+0x14>)
 8000694:	f004 f9e0 	bl	8004a58 <HAL_GPIO_WritePin>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	58020c00 	.word	0x58020c00

080006a0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006aa:	4802      	ldr	r0, [pc, #8]	; (80006b4 <CS_UnSelect+0x14>)
 80006ac:	f004 f9d4 	bl	8004a58 <HAL_GPIO_WritePin>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	58020c00 	.word	0x58020c00

080006b8 <CE_Enable>:


void CE_Enable (void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <CE_Enable+0x14>)
 80006c4:	f004 f9c8 	bl	8004a58 <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58020c00 	.word	0x58020c00

080006d0 <CE_Disable>:

void CE_Disable (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006da:	4802      	ldr	r0, [pc, #8]	; (80006e4 <CE_Disable+0x14>)
 80006dc:	f004 f9bc 	bl	8004a58 <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58020c00 	.word	0x58020c00

080006e8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000706:	f7ff ffbf 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800070a:	f107 010c 	add.w	r1, r7, #12
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	2202      	movs	r2, #2
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <nrf24_WriteReg+0x40>)
 8000716:	f007 fb53 	bl	8007dc0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800071a:	f7ff ffc1 	bl	80006a0 <CS_UnSelect>
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	24000394 	.word	0x24000394

0800072c <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	b2db      	uxtb	r3, r3
 8000742:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000744:	f7ff ffa0 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000748:	f107 0114 	add.w	r1, r7, #20
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	2201      	movs	r2, #1
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <nrf24_WriteRegMulti+0x48>)
 8000752:	f007 fb35 	bl	8007dc0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	b29a      	uxth	r2, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <nrf24_WriteRegMulti+0x48>)
 8000762:	f007 fb2d 	bl	8007dc0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000766:	f7ff ff9b 	bl	80006a0 <CS_UnSelect>
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	24000394 	.word	0x24000394

08000778 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000786:	f7ff ff7f 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800078a:	1df9      	adds	r1, r7, #7
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2201      	movs	r2, #1
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <nrf24_ReadReg+0x3c>)
 8000792:	f007 fb15 	bl	8007dc0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000796:	f107 010f 	add.w	r1, r7, #15
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	2201      	movs	r2, #1
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <nrf24_ReadReg+0x3c>)
 80007a0:	f007 fd00 	bl	80081a4 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80007a4:	f7ff ff7c 	bl	80006a0 <CS_UnSelect>

	return data;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000394 	.word	0x24000394

080007b8 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80007c6:	f7ff ff5f 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80007ca:	f107 010f 	add.w	r1, r7, #15
 80007ce:	2364      	movs	r3, #100	; 0x64
 80007d0:	2201      	movs	r2, #1
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <nrf24_ReadReg_Multi+0x3c>)
 80007d4:	f007 faf4 	bl	8007dc0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <nrf24_ReadReg_Multi+0x3c>)
 80007e4:	f007 fcde 	bl	80081a4 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80007e8:	f7ff ff5a 	bl	80006a0 <CS_UnSelect>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000394 	.word	0x24000394

080007f8 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000802:	f7ff ff41 	bl	8000688 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000806:	1df9      	adds	r1, r7, #7
 8000808:	2364      	movs	r3, #100	; 0x64
 800080a:	2201      	movs	r2, #1
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <nrfsendCmd+0x28>)
 800080e:	f007 fad7 	bl	8007dc0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000812:	f7ff ff45 	bl	80006a0 <CS_UnSelect>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	24000394 	.word	0x24000394

08000824 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b07      	cmp	r3, #7
 8000832:	d104      	bne.n	800083e <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000834:	2100      	movs	r1, #0
 8000836:	2007      	movs	r0, #7
 8000838:	f7ff ff56 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 800083c:	e090      	b.n	8000960 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b17      	cmp	r3, #23
 8000842:	d104      	bne.n	800084e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000844:	2111      	movs	r1, #17
 8000846:	2017      	movs	r0, #23
 8000848:	f7ff ff4e 	bl	80006e8 <nrf24_WriteReg>
}
 800084c:	e088      	b.n	8000960 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800084e:	2108      	movs	r1, #8
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff ff49 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000856:	213f      	movs	r1, #63	; 0x3f
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff45 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800085e:	2103      	movs	r1, #3
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff ff41 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000866:	2103      	movs	r1, #3
 8000868:	2003      	movs	r0, #3
 800086a:	f7ff ff3d 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800086e:	2103      	movs	r1, #3
 8000870:	2004      	movs	r0, #4
 8000872:	f7ff ff39 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000876:	2102      	movs	r1, #2
 8000878:	2005      	movs	r0, #5
 800087a:	f7ff ff35 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800087e:	210e      	movs	r1, #14
 8000880:	2006      	movs	r0, #6
 8000882:	f7ff ff31 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000886:	2100      	movs	r1, #0
 8000888:	2007      	movs	r0, #7
 800088a:	f7ff ff2d 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800088e:	2100      	movs	r1, #0
 8000890:	2008      	movs	r0, #8
 8000892:	f7ff ff29 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000896:	2100      	movs	r1, #0
 8000898:	2009      	movs	r0, #9
 800089a:	f7ff ff25 	bl	80006e8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800089e:	4a32      	ldr	r2, [pc, #200]	; (8000968 <nrf24_reset+0x144>)
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a8:	6018      	str	r0, [r3, #0]
 80008aa:	3304      	adds	r3, #4
 80008ac:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2205      	movs	r2, #5
 80008b4:	4619      	mov	r1, r3
 80008b6:	200a      	movs	r0, #10
 80008b8:	f7ff ff38 	bl	800072c <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80008bc:	4a2b      	ldr	r2, [pc, #172]	; (800096c <nrf24_reset+0x148>)
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c6:	6018      	str	r0, [r3, #0]
 80008c8:	3304      	adds	r3, #4
 80008ca:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	2205      	movs	r2, #5
 80008d2:	4619      	mov	r1, r3
 80008d4:	200b      	movs	r0, #11
 80008d6:	f7ff ff29 	bl	800072c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80008da:	21c3      	movs	r1, #195	; 0xc3
 80008dc:	200c      	movs	r0, #12
 80008de:	f7ff ff03 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80008e2:	21c4      	movs	r1, #196	; 0xc4
 80008e4:	200d      	movs	r0, #13
 80008e6:	f7ff feff 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80008ea:	21c5      	movs	r1, #197	; 0xc5
 80008ec:	200e      	movs	r0, #14
 80008ee:	f7ff fefb 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80008f2:	21c6      	movs	r1, #198	; 0xc6
 80008f4:	200f      	movs	r0, #15
 80008f6:	f7ff fef7 	bl	80006e8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80008fa:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <nrf24_reset+0x144>)
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000904:	6018      	str	r0, [r3, #0]
 8000906:	3304      	adds	r3, #4
 8000908:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2205      	movs	r2, #5
 8000910:	4619      	mov	r1, r3
 8000912:	2010      	movs	r0, #16
 8000914:	f7ff ff0a 	bl	800072c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000918:	2100      	movs	r1, #0
 800091a:	2011      	movs	r0, #17
 800091c:	f7ff fee4 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000920:	2100      	movs	r1, #0
 8000922:	2012      	movs	r0, #18
 8000924:	f7ff fee0 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000928:	2100      	movs	r1, #0
 800092a:	2013      	movs	r0, #19
 800092c:	f7ff fedc 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000930:	2100      	movs	r1, #0
 8000932:	2014      	movs	r0, #20
 8000934:	f7ff fed8 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000938:	2100      	movs	r1, #0
 800093a:	2015      	movs	r0, #21
 800093c:	f7ff fed4 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000940:	2100      	movs	r1, #0
 8000942:	2016      	movs	r0, #22
 8000944:	f7ff fed0 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000948:	2111      	movs	r1, #17
 800094a:	2017      	movs	r0, #23
 800094c:	f7ff fecc 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000950:	2100      	movs	r1, #0
 8000952:	201c      	movs	r0, #28
 8000954:	f7ff fec8 	bl	80006e8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000958:	2100      	movs	r1, #0
 800095a:	201d      	movs	r0, #29
 800095c:	f7ff fec4 	bl	80006e8 <nrf24_WriteReg>
}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	0800c5b8 	.word	0x0800c5b8
 800096c:	0800c5c0 	.word	0x0800c5c0

08000970 <NRF24_Init>:




void NRF24_Init (void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000974:	f7ff feac 	bl	80006d0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff53 	bl	8000824 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff feb1 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000986:	2100      	movs	r1, #0
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff fead 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800098e:	2100      	movs	r1, #0
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fea9 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000996:	2103      	movs	r1, #3
 8000998:	2003      	movs	r0, #3
 800099a:	f7ff fea5 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800099e:	2100      	movs	r1, #0
 80009a0:	2004      	movs	r0, #4
 80009a2:	f7ff fea1 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80009a6:	2100      	movs	r1, #0
 80009a8:	2005      	movs	r0, #5
 80009aa:	f7ff fe9d 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80009ae:	210e      	movs	r1, #14
 80009b0:	2006      	movs	r0, #6
 80009b2:	f7ff fe99 	bl	80006e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80009b6:	f7ff fe7f 	bl	80006b8 <CE_Enable>

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}

080009be <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80009ca:	f7ff fe81 	bl	80006d0 <CE_Disable>

	nrf24_reset (STATUS);
 80009ce:	2007      	movs	r0, #7
 80009d0:	f7ff ff28 	bl	8000824 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	4619      	mov	r1, r3
 80009d8:	2005      	movs	r0, #5
 80009da:	f7ff fe85 	bl	80006e8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80009de:	2002      	movs	r0, #2
 80009e0:	f7ff feca 	bl	8000778 <nrf24_ReadReg>
 80009e4:	4603      	mov	r3, r0
 80009e6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	4619      	mov	r1, r3
 80009f4:	2002      	movs	r0, #2
 80009f6:	f7ff fe77 	bl	80006e8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80009fa:	2205      	movs	r2, #5
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	200b      	movs	r0, #11
 8000a00:	f7ff fe94 	bl	800072c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000a04:	21ee      	movs	r1, #238	; 0xee
 8000a06:	200c      	movs	r0, #12
 8000a08:	f7ff fe6e 	bl	80006e8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	2013      	movs	r0, #19
 8000a10:	f7ff fe6a 	bl	80006e8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff feaf 	bl	8000778 <nrf24_ReadReg>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	f043 0303 	orr.w	r3, r3, #3
 8000a24:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fe5c 	bl	80006e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000a30:	f7ff fe42 	bl	80006b8 <CE_Enable>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000a44:	2007      	movs	r0, #7
 8000a46:	f7ff fe97 	bl	8000778 <nrf24_ReadReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00b      	beq.n	8000a70 <isDataAvailable+0x34>
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	2007      	movs	r0, #7
 8000a68:	f7ff fe3e 	bl	80006e8 <nrf24_WriteReg>

		return 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e000      	b.n	8000a72 <isDataAvailable+0x36>
	}

	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000a88:	f7ff fdfe 	bl	8000688 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000a8c:	2361      	movs	r3, #97	; 0x61
 8000a8e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000a90:	f107 010f 	add.w	r1, r7, #15
 8000a94:	2364      	movs	r3, #100	; 0x64
 8000a96:	2201      	movs	r2, #1
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <NRF24_Receive+0x50>)
 8000a9a:	f007 f991 	bl	8007dc0 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	4809      	ldr	r0, [pc, #36]	; (8000acc <NRF24_Receive+0x50>)
 8000aa8:	f007 fb7c 	bl	80081a4 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000aac:	f7ff fdf8 	bl	80006a0 <CS_UnSelect>

	HAL_Delay(1);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f001 fcad 	bl	8002410 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000ab6:	23e2      	movs	r3, #226	; 0xe2
 8000ab8:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe9b 	bl	80007f8 <nrfsendCmd>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	24000394 	.word	0x24000394

08000ad0 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	e00c      	b.n	8000af8 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	b2d9      	uxtb	r1, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	18d4      	adds	r4, r2, r3
 8000ae8:	4608      	mov	r0, r1
 8000aea:	f7ff fe45 	bl	8000778 <nrf24_ReadReg>
 8000aee:	4603      	mov	r3, r0
 8000af0:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b09      	cmp	r3, #9
 8000afc:	ddef      	ble.n	8000ade <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	330a      	adds	r3, #10
 8000b02:	2205      	movs	r2, #5
 8000b04:	4619      	mov	r1, r3
 8000b06:	200a      	movs	r0, #10
 8000b08:	f7ff fe56 	bl	80007b8 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	330f      	adds	r3, #15
 8000b10:	2205      	movs	r2, #5
 8000b12:	4619      	mov	r1, r3
 8000b14:	200b      	movs	r0, #11
 8000b16:	f7ff fe4f 	bl	80007b8 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f103 0414 	add.w	r4, r3, #20
 8000b20:	200c      	movs	r0, #12
 8000b22:	f7ff fe29 	bl	8000778 <nrf24_ReadReg>
 8000b26:	4603      	mov	r3, r0
 8000b28:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f103 0415 	add.w	r4, r3, #21
 8000b30:	200d      	movs	r0, #13
 8000b32:	f7ff fe21 	bl	8000778 <nrf24_ReadReg>
 8000b36:	4603      	mov	r3, r0
 8000b38:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f103 0416 	add.w	r4, r3, #22
 8000b40:	200e      	movs	r0, #14
 8000b42:	f7ff fe19 	bl	8000778 <nrf24_ReadReg>
 8000b46:	4603      	mov	r3, r0
 8000b48:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f103 0417 	add.w	r4, r3, #23
 8000b50:	200f      	movs	r0, #15
 8000b52:	f7ff fe11 	bl	8000778 <nrf24_ReadReg>
 8000b56:	4603      	mov	r3, r0
 8000b58:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3318      	adds	r3, #24
 8000b5e:	2205      	movs	r2, #5
 8000b60:	4619      	mov	r1, r3
 8000b62:	200a      	movs	r0, #10
 8000b64:	f7ff fe28 	bl	80007b8 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000b68:	231d      	movs	r3, #29
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	e00e      	b.n	8000b8c <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	3b0c      	subs	r3, #12
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	18d4      	adds	r4, r2, r3
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	f7ff fdfb 	bl	8000778 <nrf24_ReadReg>
 8000b82:	4603      	mov	r3, r0
 8000b84:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	2b25      	cmp	r3, #37	; 0x25
 8000b90:	dded      	ble.n	8000b6e <NRF24_ReadAll+0x9e>
	}

}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd90      	pop	{r4, r7, pc}

08000b9c <_write>:
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}
int _write(int file, unsigned char * p, int len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
HAL_UART_Transmit(&huart3, p, len, 10);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	230a      	movs	r3, #10
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <_write+0x24>)
 8000bb2:	f009 fbb3 	bl	800a31c <HAL_UART_Transmit>
return len;
 8000bb6:	687b      	ldr	r3, [r7, #4]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	240000dc 	.word	0x240000dc

08000bc4 <HAL_FDCAN_RxFifo0Callback>:
uint8_t RxData_From_Node3[16];
uint8_t RxData_From_Node1[16];
uint8_t RxData_From_Node4[8];

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d10f      	bne.n	8000bf8 <HAL_FDCAN_RxFifo0Callback+0x34>
   {
	  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00a      	beq.n	8000bf8 <HAL_FDCAN_RxFifo0Callback+0x34>
	  {

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node3) != HAL_OK)
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f002 ff23 	bl	8003a34 <HAL_FDCAN_GetRxMessage>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_FDCAN_RxFifo0Callback+0x34>
		{
		Error_Handler();
 8000bf4:	f000 ff58 	bl	8001aa8 <Error_Handler>
		}

	  }
   }

 }
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	4000a000 	.word	0x4000a000
 8000c04:	24000384 	.word	0x24000384
 8000c08:	240004ac 	.word	0x240004ac

08000c0c <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_FDCAN_RxFifo1Callback+0x3c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d10f      	bne.n	8000c40 <HAL_FDCAN_RxFifo1Callback+0x34>
   {
	  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00a      	beq.n	8000c40 <HAL_FDCAN_RxFifo1Callback+0x34>
	  {
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData_From_Node1) != HAL_OK)
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_FDCAN_RxFifo1Callback+0x40>)
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_FDCAN_RxFifo1Callback+0x44>)
 8000c2e:	2141      	movs	r1, #65	; 0x41
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f002 feff 	bl	8003a34 <HAL_FDCAN_GetRxMessage>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_FDCAN_RxFifo1Callback+0x34>
		{
		Error_Handler();
 8000c3c:	f000 ff34 	bl	8001aa8 <Error_Handler>
		}

	  }
   }
 }
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	4000a000 	.word	0x4000a000
 8000c4c:	2400019c 	.word	0x2400019c
 8000c50:	240004ac 	.word	0x240004ac

08000c54 <HAL_FDCAN_RxBufferNewMessageCallback>:
void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

    if (FDCAN1 == hfdcan->Instance)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_FDCAN_RxBufferNewMessageCallback+0x30>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d10a      	bne.n	8000c7c <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
    {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_BUFFER0, &RxHeader, RxData_From_Node4) != HAL_OK)
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_FDCAN_RxBufferNewMessageCallback+0x34>)
 8000c68:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_FDCAN_RxBufferNewMessageCallback+0x38>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f002 fee1 	bl	8003a34 <HAL_FDCAN_GetRxMessage>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
        {
            Error_Handler();
 8000c78:	f000 ff16 	bl	8001aa8 <Error_Handler>
        }
    }

}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	4000a000 	.word	0x4000a000
 8000c88:	240000c4 	.word	0x240000c4
 8000c8c:	240004ac 	.word	0x240004ac

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	; 0x50
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c96:	f001 fb29 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9a:	f000 f9a5 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f000 fdf1 	bl	8001884 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ca2:	f000 fb9d 	bl	80013e0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ca6:	f000 fda1 	bl	80017ec <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000caa:	f000 fbef 	bl	800148c <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000cae:	f000 fa89 	bl	80011c4 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000cb2:	f000 fcaf 	bl	8001614 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000cb6:	f000 fa0d 	bl	80010d4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000cba:	f000 fd21 	bl	8001700 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//////////////nrf///////////
  NRF24_Init();
 8000cbe:	f7ff fe57 	bl	8000970 <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);//nrf rx
 8000cc2:	210a      	movs	r1, #10
 8000cc4:	48be      	ldr	r0, [pc, #760]	; (8000fc0 <main+0x330>)
 8000cc6:	f7ff fe7a 	bl	80009be <NRF24_RxMode>
  NRF24_ReadAll(data);//nrf rx
 8000cca:	48be      	ldr	r0, [pc, #760]	; (8000fc4 <main+0x334>)
 8000ccc:	f7ff ff00 	bl	8000ad0 <NRF24_ReadAll>
////////////////////////////

////////////motor///////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//motor back1
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	48bd      	ldr	r0, [pc, #756]	; (8000fc8 <main+0x338>)
 8000cd4:	f008 f8e6 	bl	8008ea4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//motor back2
 8000cd8:	2104      	movs	r1, #4
 8000cda:	48bb      	ldr	r0, [pc, #748]	; (8000fc8 <main+0x338>)
 8000cdc:	f008 f8e2 	bl	8008ea4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//motor front
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	48b9      	ldr	r0, [pc, #740]	; (8000fc8 <main+0x338>)
 8000ce4:	f008 f8de 	bl	8008ea4 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,1);//motor enable1
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cee:	48b7      	ldr	r0, [pc, #732]	; (8000fcc <main+0x33c>)
 8000cf0:	f003 feb2 	bl	8004a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//motor enable2
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfa:	48b5      	ldr	r0, [pc, #724]	; (8000fd0 <main+0x340>)
 8000cfc:	f003 feac 	bl	8004a58 <HAL_GPIO_WritePin>
////////////////////////////

///////////jodo///////////
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//led jodo
 8000d00:	2100      	movs	r1, #0
 8000d02:	48b4      	ldr	r0, [pc, #720]	; (8000fd4 <main+0x344>)
 8000d04:	f008 f8ce 	bl	8008ea4 <HAL_TIM_PWM_Start>
///////choumpa//////////
//  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);//choumpa
///////////////////////

//////////////buzzer/////////
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	48b3      	ldr	r0, [pc, #716]	; (8000fd8 <main+0x348>)
 8000d0c:	f008 f8ca 	bl	8008ea4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i=0;i<11;i++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d14:	e00f      	b.n	8000d36 <main+0xa6>
	  {a[i]=RxData_From_Node3[i]-'0';}
 8000d16:	4ab1      	ldr	r2, [pc, #708]	; (8000fdc <main+0x34c>)
 8000d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f843 2c50 	str.w	r2, [r3, #-80]
	  for(int i=0;i<11;i++)
 8000d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d32:	3301      	adds	r3, #1
 8000d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d38:	2b0a      	cmp	r3, #10
 8000d3a:	ddec      	ble.n	8000d16 <main+0x86>

	  int Distance1 = 100* a[0]  +10*a[1] +a[2];
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2264      	movs	r2, #100	; 0x64
 8000d40:	fb02 f103 	mul.w	r1, r2, r3
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	18ca      	adds	r2, r1, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4413      	add	r3, r2
 8000d54:	647b      	str	r3, [r7, #68]	; 0x44
	  int Distance2 = 100* a[4]  +10*a[5] +a[6];
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	2264      	movs	r2, #100	; 0x64
 8000d5a:	fb02 f103 	mul.w	r1, r2, r3
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	18ca      	adds	r2, r1, r3
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
	  int Distance3 = 100* a[8]  +10*a[9] +a[10];
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	2264      	movs	r2, #100	; 0x64
 8000d74:	fb02 f103 	mul.w	r1, r2, r3
 8000d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	18ca      	adds	r2, r1, r3
 8000d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d86:	4413      	add	r3, r2
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
	  printf("%d",Distance1);
 8000d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000d8c:	4894      	ldr	r0, [pc, #592]	; (8000fe0 <main+0x350>)
 8000d8e:	f00a fcb1 	bl	800b6f4 <iprintf>
	  {
		  Error_Handler();
	  }
	  HAL_Delay(100);*/
///////////////nrf//////////////
	  if (isDataAvailable(2) == 1)
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff fe52 	bl	8000a3c <isDataAvailable>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d102      	bne.n	8000da4 <main+0x114>
	  	 {
		  NRF24_Receive(RxData);
 8000d9e:	4891      	ldr	r0, [pc, #580]	; (8000fe4 <main+0x354>)
 8000da0:	f7ff fe6c 	bl	8000a7c <NRF24_Receive>
///////////////////////////////////

//////////////////////buzzer/////////////////


 if(Distance1<=10)
 8000da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	dc46      	bgt.n	8000e38 <main+0x1a8>
	  {
	  TIM2->ARR = C;
 8000daa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dae:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM2->CCR1 = TIM2->ARR / 2;
 8000db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	085b      	lsrs	r3, r3, #1
 8000dc0:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_Delay(Distance1*10);
 8000dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fb1f 	bl	8002410 <HAL_Delay>
	  TIM2->CCR1 = 0;
 8000dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(100);
 8000dda:	2064      	movs	r0, #100	; 0x64
 8000ddc:	f001 fb18 	bl	8002410 <HAL_Delay>
	  TIM2->CCR1 = TIM2->ARR / 2;
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dea:	085b      	lsrs	r3, r3, #1
 8000dec:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM2->CCR1 = 0;
 8000dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df2:	2200      	movs	r2, #0
 8000df4:	635a      	str	r2, [r3, #52]	; 0x34
	  if(Distance1<=10)
 8000df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000df8:	2b0a      	cmp	r3, #10
 8000dfa:	dc1d      	bgt.n	8000e38 <main+0x1a8>
	  {
		  TIM2->ARR = C;
 8000dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e00:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000e04:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM2->CCR1 = TIM2->ARR / 2;
 8000e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e10:	085b      	lsrs	r3, r3, #1
 8000e12:	6353      	str	r3, [r2, #52]	; 0x34
		  TIM2->CCR1 = 0;
 8000e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e18:	2200      	movs	r2, #0
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f001 faf7 	bl	8002410 <HAL_Delay>
		  TIM2->CCR1 = TIM2->ARR / 2;
 8000e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2c:	085b      	lsrs	r3, r3, #1
 8000e2e:	6353      	str	r3, [r2, #52]	; 0x34
		  TIM2->CCR1 = 0;
 8000e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e34:	2200      	movs	r2, #0
 8000e36:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  }
 if(Distance2<=10)
 8000e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e3a:	2b0a      	cmp	r3, #10
 8000e3c:	dc46      	bgt.n	8000ecc <main+0x23c>
	  {
	  TIM2->ARR = C;
 8000e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e42:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM2->CCR1 = TIM2->ARR / 2;
 8000e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	085b      	lsrs	r3, r3, #1
 8000e54:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_Delay(Distance2*10);
 8000e56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fad5 	bl	8002410 <HAL_Delay>
	  TIM2->CCR1 = 0;
 8000e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f001 face 	bl	8002410 <HAL_Delay>
	  TIM2->CCR1 = TIM2->ARR / 2;
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM2->CCR1 = 0;
 8000e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e86:	2200      	movs	r2, #0
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
	  if(Distance2<=10)
 8000e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e8c:	2b0a      	cmp	r3, #10
 8000e8e:	dc1d      	bgt.n	8000ecc <main+0x23c>
	  	  {
	  		  TIM2->ARR = C;
 8000e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e94:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
	  		  TIM2->CCR1 = TIM2->ARR / 2;
 8000e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	085b      	lsrs	r3, r3, #1
 8000ea6:	6353      	str	r3, [r2, #52]	; 0x34
	  		  TIM2->CCR1 = 0;
 8000ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
	  		HAL_Delay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f001 faad 	bl	8002410 <HAL_Delay>
	  		TIM2->CCR1 = TIM2->ARR / 2;
 8000eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec0:	085b      	lsrs	r3, r3, #1
 8000ec2:	6353      	str	r3, [r2, #52]	; 0x34
	  		TIM2->CCR1 = 0;
 8000ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec8:	2200      	movs	r2, #0
 8000eca:	635a      	str	r2, [r3, #52]	; 0x34
	  	  }
	  }
 if(Distance3<=10)
 8000ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ece:	2b0a      	cmp	r3, #10
 8000ed0:	dc46      	bgt.n	8000f60 <main+0x2d0>
	  {
	  TIM2->ARR = C;
 8000ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed6:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM2->CCR1 = TIM2->ARR / 2;
 8000edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_Delay(Distance3*10);
 8000eea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fa8b 	bl	8002410 <HAL_Delay>
	  TIM2->CCR1 = 0;
 8000efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efe:	2200      	movs	r2, #0
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(100);
 8000f02:	2064      	movs	r0, #100	; 0x64
 8000f04:	f001 fa84 	bl	8002410 <HAL_Delay>
	  TIM2->CCR1 = TIM2->ARR / 2;
 8000f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM2->CCR1 = 0;
 8000f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
	  if(Distance3<=10)
 8000f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f20:	2b0a      	cmp	r3, #10
 8000f22:	dc1d      	bgt.n	8000f60 <main+0x2d0>
	  	  {
	  		  TIM2->ARR = C;
 8000f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f28:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
	  		  TIM2->CCR1 = TIM2->ARR / 2;
 8000f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f38:	085b      	lsrs	r3, r3, #1
 8000f3a:	6353      	str	r3, [r2, #52]	; 0x34
	  		  TIM2->CCR1 = 0;
 8000f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f40:	2200      	movs	r2, #0
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
	  		HAL_Delay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f001 fa63 	bl	8002410 <HAL_Delay>
	  		TIM2->CCR1 = TIM2->ARR / 2;
 8000f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f54:	085b      	lsrs	r3, r3, #1
 8000f56:	6353      	str	r3, [r2, #52]	; 0x34
	  		TIM2->CCR1 = 0;
 8000f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34

///////////////////////////////////////////////


/////////////jodo///////////////
 for(int i=12;i<=14;i++)
 8000f60:	230c      	movs	r3, #12
 8000f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f64:	e00f      	b.n	8000f86 <main+0x2f6>
 {a[i]=RxData_From_Node3[i]-'0';}
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <main+0x34c>)
 8000f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f843 2c50 	str.w	r2, [r3, #-80]
 for(int i=12;i<=14;i++)
 8000f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f82:	3301      	adds	r3, #1
 8000f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f88:	2b0e      	cmp	r3, #14
 8000f8a:	ddec      	ble.n	8000f66 <main+0x2d6>
 int jodo = 100* a[12]  +10*a[13] +a[14];
 8000f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8e:	2264      	movs	r2, #100	; 0x64
 8000f90:	fb02 f103 	mul.w	r1, r2, r3
 8000f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	18ca      	adds	r2, r1, r3
 8000fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa2:	4413      	add	r3, r2
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      htim3.Instance->CCR1=jodo;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <main+0x344>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
      if (jodo<45)
 8000fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb0:	2b2c      	cmp	r3, #44	; 0x2c
 8000fb2:	f73f aead 	bgt.w	8000d10 <main+0x80>
      {
    	  htim3.Instance->CCR1=0;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <main+0x344>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8000fbe:	e6a7      	b.n	8000d10 <main+0x80>
 8000fc0:	24000000 	.word	0x24000000
 8000fc4:	24000300 	.word	0x24000300
 8000fc8:	24000334 	.word	0x24000334
 8000fcc:	58021400 	.word	0x58021400
 8000fd0:	58020000 	.word	0x58020000
 8000fd4:	240001ac 	.word	0x240001ac
 8000fd8:	2400043c 	.word	0x2400043c
 8000fdc:	24000384 	.word	0x24000384
 8000fe0:	0800c5c8 	.word	0x0800c5c8
 8000fe4:	2400041c 	.word	0x2400041c

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09c      	sub	sp, #112	; 0x70
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	224c      	movs	r2, #76	; 0x4c
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00a fb74 	bl	800b6e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2220      	movs	r2, #32
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f00a fb6e 	bl	800b6e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001008:	2004      	movs	r0, #4
 800100a:	f003 fd3f 	bl	8004a8c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <SystemClock_Config+0xe4>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <SystemClock_Config+0xe4>)
 8001018:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <SystemClock_Config+0xe4>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800102a:	bf00      	nop
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <SystemClock_Config+0xe4>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001038:	d1f8      	bne.n	800102c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800103a:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <SystemClock_Config+0xe8>)
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <SystemClock_Config+0xe8>)
 8001040:	f023 0303 	bic.w	r3, r3, #3
 8001044:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001046:	2302      	movs	r3, #2
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800104a:	2301      	movs	r3, #1
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104e:	2340      	movs	r3, #64	; 0x40
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001056:	2300      	movs	r3, #0
 8001058:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800105a:	2304      	movs	r3, #4
 800105c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 800105e:	2308      	movs	r3, #8
 8001060:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001062:	2302      	movs	r3, #2
 8001064:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8001066:	2320      	movs	r3, #32
 8001068:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800106e:	230c      	movs	r3, #12
 8001070:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001072:	2300      	movs	r3, #0
 8001074:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fd5e 	bl	8004b40 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800108a:	f000 fd0d 	bl	8001aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	233f      	movs	r3, #63	; 0x3f
 8001090:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800109e:	2340      	movs	r3, #64	; 0x40
 80010a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010a2:	2340      	movs	r3, #64	; 0x40
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010ac:	2340      	movs	r3, #64	; 0x40
 80010ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2102      	movs	r1, #2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f004 f947 	bl	8005348 <HAL_RCC_ClockConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80010c0:	f000 fcf2 	bl	8001aa8 <Error_Handler>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3770      	adds	r7, #112	; 0x70
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58024800 	.word	0x58024800
 80010d0:	58024400 	.word	0x58024400

080010d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <MX_ADC1_Init+0xe4>)
 80010fa:	4a30      	ldr	r2, [pc, #192]	; (80011bc <MX_ADC1_Init+0xe8>)
 80010fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <MX_ADC1_Init+0xe4>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001112:	2204      	movs	r2, #4
 8001114:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <MX_ADC1_Init+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001124:	2201      	movs	r2, #1
 8001126:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_ADC1_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001134:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_ADC1_Init+0xe4>)
 800113c:	2200      	movs	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001142:	2200      	movs	r2, #0
 8001144:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001148:	2200      	movs	r2, #0
 800114a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_ADC1_Init+0xe4>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001154:	4818      	ldr	r0, [pc, #96]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001156:	f001 fb0b 	bl	8002770 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001160:	f000 fca2 	bl	8001aa8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4812      	ldr	r0, [pc, #72]	; (80011b8 <MX_ADC1_Init+0xe4>)
 8001170:	f002 f830 	bl	80031d4 <HAL_ADCEx_MultiModeConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800117a:	f000 fc95 	bl	8001aa8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_ADC1_Init+0xec>)
 8001180:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001182:	2306      	movs	r3, #6
 8001184:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800118a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800118e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001190:	2304      	movs	r3, #4
 8001192:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_ADC1_Init+0xe4>)
 80011a2:	f001 fc3f 	bl	8002a24 <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80011ac:	f000 fc7c 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	240001f8 	.word	0x240001f8
 80011bc:	40022000 	.word	0x40022000
 80011c0:	08600004 	.word	0x08600004

080011c4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80011c8:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80011ca:	4a80      	ldr	r2, [pc, #512]	; (80013cc <MX_FDCAN1_Init+0x208>)
 80011cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80011ce:	4b7e      	ldr	r3, [pc, #504]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80011d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80011d6:	4b7c      	ldr	r3, [pc, #496]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80011dc:	4b7a      	ldr	r3, [pc, #488]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80011de:	2201      	movs	r2, #1
 80011e0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80011e2:	4b79      	ldr	r3, [pc, #484]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80011e8:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80011ee:	4b76      	ldr	r3, [pc, #472]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80011f4:	4b74      	ldr	r3, [pc, #464]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80011fa:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80011fc:	2205      	movs	r2, #5
 80011fe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001200:	4b71      	ldr	r3, [pc, #452]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001202:	2202      	movs	r2, #2
 8001204:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001206:	4b70      	ldr	r3, [pc, #448]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001208:	2201      	movs	r2, #1
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800120c:	4b6e      	ldr	r3, [pc, #440]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800120e:	2204      	movs	r2, #4
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8001212:	4b6d      	ldr	r3, [pc, #436]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001214:	2205      	movs	r2, #5
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001218:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800121a:	2204      	movs	r2, #4
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800121e:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001220:	2200      	movs	r2, #0
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 3;
 8001224:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001226:	2203      	movs	r2, #3
 8001228:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800122a:	4b67      	ldr	r3, [pc, #412]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800122c:	2200      	movs	r2, #0
 800122e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001230:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001232:	2201      	movs	r2, #1
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 8001236:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001238:	2206      	movs	r2, #6
 800123a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 800123c:	4b62      	ldr	r3, [pc, #392]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800123e:	2201      	movs	r2, #1
 8001240:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_16;
 8001242:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001244:	2206      	movs	r2, #6
 8001246:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001248:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800124a:	2201      	movs	r2, #1
 800124c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_16;
 800124e:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001250:	2206      	movs	r2, #6
 8001252:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001254:	4b5c      	ldr	r3, [pc, #368]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001256:	2200      	movs	r2, #0
 8001258:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800125a:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800125c:	2200      	movs	r2, #0
 800125e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001262:	2200      	movs	r2, #0
 8001264:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001268:	2200      	movs	r2, #0
 800126a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800126e:	2206      	movs	r2, #6
 8001270:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001272:	4855      	ldr	r0, [pc, #340]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001274:	f002 f95a 	bl	800352c <HAL_FDCAN_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800127e:	f000 fc13 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  	  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <MX_FDCAN1_Init+0x20c>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
        sFilterConfig.FilterIndex = 1;
 8001288:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <MX_FDCAN1_Init+0x20c>)
 800128a:	2201      	movs	r2, #1
 800128c:	605a      	str	r2, [r3, #4]
        sFilterConfig.RxBufferIndex = 1;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <MX_FDCAN1_Init+0x20c>)
 8001290:	2201      	movs	r2, #1
 8001292:	619a      	str	r2, [r3, #24]
        sFilterConfig.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8001294:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <MX_FDCAN1_Init+0x20c>)
 8001296:	2201      	movs	r2, #1
 8001298:	609a      	str	r2, [r3, #8]
        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800129a:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <MX_FDCAN1_Init+0x20c>)
 800129c:	2201      	movs	r2, #1
 800129e:	60da      	str	r2, [r3, #12]
        sFilterConfig.FilterID1 = 0x33; // ID Node2
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <MX_FDCAN1_Init+0x20c>)
 80012a2:	2233      	movs	r2, #51	; 0x33
 80012a4:	611a      	str	r2, [r3, #16]
        sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <MX_FDCAN1_Init+0x20c>)
 80012a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012ac:	615a      	str	r2, [r3, #20]
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80012ae:	4948      	ldr	r1, [pc, #288]	; (80013d0 <MX_FDCAN1_Init+0x20c>)
 80012b0:	4845      	ldr	r0, [pc, #276]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80012b2:	f002 fb1d 	bl	80038f0 <HAL_FDCAN_ConfigFilter>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_FDCAN1_Init+0xfc>
               {
                  Error_Handler();
 80012bc:	f000 fbf4 	bl	8001aa8 <Error_Handler>
               }
//
  	  	sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 80012c0:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <MX_FDCAN1_Init+0x210>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
        sFilterConfig1.FilterIndex = 2;
 80012c6:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <MX_FDCAN1_Init+0x210>)
 80012c8:	2202      	movs	r2, #2
 80012ca:	605a      	str	r2, [r3, #4]
        sFilterConfig1.RxBufferIndex = 2;
 80012cc:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <MX_FDCAN1_Init+0x210>)
 80012ce:	2202      	movs	r2, #2
 80012d0:	619a      	str	r2, [r3, #24]
        sFilterConfig1.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 80012d2:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <MX_FDCAN1_Init+0x210>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	609a      	str	r2, [r3, #8]
        sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80012d8:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <MX_FDCAN1_Init+0x210>)
 80012da:	2202      	movs	r2, #2
 80012dc:	60da      	str	r2, [r3, #12]
        sFilterConfig1.FilterID1 = 0x11; // ID Node2
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <MX_FDCAN1_Init+0x210>)
 80012e0:	2211      	movs	r2, #17
 80012e2:	611a      	str	r2, [r3, #16]
        sFilterConfig1.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80012e4:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <MX_FDCAN1_Init+0x210>)
 80012e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012ea:	615a      	str	r2, [r3, #20]
//
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig1) != HAL_OK)
 80012ec:	4939      	ldr	r1, [pc, #228]	; (80013d4 <MX_FDCAN1_Init+0x210>)
 80012ee:	4836      	ldr	r0, [pc, #216]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 80012f0:	f002 fafe 	bl	80038f0 <HAL_FDCAN_ConfigFilter>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_FDCAN1_Init+0x13a>
        {
           Error_Handler();
 80012fa:	f000 fbd5 	bl	8001aa8 <Error_Handler>
        }
  	  	sFilterConfig2.IdType = FDCAN_STANDARD_ID;
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <MX_FDCAN1_Init+0x214>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
        sFilterConfig2.FilterIndex = 0;
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <MX_FDCAN1_Init+0x214>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
        sFilterConfig2.RxBufferIndex = 0;
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <MX_FDCAN1_Init+0x214>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
        sFilterConfig2.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8001310:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <MX_FDCAN1_Init+0x214>)
 8001312:	2201      	movs	r2, #1
 8001314:	609a      	str	r2, [r3, #8]
        sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 8001316:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <MX_FDCAN1_Init+0x214>)
 8001318:	2207      	movs	r2, #7
 800131a:	60da      	str	r2, [r3, #12]
        sFilterConfig2.FilterID1 = 0x44; // ID Node2
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <MX_FDCAN1_Init+0x214>)
 800131e:	2244      	movs	r2, #68	; 0x44
 8001320:	611a      	str	r2, [r3, #16]
        sFilterConfig2.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <MX_FDCAN1_Init+0x214>)
 8001324:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001328:	615a      	str	r2, [r3, #20]

        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig2) != HAL_OK)
 800132a:	492b      	ldr	r1, [pc, #172]	; (80013d8 <MX_FDCAN1_Init+0x214>)
 800132c:	4826      	ldr	r0, [pc, #152]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800132e:	f002 fadf 	bl	80038f0 <HAL_FDCAN_ConfigFilter>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_FDCAN1_Init+0x178>
               {
                  Error_Handler();
 8001338:	f000 fbb6 	bl	8001aa8 <Error_Handler>
               }

        if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800133c:	4822      	ldr	r0, [pc, #136]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800133e:	f002 fb4d 	bl	80039dc <HAL_FDCAN_Start>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_FDCAN1_Init+0x188>
              {
                Error_Handler();
 8001348:	f000 fbae 	bl	8001aa8 <Error_Handler>





        if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_BUFFER_NEW_MESSAGE, 0) != HAL_OK)
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001352:	481d      	ldr	r0, [pc, #116]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001354:	f002 fcdc 	bl	8003d10 <HAL_FDCAN_ActivateNotification>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_FDCAN1_Init+0x19e>
          {
            /* Notification Error */
            Error_Handler();
 800135e:	f000 fba3 	bl	8001aa8 <Error_Handler>
          }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001362:	2200      	movs	r2, #0
 8001364:	2101      	movs	r1, #1
 8001366:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 8001368:	f002 fcd2 	bl	8003d10 <HAL_FDCAN_ActivateNotification>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_FDCAN1_Init+0x1b2>
              {
                Error_Handler();
 8001372:	f000 fb99 	bl	8001aa8 <Error_Handler>
              }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8001376:	2200      	movs	r2, #0
 8001378:	2110      	movs	r1, #16
 800137a:	4813      	ldr	r0, [pc, #76]	; (80013c8 <MX_FDCAN1_Init+0x204>)
 800137c:	f002 fcc8 	bl	8003d10 <HAL_FDCAN_ActivateNotification>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_FDCAN1_Init+0x1c6>
              {
                Error_Handler();
 8001386:	f000 fb8f 	bl	8001aa8 <Error_Handler>
              }

            TxHeader.Identifier = 0x22;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_FDCAN1_Init+0x218>)
 800138c:	2222      	movs	r2, #34	; 0x22
 800138e:	601a      	str	r2, [r3, #0]
            TxHeader.IdType = FDCAN_STANDARD_ID;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_FDCAN1_Init+0x218>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
            TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_FDCAN1_Init+0x218>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
            TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_FDCAN1_Init+0x218>)
 800139e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013a2:	60da      	str	r2, [r3, #12]
            TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <MX_FDCAN1_Init+0x218>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
            TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_FDCAN1_Init+0x218>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
            TxHeader.FDFormat = FDCAN_FD_CAN;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_FDCAN1_Init+0x218>)
 80013b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013b6:	619a      	str	r2, [r3, #24]
            TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_FDCAN1_Init+0x218>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
            TxHeader.MessageMarker = 0x0;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_FDCAN1_Init+0x218>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]



  /* USER CODE END FDCAN1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	24000260 	.word	0x24000260
 80013cc:	4000a000 	.word	0x4000a000
 80013d0:	240000a4 	.word	0x240000a4
 80013d4:	2400017c 	.word	0x2400017c
 80013d8:	240004d4 	.word	0x240004d4
 80013dc:	24000488 	.word	0x24000488

080013e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <MX_SPI1_Init+0xa4>)
 80013e6:	4a28      	ldr	r2, [pc, #160]	; (8001488 <MX_SPI1_Init+0xa8>)
 80013e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <MX_SPI1_Init+0xa4>)
 80013ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <MX_SPI1_Init+0xa4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_SPI1_Init+0xa4>)
 80013fa:	2207      	movs	r2, #7
 80013fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_SPI1_Init+0xa4>)
 800140c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001410:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001414:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001418:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_SPI1_Init+0xa4>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_SPI1_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_SPI1_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <MX_SPI1_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_SPI1_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001460:	2200      	movs	r2, #0
 8001462:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_SPI1_Init+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_SPI1_Init+0xa4>)
 8001472:	f006 fb9f 	bl	8007bb4 <HAL_SPI_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800147c:	f000 fb14 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	24000394 	.word	0x24000394
 8001488:	40013000 	.word	0x40013000

0800148c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b09c      	sub	sp, #112	; 0x70
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2234      	movs	r2, #52	; 0x34
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00a f90c 	bl	800b6e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014cc:	4b4f      	ldr	r3, [pc, #316]	; (800160c <MX_TIM1_Init+0x180>)
 80014ce:	4a50      	ldr	r2, [pc, #320]	; (8001610 <MX_TIM1_Init+0x184>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65;
 80014d2:	4b4e      	ldr	r3, [pc, #312]	; (800160c <MX_TIM1_Init+0x180>)
 80014d4:	2241      	movs	r2, #65	; 0x41
 80014d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <MX_TIM1_Init+0x180>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80014de:	4b4b      	ldr	r3, [pc, #300]	; (800160c <MX_TIM1_Init+0x180>)
 80014e0:	2264      	movs	r2, #100	; 0x64
 80014e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b49      	ldr	r3, [pc, #292]	; (800160c <MX_TIM1_Init+0x180>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ea:	4b48      	ldr	r3, [pc, #288]	; (800160c <MX_TIM1_Init+0x180>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b46      	ldr	r3, [pc, #280]	; (800160c <MX_TIM1_Init+0x180>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f6:	4845      	ldr	r0, [pc, #276]	; (800160c <MX_TIM1_Init+0x180>)
 80014f8:	f007 fc1b 	bl	8008d32 <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001502:	f000 fad1 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001510:	4619      	mov	r1, r3
 8001512:	483e      	ldr	r0, [pc, #248]	; (800160c <MX_TIM1_Init+0x180>)
 8001514:	f008 f808 	bl	8009528 <HAL_TIM_ConfigClockSource>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800151e:	f000 fac3 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001522:	483a      	ldr	r0, [pc, #232]	; (800160c <MX_TIM1_Init+0x180>)
 8001524:	f007 fc5c 	bl	8008de0 <HAL_TIM_PWM_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800152e:	f000 fabb 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001542:	4619      	mov	r1, r3
 8001544:	4831      	ldr	r0, [pc, #196]	; (800160c <MX_TIM1_Init+0x180>)
 8001546:	f008 fd4d 	bl	8009fe4 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001550:	f000 faaa 	bl	8001aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8001558:	2332      	movs	r3, #50	; 0x32
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001570:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001574:	2200      	movs	r2, #0
 8001576:	4619      	mov	r1, r3
 8001578:	4824      	ldr	r0, [pc, #144]	; (800160c <MX_TIM1_Init+0x180>)
 800157a:	f007 fec1 	bl	8009300 <HAL_TIM_PWM_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001584:	f000 fa90 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001588:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800158c:	2204      	movs	r2, #4
 800158e:	4619      	mov	r1, r3
 8001590:	481e      	ldr	r0, [pc, #120]	; (800160c <MX_TIM1_Init+0x180>)
 8001592:	f007 feb5 	bl	8009300 <HAL_TIM_PWM_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800159c:	f000 fa84 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015a4:	2208      	movs	r2, #8
 80015a6:	4619      	mov	r1, r3
 80015a8:	4818      	ldr	r0, [pc, #96]	; (800160c <MX_TIM1_Init+0x180>)
 80015aa:	f007 fea9 	bl	8009300 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80015b4:	f000 fa78 	bl	8001aa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <MX_TIM1_Init+0x180>)
 80015ee:	f008 fd87 	bl	800a100 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80015f8:	f000 fa56 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <MX_TIM1_Init+0x180>)
 80015fe:	f000 fc11 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 8001602:	bf00      	nop
 8001604:	3770      	adds	r7, #112	; 0x70
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	24000334 	.word	0x24000334
 8001610:	40010000 	.word	0x40010000

08001614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <MX_TIM2_Init+0xe8>)
 8001648:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128-1;
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <MX_TIM2_Init+0xe8>)
 8001650:	227f      	movs	r2, #127	; 0x7f
 8001652:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <MX_TIM2_Init+0xe8>)
 8001656:	2210      	movs	r2, #16
 8001658:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_TIM2_Init+0xe8>)
 800165c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001660:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <MX_TIM2_Init+0xe8>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <MX_TIM2_Init+0xe8>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166e:	4823      	ldr	r0, [pc, #140]	; (80016fc <MX_TIM2_Init+0xe8>)
 8001670:	f007 fb5f 	bl	8008d32 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800167a:	f000 fa15 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001688:	4619      	mov	r1, r3
 800168a:	481c      	ldr	r0, [pc, #112]	; (80016fc <MX_TIM2_Init+0xe8>)
 800168c:	f007 ff4c 	bl	8009528 <HAL_TIM_ConfigClockSource>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001696:	f000 fa07 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <MX_TIM2_Init+0xe8>)
 800169c:	f007 fba0 	bl	8008de0 <HAL_TIM_PWM_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016a6:	f000 f9ff 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4810      	ldr	r0, [pc, #64]	; (80016fc <MX_TIM2_Init+0xe8>)
 80016ba:	f008 fc93 	bl	8009fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016c4:	f000 f9f0 	bl	8001aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c8:	2360      	movs	r3, #96	; 0x60
 80016ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <MX_TIM2_Init+0xe8>)
 80016e0:	f007 fe0e 	bl	8009300 <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80016ea:	f000 f9dd 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <MX_TIM2_Init+0xe8>)
 80016f0:	f000 fb98 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 80016f4:	bf00      	nop
 80016f6:	3738      	adds	r7, #56	; 0x38
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	2400043c 	.word	0x2400043c

08001700 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <MX_TIM3_Init+0xe4>)
 8001734:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <MX_TIM3_Init+0xe8>)
 8001736:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <MX_TIM3_Init+0xe4>)
 800173a:	2240      	movs	r2, #64	; 0x40
 800173c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <MX_TIM3_Init+0xe4>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <MX_TIM3_Init+0xe4>)
 8001746:	2264      	movs	r2, #100	; 0x64
 8001748:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <MX_TIM3_Init+0xe4>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <MX_TIM3_Init+0xe4>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001756:	4823      	ldr	r0, [pc, #140]	; (80017e4 <MX_TIM3_Init+0xe4>)
 8001758:	f007 faeb 	bl	8008d32 <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001762:	f000 f9a1 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800176c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001770:	4619      	mov	r1, r3
 8001772:	481c      	ldr	r0, [pc, #112]	; (80017e4 <MX_TIM3_Init+0xe4>)
 8001774:	f007 fed8 	bl	8009528 <HAL_TIM_ConfigClockSource>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800177e:	f000 f993 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001782:	4818      	ldr	r0, [pc, #96]	; (80017e4 <MX_TIM3_Init+0xe4>)
 8001784:	f007 fb2c 	bl	8008de0 <HAL_TIM_PWM_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800178e:	f000 f98b 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4619      	mov	r1, r3
 80017a0:	4810      	ldr	r0, [pc, #64]	; (80017e4 <MX_TIM3_Init+0xe4>)
 80017a2:	f008 fc1f 	bl	8009fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017ac:	f000 f97c 	bl	8001aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b0:	2360      	movs	r3, #96	; 0x60
 80017b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80017b4:	2332      	movs	r3, #50	; 0x32
 80017b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM3_Init+0xe4>)
 80017c8:	f007 fd9a 	bl	8009300 <HAL_TIM_PWM_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017d2:	f000 f969 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM3_Init+0xe4>)
 80017d8:	f000 fb24 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3738      	adds	r7, #56	; 0x38
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	240001ac 	.word	0x240001ac
 80017e8:	40000400 	.word	0x40000400

080017ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <MX_USART3_UART_Init+0x90>)
 80017f2:	4a23      	ldr	r2, [pc, #140]	; (8001880 <MX_USART3_UART_Init+0x94>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_USART3_UART_Init+0x90>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_USART3_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_USART3_UART_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001834:	4811      	ldr	r0, [pc, #68]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001836:	f008 fd21 	bl	800a27c <HAL_UART_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001840:	f000 f932 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001848:	f009 fe4a 	bl	800b4e0 <HAL_UARTEx_SetTxFifoThreshold>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001852:	f000 f929 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <MX_USART3_UART_Init+0x90>)
 800185a:	f009 fe7f 	bl	800b55c <HAL_UARTEx_SetRxFifoThreshold>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001864:	f000 f920 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_USART3_UART_Init+0x90>)
 800186a:	f009 fe00 	bl	800b46e <HAL_UARTEx_DisableFifoMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001874:	f000 f918 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	240000dc 	.word	0x240000dc
 8001880:	40004800 	.word	0x40004800

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	; 0x38
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189a:	4b7c      	ldr	r3, [pc, #496]	; (8001a8c <MX_GPIO_Init+0x208>)
 800189c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018a0:	4a7a      	ldr	r2, [pc, #488]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018aa:	4b78      	ldr	r3, [pc, #480]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b74      	ldr	r3, [pc, #464]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018be:	4a73      	ldr	r2, [pc, #460]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018c8:	4b70      	ldr	r3, [pc, #448]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018dc:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018e6:	4b69      	ldr	r3, [pc, #420]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f4:	4b65      	ldr	r3, [pc, #404]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018fa:	4a64      	ldr	r2, [pc, #400]	; (8001a8c <MX_GPIO_Init+0x208>)
 80018fc:	f043 0320 	orr.w	r3, r3, #32
 8001900:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001904:	4b61      	ldr	r3, [pc, #388]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001912:	4b5e      	ldr	r3, [pc, #376]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001914:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001918:	4a5c      	ldr	r2, [pc, #368]	; (8001a8c <MX_GPIO_Init+0x208>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001922:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001924:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001930:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001932:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001936:	4a55      	ldr	r2, [pc, #340]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001940:	4b52      	ldr	r3, [pc, #328]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001942:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	4b4f      	ldr	r3, [pc, #316]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001950:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001954:	4a4d      	ldr	r2, [pc, #308]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800195e:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001960:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <MX_GPIO_Init+0x208>)
 800196e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001972:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <MX_GPIO_Init+0x208>)
 8001974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001978:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <MX_GPIO_Init+0x208>)
 800197e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001990:	483f      	ldr	r0, [pc, #252]	; (8001a90 <MX_GPIO_Init+0x20c>)
 8001992:	f003 f861 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	2164      	movs	r1, #100	; 0x64
 800199a:	483e      	ldr	r0, [pc, #248]	; (8001a94 <MX_GPIO_Init+0x210>)
 800199c:	f003 f85c 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a6:	483c      	ldr	r0, [pc, #240]	; (8001a98 <MX_GPIO_Init+0x214>)
 80019a8:	f003 f856 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f24c 0101 	movw	r1, #49153	; 0xc001
 80019b2:	483a      	ldr	r0, [pc, #232]	; (8001a9c <MX_GPIO_Init+0x218>)
 80019b4:	f003 f850 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ce_Pin|csn_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80019be:	4838      	ldr	r0, [pc, #224]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 80019c0:	f003 f84a 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IRQ_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80019ca:	4836      	ldr	r0, [pc, #216]	; (8001aa4 <MX_GPIO_Init+0x220>)
 80019cc:	f003 f844 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 80019d0:	f44f 7384 	mov.w	r3, #264	; 0x108
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4829      	ldr	r0, [pc, #164]	; (8001a90 <MX_GPIO_Init+0x20c>)
 80019ea:	f002 fe85 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80019ee:	2364      	movs	r3, #100	; 0x64
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	4823      	ldr	r0, [pc, #140]	; (8001a94 <MX_GPIO_Init+0x210>)
 8001a06:	f002 fe77 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	481d      	ldr	r0, [pc, #116]	; (8001a98 <MX_GPIO_Init+0x214>)
 8001a24:	f002 fe68 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8001a28:	f24c 0301 	movw	r3, #49153	; 0xc001
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4816      	ldr	r0, [pc, #88]	; (8001a9c <MX_GPIO_Init+0x218>)
 8001a42:	f002 fe59 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ce_Pin csn_Pin */
  GPIO_InitStruct.Pin = ce_Pin|csn_Pin;
 8001a46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <MX_GPIO_Init+0x21c>)
 8001a60:	f002 fe4a 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin PG14 */
  GPIO_InitStruct.Pin = IRQ_Pin|GPIO_PIN_14;
 8001a64:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <MX_GPIO_Init+0x220>)
 8001a7e:	f002 fe3b 	bl	80046f8 <HAL_GPIO_Init>

}
 8001a82:	bf00      	nop
 8001a84:	3738      	adds	r7, #56	; 0x38
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	58020000 	.word	0x58020000
 8001a94:	58020400 	.word	0x58020400
 8001a98:	58021400 	.word	0x58021400
 8001a9c:	58021000 	.word	0x58021000
 8001aa0:	58020c00 	.word	0x58020c00
 8001aa4:	58021800 	.word	0x58021800

08001aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <Error_Handler+0x8>
	...

08001ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_MspInit+0x30>)
 8001abc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ac0:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_MspInit+0x30>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_MspInit+0x30>)
 8001acc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	58024400 	.word	0x58024400

08001ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0b8      	sub	sp, #224	; 0xe0
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	22b8      	movs	r2, #184	; 0xb8
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f009 fdeb 	bl	800b6e4 <memset>
  if(hadc->Instance==ADC1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2a      	ldr	r2, [pc, #168]	; (8001bbc <HAL_ADC_MspInit+0xd4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d14d      	bne.n	8001bb4 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8001b22:	2381      	movs	r3, #129	; 0x81
 8001b24:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 ff89 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b54:	f7ff ffa8 	bl	8001aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b5a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b60:	f043 0320 	orr.w	r3, r3, #32
 8001b64:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b6a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b7c:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b7e:	f043 0320 	orr.w	r3, r3, #32
 8001b82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ba8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bac:	4619      	mov	r1, r3
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <HAL_ADC_MspInit+0xdc>)
 8001bb0:	f002 fda2 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	37e0      	adds	r7, #224	; 0xe0
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	58021400 	.word	0x58021400

08001bc8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b0b8      	sub	sp, #224	; 0xe0
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	22b8      	movs	r2, #184	; 0xb8
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f009 fd7b 	bl	800b6e4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2d      	ldr	r2, [pc, #180]	; (8001ca8 <HAL_FDCAN_MspInit+0xe0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d153      	bne.n	8001ca0 <HAL_FDCAN_MspInit+0xd8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bfc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001bfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 ff28 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001c16:	f7ff ff47 	bl	8001aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_FDCAN_MspInit+0xe4>)
 8001c1c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001c20:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_FDCAN_MspInit+0xe4>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_FDCAN_MspInit+0xe4>)
 8001c2c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_FDCAN_MspInit+0xe4>)
 8001c3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_FDCAN_MspInit+0xe4>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_FDCAN_MspInit+0xe4>)
 8001c4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c56:	2303      	movs	r3, #3
 8001c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c6e:	2309      	movs	r3, #9
 8001c70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <HAL_FDCAN_MspInit+0xe8>)
 8001c7c:	f002 fd3c 	bl	80046f8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	2013      	movs	r0, #19
 8001c86:	f001 fc1c 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c8a:	2013      	movs	r0, #19
 8001c8c:	f001 fc33 	bl	80034f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2015      	movs	r0, #21
 8001c96:	f001 fc14 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001c9a:	2015      	movs	r0, #21
 8001c9c:	f001 fc2b 	bl	80034f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	37e0      	adds	r7, #224	; 0xe0
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	4000a000 	.word	0x4000a000
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	58020c00 	.word	0x58020c00

08001cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b0b8      	sub	sp, #224	; 0xe0
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	22b8      	movs	r2, #184	; 0xb8
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f009 fd05 	bl	800b6e4 <memset>
  if(hspi->Instance==SPI1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <HAL_SPI_MspInit+0xbc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d141      	bne.n	8001d68 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 feb4 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001cfe:	f7ff fed3 	bl	8001aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_SPI_MspInit+0xc0>)
 8001d04:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001d08:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <HAL_SPI_MspInit+0xc0>)
 8001d0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d0e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_SPI_MspInit+0xc0>)
 8001d14:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_SPI_MspInit+0xc0>)
 8001d22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_SPI_MspInit+0xc0>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_SPI_MspInit+0xc0>)
 8001d32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d3e:	23e0      	movs	r3, #224	; 0xe0
 8001d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d56:	2305      	movs	r3, #5
 8001d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d60:	4619      	mov	r1, r3
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_SPI_MspInit+0xc4>)
 8001d64:	f002 fcc8 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	37e0      	adds	r7, #224	; 0xe0
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40013000 	.word	0x40013000
 8001d74:	58024400 	.word	0x58024400
 8001d78:	58020000 	.word	0x58020000

08001d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_TIM_Base_MspInit+0x9c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10f      	bne.n	8001dae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_TIM_Base_MspInit+0xa0>)
 8001d90:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <HAL_TIM_Base_MspInit+0xa0>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_TIM_Base_MspInit+0xa0>)
 8001da0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dac:	e030      	b.n	8001e10 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db6:	d117      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_TIM_Base_MspInit+0xa0>)
 8001dba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001dbe:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <HAL_TIM_Base_MspInit+0xa0>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_TIM_Base_MspInit+0xa0>)
 8001dca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	201c      	movs	r0, #28
 8001ddc:	f001 fb71 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001de0:	201c      	movs	r0, #28
 8001de2:	f001 fb88 	bl	80034f6 <HAL_NVIC_EnableIRQ>
}
 8001de6:	e013      	b.n	8001e10 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_TIM_Base_MspInit+0xa4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_TIM_Base_MspInit+0xa0>)
 8001df4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001df8:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_TIM_Base_MspInit+0xa0>)
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_TIM_Base_MspInit+0xa0>)
 8001e04:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	40000400 	.word	0x40000400

08001e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a38      	ldr	r2, [pc, #224]	; (8001f24 <HAL_TIM_MspPostInit+0x100>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d120      	bne.n	8001e88 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_TIM_MspPostInit+0x104>)
 8001e48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e4c:	4a36      	ldr	r2, [pc, #216]	; (8001f28 <HAL_TIM_MspPostInit+0x104>)
 8001e4e:	f043 0310 	orr.w	r3, r3, #16
 8001e52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e56:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <HAL_TIM_MspPostInit+0x104>)
 8001e58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001e64:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	482a      	ldr	r0, [pc, #168]	; (8001f2c <HAL_TIM_MspPostInit+0x108>)
 8001e82:	f002 fc39 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e86:	e048      	b.n	8001f1a <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d11f      	bne.n	8001ed2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_TIM_MspPostInit+0x104>)
 8001e94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_TIM_MspPostInit+0x104>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_TIM_MspPostInit+0x104>)
 8001ea4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4819      	ldr	r0, [pc, #100]	; (8001f30 <HAL_TIM_MspPostInit+0x10c>)
 8001ecc:	f002 fc14 	bl	80046f8 <HAL_GPIO_Init>
}
 8001ed0:	e023      	b.n	8001f1a <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_TIM_MspPostInit+0x110>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d11e      	bne.n	8001f1a <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_TIM_MspPostInit+0x104>)
 8001ede:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_TIM_MspPostInit+0x104>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_TIM_MspPostInit+0x104>)
 8001eee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001efa:	2340      	movs	r3, #64	; 0x40
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4808      	ldr	r0, [pc, #32]	; (8001f38 <HAL_TIM_MspPostInit+0x114>)
 8001f16:	f002 fbef 	bl	80046f8 <HAL_GPIO_Init>
}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000
 8001f28:	58024400 	.word	0x58024400
 8001f2c:	58021000 	.word	0x58021000
 8001f30:	58020000 	.word	0x58020000
 8001f34:	40000400 	.word	0x40000400
 8001f38:	58020800 	.word	0x58020800

08001f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0b8      	sub	sp, #224	; 0xe0
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	22b8      	movs	r2, #184	; 0xb8
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f009 fbc1 	bl	800b6e4 <memset>
  if(huart->Instance==USART3)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <HAL_UART_MspInit+0xc0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d142      	bne.n	8001ff2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fd70 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f86:	f7ff fd8f 	bl	8001aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_UART_MspInit+0xc4>)
 8001f8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_UART_MspInit+0xc4>)
 8001f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f96:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_UART_MspInit+0xc4>)
 8001f9c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_UART_MspInit+0xc4>)
 8001faa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fae:	4a14      	ldr	r2, [pc, #80]	; (8002000 <HAL_UART_MspInit+0xc4>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_UART_MspInit+0xc4>)
 8001fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <HAL_UART_MspInit+0xc8>)
 8001fee:	f002 fb83 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ff2:	bf00      	nop
 8001ff4:	37e0      	adds	r7, #224	; 0xe0
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40004800 	.word	0x40004800
 8002000:	58024400 	.word	0x58024400
 8002004:	58020c00 	.word	0x58020c00

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800200c:	e7fe      	b.n	800200c <NMI_Handler+0x4>

0800200e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <HardFault_Handler+0x4>

08002014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <MemManage_Handler+0x4>

0800201a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <BusFault_Handler+0x4>

08002020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <UsageFault_Handler+0x4>

08002026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002054:	f000 f9bc 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <FDCAN1_IT0_IRQHandler+0x10>)
 8002062:	f001 fecf 	bl	8003e04 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	24000260 	.word	0x24000260

08002070 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <FDCAN1_IT1_IRQHandler+0x10>)
 8002076:	f001 fec5 	bl	8003e04 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	24000260 	.word	0x24000260

08002084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM2_IRQHandler+0x10>)
 800208a:	f007 f819 	bl	80090c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2400043c 	.word	0x2400043c

08002098 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00a      	b.n	80020c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020aa:	f3af 8000 	nop.w
 80020ae:	4601      	mov	r1, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	60ba      	str	r2, [r7, #8]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbf0      	blt.n	80020aa <_read+0x12>
	}

return len;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	return -1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fa:	605a      	str	r2, [r3, #4]
	return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_isatty>:

int _isatty(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
	return 1;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
	return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <_sbrk+0x5c>)
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <_sbrk+0x60>)
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <_sbrk+0x64>)
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <_sbrk+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d207      	bcs.n	800217c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800216c:	f009 fa82 	bl	800b674 <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	220c      	movs	r2, #12
 8002174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	e009      	b.n	8002190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <_sbrk+0x64>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	24100000 	.word	0x24100000
 800219c:	00000400 	.word	0x00000400
 80021a0:	24000098 	.word	0x24000098
 80021a4:	24000508 	.word	0x24000508

080021a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <SystemInit+0xd0>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	4a31      	ldr	r2, [pc, #196]	; (8002278 <SystemInit+0xd0>)
 80021b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021bc:	4b2f      	ldr	r3, [pc, #188]	; (800227c <SystemInit+0xd4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d807      	bhi.n	80021d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021c8:	4b2c      	ldr	r3, [pc, #176]	; (800227c <SystemInit+0xd4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 030f 	bic.w	r3, r3, #15
 80021d0:	4a2a      	ldr	r2, [pc, #168]	; (800227c <SystemInit+0xd4>)
 80021d2:	f043 0303 	orr.w	r3, r3, #3
 80021d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021d8:	4b29      	ldr	r3, [pc, #164]	; (8002280 <SystemInit+0xd8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <SystemInit+0xd8>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021e4:	4b26      	ldr	r3, [pc, #152]	; (8002280 <SystemInit+0xd8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <SystemInit+0xd8>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4924      	ldr	r1, [pc, #144]	; (8002280 <SystemInit+0xd8>)
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <SystemInit+0xdc>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <SystemInit+0xd4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <SystemInit+0xd4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 030f 	bic.w	r3, r3, #15
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <SystemInit+0xd4>)
 800220c:	f043 0303 	orr.w	r3, r3, #3
 8002210:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <SystemInit+0xd8>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <SystemInit+0xd8>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <SystemInit+0xd8>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <SystemInit+0xd8>)
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <SystemInit+0xe0>)
 8002228:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <SystemInit+0xd8>)
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <SystemInit+0xe4>)
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <SystemInit+0xd8>)
 8002232:	4a17      	ldr	r2, [pc, #92]	; (8002290 <SystemInit+0xe8>)
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <SystemInit+0xd8>)
 8002238:	2200      	movs	r2, #0
 800223a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <SystemInit+0xd8>)
 800223e:	4a14      	ldr	r2, [pc, #80]	; (8002290 <SystemInit+0xe8>)
 8002240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <SystemInit+0xd8>)
 8002244:	2200      	movs	r2, #0
 8002246:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <SystemInit+0xd8>)
 800224a:	4a11      	ldr	r2, [pc, #68]	; (8002290 <SystemInit+0xe8>)
 800224c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <SystemInit+0xd8>)
 8002250:	2200      	movs	r2, #0
 8002252:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <SystemInit+0xd8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a09      	ldr	r2, [pc, #36]	; (8002280 <SystemInit+0xd8>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <SystemInit+0xd8>)
 8002262:	2200      	movs	r2, #0
 8002264:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <SystemInit+0xec>)
 8002268:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800226c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00
 800227c:	52002000 	.word	0x52002000
 8002280:	58024400 	.word	0x58024400
 8002284:	eaf6ed7f 	.word	0xeaf6ed7f
 8002288:	02020200 	.word	0x02020200
 800228c:	01ff0000 	.word	0x01ff0000
 8002290:	01010280 	.word	0x01010280
 8002294:	52004000 	.word	0x52004000

08002298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800229c:	f7ff ff84 	bl	80021a8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a2:	490d      	ldr	r1, [pc, #52]	; (80022d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b8:	4c0a      	ldr	r4, [pc, #40]	; (80022e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022c6:	f009 f9db 	bl	800b680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ca:	f7fe fce1 	bl	8000c90 <main>
  bx  lr
 80022ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80022d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022d8:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80022dc:	0800c708 	.word	0x0800c708
  ldr r2, =_sbss
 80022e0:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80022e4:	24000508 	.word	0x24000508

080022e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f2:	2003      	movs	r0, #3
 80022f4:	f001 f8da 	bl	80034ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80022f8:	f003 f9dc 	bl	80056b4 <HAL_RCC_GetSysClockFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_Init+0x68>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	4913      	ldr	r1, [pc, #76]	; (8002358 <HAL_Init+0x6c>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_Init+0x68>)
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_Init+0x6c>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_Init+0x70>)
 800232e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <HAL_Init+0x74>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002336:	200f      	movs	r0, #15
 8002338:	f000 f814 	bl	8002364 <HAL_InitTick>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e002      	b.n	800234c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002346:	f7ff fbb5 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	58024400 	.word	0x58024400
 8002358:	0800c618 	.word	0x0800c618
 800235c:	2400000c 	.word	0x2400000c
 8002360:	24000008 	.word	0x24000008

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_InitTick+0x60>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e021      	b.n	80023bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_InitTick+0x64>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_InitTick+0x60>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	fbb3 f3f1 	udiv	r3, r3, r1
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f001 f8bf 	bl	8003512 <HAL_SYSTICK_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00e      	b.n	80023bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d80a      	bhi.n	80023ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f001 f889 	bl	80034c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <HAL_InitTick+0x68>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	24000014 	.word	0x24000014
 80023c8:	24000008 	.word	0x24000008
 80023cc:	24000010 	.word	0x24000010

080023d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	24000014 	.word	0x24000014
 80023f4:	240004f4 	.word	0x240004f4

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	240004f4 	.word	0x240004f4

08002410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d005      	beq.n	8002436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_Delay+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002436:	bf00      	nop
 8002438:	f7ff ffde 	bl	80023f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f7      	bhi.n	8002438 <HAL_Delay+0x28>
  {
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	24000014 	.word	0x24000014

08002458 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	609a      	str	r2, [r3, #8]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3360      	adds	r3, #96	; 0x60
 80024d2:	461a      	mov	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	431a      	orrs	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	611a      	str	r2, [r3, #16]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002532:	b480      	push	{r7}
 8002534:	b087      	sub	sp, #28
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3360      	adds	r3, #96	; 0x60
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	431a      	orrs	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]
  }
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3330      	adds	r3, #48	; 0x30
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	211f      	movs	r1, #31
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	401a      	ands	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	f003 011f 	and.w	r1, r3, #31
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	431a      	orrs	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3314      	adds	r3, #20
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	0e5b      	lsrs	r3, r3, #25
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	4413      	add	r3, r2
 80025de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	0d1b      	lsrs	r3, r3, #20
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2107      	movs	r1, #7
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	401a      	ands	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	0d1b      	lsrs	r3, r3, #20
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	431a      	orrs	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0318 	and.w	r3, r3, #24
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <LL_ADC_SetChannelSingleDiff+0x44>)
 800263c:	40d9      	lsrs	r1, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	400b      	ands	r3, r1
 8002642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002646:	431a      	orrs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	000fffff 	.word	0x000fffff

08002660 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <LL_ADC_DisableDeepPowerDown+0x20>)
 800266e:	4013      	ands	r3, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6093      	str	r3, [r2, #8]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	5fffffc0 	.word	0x5fffffc0

08002684 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002698:	d101      	bne.n	800269e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	6fffffc0 	.word	0x6fffffc0

080026d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e8:	d101      	bne.n	80026ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <LL_ADC_IsEnabled+0x18>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <LL_ADC_IsEnabled+0x1a>
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b04      	cmp	r3, #4
 8002734:	d101      	bne.n	800273a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b08      	cmp	r3, #8
 800275a:	d101      	bne.n	8002760 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e138      	b.n	80029fc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff f9a5 	bl	8001ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff67 	bl	8002684 <LL_ADC_IsDeepPowerDownEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff4d 	bl	8002660 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff82 	bl	80026d4 <LL_ADC_IsInternalRegulatorEnabled>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d114      	bne.n	8002800 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff66 	bl	80026ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027e0:	4b88      	ldr	r3, [pc, #544]	; (8002a04 <HAL_ADC_Init+0x294>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	4a88      	ldr	r2, [pc, #544]	; (8002a08 <HAL_ADC_Init+0x298>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	3301      	adds	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027f2:	e002      	b.n	80027fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff65 	bl	80026d4 <LL_ADC_IsInternalRegulatorEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10d      	bne.n	800282c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	f043 0210 	orr.w	r2, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff76 	bl	8002722 <LL_ADC_REG_IsConversionOngoing>
 8002836:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 80d2 	bne.w	80029ea <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f040 80ce 	bne.w	80029ea <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002856:	f043 0202 	orr.w	r2, r3, #2
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff4a 	bl	80026fc <LL_ADC_IsEnabled>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d110      	bne.n	8002890 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800286e:	4867      	ldr	r0, [pc, #412]	; (8002a0c <HAL_ADC_Init+0x29c>)
 8002870:	f7ff ff44 	bl	80026fc <LL_ADC_IsEnabled>
 8002874:	4604      	mov	r4, r0
 8002876:	4866      	ldr	r0, [pc, #408]	; (8002a10 <HAL_ADC_Init+0x2a0>)
 8002878:	f7ff ff40 	bl	80026fc <LL_ADC_IsEnabled>
 800287c:	4603      	mov	r3, r0
 800287e:	4323      	orrs	r3, r4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4619      	mov	r1, r3
 800288a:	4862      	ldr	r0, [pc, #392]	; (8002a14 <HAL_ADC_Init+0x2a4>)
 800288c:	f7ff fde4 	bl	8002458 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7d5b      	ldrb	r3, [r3, #21]
 8002894:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800289a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80028a0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7f1b      	ldrb	r3, [r3, #28]
 80028a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7f1b      	ldrb	r3, [r3, #28]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d106      	bne.n	80028c2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	045b      	lsls	r3, r3, #17
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	4b4c      	ldr	r3, [pc, #304]	; (8002a18 <HAL_ADC_Init+0x2a8>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	69b9      	ldr	r1, [r7, #24]
 80028ee:	430b      	orrs	r3, r1
 80028f0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff13 	bl	8002722 <LL_ADC_REG_IsConversionOngoing>
 80028fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff20 	bl	8002748 <LL_ADC_INJ_IsConversionOngoing>
 8002908:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d14a      	bne.n	80029a6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d147      	bne.n	80029a6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7d1b      	ldrb	r3, [r3, #20]
 800291a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <HAL_ADC_Init+0x2ac>)
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	430b      	orrs	r3, r1
 8002936:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800293e:	2b01      	cmp	r3, #1
 8002940:	d11b      	bne.n	800297a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_ADC_Init+0x2b0>)
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002956:	3a01      	subs	r2, #1
 8002958:	0411      	lsls	r1, r2, #16
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002964:	4311      	orrs	r1, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800296a:	430a      	orrs	r2, r1
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	611a      	str	r2, [r3, #16]
 8002978:	e007      	b.n	800298a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fb25 	bl	8002ff0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10c      	bne.n	80029c8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	f023 010f 	bic.w	r1, r3, #15
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
 80029c6:	e007      	b.n	80029d8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 020f 	bic.w	r2, r2, #15
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f023 0303 	bic.w	r3, r3, #3
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
 80029e8:	e007      	b.n	80029fa <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3724      	adds	r7, #36	; 0x24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}
 8002a04:	24000008 	.word	0x24000008
 8002a08:	053e2d63 	.word	0x053e2d63
 8002a0c:	40022000 	.word	0x40022000
 8002a10:	40022100 	.word	0x40022100
 8002a14:	40022300 	.word	0x40022300
 8002a18:	fff0c003 	.word	0xfff0c003
 8002a1c:	ffffbffc 	.word	0xffffbffc
 8002a20:	fc00f81e 	.word	0xfc00f81e

08002a24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b0a1      	sub	sp, #132	; 0x84
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a9a      	ldr	r2, [pc, #616]	; (8002ca8 <HAL_ADC_ConfigChannel+0x284>)
 8002a3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2a>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e2bc      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x5a4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fe61 	bl	8002722 <LL_ADC_REG_IsConversionOngoing>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 82a1 	bne.w	8002faa <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d108      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x62>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2201      	movs	r2, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	e016      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x90>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a96:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2201      	movs	r2, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	69d1      	ldr	r1, [r2, #28]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f7ff fd4a 	bl	8002568 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fe22 	bl	8002722 <LL_ADC_REG_IsConversionOngoing>
 8002ade:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fe2f 	bl	8002748 <LL_ADC_INJ_IsConversionOngoing>
 8002aea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 80a0 	bne.w	8002c34 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 809c 	bne.w	8002c34 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f7ff fd59 	bl	80025c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x110>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	e00a      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x126>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d027      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6919      	ldr	r1, [r3, #16]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b62:	f7ff fcad 	bl	80024c0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6919      	ldr	r1, [r3, #16]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	7e5b      	ldrb	r3, [r3, #25]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x158>
 8002b76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b7a:	e000      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x15a>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f7ff fcd7 	bl	8002532 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6919      	ldr	r1, [r3, #16]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	7e1b      	ldrb	r3, [r3, #24]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x176>
 8002b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b98:	e000      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x178>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f7ff fcaf 	bl	8002500 <LL_ADC_SetDataRightShift>
 8002ba2:	e047      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	069b      	lsls	r3, r3, #26
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d107      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bc6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	069b      	lsls	r3, r3, #26
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d107      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bea:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	069b      	lsls	r3, r3, #26
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d107      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c0e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	069b      	lsls	r3, r3, #26
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c32:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fd5f 	bl	80026fc <LL_ADC_IsEnabled>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 81bb 	bne.w	8002fbc <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f7ff fce0 	bl	8002618 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_ADC_ConfigChannel+0x284>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f040 8130 	bne.w	8002ec4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x268>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	bf94      	ite	ls
 8002c84:	2301      	movls	r3, #1
 8002c86:	2300      	movhi	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e01b      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x2a0>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	e005      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x290>
 8002ca8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2b09      	cmp	r3, #9
 8002cbc:	bf94      	ite	ls
 8002cbe:	2301      	movls	r3, #1
 8002cc0:	2300      	movhi	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d079      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x2c0>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	069b      	lsls	r3, r3, #26
 8002cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce2:	e015      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x2ec>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e003      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	069b      	lsls	r3, r3, #26
 8002d0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x30c>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	2101      	movs	r1, #1
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	e017      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x33c>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e003      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	ea42 0103 	orr.w	r1, r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x362>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	051b      	lsls	r3, r3, #20
 8002d84:	e018      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x394>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002d9e:	2320      	movs	r3, #32
 8002da0:	e003      	b.n	8002daa <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db8:	430b      	orrs	r3, r1
 8002dba:	e07e      	b.n	8002eba <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x3b4>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	3301      	adds	r3, #1
 8002dd0:	069b      	lsls	r3, r3, #26
 8002dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd6:	e015      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3e0>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e003      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	069b      	lsls	r3, r3, #26
 8002e00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x400>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	e017      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x430>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	61bb      	str	r3, [r7, #24]
  return result;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e003      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	ea42 0103 	orr.w	r1, r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10d      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x45c>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	3b1e      	subs	r3, #30
 8002e78:	051b      	lsls	r3, r3, #20
 8002e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	e01b      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x494>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	60fb      	str	r3, [r7, #12]
  return result;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	e003      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f003 021f 	and.w	r2, r3, #31
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b1e      	subs	r3, #30
 8002eb2:	051b      	lsls	r3, r3, #20
 8002eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	6892      	ldr	r2, [r2, #8]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f7ff fb7e 	bl	80025c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	da77      	bge.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ecc:	4840      	ldr	r0, [pc, #256]	; (8002fd0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002ece:	f7ff fae9 	bl	80024a4 <LL_ADC_GetCommonPathInternalCh>
 8002ed2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ed4:	483f      	ldr	r0, [pc, #252]	; (8002fd4 <HAL_ADC_ConfigChannel+0x5b0>)
 8002ed6:	f7ff fc11 	bl	80026fc <LL_ADC_IsEnabled>
 8002eda:	4604      	mov	r4, r0
 8002edc:	483e      	ldr	r0, [pc, #248]	; (8002fd8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002ede:	f7ff fc0d 	bl	80026fc <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4323      	orrs	r3, r4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d155      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <HAL_ADC_ConfigChannel+0x5b8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d122      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x516>
 8002ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d11d      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a35      	ldr	r2, [pc, #212]	; (8002fd8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d159      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f0e:	4619      	mov	r1, r3
 8002f10:	482f      	ldr	r0, [pc, #188]	; (8002fd0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002f12:	f7ff fab4 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f16:	4b32      	ldr	r3, [pc, #200]	; (8002fe0 <HAL_ADC_ConfigChannel+0x5bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	099b      	lsrs	r3, r3, #6
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <HAL_ADC_ConfigChannel+0x5c0>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	3301      	adds	r3, #1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f2a:	e002      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f38:	e040      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d111      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x544>
 8002f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d131      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	4619      	mov	r1, r3
 8002f60:	481b      	ldr	r0, [pc, #108]	; (8002fd0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002f62:	f7ff fa8c 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f66:	e029      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_ADC_ConfigChannel+0x5c8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d124      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
 8002f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11f      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d11a      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4810      	ldr	r0, [pc, #64]	; (8002fd0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002f90:	f7ff fa75 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
 8002f94:	e012      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002fa8:	e008      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	f043 0220 	orr.w	r2, r3, #32
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fc4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3784      	adds	r7, #132	; 0x84
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	40022300 	.word	0x40022300
 8002fd4:	40022000 	.word	0x40022000
 8002fd8:	40022100 	.word	0x40022100
 8002fdc:	cb840000 	.word	0xcb840000
 8002fe0:	24000008 	.word	0x24000008
 8002fe4:	053e2d63 	.word	0x053e2d63
 8002fe8:	bac04000 	.word	0xbac04000
 8002fec:	cfb80000 	.word	0xcfb80000

08002ff0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ff8:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <ADC_ConfigureBoostMode+0x188>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01c      	beq.n	800303e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003004:	f002 fcd0 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 8003008:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003012:	d010      	beq.n	8003036 <ADC_ConfigureBoostMode+0x46>
 8003014:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003018:	d871      	bhi.n	80030fe <ADC_ConfigureBoostMode+0x10e>
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d002      	beq.n	8003026 <ADC_ConfigureBoostMode+0x36>
 8003020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003024:	d16b      	bne.n	80030fe <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	60fb      	str	r3, [r7, #12]
        break;
 8003034:	e066      	b.n	8003104 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	60fb      	str	r3, [r7, #12]
        break;
 800303c:	e062      	b.n	8003104 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800303e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003042:	f003 fc19 	bl	8006878 <HAL_RCCEx_GetPeriphCLKFreq>
 8003046:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003050:	d051      	beq.n	80030f6 <ADC_ConfigureBoostMode+0x106>
 8003052:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003056:	d854      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x112>
 8003058:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800305c:	d047      	beq.n	80030ee <ADC_ConfigureBoostMode+0xfe>
 800305e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003062:	d84e      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x112>
 8003064:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003068:	d03d      	beq.n	80030e6 <ADC_ConfigureBoostMode+0xf6>
 800306a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800306e:	d848      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x112>
 8003070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003074:	d033      	beq.n	80030de <ADC_ConfigureBoostMode+0xee>
 8003076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800307a:	d842      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x112>
 800307c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003080:	d029      	beq.n	80030d6 <ADC_ConfigureBoostMode+0xe6>
 8003082:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003086:	d83c      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x112>
 8003088:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800308c:	d01a      	beq.n	80030c4 <ADC_ConfigureBoostMode+0xd4>
 800308e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003092:	d836      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x112>
 8003094:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003098:	d014      	beq.n	80030c4 <ADC_ConfigureBoostMode+0xd4>
 800309a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800309e:	d830      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x112>
 80030a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a4:	d00e      	beq.n	80030c4 <ADC_ConfigureBoostMode+0xd4>
 80030a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030aa:	d82a      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x112>
 80030ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030b0:	d008      	beq.n	80030c4 <ADC_ConfigureBoostMode+0xd4>
 80030b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030b6:	d824      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x112>
 80030b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030bc:	d002      	beq.n	80030c4 <ADC_ConfigureBoostMode+0xd4>
 80030be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030c2:	d11e      	bne.n	8003102 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	0c9b      	lsrs	r3, r3, #18
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	60fb      	str	r3, [r7, #12]
        break;
 80030d4:	e016      	b.n	8003104 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	60fb      	str	r3, [r7, #12]
        break;
 80030dc:	e012      	b.n	8003104 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	60fb      	str	r3, [r7, #12]
        break;
 80030e4:	e00e      	b.n	8003104 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	60fb      	str	r3, [r7, #12]
        break;
 80030ec:	e00a      	b.n	8003104 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	09db      	lsrs	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]
        break;
 80030f4:	e006      	b.n	8003104 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	60fb      	str	r3, [r7, #12]
        break;
 80030fc:	e002      	b.n	8003104 <ADC_ConfigureBoostMode+0x114>
        break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8003102:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a1b      	ldr	r2, [pc, #108]	; (800317c <ADC_ConfigureBoostMode+0x18c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d808      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003120:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003122:	e025      	b.n	8003170 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a16      	ldr	r2, [pc, #88]	; (8003180 <ADC_ConfigureBoostMode+0x190>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d80a      	bhi.n	8003142 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313e:	609a      	str	r2, [r3, #8]
}
 8003140:	e016      	b.n	8003170 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <ADC_ConfigureBoostMode+0x194>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d80a      	bhi.n	8003160 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315c:	609a      	str	r2, [r3, #8]
}
 800315e:	e007      	b.n	8003170 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40022300 	.word	0x40022300
 800317c:	005f5e10 	.word	0x005f5e10
 8003180:	00bebc20 	.word	0x00bebc20
 8003184:	017d7840 	.word	0x017d7840

08003188 <LL_ADC_IsEnabled>:
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <LL_ADC_IsEnabled+0x18>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <LL_ADC_IsEnabled+0x1a>
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_ADC_REG_IsConversionOngoing>:
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d101      	bne.n	80031c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b09f      	sub	sp, #124	; 0x7c
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e080      	b.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80031fe:	2300      	movs	r3, #0
 8003200:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d102      	bne.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800320c:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	e001      	b.n	8003216 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e05f      	b.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ffb9 	bl	80031ae <LL_ADC_REG_IsConversionOngoing>
 800323c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ffb3 	bl	80031ae <LL_ADC_REG_IsConversionOngoing>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d141      	bne.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800324e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003250:	2b00      	cmp	r3, #0
 8003252:	d13e      	bne.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003256:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	431a      	orrs	r2, r3
 800326e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003270:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003272:	4822      	ldr	r0, [pc, #136]	; (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003274:	f7ff ff88 	bl	8003188 <LL_ADC_IsEnabled>
 8003278:	4604      	mov	r4, r0
 800327a:	4821      	ldr	r0, [pc, #132]	; (8003300 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800327c:	f7ff ff84 	bl	8003188 <LL_ADC_IsEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	4323      	orrs	r3, r4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12e      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800328e:	4013      	ands	r3, r2
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	6811      	ldr	r1, [r2, #0]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	6892      	ldr	r2, [r2, #8]
 8003298:	430a      	orrs	r2, r1
 800329a:	431a      	orrs	r2, r3
 800329c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032a0:	e021      	b.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ae:	4813      	ldr	r0, [pc, #76]	; (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80032b0:	f7ff ff6a 	bl	8003188 <LL_ADC_IsEnabled>
 80032b4:	4604      	mov	r4, r0
 80032b6:	4812      	ldr	r0, [pc, #72]	; (8003300 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80032b8:	f7ff ff66 	bl	8003188 <LL_ADC_IsEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	4323      	orrs	r3, r4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d110      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d0:	e009      	b.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 0220 	orr.w	r2, r3, #32
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032e4:	e000      	b.n	80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	377c      	adds	r7, #124	; 0x7c
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd90      	pop	{r4, r7, pc}
 80032fc:	40022000 	.word	0x40022000
 8003300:	40022100 	.word	0x40022100
 8003304:	40022300 	.word	0x40022300
 8003308:	fffff0e0 	.word	0xfffff0e0

0800330c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <__NVIC_SetPriorityGrouping+0x40>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003328:	4013      	ands	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	4313      	orrs	r3, r2
 8003338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333a:	4a04      	ldr	r2, [pc, #16]	; (800334c <__NVIC_SetPriorityGrouping+0x40>)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	60d3      	str	r3, [r2, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00
 8003350:	05fa0000 	.word	0x05fa0000

08003354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <__NVIC_GetPriorityGrouping+0x18>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	f003 0307 	and.w	r3, r3, #7
}
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800337a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337e:	2b00      	cmp	r3, #0
 8003380:	db0b      	blt.n	800339a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	4907      	ldr	r1, [pc, #28]	; (80033a8 <__NVIC_EnableIRQ+0x38>)
 800338a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2001      	movs	r0, #1
 8003392:	fa00 f202 	lsl.w	r2, r0, r2
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000e100 	.word	0xe000e100

080033ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db0a      	blt.n	80033d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	490c      	ldr	r1, [pc, #48]	; (80033f8 <__NVIC_SetPriority+0x4c>)
 80033c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	440b      	add	r3, r1
 80033d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d4:	e00a      	b.n	80033ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4908      	ldr	r1, [pc, #32]	; (80033fc <__NVIC_SetPriority+0x50>)
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	3b04      	subs	r3, #4
 80033e4:	0112      	lsls	r2, r2, #4
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	440b      	add	r3, r1
 80033ea:	761a      	strb	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f1c3 0307 	rsb	r3, r3, #7
 800341a:	2b04      	cmp	r3, #4
 800341c:	bf28      	it	cs
 800341e:	2304      	movcs	r3, #4
 8003420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3304      	adds	r3, #4
 8003426:	2b06      	cmp	r3, #6
 8003428:	d902      	bls.n	8003430 <NVIC_EncodePriority+0x30>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3b03      	subs	r3, #3
 800342e:	e000      	b.n	8003432 <NVIC_EncodePriority+0x32>
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	f04f 32ff 	mov.w	r2, #4294967295
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	401a      	ands	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003448:	f04f 31ff 	mov.w	r1, #4294967295
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43d9      	mvns	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	4313      	orrs	r3, r2
         );
}
 800345a:	4618      	mov	r0, r3
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003478:	d301      	bcc.n	800347e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <SysTick_Config+0x40>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003486:	210f      	movs	r1, #15
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	f7ff ff8e 	bl	80033ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <SysTick_Config+0x40>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <SysTick_Config+0x40>)
 8003498:	2207      	movs	r2, #7
 800349a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000e010 	.word	0xe000e010

080034ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff29 	bl	800330c <__NVIC_SetPriorityGrouping>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034d0:	f7ff ff40 	bl	8003354 <__NVIC_GetPriorityGrouping>
 80034d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	6978      	ldr	r0, [r7, #20]
 80034dc:	f7ff ff90 	bl	8003400 <NVIC_EncodePriority>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff5f 	bl	80033ac <__NVIC_SetPriority>
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff33 	bl	8003370 <__NVIC_EnableIRQ>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ffa4 	bl	8003468 <SysTick_Config>
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b098      	sub	sp, #96	; 0x60
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003534:	4a84      	ldr	r2, [pc, #528]	; (8003748 <HAL_FDCAN_Init+0x21c>)
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	4611      	mov	r1, r2
 800353c:	224c      	movs	r2, #76	; 0x4c
 800353e:	4618      	mov	r0, r3
 8003540:	f008 f8c2 	bl	800b6c8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e1ca      	b.n	80038e4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7e      	ldr	r2, [pc, #504]	; (800374c <HAL_FDCAN_Init+0x220>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d106      	bne.n	8003566 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003560:	461a      	mov	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe fb24 	bl	8001bc8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0210 	bic.w	r2, r2, #16
 800358e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003590:	f7fe ff32 	bl	80023f8 <HAL_GetTick>
 8003594:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003596:	e014      	b.n	80035c2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003598:	f7fe ff2e 	bl	80023f8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b0a      	cmp	r3, #10
 80035a4:	d90d      	bls.n	80035c2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ac:	f043 0201 	orr.w	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2203      	movs	r2, #3
 80035ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e190      	b.n	80038e4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d0e3      	beq.n	8003598 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e0:	f7fe ff0a 	bl	80023f8 <HAL_GetTick>
 80035e4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035e6:	e014      	b.n	8003612 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80035e8:	f7fe ff06 	bl	80023f8 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b0a      	cmp	r3, #10
 80035f4:	d90d      	bls.n	8003612 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2203      	movs	r2, #3
 800360a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e168      	b.n	80038e4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0e3      	beq.n	80035e8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0202 	orr.w	r2, r2, #2
 800362e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7c1b      	ldrb	r3, [r3, #16]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d108      	bne.n	800364a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003646:	619a      	str	r2, [r3, #24]
 8003648:	e007      	b.n	800365a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003658:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	7c5b      	ldrb	r3, [r3, #17]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d108      	bne.n	8003674 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003670:	619a      	str	r2, [r3, #24]
 8003672:	e007      	b.n	8003684 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003682:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7c9b      	ldrb	r3, [r3, #18]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d108      	bne.n	800369e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800369a:	619a      	str	r2, [r3, #24]
 800369c:	e007      	b.n	80036ae <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036ac:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80036d2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0210 	bic.w	r2, r2, #16
 80036e2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d108      	bne.n	80036fe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0204 	orr.w	r2, r2, #4
 80036fa:	619a      	str	r2, [r3, #24]
 80036fc:	e030      	b.n	8003760 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d02c      	beq.n	8003760 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d020      	beq.n	8003750 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800371c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0210 	orr.w	r2, r2, #16
 800372c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d114      	bne.n	8003760 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0220 	orr.w	r2, r2, #32
 8003744:	619a      	str	r2, [r3, #24]
 8003746:	e00b      	b.n	8003760 <HAL_FDCAN_Init+0x234>
 8003748:	0800c5cc 	.word	0x0800c5cc
 800374c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0220 	orr.w	r2, r2, #32
 800375e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	3b01      	subs	r3, #1
 8003766:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	3b01      	subs	r3, #1
 800376e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003770:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003778:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	3b01      	subs	r3, #1
 8003782:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003788:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800378a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003794:	d115      	bne.n	80037c2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	3b01      	subs	r3, #1
 80037a2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80037a4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	3b01      	subs	r3, #1
 80037ac:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80037ae:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	3b01      	subs	r3, #1
 80037b8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80037be:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80037c0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e8:	4413      	add	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d012      	beq.n	8003814 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80037f6:	f023 0107 	bic.w	r1, r3, #7
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003804:	4413      	add	r3, r2
 8003806:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d012      	beq.n	8003842 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003824:	f023 0107 	bic.w	r1, r3, #7
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003832:	4413      	add	r3, r2
 8003834:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003846:	2b00      	cmp	r3, #0
 8003848:	d013      	beq.n	8003872 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003852:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003860:	4413      	add	r3, r2
 8003862:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003866:	011a      	lsls	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003876:	2b00      	cmp	r3, #0
 8003878:	d013      	beq.n	80038a2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003882:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003890:	4413      	add	r3, r2
 8003892:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003896:	021a      	lsls	r2, r3, #8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HAL_FDCAN_Init+0x3c0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d107      	bne.n	80038bc <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f022 0203 	bic.w	r2, r2, #3
 80038ba:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fd89 	bl	80043ec <FDCAN_CalcultateRamBlockAddresses>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80038e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3760      	adds	r7, #96	; 0x60
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	4000a000 	.word	0x4000a000

080038f0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003900:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <HAL_FDCAN_ConfigFilter+0x1e>
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d157      	bne.n	80039be <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d12b      	bne.n	800396e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b07      	cmp	r3, #7
 800391c:	d10d      	bne.n	800393a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800392a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003930:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003932:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	e00e      	b.n	8003958 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003946:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800394e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e025      	b.n	80039ba <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	075a      	lsls	r2, r3, #29
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b07      	cmp	r3, #7
 8003982:	d103      	bne.n	800398c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	e006      	b.n	800399a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	079a      	lsls	r2, r3, #30
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3304      	adds	r3, #4
 80039b2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e008      	b.n	80039d0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c4:	f043 0202 	orr.w	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d111      	bne.n	8003a14 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e008      	b.n	8003a26 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a1a:	f043 0204 	orr.w	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b08b      	sub	sp, #44	; 0x2c
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a4c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003a4e:	7efb      	ldrb	r3, [r7, #27]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	f040 814b 	bne.w	8003cec <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d14d      	bne.n	8003af8 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e13e      	b.n	8003cfe <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e12c      	b.n	8003cfe <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003aac:	0e1b      	lsrs	r3, r3, #24
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d10b      	bne.n	8003ace <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003abe:	0fdb      	lsrs	r3, r3, #31
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac8:	d101      	bne.n	8003ace <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	69f9      	ldr	r1, [r7, #28]
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
 8003af6:	e069      	b.n	8003bcc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b41      	cmp	r3, #65	; 0x41
 8003afc:	d14d      	bne.n	8003b9a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e0ed      	b.n	8003cfe <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e0db      	b.n	8003cfe <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b4e:	0e1b      	lsrs	r3, r3, #24
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10b      	bne.n	8003b70 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b60:	0fdb      	lsrs	r3, r3, #31
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b6a:	d101      	bne.n	8003b70 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8c:	69f9      	ldr	r1, [r7, #28]
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	e018      	b.n	8003bcc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d309      	bcc.n	8003bb8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003baa:	f043 0220 	orr.w	r2, r3, #32
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0a2      	b.n	8003cfe <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	fb01 f303 	mul.w	r3, r1, r3
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d107      	bne.n	8003bf0 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0c9b      	lsrs	r3, r3, #18
 8003be6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e005      	b.n	8003bfc <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	3304      	adds	r3, #4
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	0e1b      	lsrs	r3, r3, #24
 8003c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	0fda      	lsrs	r2, r3, #31
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	3304      	adds	r3, #4
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	e00a      	b.n	8003c86 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	441a      	add	r2, r3
 8003c76:	6839      	ldr	r1, [r7, #0]
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	440b      	add	r3, r1
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	3301      	adds	r3, #1
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	4a1f      	ldr	r2, [pc, #124]	; (8003d0c <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003c8e:	5cd3      	ldrb	r3, [r2, r3]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d3eb      	bcc.n	8003c70 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d105      	bne.n	8003caa <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003ca8:	e01e      	b.n	8003ce8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b41      	cmp	r3, #65	; 0x41
 8003cae:	d105      	bne.n	8003cbc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003cba:	e015      	b.n	8003ce8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b1f      	cmp	r3, #31
 8003cc0:	d808      	bhi.n	8003cd4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	fa01 f202 	lsl.w	r2, r1, r2
 8003cce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003cd2:	e009      	b.n	8003ce8 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f003 021f 	and.w	r2, r3, #31
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2101      	movs	r1, #1
 8003ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e008      	b.n	8003cfe <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cf2:	f043 0208 	orr.w	r2, r3, #8
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	372c      	adds	r7, #44	; 0x2c
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	0800c628 	.word	0x0800c628

08003d10 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003d22:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d002      	beq.n	8003d30 <HAL_FDCAN_ActivateNotification+0x20>
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d155      	bne.n	8003ddc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d108      	bne.n	8003d50 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d4e:	e014      	b.n	8003d7a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d108      	bne.n	8003d72 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0202 	orr.w	r2, r2, #2
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d70:	e003      	b.n	8003d7a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2203      	movs	r2, #3
 8003d78:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_FDCAN_ActivateNotification+0xec>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6553      	str	r3, [r2, #84]	; 0x54
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	0f9b      	lsrs	r3, r3, #30
 8003dd2:	490b      	ldr	r1, [pc, #44]	; (8003e00 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e008      	b.n	8003dee <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de2:	f043 0202 	orr.w	r2, r3, #2
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	3fcfffff 	.word	0x3fcfffff
 8003e00:	4000a800 	.word	0x4000a800

08003e04 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b092      	sub	sp, #72	; 0x48
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003e0c:	4b90      	ldr	r3, [pc, #576]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	079b      	lsls	r3, r3, #30
 8003e12:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003e14:	4b8e      	ldr	r3, [pc, #568]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	079b      	lsls	r3, r3, #30
 8003e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e2a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e34:	4013      	ands	r3, r2
 8003e36:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e64:	4013      	ands	r3, r2
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e94:	4013      	ands	r3, r2
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d011      	beq.n	8003eca <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ebc:	651a      	str	r2, [r3, #80]	; 0x50
 8003ebe:	4b64      	ldr	r3, [pc, #400]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fa45 	bl	8004354 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01e      	beq.n	8003f16 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d017      	beq.n	8003f16 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efa:	4013      	ands	r3, r2
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f06:	651a      	str	r2, [r3, #80]	; 0x50
 8003f08:	4b51      	ldr	r3, [pc, #324]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fa00 	bl	8004316 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f22:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <HAL_FDCAN_IRQHandler+0x250>)
 8003f24:	400b      	ands	r3, r1
 8003f26:	6513      	str	r3, [r2, #80]	; 0x50
 8003f28:	4a49      	ldr	r2, [pc, #292]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2c:	0f9b      	lsrs	r3, r3, #30
 8003f2e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003f30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9c4 	bl	80042c0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <HAL_FDCAN_IRQHandler+0x250>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	6513      	str	r3, [r2, #80]	; 0x50
 8003f4a:	4a41      	ldr	r2, [pc, #260]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4e:	0f9b      	lsrs	r3, r3, #30
 8003f50:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f9be 	bl	80042d6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f66:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <HAL_FDCAN_IRQHandler+0x250>)
 8003f68:	400b      	ands	r3, r1
 8003f6a:	6513      	str	r3, [r2, #80]	; 0x50
 8003f6c:	4a38      	ldr	r2, [pc, #224]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f70:	0f9b      	lsrs	r3, r3, #30
 8003f72:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fc fe24 	bl	8000bc4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f88:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_FDCAN_IRQHandler+0x250>)
 8003f8a:	400b      	ands	r3, r1
 8003f8c:	6513      	str	r3, [r2, #80]	; 0x50
 8003f8e:	4a30      	ldr	r2, [pc, #192]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8003f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f92:	0f9b      	lsrs	r3, r3, #30
 8003f94:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003f96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fc fe37 	bl	8000c0c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d011      	beq.n	8003fd0 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc2:	651a      	str	r2, [r3, #80]	; 0x50
 8003fc4:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f98e 	bl	80042ec <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01e      	beq.n	800401c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d017      	beq.n	800401c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004000:	4013      	ands	r3, r2
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800400c:	651a      	str	r2, [r3, #80]	; 0x50
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f972 	bl	8004300 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00f      	beq.n	8004058 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004040:	651a      	str	r2, [r3, #80]	; 0x50
 8004042:	4b03      	ldr	r3, [pc, #12]	; (8004050 <HAL_FDCAN_IRQHandler+0x24c>)
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fc fe03 	bl	8000c54 <HAL_FDCAN_RxBufferNewMessageCallback>
 800404e:	e003      	b.n	8004058 <HAL_FDCAN_IRQHandler+0x254>
 8004050:	4000a800 	.word	0x4000a800
 8004054:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d011      	beq.n	800408a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800407c:	651a      	str	r2, [r3, #80]	; 0x50
 800407e:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004080:	2200      	movs	r2, #0
 8004082:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f951 	bl	800432c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80040ae:	651a      	str	r2, [r3, #80]	; 0x50
 80040b0:	4b80      	ldr	r3, [pc, #512]	; (80042b4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f942 	bl	8004340 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00f      	beq.n	80040f8 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040e0:	651a      	str	r2, [r3, #80]	; 0x50
 80040e2:	4b74      	ldr	r3, [pc, #464]	; (80042b4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00d      	beq.n	800411a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004104:	4b6c      	ldr	r3, [pc, #432]	; (80042b8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004106:	400b      	ands	r3, r1
 8004108:	6513      	str	r3, [r2, #80]	; 0x50
 800410a:	4a6a      	ldr	r2, [pc, #424]	; (80042b4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	0f9b      	lsrs	r3, r3, #30
 8004110:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f931 	bl	800437c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800411a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411c:	2b00      	cmp	r3, #0
 800411e:	d011      	beq.n	8004144 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004126:	4b64      	ldr	r3, [pc, #400]	; (80042b8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004128:	400b      	ands	r3, r1
 800412a:	6513      	str	r3, [r2, #80]	; 0x50
 800412c:	4a61      	ldr	r2, [pc, #388]	; (80042b4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	0f9b      	lsrs	r3, r3, #30
 8004132:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800413a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5c      	ldr	r2, [pc, #368]	; (80042bc <HAL_FDCAN_IRQHandler+0x4b8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	f040 80a6 	bne.w	800429c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 809e 	beq.w	800429c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	4013      	ands	r3, r2
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004182:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	6a3a      	ldr	r2, [r7, #32]
 800418c:	4013      	ands	r3, r2
 800418e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800419a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80041b2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4013      	ands	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80041ca:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4013      	ands	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80041e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f8d2 	bl	8004392 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	6a3a      	ldr	r2, [r7, #32]
 80041fa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80041fc:	6a39      	ldr	r1, [r7, #32]
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8d2 	bl	80043a8 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01b      	beq.n	800424a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d014      	beq.n	800424a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	0c1b      	lsrs	r3, r3, #16
 8004228:	b29b      	uxth	r3, r3
 800422a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004236:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2240      	movs	r2, #64	; 0x40
 800423e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8ba 	bl	80043be <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004258:	69f9      	ldr	r1, [r7, #28]
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8bb 	bl	80043d6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f85e 	bl	8004368 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80042ac:	bf00      	nop
 80042ae:	3748      	adds	r7, #72	; 0x48
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	4000a800 	.word	0x4000a800
 80042b8:	3fcfffff 	.word	0x3fcfffff
 80042bc:	4000a000 	.word	0x4000a000

080042c0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004402:	4ba7      	ldr	r3, [pc, #668]	; (80046a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004404:	4013      	ands	r3, r2
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	0091      	lsls	r1, r2, #2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	430b      	orrs	r3, r1
 8004410:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	041a      	lsls	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	4413      	add	r3, r2
 8004438:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004442:	4b97      	ldr	r3, [pc, #604]	; (80046a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004444:	4013      	ands	r3, r2
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	0091      	lsls	r1, r2, #2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	430b      	orrs	r3, r1
 8004450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	041a      	lsls	r2, r3, #16
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	4413      	add	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004484:	4b86      	ldr	r3, [pc, #536]	; (80046a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004486:	4013      	ands	r3, r2
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	0091      	lsls	r1, r2, #2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	430b      	orrs	r3, r1
 8004492:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800449e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	041a      	lsls	r2, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044cc:	4b74      	ldr	r3, [pc, #464]	; (80046a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	0091      	lsls	r1, r2, #2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	430b      	orrs	r3, r1
 80044da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044e6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ee:	041a      	lsls	r2, r3, #16
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	4413      	add	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004514:	4b62      	ldr	r3, [pc, #392]	; (80046a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	0091      	lsls	r1, r2, #2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	430b      	orrs	r3, r1
 8004522:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004540:	4b57      	ldr	r3, [pc, #348]	; (80046a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004542:	4013      	ands	r3, r2
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	0091      	lsls	r1, r2, #2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	430b      	orrs	r3, r1
 800454e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800455a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	041a      	lsls	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	4413      	add	r3, r2
 8004578:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004582:	4b47      	ldr	r3, [pc, #284]	; (80046a0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004584:	4013      	ands	r3, r2
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	0091      	lsls	r1, r2, #2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	430b      	orrs	r3, r1
 8004590:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800459c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	041a      	lsls	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045b8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c0:	061a      	lsls	r2, r3, #24
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d0:	4b34      	ldr	r3, [pc, #208]	; (80046a4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80045d2:	4413      	add	r3, r2
 80045d4:	009a      	lsls	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	441a      	add	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	441a      	add	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	441a      	add	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d915      	bls.n	80046c8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800469c:	e006      	b.n	80046ac <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800469e:	bf00      	nop
 80046a0:	ffff0003 	.word	0xffff0003
 80046a4:	10002b00 	.word	0x10002b00
 80046a8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046b2:	f043 0220 	orr.w	r2, r3, #32
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2203      	movs	r2, #3
 80046c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e010      	b.n	80046ea <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e005      	b.n	80046dc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3304      	adds	r3, #4
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d3f3      	bcc.n	80046d0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop

080046f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004706:	4b89      	ldr	r3, [pc, #548]	; (800492c <HAL_GPIO_Init+0x234>)
 8004708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800470a:	e194      	b.n	8004a36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2101      	movs	r1, #1
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa01 f303 	lsl.w	r3, r1, r3
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8186 	beq.w	8004a30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d005      	beq.n	800473c <HAL_GPIO_Init+0x44>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d130      	bne.n	800479e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	2203      	movs	r2, #3
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004772:	2201      	movs	r2, #1
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	f003 0201 	and.w	r2, r3, #1
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d017      	beq.n	80047da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	2203      	movs	r2, #3
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4013      	ands	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d123      	bne.n	800482e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	08da      	lsrs	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3208      	adds	r2, #8
 80047ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	220f      	movs	r2, #15
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	08da      	lsrs	r2, r3, #3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3208      	adds	r2, #8
 8004828:	69b9      	ldr	r1, [r7, #24]
 800482a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	2203      	movs	r2, #3
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4013      	ands	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 0203 	and.w	r2, r3, #3
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80e0 	beq.w	8004a30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004870:	4b2f      	ldr	r3, [pc, #188]	; (8004930 <HAL_GPIO_Init+0x238>)
 8004872:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004876:	4a2e      	ldr	r2, [pc, #184]	; (8004930 <HAL_GPIO_Init+0x238>)
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004880:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_GPIO_Init+0x238>)
 8004882:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800488e:	4a29      	ldr	r2, [pc, #164]	; (8004934 <HAL_GPIO_Init+0x23c>)
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	3302      	adds	r3, #2
 8004896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	220f      	movs	r2, #15
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a20      	ldr	r2, [pc, #128]	; (8004938 <HAL_GPIO_Init+0x240>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d052      	beq.n	8004960 <HAL_GPIO_Init+0x268>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a1f      	ldr	r2, [pc, #124]	; (800493c <HAL_GPIO_Init+0x244>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d031      	beq.n	8004926 <HAL_GPIO_Init+0x22e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <HAL_GPIO_Init+0x248>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d02b      	beq.n	8004922 <HAL_GPIO_Init+0x22a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <HAL_GPIO_Init+0x24c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d025      	beq.n	800491e <HAL_GPIO_Init+0x226>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <HAL_GPIO_Init+0x250>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01f      	beq.n	800491a <HAL_GPIO_Init+0x222>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1b      	ldr	r2, [pc, #108]	; (800494c <HAL_GPIO_Init+0x254>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d019      	beq.n	8004916 <HAL_GPIO_Init+0x21e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1a      	ldr	r2, [pc, #104]	; (8004950 <HAL_GPIO_Init+0x258>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <HAL_GPIO_Init+0x21a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a19      	ldr	r2, [pc, #100]	; (8004954 <HAL_GPIO_Init+0x25c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00d      	beq.n	800490e <HAL_GPIO_Init+0x216>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_GPIO_Init+0x260>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <HAL_GPIO_Init+0x212>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a17      	ldr	r2, [pc, #92]	; (800495c <HAL_GPIO_Init+0x264>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <HAL_GPIO_Init+0x20e>
 8004902:	2309      	movs	r3, #9
 8004904:	e02d      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 8004906:	230a      	movs	r3, #10
 8004908:	e02b      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 800490a:	2308      	movs	r3, #8
 800490c:	e029      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 800490e:	2307      	movs	r3, #7
 8004910:	e027      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 8004912:	2306      	movs	r3, #6
 8004914:	e025      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 8004916:	2305      	movs	r3, #5
 8004918:	e023      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 800491a:	2304      	movs	r3, #4
 800491c:	e021      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 800491e:	2303      	movs	r3, #3
 8004920:	e01f      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 8004922:	2302      	movs	r3, #2
 8004924:	e01d      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 8004926:	2301      	movs	r3, #1
 8004928:	e01b      	b.n	8004962 <HAL_GPIO_Init+0x26a>
 800492a:	bf00      	nop
 800492c:	58000080 	.word	0x58000080
 8004930:	58024400 	.word	0x58024400
 8004934:	58000400 	.word	0x58000400
 8004938:	58020000 	.word	0x58020000
 800493c:	58020400 	.word	0x58020400
 8004940:	58020800 	.word	0x58020800
 8004944:	58020c00 	.word	0x58020c00
 8004948:	58021000 	.word	0x58021000
 800494c:	58021400 	.word	0x58021400
 8004950:	58021800 	.word	0x58021800
 8004954:	58021c00 	.word	0x58021c00
 8004958:	58022000 	.word	0x58022000
 800495c:	58022400 	.word	0x58022400
 8004960:	2300      	movs	r3, #0
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	f002 0203 	and.w	r2, r2, #3
 8004968:	0092      	lsls	r2, r2, #2
 800496a:	4093      	lsls	r3, r2
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004972:	4938      	ldr	r1, [pc, #224]	; (8004a54 <HAL_GPIO_Init+0x35c>)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	089b      	lsrs	r3, r3, #2
 8004978:	3302      	adds	r3, #2
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	43db      	mvns	r3, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4013      	ands	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4013      	ands	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	3301      	adds	r3, #1
 8004a34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f47f ae63 	bne.w	800470c <HAL_GPIO_Init+0x14>
  }
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	3724      	adds	r7, #36	; 0x24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	58000400 	.word	0x58000400

08004a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	807b      	strh	r3, [r7, #2]
 8004a64:	4613      	mov	r3, r2
 8004a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a68:	787b      	ldrb	r3, [r7, #1]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a6e:	887a      	ldrh	r2, [r7, #2]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a74:	e003      	b.n	8004a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a76:	887b      	ldrh	r3, [r7, #2]
 8004a78:	041a      	lsls	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	619a      	str	r2, [r3, #24]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004a94:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	2b06      	cmp	r3, #6
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004aa0:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d001      	beq.n	8004ab2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e040      	b.n	8004b34 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e03e      	b.n	8004b34 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ab6:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004abe:	491f      	ldr	r1, [pc, #124]	; (8004b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ac6:	f7fd fc97 	bl	80023f8 <HAL_GetTick>
 8004aca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004acc:	e009      	b.n	8004ae2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ace:	f7fd fc93 	bl	80023f8 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004adc:	d901      	bls.n	8004ae2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e028      	b.n	8004b34 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ae2:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aee:	d1ee      	bne.n	8004ace <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b1e      	cmp	r3, #30
 8004af4:	d008      	beq.n	8004b08 <HAL_PWREx_ConfigSupply+0x7c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b2e      	cmp	r3, #46	; 0x2e
 8004afa:	d005      	beq.n	8004b08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b1d      	cmp	r3, #29
 8004b00:	d002      	beq.n	8004b08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b2d      	cmp	r3, #45	; 0x2d
 8004b06:	d114      	bne.n	8004b32 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004b08:	f7fd fc76 	bl	80023f8 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b0e:	e009      	b.n	8004b24 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b10:	f7fd fc72 	bl	80023f8 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b1e:	d901      	bls.n	8004b24 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e007      	b.n	8004b34 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b30:	d1ee      	bne.n	8004b10 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	58024800 	.word	0x58024800

08004b40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08c      	sub	sp, #48	; 0x30
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e3f3      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80b3 	beq.w	8004cc6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b60:	4b9e      	ldr	r3, [pc, #632]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b6a:	4b9c      	ldr	r3, [pc, #624]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d007      	beq.n	8004b86 <HAL_RCC_OscConfig+0x46>
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	2b18      	cmp	r3, #24
 8004b7a:	d112      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x62>
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d10d      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b86:	4b95      	ldr	r3, [pc, #596]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8098 	beq.w	8004cc4 <HAL_RCC_OscConfig+0x184>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f040 8093 	bne.w	8004cc4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e3cb      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x7a>
 8004bac:	4b8b      	ldr	r3, [pc, #556]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a8a      	ldr	r2, [pc, #552]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e058      	b.n	8004c6c <HAL_RCC_OscConfig+0x12c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d112      	bne.n	8004be8 <HAL_RCC_OscConfig+0xa8>
 8004bc2:	4b86      	ldr	r3, [pc, #536]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a85      	ldr	r2, [pc, #532]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4b83      	ldr	r3, [pc, #524]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a82      	ldr	r2, [pc, #520]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004bd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b80      	ldr	r3, [pc, #512]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a7f      	ldr	r2, [pc, #508]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e041      	b.n	8004c6c <HAL_RCC_OscConfig+0x12c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bf0:	d112      	bne.n	8004c18 <HAL_RCC_OscConfig+0xd8>
 8004bf2:	4b7a      	ldr	r3, [pc, #488]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a79      	ldr	r2, [pc, #484]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	4b77      	ldr	r3, [pc, #476]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a76      	ldr	r2, [pc, #472]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	4b74      	ldr	r3, [pc, #464]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a73      	ldr	r2, [pc, #460]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e029      	b.n	8004c6c <HAL_RCC_OscConfig+0x12c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004c20:	d112      	bne.n	8004c48 <HAL_RCC_OscConfig+0x108>
 8004c22:	4b6e      	ldr	r3, [pc, #440]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a6d      	ldr	r2, [pc, #436]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4b6b      	ldr	r3, [pc, #428]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6a      	ldr	r2, [pc, #424]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	4b68      	ldr	r3, [pc, #416]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a67      	ldr	r2, [pc, #412]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e011      	b.n	8004c6c <HAL_RCC_OscConfig+0x12c>
 8004c48:	4b64      	ldr	r3, [pc, #400]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a63      	ldr	r2, [pc, #396]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4b61      	ldr	r3, [pc, #388]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a60      	ldr	r2, [pc, #384]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4b5e      	ldr	r3, [pc, #376]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a5d      	ldr	r2, [pc, #372]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d013      	beq.n	8004c9c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd fbc0 	bl	80023f8 <HAL_GetTick>
 8004c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fd fbbc 	bl	80023f8 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e355      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c8e:	4b53      	ldr	r3, [pc, #332]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x13c>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fd fbac 	bl	80023f8 <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fd fba8 	bl	80023f8 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e341      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cb6:	4b49      	ldr	r3, [pc, #292]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x164>
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 808c 	beq.w	8004dec <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd4:	4b41      	ldr	r3, [pc, #260]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cdc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cde:	4b3f      	ldr	r3, [pc, #252]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_RCC_OscConfig+0x1ba>
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	2b18      	cmp	r3, #24
 8004cee:	d137      	bne.n	8004d60 <HAL_RCC_OscConfig+0x220>
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d132      	bne.n	8004d60 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cfa:	4b38      	ldr	r3, [pc, #224]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_RCC_OscConfig+0x1d2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e313      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d12:	4b32      	ldr	r3, [pc, #200]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 0219 	bic.w	r2, r3, #25
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	492f      	ldr	r1, [pc, #188]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d24:	f7fd fb68 	bl	80023f8 <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2c:	f7fd fb64 	bl	80023f8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e2fd      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d3e:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	4920      	ldr	r1, [pc, #128]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d5e:	e045      	b.n	8004dec <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d026      	beq.n	8004db6 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d68:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 0219 	bic.w	r2, r3, #25
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4919      	ldr	r1, [pc, #100]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fd fb3d 	bl	80023f8 <HAL_GetTick>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fd fb39 	bl	80023f8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e2d2      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	490b      	ldr	r1, [pc, #44]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	604b      	str	r3, [r1, #4]
 8004db4:	e01a      	b.n	8004dec <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <HAL_RCC_OscConfig+0x29c>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fd fb19 	bl	80023f8 <HAL_GetTick>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dca:	f7fd fb15 	bl	80023f8 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d903      	bls.n	8004de0 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e2ae      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
 8004ddc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004de0:	4b99      	ldr	r3, [pc, #612]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ee      	bne.n	8004dca <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d06a      	beq.n	8004ece <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004df8:	4b93      	ldr	r3, [pc, #588]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e00:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e02:	4b91      	ldr	r3, [pc, #580]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d007      	beq.n	8004e1e <HAL_RCC_OscConfig+0x2de>
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b18      	cmp	r3, #24
 8004e12:	d11b      	bne.n	8004e4c <HAL_RCC_OscConfig+0x30c>
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d116      	bne.n	8004e4c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e1e:	4b8a      	ldr	r3, [pc, #552]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <HAL_RCC_OscConfig+0x2f6>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	d001      	beq.n	8004e36 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e281      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e36:	4b84      	ldr	r3, [pc, #528]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	061b      	lsls	r3, r3, #24
 8004e44:	4980      	ldr	r1, [pc, #512]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e4a:	e040      	b.n	8004ece <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d023      	beq.n	8004e9c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e54:	4b7c      	ldr	r3, [pc, #496]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7b      	ldr	r2, [pc, #492]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fd faca 	bl	80023f8 <HAL_GetTick>
 8004e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e68:	f7fd fac6 	bl	80023f8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e25f      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e7a:	4b73      	ldr	r3, [pc, #460]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e86:	4b70      	ldr	r3, [pc, #448]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	496c      	ldr	r1, [pc, #432]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]
 8004e9a:	e018      	b.n	8004ece <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e9c:	4b6a      	ldr	r3, [pc, #424]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a69      	ldr	r2, [pc, #420]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fd faa6 	bl	80023f8 <HAL_GetTick>
 8004eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004eb0:	f7fd faa2 	bl	80023f8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e23b      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ec2:	4b61      	ldr	r3, [pc, #388]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d036      	beq.n	8004f48 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d019      	beq.n	8004f16 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee2:	4b59      	ldr	r3, [pc, #356]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee6:	4a58      	ldr	r2, [pc, #352]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eee:	f7fd fa83 	bl	80023f8 <HAL_GetTick>
 8004ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ef6:	f7fd fa7f 	bl	80023f8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e218      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f08:	4b4f      	ldr	r3, [pc, #316]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x3b6>
 8004f14:	e018      	b.n	8004f48 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f16:	4b4c      	ldr	r3, [pc, #304]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1a:	4a4b      	ldr	r2, [pc, #300]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f22:	f7fd fa69 	bl	80023f8 <HAL_GetTick>
 8004f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f2a:	f7fd fa65 	bl	80023f8 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e1fe      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f3c:	4b42      	ldr	r3, [pc, #264]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f0      	bne.n	8004f2a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d036      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d019      	beq.n	8004f90 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f5c:	4b3a      	ldr	r3, [pc, #232]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a39      	ldr	r2, [pc, #228]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004f62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f68:	f7fd fa46 	bl	80023f8 <HAL_GetTick>
 8004f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f70:	f7fd fa42 	bl	80023f8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1db      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f82:	4b31      	ldr	r3, [pc, #196]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x430>
 8004f8e:	e018      	b.n	8004fc2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f90:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2c      	ldr	r2, [pc, #176]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f9c:	f7fd fa2c 	bl	80023f8 <HAL_GetTick>
 8004fa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004fa4:	f7fd fa28 	bl	80023f8 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e1c1      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80af 	beq.w	800512e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fd0:	4b1e      	ldr	r3, [pc, #120]	; (800504c <HAL_RCC_OscConfig+0x50c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <HAL_RCC_OscConfig+0x50c>)
 8004fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fdc:	f7fd fa0c 	bl	80023f8 <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fe4:	f7fd fa08 	bl	80023f8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	; 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e1a1      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <HAL_RCC_OscConfig+0x50c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d106      	bne.n	8005018 <HAL_RCC_OscConfig+0x4d8>
 800500a:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4a0e      	ldr	r2, [pc, #56]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	6713      	str	r3, [r2, #112]	; 0x70
 8005016:	e05b      	b.n	80050d0 <HAL_RCC_OscConfig+0x590>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d117      	bne.n	8005050 <HAL_RCC_OscConfig+0x510>
 8005020:	4b09      	ldr	r3, [pc, #36]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	4a08      	ldr	r2, [pc, #32]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	6713      	str	r3, [r2, #112]	; 0x70
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	4a05      	ldr	r2, [pc, #20]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8005032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005036:	6713      	str	r3, [r2, #112]	; 0x70
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	4a02      	ldr	r2, [pc, #8]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 800503e:	f023 0304 	bic.w	r3, r3, #4
 8005042:	6713      	str	r3, [r2, #112]	; 0x70
 8005044:	e044      	b.n	80050d0 <HAL_RCC_OscConfig+0x590>
 8005046:	bf00      	nop
 8005048:	58024400 	.word	0x58024400
 800504c:	58024800 	.word	0x58024800
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b05      	cmp	r3, #5
 8005056:	d112      	bne.n	800507e <HAL_RCC_OscConfig+0x53e>
 8005058:	4b95      	ldr	r3, [pc, #596]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505c:	4a94      	ldr	r2, [pc, #592]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800505e:	f043 0304 	orr.w	r3, r3, #4
 8005062:	6713      	str	r3, [r2, #112]	; 0x70
 8005064:	4b92      	ldr	r3, [pc, #584]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005068:	4a91      	ldr	r2, [pc, #580]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800506a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800506e:	6713      	str	r3, [r2, #112]	; 0x70
 8005070:	4b8f      	ldr	r3, [pc, #572]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	4a8e      	ldr	r2, [pc, #568]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	6713      	str	r3, [r2, #112]	; 0x70
 800507c:	e028      	b.n	80050d0 <HAL_RCC_OscConfig+0x590>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b85      	cmp	r3, #133	; 0x85
 8005084:	d112      	bne.n	80050ac <HAL_RCC_OscConfig+0x56c>
 8005086:	4b8a      	ldr	r3, [pc, #552]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	4a89      	ldr	r2, [pc, #548]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800508c:	f043 0304 	orr.w	r3, r3, #4
 8005090:	6713      	str	r3, [r2, #112]	; 0x70
 8005092:	4b87      	ldr	r3, [pc, #540]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	4a86      	ldr	r2, [pc, #536]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	6713      	str	r3, [r2, #112]	; 0x70
 800509e:	4b84      	ldr	r3, [pc, #528]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	4a83      	ldr	r2, [pc, #524]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	6713      	str	r3, [r2, #112]	; 0x70
 80050aa:	e011      	b.n	80050d0 <HAL_RCC_OscConfig+0x590>
 80050ac:	4b80      	ldr	r3, [pc, #512]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b0:	4a7f      	ldr	r2, [pc, #508]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	6713      	str	r3, [r2, #112]	; 0x70
 80050b8:	4b7d      	ldr	r3, [pc, #500]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	4a7c      	ldr	r2, [pc, #496]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80050be:	f023 0304 	bic.w	r3, r3, #4
 80050c2:	6713      	str	r3, [r2, #112]	; 0x70
 80050c4:	4b7a      	ldr	r3, [pc, #488]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	4a79      	ldr	r2, [pc, #484]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80050ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d015      	beq.n	8005104 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fd f98e 	bl	80023f8 <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fd f98a 	bl	80023f8 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e121      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f6:	4b6e      	ldr	r3, [pc, #440]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0ee      	beq.n	80050e0 <HAL_RCC_OscConfig+0x5a0>
 8005102:	e014      	b.n	800512e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7fd f978 	bl	80023f8 <HAL_GetTick>
 8005108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800510a:	e00a      	b.n	8005122 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510c:	f7fd f974 	bl	80023f8 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e10b      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005122:	4b63      	ldr	r3, [pc, #396]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ee      	bne.n	800510c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8100 	beq.w	8005338 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005138:	4b5d      	ldr	r3, [pc, #372]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005140:	2b18      	cmp	r3, #24
 8005142:	f000 80bb 	beq.w	80052bc <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b02      	cmp	r3, #2
 800514c:	f040 8095 	bne.w	800527a <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005150:	4b57      	ldr	r3, [pc, #348]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a56      	ldr	r2, [pc, #344]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800515a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fd f94c 	bl	80023f8 <HAL_GetTick>
 8005160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005164:	f7fd f948 	bl	80023f8 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e0e1      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005176:	4b4e      	ldr	r3, [pc, #312]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005182:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005186:	4b4b      	ldr	r3, [pc, #300]	; (80052b4 <HAL_RCC_OscConfig+0x774>)
 8005188:	4013      	ands	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005192:	0112      	lsls	r2, r2, #4
 8005194:	430a      	orrs	r2, r1
 8005196:	4946      	ldr	r1, [pc, #280]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005198:	4313      	orrs	r3, r2
 800519a:	628b      	str	r3, [r1, #40]	; 0x28
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	3b01      	subs	r3, #1
 80051a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051aa:	3b01      	subs	r3, #1
 80051ac:	025b      	lsls	r3, r3, #9
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	3b01      	subs	r3, #1
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c4:	3b01      	subs	r3, #1
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051cc:	4938      	ldr	r1, [pc, #224]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	4a36      	ldr	r2, [pc, #216]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051de:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80051e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e2:	4b35      	ldr	r3, [pc, #212]	; (80052b8 <HAL_RCC_OscConfig+0x778>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051ea:	00d2      	lsls	r2, r2, #3
 80051ec:	4930      	ldr	r1, [pc, #192]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051f2:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	f023 020c 	bic.w	r2, r3, #12
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	492c      	ldr	r1, [pc, #176]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005200:	4313      	orrs	r3, r2
 8005202:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	f023 0202 	bic.w	r2, r3, #2
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005210:	4927      	ldr	r1, [pc, #156]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005212:	4313      	orrs	r3, r2
 8005214:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005216:	4b26      	ldr	r3, [pc, #152]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	4a25      	ldr	r2, [pc, #148]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800521c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005222:	4b23      	ldr	r3, [pc, #140]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800522c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800522e:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800523a:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800524c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005252:	f7fd f8d1 	bl	80023f8 <HAL_GetTick>
 8005256:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525a:	f7fd f8cd 	bl	80023f8 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e066      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800526c:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x71a>
 8005278:	e05e      	b.n	8005338 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527a:	4b0d      	ldr	r3, [pc, #52]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 8005280:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fd f8b7 	bl	80023f8 <HAL_GetTick>
 800528a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528e:	f7fd f8b3 	bl	80023f8 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e04c      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052a0:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <HAL_RCC_OscConfig+0x770>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f0      	bne.n	800528e <HAL_RCC_OscConfig+0x74e>
 80052ac:	e044      	b.n	8005338 <HAL_RCC_OscConfig+0x7f8>
 80052ae:	bf00      	nop
 80052b0:	58024400 	.word	0x58024400
 80052b4:	fffffc0c 	.word	0xfffffc0c
 80052b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052bc:	4b21      	ldr	r3, [pc, #132]	; (8005344 <HAL_RCC_OscConfig+0x804>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052c2:	4b20      	ldr	r3, [pc, #128]	; (8005344 <HAL_RCC_OscConfig+0x804>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d031      	beq.n	8005334 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f003 0203 	and.w	r2, r3, #3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d12a      	bne.n	8005334 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d122      	bne.n	8005334 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d11a      	bne.n	8005334 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	0a5b      	lsrs	r3, r3, #9
 8005302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800530c:	429a      	cmp	r2, r3
 800530e:	d111      	bne.n	8005334 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d108      	bne.n	8005334 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	0e1b      	lsrs	r3, r3, #24
 8005326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3730      	adds	r7, #48	; 0x30
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	58024400 	.word	0x58024400

08005348 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e19c      	b.n	8005696 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800535c:	4b8a      	ldr	r3, [pc, #552]	; (8005588 <HAL_RCC_ClockConfig+0x240>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d910      	bls.n	800538c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b87      	ldr	r3, [pc, #540]	; (8005588 <HAL_RCC_ClockConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 020f 	bic.w	r2, r3, #15
 8005372:	4985      	ldr	r1, [pc, #532]	; (8005588 <HAL_RCC_ClockConfig+0x240>)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	4313      	orrs	r3, r2
 8005378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537a:	4b83      	ldr	r3, [pc, #524]	; (8005588 <HAL_RCC_ClockConfig+0x240>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e184      	b.n	8005696 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	4b7b      	ldr	r3, [pc, #492]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d908      	bls.n	80053ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053a8:	4b78      	ldr	r3, [pc, #480]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	4975      	ldr	r1, [pc, #468]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	4b70      	ldr	r3, [pc, #448]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d908      	bls.n	80053e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053d6:	4b6d      	ldr	r3, [pc, #436]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	496a      	ldr	r1, [pc, #424]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d010      	beq.n	8005416 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699a      	ldr	r2, [r3, #24]
 80053f8:	4b64      	ldr	r3, [pc, #400]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005400:	429a      	cmp	r2, r3
 8005402:	d908      	bls.n	8005416 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005404:	4b61      	ldr	r3, [pc, #388]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	495e      	ldr	r1, [pc, #376]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005412:	4313      	orrs	r3, r2
 8005414:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d010      	beq.n	8005444 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	4b59      	ldr	r3, [pc, #356]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800542e:	429a      	cmp	r2, r3
 8005430:	d908      	bls.n	8005444 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005432:	4b56      	ldr	r3, [pc, #344]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	4953      	ldr	r1, [pc, #332]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005440:	4313      	orrs	r3, r2
 8005442:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d010      	beq.n	8005472 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	4b4d      	ldr	r3, [pc, #308]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	429a      	cmp	r2, r3
 800545e:	d908      	bls.n	8005472 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005460:	4b4a      	ldr	r3, [pc, #296]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f023 020f 	bic.w	r2, r3, #15
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	4947      	ldr	r1, [pc, #284]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 800546e:	4313      	orrs	r3, r2
 8005470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d055      	beq.n	800552a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800547e:	4b43      	ldr	r3, [pc, #268]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	4940      	ldr	r1, [pc, #256]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 800548c:	4313      	orrs	r3, r2
 800548e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d107      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005498:	4b3c      	ldr	r3, [pc, #240]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d121      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0f6      	b.n	8005696 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054b0:	4b36      	ldr	r3, [pc, #216]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d115      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0ea      	b.n	8005696 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d107      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054c8:	4b30      	ldr	r3, [pc, #192]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0de      	b.n	8005696 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054d8:	4b2c      	ldr	r3, [pc, #176]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0d6      	b.n	8005696 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054e8:	4b28      	ldr	r3, [pc, #160]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f023 0207 	bic.w	r2, r3, #7
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4925      	ldr	r1, [pc, #148]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fa:	f7fc ff7d 	bl	80023f8 <HAL_GetTick>
 80054fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005500:	e00a      	b.n	8005518 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005502:	f7fc ff79 	bl	80023f8 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005510:	4293      	cmp	r3, r2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e0be      	b.n	8005696 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005518:	4b1c      	ldr	r3, [pc, #112]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	429a      	cmp	r2, r3
 8005528:	d1eb      	bne.n	8005502 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d010      	beq.n	8005558 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	429a      	cmp	r2, r3
 8005544:	d208      	bcs.n	8005558 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005546:	4b11      	ldr	r3, [pc, #68]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f023 020f 	bic.w	r2, r3, #15
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	490e      	ldr	r1, [pc, #56]	; (800558c <HAL_RCC_ClockConfig+0x244>)
 8005554:	4313      	orrs	r3, r2
 8005556:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005558:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <HAL_RCC_ClockConfig+0x240>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d214      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005566:	4b08      	ldr	r3, [pc, #32]	; (8005588 <HAL_RCC_ClockConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 020f 	bic.w	r2, r3, #15
 800556e:	4906      	ldr	r1, [pc, #24]	; (8005588 <HAL_RCC_ClockConfig+0x240>)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	4313      	orrs	r3, r2
 8005574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005576:	4b04      	ldr	r3, [pc, #16]	; (8005588 <HAL_RCC_ClockConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d005      	beq.n	8005590 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e086      	b.n	8005696 <HAL_RCC_ClockConfig+0x34e>
 8005588:	52002000 	.word	0x52002000
 800558c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	4b3f      	ldr	r3, [pc, #252]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d208      	bcs.n	80055be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055ac:	4b3c      	ldr	r3, [pc, #240]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	4939      	ldr	r1, [pc, #228]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	4b34      	ldr	r3, [pc, #208]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d208      	bcs.n	80055ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055da:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	492e      	ldr	r1, [pc, #184]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d010      	beq.n	800561a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	4b28      	ldr	r3, [pc, #160]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005604:	429a      	cmp	r2, r3
 8005606:	d208      	bcs.n	800561a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005608:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	4922      	ldr	r1, [pc, #136]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 8005616:	4313      	orrs	r3, r2
 8005618:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005632:	429a      	cmp	r2, r3
 8005634:	d208      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005636:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	4917      	ldr	r1, [pc, #92]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 8005644:	4313      	orrs	r3, r2
 8005646:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005648:	f000 f834 	bl	80056b4 <HAL_RCC_GetSysClockFreq>
 800564c:	4602      	mov	r2, r0
 800564e:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	4912      	ldr	r1, [pc, #72]	; (80056a4 <HAL_RCC_ClockConfig+0x35c>)
 800565a:	5ccb      	ldrb	r3, [r1, r3]
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
 8005664:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005666:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_RCC_ClockConfig+0x358>)
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <HAL_RCC_ClockConfig+0x35c>)
 8005670:	5cd3      	ldrb	r3, [r2, r3]
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
 800567c:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <HAL_RCC_ClockConfig+0x360>)
 800567e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005680:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <HAL_RCC_ClockConfig+0x364>)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <HAL_RCC_ClockConfig+0x368>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7fc fe6a 	bl	8002364 <HAL_InitTick>
 8005690:	4603      	mov	r3, r0
 8005692:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
 80056a4:	0800c618 	.word	0x0800c618
 80056a8:	2400000c 	.word	0x2400000c
 80056ac:	24000008 	.word	0x24000008
 80056b0:	24000010 	.word	0x24000010

080056b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b089      	sub	sp, #36	; 0x24
 80056b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ba:	4bb3      	ldr	r3, [pc, #716]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c2:	2b18      	cmp	r3, #24
 80056c4:	f200 8155 	bhi.w	8005972 <HAL_RCC_GetSysClockFreq+0x2be>
 80056c8:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	08005735 	.word	0x08005735
 80056d4:	08005973 	.word	0x08005973
 80056d8:	08005973 	.word	0x08005973
 80056dc:	08005973 	.word	0x08005973
 80056e0:	08005973 	.word	0x08005973
 80056e4:	08005973 	.word	0x08005973
 80056e8:	08005973 	.word	0x08005973
 80056ec:	08005973 	.word	0x08005973
 80056f0:	0800575b 	.word	0x0800575b
 80056f4:	08005973 	.word	0x08005973
 80056f8:	08005973 	.word	0x08005973
 80056fc:	08005973 	.word	0x08005973
 8005700:	08005973 	.word	0x08005973
 8005704:	08005973 	.word	0x08005973
 8005708:	08005973 	.word	0x08005973
 800570c:	08005973 	.word	0x08005973
 8005710:	08005761 	.word	0x08005761
 8005714:	08005973 	.word	0x08005973
 8005718:	08005973 	.word	0x08005973
 800571c:	08005973 	.word	0x08005973
 8005720:	08005973 	.word	0x08005973
 8005724:	08005973 	.word	0x08005973
 8005728:	08005973 	.word	0x08005973
 800572c:	08005973 	.word	0x08005973
 8005730:	08005767 	.word	0x08005767
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005734:	4b94      	ldr	r3, [pc, #592]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d009      	beq.n	8005754 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005740:	4b91      	ldr	r3, [pc, #580]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	08db      	lsrs	r3, r3, #3
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	4a90      	ldr	r2, [pc, #576]	; (800598c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005752:	e111      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005754:	4b8d      	ldr	r3, [pc, #564]	; (800598c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005756:	61bb      	str	r3, [r7, #24]
    break;
 8005758:	e10e      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800575a:	4b8d      	ldr	r3, [pc, #564]	; (8005990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800575c:	61bb      	str	r3, [r7, #24]
    break;
 800575e:	e10b      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005760:	4b8c      	ldr	r3, [pc, #560]	; (8005994 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005762:	61bb      	str	r3, [r7, #24]
    break;
 8005764:	e108      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005766:	4b88      	ldr	r3, [pc, #544]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005770:	4b85      	ldr	r3, [pc, #532]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800577a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800577c:	4b82      	ldr	r3, [pc, #520]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005786:	4b80      	ldr	r3, [pc, #512]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578a:	08db      	lsrs	r3, r3, #3
 800578c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80e1 	beq.w	800596c <HAL_RCC_GetSysClockFreq+0x2b8>
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	f000 8083 	beq.w	80058b8 <HAL_RCC_GetSysClockFreq+0x204>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	f200 80a1 	bhi.w	80058fc <HAL_RCC_GetSysClockFreq+0x248>
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0x114>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d056      	beq.n	8005874 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057c6:	e099      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057c8:	4b6f      	ldr	r3, [pc, #444]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d02d      	beq.n	8005830 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057d4:	4b6c      	ldr	r3, [pc, #432]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	08db      	lsrs	r3, r3, #3
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	4a6b      	ldr	r2, [pc, #428]	; (800598c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
 80057e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fe:	4b62      	ldr	r3, [pc, #392]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005812:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800582e:	e087      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800599c <HAL_RCC_GetSysClockFreq+0x2e8>
 800583e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005842:	4b51      	ldr	r3, [pc, #324]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005852:	ed97 6a02 	vldr	s12, [r7, #8]
 8005856:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800585a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005872:	e065      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80059a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005886:	4b40      	ldr	r3, [pc, #256]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005896:	ed97 6a02 	vldr	s12, [r7, #8]
 800589a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800589e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058b6:	e043      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80059a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ca:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058da:	ed97 6a02 	vldr	s12, [r7, #8]
 80058de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005998 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058fa:	e021      	b.n	8005940 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	eddf 6a26 	vldr	s13, [pc, #152]	; 80059a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800590a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590e:	4b1e      	ldr	r3, [pc, #120]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005922:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800593e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005940:	4b11      	ldr	r3, [pc, #68]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	0a5b      	lsrs	r3, r3, #9
 8005946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594a:	3301      	adds	r3, #1
 800594c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005958:	edd7 6a07 	vldr	s13, [r7, #28]
 800595c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005964:	ee17 3a90 	vmov	r3, s15
 8005968:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800596a:	e005      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	61bb      	str	r3, [r7, #24]
    break;
 8005970:	e002      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005972:	4b07      	ldr	r3, [pc, #28]	; (8005990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005974:	61bb      	str	r3, [r7, #24]
    break;
 8005976:	bf00      	nop
  }

  return sysclockfreq;
 8005978:	69bb      	ldr	r3, [r7, #24]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3724      	adds	r7, #36	; 0x24
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
 800598c:	03d09000 	.word	0x03d09000
 8005990:	003d0900 	.word	0x003d0900
 8005994:	016e3600 	.word	0x016e3600
 8005998:	46000000 	.word	0x46000000
 800599c:	4c742400 	.word	0x4c742400
 80059a0:	4a742400 	.word	0x4a742400
 80059a4:	4bb71b00 	.word	0x4bb71b00

080059a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80059ae:	f7ff fe81 	bl	80056b4 <HAL_RCC_GetSysClockFreq>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4b10      	ldr	r3, [pc, #64]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	0a1b      	lsrs	r3, r3, #8
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	490f      	ldr	r1, [pc, #60]	; (80059fc <HAL_RCC_GetHCLKFreq+0x54>)
 80059c0:	5ccb      	ldrb	r3, [r1, r3]
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	4a09      	ldr	r2, [pc, #36]	; (80059fc <HAL_RCC_GetHCLKFreq+0x54>)
 80059d6:	5cd3      	ldrb	r3, [r2, r3]
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	4a07      	ldr	r2, [pc, #28]	; (8005a00 <HAL_RCC_GetHCLKFreq+0x58>)
 80059e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059e6:	4a07      	ldr	r2, [pc, #28]	; (8005a04 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059ec:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <HAL_RCC_GetHCLKFreq+0x58>)
 80059ee:	681b      	ldr	r3, [r3, #0]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	58024400 	.word	0x58024400
 80059fc:	0800c618 	.word	0x0800c618
 8005a00:	2400000c 	.word	0x2400000c
 8005a04:	24000008 	.word	0x24000008

08005a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005a0c:	f7ff ffcc 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 8005a10:	4602      	mov	r2, r0
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	4904      	ldr	r1, [pc, #16]	; (8005a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a1e:	5ccb      	ldrb	r3, [r1, r3]
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	58024400 	.word	0x58024400
 8005a30:	0800c618 	.word	0x0800c618

08005a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005a38:	f7ff ffb6 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	4904      	ldr	r1, [pc, #16]	; (8005a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	0800c618 	.word	0x0800c618

08005a60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a68:	2300      	movs	r3, #0
 8005a6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d03f      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a84:	d02a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a8a:	d824      	bhi.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a90:	d018      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a96:	d81e      	bhi.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa0:	d007      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005aa2:	e018      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa4:	4ba6      	ldr	r3, [pc, #664]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	4aa5      	ldr	r2, [pc, #660]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ab0:	e015      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 ff17 	bl	80078ec <RCCEx_PLL2_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ac2:	e00c      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3324      	adds	r3, #36	; 0x24
 8005ac8:	2102      	movs	r1, #2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 ffc0 	bl	8007a50 <RCCEx_PLL3_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ad4:	e003      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8005ada:	e000      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ae4:	4b96      	ldr	r3, [pc, #600]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af0:	4993      	ldr	r1, [pc, #588]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	650b      	str	r3, [r1, #80]	; 0x50
 8005af6:	e001      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d03d      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d826      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b2d 	.word	0x08005b2d
 8005b1c:	08005b3b 	.word	0x08005b3b
 8005b20:	08005b4d 	.word	0x08005b4d
 8005b24:	08005b65 	.word	0x08005b65
 8005b28:	08005b65 	.word	0x08005b65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2c:	4b84      	ldr	r3, [pc, #528]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4a83      	ldr	r2, [pc, #524]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b38:	e015      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	2100      	movs	r1, #0
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fed3 	bl	80078ec <RCCEx_PLL2_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b4a:	e00c      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3324      	adds	r3, #36	; 0x24
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 ff7c 	bl	8007a50 <RCCEx_PLL3_Config>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b5c:	e003      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	75fb      	strb	r3, [r7, #23]
      break;
 8005b62:	e000      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b6c:	4b74      	ldr	r3, [pc, #464]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	f023 0207 	bic.w	r2, r3, #7
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	4971      	ldr	r1, [pc, #452]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	650b      	str	r3, [r1, #80]	; 0x50
 8005b7e:	e001      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d04a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005b98:	d031      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005b9a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005b9e:	d82b      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba4:	d02d      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005baa:	d825      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005bac:	2bc0      	cmp	r3, #192	; 0xc0
 8005bae:	d02a      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005bb0:	2bc0      	cmp	r3, #192	; 0xc0
 8005bb2:	d821      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005bb4:	2b80      	cmp	r3, #128	; 0x80
 8005bb6:	d016      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d81d      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d007      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005bc4:	e018      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc6:	4b5e      	ldr	r3, [pc, #376]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	4a5d      	ldr	r2, [pc, #372]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005bd2:	e019      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 fe86 	bl	80078ec <RCCEx_PLL2_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005be4:	e010      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3324      	adds	r3, #36	; 0x24
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 ff2f 	bl	8007a50 <RCCEx_PLL3_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005bf6:	e007      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfc:	e004      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e002      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005c02:	bf00      	nop
 8005c04:	e000      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005c0e:	4b4c      	ldr	r3, [pc, #304]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1a:	4949      	ldr	r1, [pc, #292]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	650b      	str	r3, [r1, #80]	; 0x50
 8005c20:	e001      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d04f      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c36:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005c3a:	d036      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005c3c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005c40:	d830      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c46:	d032      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4c:	d82a      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c4e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c52:	d02e      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8005c54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c58:	d824      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5e:	d018      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c64:	d81e      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6e:	d007      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005c70:	e018      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c72:	4b33      	ldr	r3, [pc, #204]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	4a32      	ldr	r2, [pc, #200]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005c7e:	e019      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3304      	adds	r3, #4
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f001 fe30 	bl	80078ec <RCCEx_PLL2_Config>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005c90:	e010      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3324      	adds	r3, #36	; 0x24
 8005c96:	2100      	movs	r1, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f001 fed9 	bl	8007a50 <RCCEx_PLL3_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005ca2:	e007      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca8:	e004      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005cba:	4b21      	ldr	r3, [pc, #132]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cbe:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	491e      	ldr	r1, [pc, #120]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	650b      	str	r3, [r1, #80]	; 0x50
 8005ccc:	e001      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d034      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce2:	2b30      	cmp	r3, #48	; 0x30
 8005ce4:	d01c      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005ce6:	2b30      	cmp	r3, #48	; 0x30
 8005ce8:	d817      	bhi.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d00c      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d813      	bhi.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d016      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d10f      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	4a10      	ldr	r2, [pc, #64]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005d06:	e00e      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	2102      	movs	r1, #2
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 fdec 	bl	80078ec <RCCEx_PLL2_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005d18:	e005      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d1e:	e002      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005d20:	bf00      	nop
 8005d22:	e000      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10b      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d38:	4901      	ldr	r1, [pc, #4]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d3e:	e003      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005d40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d047      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d5c:	d030      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d62:	d82a      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005d64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d68:	d02c      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005d6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d6e:	d824      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d74:	d018      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7a:	d81e      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d84:	d007      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005d86:	e018      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d88:	4bb0      	ldr	r3, [pc, #704]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	4aaf      	ldr	r2, [pc, #700]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d94:	e017      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 fda5 	bl	80078ec <RCCEx_PLL2_Config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005da6:	e00e      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3324      	adds	r3, #36	; 0x24
 8005dac:	2100      	movs	r1, #0
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 fe4e 	bl	8007a50 <RCCEx_PLL3_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005db8:	e005      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbe:	e002      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005dc0:	bf00      	nop
 8005dc2:	e000      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d109      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005dcc:	4b9f      	ldr	r3, [pc, #636]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd8:	499c      	ldr	r1, [pc, #624]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	650b      	str	r3, [r1, #80]	; 0x50
 8005dde:	e001      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
 8005de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d049      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005df8:	d02e      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dfe:	d828      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e04:	d02a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e0a:	d822      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e10:	d026      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005e12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e16:	d81c      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e1c:	d010      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005e1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e22:	d816      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01d      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2c:	d111      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3304      	adds	r3, #4
 8005e32:	2101      	movs	r1, #1
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fd59 	bl	80078ec <RCCEx_PLL2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e3e:	e012      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3324      	adds	r3, #36	; 0x24
 8005e44:	2101      	movs	r1, #1
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 fe02 	bl	8007a50 <RCCEx_PLL3_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e50:	e009      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	75fb      	strb	r3, [r7, #23]
      break;
 8005e56:	e006      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005e58:	bf00      	nop
 8005e5a:	e004      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005e5c:	bf00      	nop
 8005e5e:	e002      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005e60:	bf00      	nop
 8005e62:	e000      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e6c:	4b77      	ldr	r3, [pc, #476]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e70:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e78:	4974      	ldr	r1, [pc, #464]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e7e:	e001      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d053      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e96:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005e9a:	d034      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e9c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005ea0:	d82e      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ea6:	d030      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eac:	d828      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb2:	d02c      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb8:	d822      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005eba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ebe:	d028      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005ec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ec4:	d81c      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eca:	d010      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed0:	d816      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01f      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eda:	d111      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fd02 	bl	80078ec <RCCEx_PLL2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005eec:	e014      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3324      	adds	r3, #36	; 0x24
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 fdab 	bl	8007a50 <RCCEx_PLL3_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005efe:	e00b      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	75fb      	strb	r3, [r7, #23]
      break;
 8005f04:	e008      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f06:	bf00      	nop
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e004      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f1e:	4b4b      	ldr	r3, [pc, #300]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f2c:	4947      	ldr	r1, [pc, #284]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	658b      	str	r3, [r1, #88]	; 0x58
 8005f32:	e001      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
 8005f36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02f      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f4c:	d00e      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f52:	d814      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f5c:	d10f      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5e:	4b3b      	ldr	r3, [pc, #236]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	4a3a      	ldr	r2, [pc, #232]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f6a:	e00c      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	2101      	movs	r1, #1
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fcba 	bl	80078ec <RCCEx_PLL2_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f7c:	e003      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
      break;
 8005f82:	e000      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f8c:	4b2f      	ldr	r3, [pc, #188]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f98:	492c      	ldr	r1, [pc, #176]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8005f9e:	e001      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d032      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d81b      	bhi.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005ff7 	.word	0x08005ff7
 8005fc4:	08005fd1 	.word	0x08005fd1
 8005fc8:	08005fdf 	.word	0x08005fdf
 8005fcc:	08005ff7 	.word	0x08005ff7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd0:	4b1e      	ldr	r3, [pc, #120]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	4a1d      	ldr	r2, [pc, #116]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fdc:	e00c      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 fc81 	bl	80078ec <RCCEx_PLL2_Config>
 8005fea:	4603      	mov	r3, r0
 8005fec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fee:	e003      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8005ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006002:	f023 0203 	bic.w	r2, r3, #3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600a:	4910      	ldr	r1, [pc, #64]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800600c:	4313      	orrs	r3, r2
 800600e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006010:	e001      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 808a 	beq.w	8006138 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006024:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a09      	ldr	r2, [pc, #36]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800602a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800602e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006030:	f7fc f9e2 	bl	80023f8 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006036:	e00d      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006038:	f7fc f9de 	bl	80023f8 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b64      	cmp	r3, #100	; 0x64
 8006044:	d906      	bls.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	75fb      	strb	r3, [r7, #23]
        break;
 800604a:	e009      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800604c:	58024400 	.word	0x58024400
 8006050:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006054:	4bba      	ldr	r3, [pc, #744]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0eb      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d166      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006066:	4bb7      	ldr	r3, [pc, #732]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006068:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006070:	4053      	eors	r3, r2
 8006072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006076:	2b00      	cmp	r3, #0
 8006078:	d013      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800607a:	4bb2      	ldr	r3, [pc, #712]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006082:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006084:	4baf      	ldr	r3, [pc, #700]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	4aae      	ldr	r2, [pc, #696]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800608a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006090:	4bac      	ldr	r3, [pc, #688]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	4aab      	ldr	r2, [pc, #684]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800609c:	4aa9      	ldr	r2, [pc, #676]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ac:	d115      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ae:	f7fc f9a3 	bl	80023f8 <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060b4:	e00b      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b6:	f7fc f99f 	bl	80023f8 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d902      	bls.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	75fb      	strb	r3, [r7, #23]
            break;
 80060cc:	e005      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ce:	4b9d      	ldr	r3, [pc, #628]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0ed      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d126      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ee:	d10d      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80060f0:	4b94      	ldr	r3, [pc, #592]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060fe:	0919      	lsrs	r1, r3, #4
 8006100:	4b91      	ldr	r3, [pc, #580]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006102:	400b      	ands	r3, r1
 8006104:	498f      	ldr	r1, [pc, #572]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006106:	4313      	orrs	r3, r2
 8006108:	610b      	str	r3, [r1, #16]
 800610a:	e005      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800610c:	4b8d      	ldr	r3, [pc, #564]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	4a8c      	ldr	r2, [pc, #560]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006112:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006116:	6113      	str	r3, [r2, #16]
 8006118:	4b8a      	ldr	r3, [pc, #552]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800611a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006126:	4987      	ldr	r1, [pc, #540]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006128:	4313      	orrs	r3, r2
 800612a:	670b      	str	r3, [r1, #112]	; 0x70
 800612c:	e004      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	75bb      	strb	r3, [r7, #22]
 8006132:	e001      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d07f      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800614a:	2b28      	cmp	r3, #40	; 0x28
 800614c:	d866      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800614e:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	08006223 	.word	0x08006223
 8006158:	0800621d 	.word	0x0800621d
 800615c:	0800621d 	.word	0x0800621d
 8006160:	0800621d 	.word	0x0800621d
 8006164:	0800621d 	.word	0x0800621d
 8006168:	0800621d 	.word	0x0800621d
 800616c:	0800621d 	.word	0x0800621d
 8006170:	0800621d 	.word	0x0800621d
 8006174:	080061f9 	.word	0x080061f9
 8006178:	0800621d 	.word	0x0800621d
 800617c:	0800621d 	.word	0x0800621d
 8006180:	0800621d 	.word	0x0800621d
 8006184:	0800621d 	.word	0x0800621d
 8006188:	0800621d 	.word	0x0800621d
 800618c:	0800621d 	.word	0x0800621d
 8006190:	0800621d 	.word	0x0800621d
 8006194:	0800620b 	.word	0x0800620b
 8006198:	0800621d 	.word	0x0800621d
 800619c:	0800621d 	.word	0x0800621d
 80061a0:	0800621d 	.word	0x0800621d
 80061a4:	0800621d 	.word	0x0800621d
 80061a8:	0800621d 	.word	0x0800621d
 80061ac:	0800621d 	.word	0x0800621d
 80061b0:	0800621d 	.word	0x0800621d
 80061b4:	08006223 	.word	0x08006223
 80061b8:	0800621d 	.word	0x0800621d
 80061bc:	0800621d 	.word	0x0800621d
 80061c0:	0800621d 	.word	0x0800621d
 80061c4:	0800621d 	.word	0x0800621d
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	0800621d 	.word	0x0800621d
 80061d0:	0800621d 	.word	0x0800621d
 80061d4:	08006223 	.word	0x08006223
 80061d8:	0800621d 	.word	0x0800621d
 80061dc:	0800621d 	.word	0x0800621d
 80061e0:	0800621d 	.word	0x0800621d
 80061e4:	0800621d 	.word	0x0800621d
 80061e8:	0800621d 	.word	0x0800621d
 80061ec:	0800621d 	.word	0x0800621d
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	08006223 	.word	0x08006223
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3304      	adds	r3, #4
 80061fc:	2101      	movs	r1, #1
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 fb74 	bl	80078ec <RCCEx_PLL2_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006208:	e00c      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3324      	adds	r3, #36	; 0x24
 800620e:	2101      	movs	r1, #1
 8006210:	4618      	mov	r0, r3
 8006212:	f001 fc1d 	bl	8007a50 <RCCEx_PLL3_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800621a:	e003      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	75fb      	strb	r3, [r7, #23]
      break;
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8006222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800622a:	4b46      	ldr	r3, [pc, #280]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006238:	4942      	ldr	r1, [pc, #264]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800623a:	4313      	orrs	r3, r2
 800623c:	654b      	str	r3, [r1, #84]	; 0x54
 800623e:	e001      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d038      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006254:	2b05      	cmp	r3, #5
 8006256:	d821      	bhi.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006258:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	080062a3 	.word	0x080062a3
 8006264:	08006279 	.word	0x08006279
 8006268:	0800628b 	.word	0x0800628b
 800626c:	080062a3 	.word	0x080062a3
 8006270:	080062a3 	.word	0x080062a3
 8006274:	080062a3 	.word	0x080062a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3304      	adds	r3, #4
 800627c:	2101      	movs	r1, #1
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fb34 	bl	80078ec <RCCEx_PLL2_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006288:	e00c      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3324      	adds	r3, #36	; 0x24
 800628e:	2101      	movs	r1, #1
 8006290:	4618      	mov	r0, r3
 8006292:	f001 fbdd 	bl	8007a50 <RCCEx_PLL3_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800629a:	e003      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	75fb      	strb	r3, [r7, #23]
      break;
 80062a0:	e000      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80062a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80062aa:	4b26      	ldr	r3, [pc, #152]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	f023 0207 	bic.w	r2, r3, #7
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b6:	4923      	ldr	r1, [pc, #140]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	654b      	str	r3, [r1, #84]	; 0x54
 80062bc:	e001      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d040      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062d4:	2b05      	cmp	r3, #5
 80062d6:	d821      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	08006323 	.word	0x08006323
 80062e4:	080062f9 	.word	0x080062f9
 80062e8:	0800630b 	.word	0x0800630b
 80062ec:	08006323 	.word	0x08006323
 80062f0:	08006323 	.word	0x08006323
 80062f4:	08006323 	.word	0x08006323
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3304      	adds	r3, #4
 80062fc:	2101      	movs	r1, #1
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 faf4 	bl	80078ec <RCCEx_PLL2_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006308:	e00c      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3324      	adds	r3, #36	; 0x24
 800630e:	2101      	movs	r1, #1
 8006310:	4618      	mov	r0, r3
 8006312:	f001 fb9d 	bl	8007a50 <RCCEx_PLL3_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800631a:	e003      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
      break;
 8006320:	e000      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d110      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632e:	f023 0207 	bic.w	r2, r3, #7
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006338:	4902      	ldr	r1, [pc, #8]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800633a:	4313      	orrs	r3, r2
 800633c:	658b      	str	r3, [r1, #88]	; 0x58
 800633e:	e007      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006340:	58024800 	.word	0x58024800
 8006344:	58024400 	.word	0x58024400
 8006348:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	d04b      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006366:	d02e      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800636c:	d828      	bhi.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800636e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006372:	d02a      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006378:	d822      	bhi.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800637a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800637e:	d026      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006384:	d81c      	bhi.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800638a:	d010      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800638c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006390:	d816      	bhi.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d01d      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800639a:	d111      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 faa2 	bl	80078ec <RCCEx_PLL2_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063ac:	e012      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3324      	adds	r3, #36	; 0x24
 80063b2:	2102      	movs	r1, #2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fb4b 	bl	8007a50 <RCCEx_PLL3_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063be:	e009      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	75fb      	strb	r3, [r7, #23]
      break;
 80063c4:	e006      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80063c6:	bf00      	nop
 80063c8:	e004      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80063ca:	bf00      	nop
 80063cc:	e002      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80063ce:	bf00      	nop
 80063d0:	e000      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80063d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063da:	4bb3      	ldr	r3, [pc, #716]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e8:	49af      	ldr	r1, [pc, #700]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	654b      	str	r3, [r1, #84]	; 0x54
 80063ee:	e001      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d04b      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006406:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800640a:	d02e      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800640c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006410:	d828      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006416:	d02a      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641c:	d822      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800641e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006422:	d026      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006428:	d81c      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800642a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642e:	d010      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006434:	d816      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01d      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800643a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643e:	d111      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fa50 	bl	80078ec <RCCEx_PLL2_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006450:	e012      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3324      	adds	r3, #36	; 0x24
 8006456:	2102      	movs	r1, #2
 8006458:	4618      	mov	r0, r3
 800645a:	f001 faf9 	bl	8007a50 <RCCEx_PLL3_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006462:	e009      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
      break;
 8006468:	e006      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800646a:	bf00      	nop
 800646c:	e004      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800646e:	bf00      	nop
 8006470:	e002      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800647e:	4b8a      	ldr	r3, [pc, #552]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006482:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800648c:	4986      	ldr	r1, [pc, #536]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800648e:	4313      	orrs	r3, r2
 8006490:	658b      	str	r3, [r1, #88]	; 0x58
 8006492:	e001      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d04b      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064ae:	d02e      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80064b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064b4:	d828      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80064b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ba:	d02a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80064bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c0:	d822      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80064c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064c6:	d026      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80064c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064cc:	d81c      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80064ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d2:	d010      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80064d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d8:	d816      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01d      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80064de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e2:	d111      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f9fe 	bl	80078ec <RCCEx_PLL2_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064f4:	e012      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3324      	adds	r3, #36	; 0x24
 80064fa:	2102      	movs	r1, #2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 faa7 	bl	8007a50 <RCCEx_PLL3_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006506:	e009      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
      break;
 800650c:	e006      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800650e:	bf00      	nop
 8006510:	e004      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006512:	bf00      	nop
 8006514:	e002      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006516:	bf00      	nop
 8006518:	e000      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800651a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800651c:	7dfb      	ldrb	r3, [r7, #23]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006522:	4b61      	ldr	r3, [pc, #388]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006530:	495d      	ldr	r1, [pc, #372]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006532:	4313      	orrs	r3, r2
 8006534:	658b      	str	r3, [r1, #88]	; 0x58
 8006536:	e001      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006552:	d10a      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3324      	adds	r3, #36	; 0x24
 8006558:	2102      	movs	r1, #2
 800655a:	4618      	mov	r0, r3
 800655c:	f001 fa78 	bl	8007a50 <RCCEx_PLL3_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800656a:	4b4f      	ldr	r3, [pc, #316]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006578:	494b      	ldr	r1, [pc, #300]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800657a:	4313      	orrs	r3, r2
 800657c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01a      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006594:	d10a      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3324      	adds	r3, #36	; 0x24
 800659a:	2102      	movs	r1, #2
 800659c:	4618      	mov	r0, r3
 800659e:	f001 fa57 	bl	8007a50 <RCCEx_PLL3_Config>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065ac:	4b3e      	ldr	r3, [pc, #248]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80065ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ba:	493b      	ldr	r1, [pc, #236]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d034      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065d6:	d01d      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80065d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065dc:	d817      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80065e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e6:	d009      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80065e8:	e011      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	2100      	movs	r1, #0
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 f97b 	bl	80078ec <RCCEx_PLL2_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065fa:	e00c      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	2102      	movs	r1, #2
 8006602:	4618      	mov	r0, r3
 8006604:	f001 fa24 	bl	8007a50 <RCCEx_PLL3_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800660c:	e003      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	75fb      	strb	r3, [r7, #23]
      break;
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800661c:	4b22      	ldr	r3, [pc, #136]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800662a:	491f      	ldr	r1, [pc, #124]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800662c:	4313      	orrs	r3, r2
 800662e:	658b      	str	r3, [r1, #88]	; 0x58
 8006630:	e001      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d036      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006648:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800664c:	d01c      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800664e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006652:	d816      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006658:	d003      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800665a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800665e:	d007      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006660:	e00f      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006662:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	4a10      	ldr	r2, [pc, #64]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800666c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800666e:	e00c      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3324      	adds	r3, #36	; 0x24
 8006674:	2101      	movs	r1, #1
 8006676:	4618      	mov	r0, r3
 8006678:	f001 f9ea 	bl	8007a50 <RCCEx_PLL3_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	75fb      	strb	r3, [r7, #23]
      break;
 8006686:	e000      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10d      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006694:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800669e:	4902      	ldr	r1, [pc, #8]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	654b      	str	r3, [r1, #84]	; 0x54
 80066a4:	e004      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80066a6:	bf00      	nop
 80066a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d029      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c8:	d007      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80066ca:	e00f      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066cc:	4b69      	ldr	r3, [pc, #420]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	4a68      	ldr	r2, [pc, #416]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80066d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066d8:	e00b      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3304      	adds	r3, #4
 80066de:	2102      	movs	r1, #2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 f903 	bl	80078ec <RCCEx_PLL2_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066ea:	e002      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	75fb      	strb	r3, [r7, #23]
      break;
 80066f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d109      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066f8:	4b5e      	ldr	r3, [pc, #376]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80066fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006704:	495b      	ldr	r1, [pc, #364]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006706:	4313      	orrs	r3, r2
 8006708:	64cb      	str	r3, [r1, #76]	; 0x4c
 800670a:	e001      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3324      	adds	r3, #36	; 0x24
 8006720:	2102      	movs	r1, #2
 8006722:	4618      	mov	r0, r3
 8006724:	f001 f994 	bl	8007a50 <RCCEx_PLL3_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d032      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006748:	d017      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800674a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800674e:	d811      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006754:	d013      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8006756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800675a:	d80b      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d010      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8006760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006764:	d106      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006766:	4b43      	ldr	r3, [pc, #268]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	4a42      	ldr	r2, [pc, #264]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800676c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006772:	e007      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	75fb      	strb	r3, [r7, #23]
      break;
 8006778:	e004      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800677a:	bf00      	nop
 800677c:	e002      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800677e:	bf00      	nop
 8006780:	e000      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8006782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800678a:	4b3a      	ldr	r3, [pc, #232]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006798:	4936      	ldr	r1, [pc, #216]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800679a:	4313      	orrs	r3, r2
 800679c:	654b      	str	r3, [r1, #84]	; 0x54
 800679e:	e001      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
 80067a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067b0:	4b30      	ldr	r3, [pc, #192]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067bc:	492d      	ldr	r1, [pc, #180]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067da:	4926      	ldr	r1, [pc, #152]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80067ec:	4b21      	ldr	r3, [pc, #132]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f8:	491e      	ldr	r1, [pc, #120]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800680a:	4b1a      	ldr	r3, [pc, #104]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	4a19      	ldr	r2, [pc, #100]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006814:	6113      	str	r3, [r2, #16]
 8006816:	4b17      	ldr	r3, [pc, #92]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006820:	4914      	ldr	r1, [pc, #80]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006822:	4313      	orrs	r3, r2
 8006824:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	da08      	bge.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800682e:	4b11      	ldr	r3, [pc, #68]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006832:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683a:	490e      	ldr	r1, [pc, #56]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800683c:	4313      	orrs	r3, r2
 800683e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d009      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800684c:	4b09      	ldr	r3, [pc, #36]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800684e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006850:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	4906      	ldr	r1, [pc, #24]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800685c:	4313      	orrs	r3, r2
 800685e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006860:	7dbb      	ldrb	r3, [r7, #22]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e000      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	58024400 	.word	0x58024400

08006878 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b090      	sub	sp, #64	; 0x40
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006886:	f040 8089 	bne.w	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800688a:	4ba8      	ldr	r3, [pc, #672]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800688c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	633b      	str	r3, [r7, #48]	; 0x30
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	2b04      	cmp	r3, #4
 8006898:	d87d      	bhi.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800689a:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068b5 	.word	0x080068b5
 80068a4:	080068d9 	.word	0x080068d9
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	08006991 	.word	0x08006991
 80068b0:	08006921 	.word	0x08006921

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068b4:	4b9d      	ldr	r3, [pc, #628]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068c0:	d107      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 febe 	bl	8007648 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068d0:	e3f5      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d6:	e3f2      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068d8:	4b94      	ldr	r3, [pc, #592]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e4:	d107      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e6:	f107 0318 	add.w	r3, r7, #24
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fc04 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068f4:	e3e3      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068fa:	e3e0      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068fc:	4b8b      	ldr	r3, [pc, #556]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006908:	d107      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800690a:	f107 030c 	add.w	r3, r7, #12
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fd46 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006918:	e3d1      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691e:	e3ce      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006920:	4b82      	ldr	r3, [pc, #520]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006928:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800692a:	4b80      	ldr	r3, [pc, #512]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b04      	cmp	r3, #4
 8006934:	d10c      	bne.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006938:	2b00      	cmp	r3, #0
 800693a:	d109      	bne.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800693c:	4b7b      	ldr	r3, [pc, #492]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	08db      	lsrs	r3, r3, #3
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	4a7a      	ldr	r2, [pc, #488]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
 800694c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694e:	e01e      	b.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006950:	4b76      	ldr	r3, [pc, #472]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695c:	d106      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800695e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006964:	d102      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006966:	4b73      	ldr	r3, [pc, #460]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800696a:	e010      	b.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800696c:	4b6f      	ldr	r3, [pc, #444]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006978:	d106      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006980:	d102      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006982:	4b6d      	ldr	r3, [pc, #436]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006986:	e002      	b.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800698c:	e397      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800698e:	e396      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006990:	4b6a      	ldr	r3, [pc, #424]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006994:	e393      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800699a:	e390      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a2:	f040 8095 	bne.w	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80069a6:	4b61      	ldr	r3, [pc, #388]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80069ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b6:	d04d      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069be:	f200 8084 	bhi.w	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	2bc0      	cmp	r3, #192	; 0xc0
 80069c6:	d07d      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	2bc0      	cmp	r3, #192	; 0xc0
 80069cc:	d87d      	bhi.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	2b80      	cmp	r3, #128	; 0x80
 80069d2:	d02d      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	2b80      	cmp	r3, #128	; 0x80
 80069d8:	d877      	bhi.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	2b40      	cmp	r3, #64	; 0x40
 80069e4:	d012      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80069e6:	e070      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069e8:	4b50      	ldr	r3, [pc, #320]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f4:	d107      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fe24 	bl	8007648 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a04:	e35b      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a0a:	e358      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a0c:	4b47      	ldr	r3, [pc, #284]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a18:	d107      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a1a:	f107 0318 	add.w	r3, r7, #24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fb6a 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a28:	e349      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a2e:	e346      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a30:	4b3e      	ldr	r3, [pc, #248]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a3e:	f107 030c 	add.w	r3, r7, #12
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fcac 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a4c:	e337      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a52:	e334      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a54:	4b35      	ldr	r3, [pc, #212]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a5e:	4b33      	ldr	r3, [pc, #204]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a70:	4b2e      	ldr	r3, [pc, #184]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	08db      	lsrs	r3, r3, #3
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	4a2d      	ldr	r2, [pc, #180]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a82:	e01e      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a84:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a90:	d106      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a98:	d102      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a9a:	4b26      	ldr	r3, [pc, #152]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a9e:	e010      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aa0:	4b22      	ldr	r3, [pc, #136]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aac:	d106      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d102      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ab6:	4b20      	ldr	r3, [pc, #128]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aba:	e002      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ac0:	e2fd      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006ac2:	e2fc      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ac4:	4b1d      	ldr	r3, [pc, #116]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ac8:	e2f9      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ace:	e2f6      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad6:	f040 80a7 	bne.w	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006ada:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ade:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006ae2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aea:	d05f      	beq.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af2:	f200 8096 	bhi.w	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006afc:	f000 808e 	beq.w	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b06:	f200 808c 	bhi.w	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b10:	d03a      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b18:	f200 8083 	bhi.w	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00e      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b28:	d01c      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8006b2a:	e07a      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006b2c:	58024400 	.word	0x58024400
 8006b30:	03d09000 	.word	0x03d09000
 8006b34:	003d0900 	.word	0x003d0900
 8006b38:	016e3600 	.word	0x016e3600
 8006b3c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b40:	4ba8      	ldr	r3, [pc, #672]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b4c:	d107      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fd78 	bl	8007648 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b5c:	e2af      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b62:	e2ac      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b64:	4b9f      	ldr	r3, [pc, #636]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b70:	d107      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b72:	f107 0318 	add.w	r3, r7, #24
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fabe 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b80:	e29d      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b86:	e29a      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b88:	4b96      	ldr	r3, [pc, #600]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b96:	f107 030c 	add.w	r3, r7, #12
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fc00 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ba4:	e28b      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006baa:	e288      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006bac:	4b8d      	ldr	r3, [pc, #564]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bb6:	4b8b      	ldr	r3, [pc, #556]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d10c      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bc8:	4b86      	ldr	r3, [pc, #536]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	08db      	lsrs	r3, r3, #3
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	4a85      	ldr	r2, [pc, #532]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bda:	e01e      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bdc:	4b81      	ldr	r3, [pc, #516]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be8:	d106      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf0:	d102      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006bf2:	4b7e      	ldr	r3, [pc, #504]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf6:	e010      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bf8:	4b7a      	ldr	r3, [pc, #488]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c04:	d106      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c0c:	d102      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c0e:	4b78      	ldr	r3, [pc, #480]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c12:	e002      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8006c18:	e251      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006c1a:	e250      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c1c:	4b75      	ldr	r3, [pc, #468]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c20:	e24d      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c26:	e24a      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2e:	f040 809c 	bne.w	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006c32:	4b6c      	ldr	r3, [pc, #432]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c36:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c42:	d054      	beq.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4a:	f200 808b 	bhi.w	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c54:	f000 8083 	beq.w	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c5e:	f200 8081 	bhi.w	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c68:	d02f      	beq.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c70:	d878      	bhi.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7e:	d012      	beq.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8006c80:	e070      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c82:	4b58      	ldr	r3, [pc, #352]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c8e:	d107      	bne.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fcd7 	bl	8007648 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c9e:	e20e      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ca4:	e20b      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ca6:	4b4f      	ldr	r3, [pc, #316]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cb2:	d107      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb4:	f107 0318 	add.w	r3, r7, #24
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fa1d 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cc2:	e1fc      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cc8:	e1f9      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cca:	4b46      	ldr	r3, [pc, #280]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd6:	d107      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fb5f 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ce6:	e1ea      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cec:	e1e7      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006cee:	4b3d      	ldr	r3, [pc, #244]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cf6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cf8:	4b3a      	ldr	r3, [pc, #232]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d10c      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d0a:	4b36      	ldr	r3, [pc, #216]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	08db      	lsrs	r3, r3, #3
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	4a34      	ldr	r2, [pc, #208]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d16:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d1c:	e01e      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d1e:	4b31      	ldr	r3, [pc, #196]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d32:	d102      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d34:	4b2d      	ldr	r3, [pc, #180]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d38:	e010      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d3a:	4b2a      	ldr	r3, [pc, #168]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d46:	d106      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d4e:	d102      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d50:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d54:	e002      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d5a:	e1b0      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006d5c:	e1af      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d5e:	4b25      	ldr	r3, [pc, #148]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d62:	e1ac      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d68:	e1a9      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d70:	d17d      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d82:	d039      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d8a:	d86d      	bhi.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d98:	d012      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006d9a:	e065      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d9c:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da8:	d107      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006daa:	f107 0318 	add.w	r3, r7, #24
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f9a2 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006db8:	e181      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dbe:	e17e      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dc0:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dcc:	d107      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fae4 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ddc:	e16f      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de2:	e16c      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006de4:	58024400 	.word	0x58024400
 8006de8:	03d09000 	.word	0x03d09000
 8006dec:	003d0900 	.word	0x003d0900
 8006df0:	016e3600 	.word	0x016e3600
 8006df4:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006df8:	4ba0      	ldr	r3, [pc, #640]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e02:	4b9e      	ldr	r3, [pc, #632]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e14:	4b99      	ldr	r3, [pc, #612]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	08db      	lsrs	r3, r3, #3
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	4a98      	ldr	r2, [pc, #608]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e26:	e01e      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e28:	4b94      	ldr	r3, [pc, #592]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e34:	d106      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e3c:	d102      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e3e:	4b91      	ldr	r3, [pc, #580]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e42:	e010      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e44:	4b8d      	ldr	r3, [pc, #564]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e50:	d106      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e58:	d102      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e5a:	4b8b      	ldr	r3, [pc, #556]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5e:	e002      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e64:	e12b      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006e66:	e12a      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e6c:	e127      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e74:	d133      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006e76:	4b81      	ldr	r3, [pc, #516]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e7e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d004      	beq.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e8c:	d012      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006e8e:	e023      	b.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e90:	4b7a      	ldr	r3, [pc, #488]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e9c:	d107      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fbd0 	bl	8007648 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006eac:	e107      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb2:	e104      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eb4:	4b71      	ldr	r3, [pc, #452]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ec0:	d107      	bne.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ec2:	f107 0318 	add.w	r3, r7, #24
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f916 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ed0:	e0f5      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ed6:	e0f2      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006edc:	e0ef      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ee4:	f040 8091 	bne.w	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006ee8:	4b64      	ldr	r3, [pc, #400]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eec:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006ef0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006ef8:	f000 8081 	beq.w	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f02:	d87f      	bhi.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f0a:	d06b      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f12:	d877      	bhi.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1a:	d056      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f22:	d86f      	bhi.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f2a:	d03b      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f32:	d867      	bhi.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f3a:	d021      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f42:	d85f      	bhi.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f50:	d004      	beq.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006f52:	e057      	b.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f54:	f000 f8ba 	bl	80070cc <HAL_RCCEx_GetD3PCLK1Freq>
 8006f58:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006f5a:	e0b0      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f5c:	4b47      	ldr	r3, [pc, #284]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f68:	d107      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f6a:	f107 0318 	add.w	r3, r7, #24
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 f8c2 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f78:	e0a1      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f7e:	e09e      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f80:	4b3e      	ldr	r3, [pc, #248]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f8c:	d107      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f8e:	f107 030c 	add.w	r3, r7, #12
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fa04 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f9c:	e08f      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa2:	e08c      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fa4:	4b35      	ldr	r3, [pc, #212]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d109      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fb0:	4b32      	ldr	r3, [pc, #200]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	4a31      	ldr	r2, [pc, #196]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fc2:	e07c      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc8:	e079      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006fca:	4b2c      	ldr	r3, [pc, #176]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd6:	d102      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8006fd8:	4b2a      	ldr	r3, [pc, #168]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fdc:	e06f      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fe2:	e06c      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fe4:	4b25      	ldr	r3, [pc, #148]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff0:	d102      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8006ff2:	4b25      	ldr	r3, [pc, #148]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ff6:	e062      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffc:	e05f      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ffe:	4b23      	ldr	r3, [pc, #140]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007002:	e05c      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007008:	e059      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007010:	d153      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007012:	4b1a      	ldr	r3, [pc, #104]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007016:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800701a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007022:	d035      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800702a:	d843      	bhi.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007038:	d00d      	beq.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800703a:	e03b      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800703c:	4b0f      	ldr	r3, [pc, #60]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007048:	d102      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800704e:	e036      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007054:	e033      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007056:	4b09      	ldr	r3, [pc, #36]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007062:	d107      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007068:	4618      	mov	r0, r3
 800706a:	f000 faed 	bl	8007648 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007072:	e024      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007078:	e021      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800707a:	bf00      	nop
 800707c:	58024400 	.word	0x58024400
 8007080:	03d09000 	.word	0x03d09000
 8007084:	003d0900 	.word	0x003d0900
 8007088:	016e3600 	.word	0x016e3600
 800708c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007090:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800709c:	d107      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800709e:	f107 0318 	add.w	r3, r7, #24
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f828 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070ac:	e007      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b2:	e004      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b8:	e001      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80070be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3740      	adds	r7, #64	; 0x40
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	58024400 	.word	0x58024400

080070cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80070d0:	f7fe fc6a 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 80070d4:	4602      	mov	r2, r0
 80070d6:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	091b      	lsrs	r3, r3, #4
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	4904      	ldr	r1, [pc, #16]	; (80070f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070e2:	5ccb      	ldrb	r3, [r1, r3]
 80070e4:	f003 031f 	and.w	r3, r3, #31
 80070e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	58024400 	.word	0x58024400
 80070f4:	0800c618 	.word	0x0800c618

080070f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007100:	4ba1      	ldr	r3, [pc, #644]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800710a:	4b9f      	ldr	r3, [pc, #636]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	0b1b      	lsrs	r3, r3, #12
 8007110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007114:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007116:	4b9c      	ldr	r3, [pc, #624]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	091b      	lsrs	r3, r3, #4
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007122:	4b99      	ldr	r3, [pc, #612]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	08db      	lsrs	r3, r3, #3
 8007128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8111 	beq.w	8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b02      	cmp	r3, #2
 800714a:	f000 8083 	beq.w	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b02      	cmp	r3, #2
 8007152:	f200 80a1 	bhi.w	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d056      	beq.n	8007210 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007162:	e099      	b.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007164:	4b88      	ldr	r3, [pc, #544]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d02d      	beq.n	80071cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007170:	4b85      	ldr	r3, [pc, #532]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	4a84      	ldr	r2, [pc, #528]	; (800738c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719a:	4b7b      	ldr	r3, [pc, #492]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071ca:	e087      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071de:	4b6a      	ldr	r3, [pc, #424]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800720e:	e065      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b59      	ldr	r3, [pc, #356]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a03 	vldr	s12, [r7, #12]
 8007236:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007252:	e043      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b48      	ldr	r3, [pc, #288]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a03 	vldr	s12, [r7, #12]
 800727a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007296:	e021      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072aa:	4b37      	ldr	r3, [pc, #220]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80072be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80072dc:	4b2a      	ldr	r3, [pc, #168]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	0a5b      	lsrs	r3, r3, #9
 80072e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007302:	ee17 2a90 	vmov	r2, s15
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800730a:	4b1f      	ldr	r3, [pc, #124]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007320:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007324:	edd7 6a07 	vldr	s13, [r7, #28]
 8007328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007330:	ee17 2a90 	vmov	r2, s15
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007338:	4b13      	ldr	r3, [pc, #76]	; (8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	0e1b      	lsrs	r3, r3, #24
 800733e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007352:	edd7 6a07 	vldr	s13, [r7, #28]
 8007356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735e:	ee17 2a90 	vmov	r2, s15
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007366:	e008      	b.n	800737a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	609a      	str	r2, [r3, #8]
}
 800737a:	bf00      	nop
 800737c:	3724      	adds	r7, #36	; 0x24
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	58024400 	.word	0x58024400
 800738c:	03d09000 	.word	0x03d09000
 8007390:	46000000 	.word	0x46000000
 8007394:	4c742400 	.word	0x4c742400
 8007398:	4a742400 	.word	0x4a742400
 800739c:	4bb71b00 	.word	0x4bb71b00

080073a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b089      	sub	sp, #36	; 0x24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073a8:	4ba1      	ldr	r3, [pc, #644]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80073b2:	4b9f      	ldr	r3, [pc, #636]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	0d1b      	lsrs	r3, r3, #20
 80073b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073be:	4b9c      	ldr	r3, [pc, #624]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80073ca:	4b99      	ldr	r3, [pc, #612]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ce:	08db      	lsrs	r3, r3, #3
 80073d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	fb02 f303 	mul.w	r3, r2, r3
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8111 	beq.w	8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	f000 8083 	beq.w	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	f200 80a1 	bhi.w	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d056      	beq.n	80074b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800740a:	e099      	b.n	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800740c:	4b88      	ldr	r3, [pc, #544]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d02d      	beq.n	8007474 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007418:	4b85      	ldr	r3, [pc, #532]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	08db      	lsrs	r3, r3, #3
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	4a84      	ldr	r2, [pc, #528]	; (8007634 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007424:	fa22 f303 	lsr.w	r3, r2, r3
 8007428:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007442:	4b7b      	ldr	r3, [pc, #492]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007452:	ed97 6a03 	vldr	s12, [r7, #12]
 8007456:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800745a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007472:	e087      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800763c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b6a      	ldr	r3, [pc, #424]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074b6:	e065      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b59      	ldr	r3, [pc, #356]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074fa:	e043      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b48      	ldr	r3, [pc, #288]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753e:	e021      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b37      	ldr	r3, [pc, #220]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007582:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007584:	4b2a      	ldr	r3, [pc, #168]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	0a5b      	lsrs	r3, r3, #9
 800758a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800759a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759e:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075aa:	ee17 2a90 	vmov	r2, s15
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80075b2:	4b1f      	ldr	r3, [pc, #124]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	0c1b      	lsrs	r3, r3, #16
 80075b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075bc:	ee07 3a90 	vmov	s15, r3
 80075c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d8:	ee17 2a90 	vmov	r2, s15
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80075e0:	4b13      	ldr	r3, [pc, #76]	; (8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	0e1b      	lsrs	r3, r3, #24
 80075e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80075fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007606:	ee17 2a90 	vmov	r2, s15
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800760e:	e008      	b.n	8007622 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	609a      	str	r2, [r3, #8]
}
 8007622:	bf00      	nop
 8007624:	3724      	adds	r7, #36	; 0x24
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	58024400 	.word	0x58024400
 8007634:	03d09000 	.word	0x03d09000
 8007638:	46000000 	.word	0x46000000
 800763c:	4c742400 	.word	0x4c742400
 8007640:	4a742400 	.word	0x4a742400
 8007644:	4bb71b00 	.word	0x4bb71b00

08007648 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007648:	b480      	push	{r7}
 800764a:	b089      	sub	sp, #36	; 0x24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007650:	4ba0      	ldr	r3, [pc, #640]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800765a:	4b9e      	ldr	r3, [pc, #632]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	091b      	lsrs	r3, r3, #4
 8007660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007664:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007666:	4b9b      	ldr	r3, [pc, #620]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007670:	4b98      	ldr	r3, [pc, #608]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007674:	08db      	lsrs	r3, r3, #3
 8007676:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	fb02 f303 	mul.w	r3, r2, r3
 8007680:	ee07 3a90 	vmov	s15, r3
 8007684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007688:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 8111 	beq.w	80078b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	2b02      	cmp	r3, #2
 8007698:	f000 8083 	beq.w	80077a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	f200 80a1 	bhi.w	80077e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d056      	beq.n	800775e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80076b0:	e099      	b.n	80077e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076b2:	4b88      	ldr	r3, [pc, #544]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d02d      	beq.n	800771a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076be:	4b85      	ldr	r3, [pc, #532]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	08db      	lsrs	r3, r3, #3
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	4a83      	ldr	r2, [pc, #524]	; (80078d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80076ca:	fa22 f303 	lsr.w	r3, r2, r3
 80076ce:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076e8:	4b7a      	ldr	r3, [pc, #488]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80078dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800770c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007714:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007718:	e087      	b.n	800782a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	ee07 3a90 	vmov	s15, r3
 8007720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007724:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80078e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772c:	4b69      	ldr	r3, [pc, #420]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007740:	eddf 5a66 	vldr	s11, [pc, #408]	; 80078dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007758:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800775c:	e065      	b.n	800782a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	ee07 3a90 	vmov	s15, r3
 8007764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007768:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80078e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800776c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007770:	4b58      	ldr	r3, [pc, #352]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007780:	ed97 6a03 	vldr	s12, [r7, #12]
 8007784:	eddf 5a55 	vldr	s11, [pc, #340]	; 80078dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077a0:	e043      	b.n	800782a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80078e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80077b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b4:	4b47      	ldr	r3, [pc, #284]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80078dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077e4:	e021      	b.n	800782a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80078e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f8:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007808:	ed97 6a03 	vldr	s12, [r7, #12]
 800780c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80078dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007824:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007828:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800782a:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	0a5b      	lsrs	r3, r3, #9
 8007830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007844:	edd7 6a07 	vldr	s13, [r7, #28]
 8007848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007850:	ee17 2a90 	vmov	r2, s15
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007858:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785c:	0c1b      	lsrs	r3, r3, #16
 800785e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007872:	edd7 6a07 	vldr	s13, [r7, #28]
 8007876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787e:	ee17 2a90 	vmov	r2, s15
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007886:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	0e1b      	lsrs	r3, r3, #24
 800788c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007890:	ee07 3a90 	vmov	s15, r3
 8007894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800789c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80078a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ac:	ee17 2a90 	vmov	r2, s15
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80078b4:	e008      	b.n	80078c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	609a      	str	r2, [r3, #8]
}
 80078c8:	bf00      	nop
 80078ca:	3724      	adds	r7, #36	; 0x24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	58024400 	.word	0x58024400
 80078d8:	03d09000 	.word	0x03d09000
 80078dc:	46000000 	.word	0x46000000
 80078e0:	4c742400 	.word	0x4c742400
 80078e4:	4a742400 	.word	0x4a742400
 80078e8:	4bb71b00 	.word	0x4bb71b00

080078ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078fa:	4b53      	ldr	r3, [pc, #332]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	2b03      	cmp	r3, #3
 8007904:	d101      	bne.n	800790a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e099      	b.n	8007a3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800790a:	4b4f      	ldr	r3, [pc, #316]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a4e      	ldr	r2, [pc, #312]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007910:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007916:	f7fa fd6f 	bl	80023f8 <HAL_GetTick>
 800791a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800791c:	e008      	b.n	8007930 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800791e:	f7fa fd6b 	bl	80023f8 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d901      	bls.n	8007930 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e086      	b.n	8007a3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007930:	4b45      	ldr	r3, [pc, #276]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f0      	bne.n	800791e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800793c:	4b42      	ldr	r3, [pc, #264]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	031b      	lsls	r3, r3, #12
 800794a:	493f      	ldr	r1, [pc, #252]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 800794c:	4313      	orrs	r3, r2
 800794e:	628b      	str	r3, [r1, #40]	; 0x28
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	3b01      	subs	r3, #1
 8007956:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	3b01      	subs	r3, #1
 8007960:	025b      	lsls	r3, r3, #9
 8007962:	b29b      	uxth	r3, r3
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	3b01      	subs	r3, #1
 800796c:	041b      	lsls	r3, r3, #16
 800796e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	3b01      	subs	r3, #1
 800797a:	061b      	lsls	r3, r3, #24
 800797c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007980:	4931      	ldr	r1, [pc, #196]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007982:	4313      	orrs	r3, r2
 8007984:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007986:	4b30      	ldr	r3, [pc, #192]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	492d      	ldr	r1, [pc, #180]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007998:	4b2b      	ldr	r3, [pc, #172]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	f023 0220 	bic.w	r2, r3, #32
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	4928      	ldr	r1, [pc, #160]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079aa:	4b27      	ldr	r3, [pc, #156]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	4a26      	ldr	r2, [pc, #152]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079b0:	f023 0310 	bic.w	r3, r3, #16
 80079b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079b6:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079ba:	4b24      	ldr	r3, [pc, #144]	; (8007a4c <RCCEx_PLL2_Config+0x160>)
 80079bc:	4013      	ands	r3, r2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	69d2      	ldr	r2, [r2, #28]
 80079c2:	00d2      	lsls	r2, r2, #3
 80079c4:	4920      	ldr	r1, [pc, #128]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079ca:	4b1f      	ldr	r3, [pc, #124]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	4a1e      	ldr	r2, [pc, #120]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079d0:	f043 0310 	orr.w	r3, r3, #16
 80079d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d106      	bne.n	80079ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079dc:	4b1a      	ldr	r3, [pc, #104]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	4a19      	ldr	r2, [pc, #100]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079e8:	e00f      	b.n	8007a0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d106      	bne.n	80079fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079f0:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 80079f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079fc:	e005      	b.n	8007a0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079fe:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	4a11      	ldr	r2, [pc, #68]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a0a:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a0e      	ldr	r2, [pc, #56]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007a10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a16:	f7fa fcef 	bl	80023f8 <HAL_GetTick>
 8007a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a1c:	e008      	b.n	8007a30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a1e:	f7fa fceb 	bl	80023f8 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d901      	bls.n	8007a30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e006      	b.n	8007a3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a30:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <RCCEx_PLL2_Config+0x15c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0f0      	beq.n	8007a1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	58024400 	.word	0x58024400
 8007a4c:	ffff0007 	.word	0xffff0007

08007a50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a5e:	4b53      	ldr	r3, [pc, #332]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d101      	bne.n	8007a6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e099      	b.n	8007ba2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a6e:	4b4f      	ldr	r3, [pc, #316]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a4e      	ldr	r2, [pc, #312]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a7a:	f7fa fcbd 	bl	80023f8 <HAL_GetTick>
 8007a7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a80:	e008      	b.n	8007a94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a82:	f7fa fcb9 	bl	80023f8 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e086      	b.n	8007ba2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a94:	4b45      	ldr	r3, [pc, #276]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1f0      	bne.n	8007a82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007aa0:	4b42      	ldr	r3, [pc, #264]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	051b      	lsls	r3, r3, #20
 8007aae:	493f      	ldr	r1, [pc, #252]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	628b      	str	r3, [r1, #40]	; 0x28
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	025b      	lsls	r3, r3, #9
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	041b      	lsls	r3, r3, #16
 8007ad2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	061b      	lsls	r3, r3, #24
 8007ae0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ae4:	4931      	ldr	r1, [pc, #196]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007aea:	4b30      	ldr	r3, [pc, #192]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	492d      	ldr	r1, [pc, #180]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007afc:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	4928      	ldr	r1, [pc, #160]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b0e:	4b27      	ldr	r3, [pc, #156]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	4a26      	ldr	r2, [pc, #152]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b1a:	4b24      	ldr	r3, [pc, #144]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <RCCEx_PLL3_Config+0x160>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	69d2      	ldr	r2, [r2, #28]
 8007b26:	00d2      	lsls	r2, r2, #3
 8007b28:	4920      	ldr	r1, [pc, #128]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b2e:	4b1f      	ldr	r3, [pc, #124]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	4a1e      	ldr	r2, [pc, #120]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d106      	bne.n	8007b4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b40:	4b1a      	ldr	r3, [pc, #104]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b4c:	e00f      	b.n	8007b6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d106      	bne.n	8007b62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b54:	4b15      	ldr	r3, [pc, #84]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	4a14      	ldr	r2, [pc, #80]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b60:	e005      	b.n	8007b6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b62:	4b12      	ldr	r3, [pc, #72]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	4a11      	ldr	r2, [pc, #68]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b6e:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a0e      	ldr	r2, [pc, #56]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b7a:	f7fa fc3d 	bl	80023f8 <HAL_GetTick>
 8007b7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b80:	e008      	b.n	8007b94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b82:	f7fa fc39 	bl	80023f8 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d901      	bls.n	8007b94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e006      	b.n	8007ba2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <RCCEx_PLL3_Config+0x15c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0f0      	beq.n	8007b82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	58024400 	.word	0x58024400
 8007bb0:	ffff0007 	.word	0xffff0007

08007bb4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e0f1      	b.n	8007daa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a78      	ldr	r2, [pc, #480]	; (8007db4 <HAL_SPI_Init+0x200>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00f      	beq.n	8007bf6 <HAL_SPI_Init+0x42>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a77      	ldr	r2, [pc, #476]	; (8007db8 <HAL_SPI_Init+0x204>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00a      	beq.n	8007bf6 <HAL_SPI_Init+0x42>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a75      	ldr	r2, [pc, #468]	; (8007dbc <HAL_SPI_Init+0x208>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d005      	beq.n	8007bf6 <HAL_SPI_Init+0x42>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	d901      	bls.n	8007bf6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e0d9      	b.n	8007daa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 f880 	bl	8008cfc <SPI_GetPacketSize>
 8007bfc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a6c      	ldr	r2, [pc, #432]	; (8007db4 <HAL_SPI_Init+0x200>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00c      	beq.n	8007c22 <HAL_SPI_Init+0x6e>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a6a      	ldr	r2, [pc, #424]	; (8007db8 <HAL_SPI_Init+0x204>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d007      	beq.n	8007c22 <HAL_SPI_Init+0x6e>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a69      	ldr	r2, [pc, #420]	; (8007dbc <HAL_SPI_Init+0x208>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d002      	beq.n	8007c22 <HAL_SPI_Init+0x6e>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b08      	cmp	r3, #8
 8007c20:	d811      	bhi.n	8007c46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c26:	4a63      	ldr	r2, [pc, #396]	; (8007db4 <HAL_SPI_Init+0x200>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d009      	beq.n	8007c40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a61      	ldr	r2, [pc, #388]	; (8007db8 <HAL_SPI_Init+0x204>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <HAL_SPI_Init+0x8c>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a60      	ldr	r2, [pc, #384]	; (8007dbc <HAL_SPI_Init+0x208>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d104      	bne.n	8007c4a <HAL_SPI_Init+0x96>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b10      	cmp	r3, #16
 8007c44:	d901      	bls.n	8007c4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e0af      	b.n	8007daa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7fa f828 	bl	8001cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0201 	bic.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007c86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c90:	d119      	bne.n	8007cc6 <HAL_SPI_Init+0x112>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c9a:	d103      	bne.n	8007ca4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10c      	bne.n	8007cc6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb4:	d107      	bne.n	8007cc6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cc4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69da      	ldr	r2, [r3, #28]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd8:	ea42 0103 	orr.w	r1, r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	431a      	orrs	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d26:	ea42 0103 	orr.w	r1, r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d113      	bne.n	8007d66 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0201 	bic.w	r2, r2, #1
 8007d74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	40013000 	.word	0x40013000
 8007db8:	40003800 	.word	0x40003800
 8007dbc:	40003c00 	.word	0x40003c00

08007dc0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af02      	add	r7, sp, #8
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3320      	adds	r3, #32
 8007dd6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_SPI_Transmit+0x2a>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e1d7      	b.n	800819a <HAL_SPI_Transmit+0x3da>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007df2:	f7fa fb01 	bl	80023f8 <HAL_GetTick>
 8007df6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d007      	beq.n	8007e14 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007e04:	2302      	movs	r3, #2
 8007e06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e10:	7efb      	ldrb	r3, [r7, #27]
 8007e12:	e1c2      	b.n	800819a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_SPI_Transmit+0x60>
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d107      	bne.n	8007e30 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e2c:	7efb      	ldrb	r3, [r7, #27]
 8007e2e:	e1b4      	b.n	800819a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2203      	movs	r2, #3
 8007e34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	88fa      	ldrh	r2, [r7, #6]
 8007e4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	88fa      	ldrh	r2, [r7, #6]
 8007e52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007e80:	d107      	bne.n	8007e92 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	4b96      	ldr	r3, [pc, #600]	; (80080f4 <HAL_SPI_Transmit+0x334>)
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	88f9      	ldrh	r1, [r7, #6]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	430b      	orrs	r3, r1
 8007ea4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f042 0201 	orr.w	r2, r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ebe:	d107      	bne.n	8007ed0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ece:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	2b0f      	cmp	r3, #15
 8007ed6:	d947      	bls.n	8007f68 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007ed8:	e03f      	b.n	8007f5a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d114      	bne.n	8007f12 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef8:	1d1a      	adds	r2, r3, #4
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007f10:	e023      	b.n	8007f5a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f12:	f7fa fa71 	bl	80023f8 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d803      	bhi.n	8007f2a <HAL_SPI_Transmit+0x16a>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f28:	d102      	bne.n	8007f30 <HAL_SPI_Transmit+0x170>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d114      	bne.n	8007f5a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fe15 	bl	8008b60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e11f      	b.n	800819a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1b9      	bne.n	8007eda <HAL_SPI_Transmit+0x11a>
 8007f66:	e0f2      	b.n	800814e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	f240 80e7 	bls.w	8008140 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007f72:	e05d      	b.n	8008030 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d132      	bne.n	8007fe8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d918      	bls.n	8007fc0 <HAL_SPI_Transmit+0x200>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d014      	beq.n	8007fc0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa6:	1d1a      	adds	r2, r3, #4
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b02      	subs	r3, #2
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007fbe:	e037      	b.n	8008030 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc4:	881a      	ldrh	r2, [r3, #0]
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fce:	1c9a      	adds	r2, r3, #2
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007fe6:	e023      	b.n	8008030 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fe8:	f7fa fa06 	bl	80023f8 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d803      	bhi.n	8008000 <HAL_SPI_Transmit+0x240>
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffe:	d102      	bne.n	8008006 <HAL_SPI_Transmit+0x246>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d114      	bne.n	8008030 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fdaa 	bl	8008b60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800801a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e0b4      	b.n	800819a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d19b      	bne.n	8007f74 <HAL_SPI_Transmit+0x1b4>
 800803c:	e087      	b.n	800814e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b02      	cmp	r3, #2
 800804a:	d155      	bne.n	80080f8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b03      	cmp	r3, #3
 8008056:	d918      	bls.n	800808a <HAL_SPI_Transmit+0x2ca>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	d914      	bls.n	800808a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6812      	ldr	r2, [r2, #0]
 800806a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008070:	1d1a      	adds	r2, r3, #4
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b04      	subs	r3, #4
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008088:	e05a      	b.n	8008140 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b01      	cmp	r3, #1
 8008094:	d917      	bls.n	80080c6 <HAL_SPI_Transmit+0x306>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d013      	beq.n	80080c6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a2:	881a      	ldrh	r2, [r3, #0]
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ac:	1c9a      	adds	r2, r3, #2
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b02      	subs	r3, #2
 80080bc:	b29a      	uxth	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80080c4:	e03c      	b.n	8008140 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3320      	adds	r3, #32
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80080f0:	e026      	b.n	8008140 <HAL_SPI_Transmit+0x380>
 80080f2:	bf00      	nop
 80080f4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080f8:	f7fa f97e 	bl	80023f8 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d803      	bhi.n	8008110 <HAL_SPI_Transmit+0x350>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810e:	d102      	bne.n	8008116 <HAL_SPI_Transmit+0x356>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d114      	bne.n	8008140 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 fd22 	bl	8008b60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800812a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e02c      	b.n	800819a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	f47f af78 	bne.w	800803e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2200      	movs	r2, #0
 8008156:	2108      	movs	r1, #8
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 fda1 	bl	8008ca0 <SPI_WaitOnFlagUntilTimeout>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800816a:	f043 0220 	orr.w	r2, r3, #32
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fcf3 	bl	8008b60 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008198:	7efb      	ldrb	r3, [r7, #27]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop

080081a4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08a      	sub	sp, #40	; 0x28
 80081a8:	af02      	add	r7, sp, #8
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	4613      	mov	r3, r2
 80081b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3330      	adds	r3, #48	; 0x30
 80081be:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081c8:	d112      	bne.n	80081f0 <HAL_SPI_Receive+0x4c>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10e      	bne.n	80081f0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2204      	movs	r2, #4
 80081d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081da:	88fa      	ldrh	r2, [r7, #6]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4613      	mov	r3, r2
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 f9ce 	bl	8008588 <HAL_SPI_TransmitReceive>
 80081ec:	4603      	mov	r3, r0
 80081ee:	e1c7      	b.n	8008580 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_SPI_Receive+0x5a>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e1c0      	b.n	8008580 <HAL_SPI_Receive+0x3dc>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008206:	f7fa f8f7 	bl	80023f8 <HAL_GetTick>
 800820a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b01      	cmp	r3, #1
 8008216:	d007      	beq.n	8008228 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008218:	2302      	movs	r3, #2
 800821a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008224:	7ffb      	ldrb	r3, [r7, #31]
 8008226:	e1ab      	b.n	8008580 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <HAL_SPI_Receive+0x90>
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d107      	bne.n	8008244 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008240:	7ffb      	ldrb	r3, [r7, #31]
 8008242:	e19d      	b.n	8008580 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2204      	movs	r2, #4
 8008248:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	88fa      	ldrh	r2, [r7, #6]
 800825e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008294:	d107      	bne.n	80082a6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	4b94      	ldr	r3, [pc, #592]	; (8008500 <HAL_SPI_Receive+0x35c>)
 80082ae:	4013      	ands	r3, r2
 80082b0:	88f9      	ldrh	r1, [r7, #6]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	6812      	ldr	r2, [r2, #0]
 80082b6:	430b      	orrs	r3, r1
 80082b8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f042 0201 	orr.w	r2, r2, #1
 80082c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082d2:	d107      	bne.n	80082e4 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	2b0f      	cmp	r3, #15
 80082ea:	d948      	bls.n	800837e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80082ec:	e040      	b.n	8008370 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	695a      	ldr	r2, [r3, #20]
 80082f4:	f248 0308 	movw	r3, #32776	; 0x8008
 80082f8:	4013      	ands	r3, r2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d014      	beq.n	8008328 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008306:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008308:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800830e:	1d1a      	adds	r2, r3, #4
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800831a:	b29b      	uxth	r3, r3
 800831c:	3b01      	subs	r3, #1
 800831e:	b29a      	uxth	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008326:	e023      	b.n	8008370 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008328:	f7fa f866 	bl	80023f8 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d803      	bhi.n	8008340 <HAL_SPI_Receive+0x19c>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833e:	d102      	bne.n	8008346 <HAL_SPI_Receive+0x1a2>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d114      	bne.n	8008370 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 fc0a 	bl	8008b60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800835a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e107      	b.n	8008580 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1b8      	bne.n	80082ee <HAL_SPI_Receive+0x14a>
 800837c:	e0ed      	b.n	800855a <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	2b07      	cmp	r3, #7
 8008384:	f240 80e2 	bls.w	800854c <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008388:	e05b      	b.n	8008442 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d030      	beq.n	80083fa <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d014      	beq.n	80083d0 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80083b0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083b6:	1d1a      	adds	r2, r3, #4
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b02      	subs	r3, #2
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80083ce:	e038      	b.n	8008442 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	8812      	ldrh	r2, [r2, #0]
 80083d8:	b292      	uxth	r2, r2
 80083da:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e0:	1c9a      	adds	r2, r3, #2
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80083f8:	e023      	b.n	8008442 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083fa:	f7f9 fffd 	bl	80023f8 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d803      	bhi.n	8008412 <HAL_SPI_Receive+0x26e>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d102      	bne.n	8008418 <HAL_SPI_Receive+0x274>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d114      	bne.n	8008442 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 fba1 	bl	8008b60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800842c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e09e      	b.n	8008580 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008448:	b29b      	uxth	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d19d      	bne.n	800838a <HAL_SPI_Receive+0x1e6>
 800844e:	e084      	b.n	800855a <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d052      	beq.n	8008504 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d014      	beq.n	8008496 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008474:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008476:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800847c:	1d1a      	adds	r2, r3, #4
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008488:	b29b      	uxth	r3, r3
 800848a:	3b04      	subs	r3, #4
 800848c:	b29a      	uxth	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008494:	e05a      	b.n	800854c <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80084a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a4:	d914      	bls.n	80084d0 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	8812      	ldrh	r2, [r2, #0]
 80084ae:	b292      	uxth	r2, r2
 80084b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b6:	1c9a      	adds	r2, r3, #2
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b02      	subs	r3, #2
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80084ce:	e03d      	b.n	800854c <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084dc:	7812      	ldrb	r2, [r2, #0]
 80084de:	b2d2      	uxtb	r2, r2
 80084e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80084fe:	e025      	b.n	800854c <HAL_SPI_Receive+0x3a8>
 8008500:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008504:	f7f9 ff78 	bl	80023f8 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d803      	bhi.n	800851c <HAL_SPI_Receive+0x378>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d102      	bne.n	8008522 <HAL_SPI_Receive+0x37e>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d114      	bne.n	800854c <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fb1c 	bl	8008b60 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e019      	b.n	8008580 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	f47f af7b 	bne.w	8008450 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 fb00 	bl	8008b60 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e000      	b.n	8008580 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800857e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3720      	adds	r7, #32
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08e      	sub	sp, #56	; 0x38
 800858c:	af02      	add	r7, sp, #8
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3320      	adds	r3, #32
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3330      	adds	r3, #48	; 0x30
 80085aa:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d101      	bne.n	80085ba <HAL_SPI_TransmitReceive+0x32>
 80085b6:	2302      	movs	r3, #2
 80085b8:	e2ce      	b.n	8008b58 <HAL_SPI_TransmitReceive+0x5d0>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085c2:	f7f9 ff19 	bl	80023f8 <HAL_GetTick>
 80085c6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80085c8:	887b      	ldrh	r3, [r7, #2]
 80085ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80085cc:	887b      	ldrh	r3, [r7, #2]
 80085ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80085d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085de:	7efb      	ldrb	r3, [r7, #27]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d014      	beq.n	800860e <HAL_SPI_TransmitReceive+0x86>
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ea:	d106      	bne.n	80085fa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80085f4:	7efb      	ldrb	r3, [r7, #27]
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d009      	beq.n	800860e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80085fa:	2302      	movs	r3, #2
 80085fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008608:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800860c:	e2a4      	b.n	8008b58 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <HAL_SPI_TransmitReceive+0x98>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <HAL_SPI_TransmitReceive+0x98>
 800861a:	887b      	ldrh	r3, [r7, #2]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d109      	bne.n	8008634 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800862e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008632:	e291      	b.n	8008b58 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b04      	cmp	r3, #4
 800863e:	d003      	beq.n	8008648 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2205      	movs	r2, #5
 8008644:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	887a      	ldrh	r2, [r7, #2]
 800865a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	887a      	ldrh	r2, [r7, #2]
 8008662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	887a      	ldrh	r2, [r7, #2]
 8008670:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	887a      	ldrh	r2, [r7, #2]
 8008678:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	4b9f      	ldr	r3, [pc, #636]	; (800890c <HAL_SPI_TransmitReceive+0x384>)
 8008690:	4013      	ands	r3, r2
 8008692:	8879      	ldrh	r1, [r7, #2]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	6812      	ldr	r2, [r2, #0]
 8008698:	430b      	orrs	r3, r1
 800869a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f042 0201 	orr.w	r2, r2, #1
 80086aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086b4:	d107      	bne.n	80086c6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b0f      	cmp	r3, #15
 80086cc:	d970      	bls.n	80087b0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80086ce:	e068      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d11a      	bne.n	8008714 <HAL_SPI_TransmitReceive+0x18c>
 80086de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d017      	beq.n	8008714 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f4:	1d1a      	adds	r2, r3, #4
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008712:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	695a      	ldr	r2, [r3, #20]
 800871a:	f248 0308 	movw	r3, #32776	; 0x8008
 800871e:	4013      	ands	r3, r2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d01a      	beq.n	800875a <HAL_SPI_TransmitReceive+0x1d2>
 8008724:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008726:	2b00      	cmp	r3, #0
 8008728:	d017      	beq.n	800875a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008732:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008734:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800873a:	1d1a      	adds	r2, r3, #4
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008746:	b29b      	uxth	r3, r3
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008758:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800875a:	f7f9 fe4d 	bl	80023f8 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008766:	429a      	cmp	r2, r3
 8008768:	d803      	bhi.n	8008772 <HAL_SPI_TransmitReceive+0x1ea>
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008770:	d102      	bne.n	8008778 <HAL_SPI_TransmitReceive+0x1f0>
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	2b00      	cmp	r3, #0
 8008776:	d114      	bne.n	80087a2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f9f1 	bl	8008b60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800878c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e1da      	b.n	8008b58 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d193      	bne.n	80086d0 <HAL_SPI_TransmitReceive+0x148>
 80087a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d190      	bne.n	80086d0 <HAL_SPI_TransmitReceive+0x148>
 80087ae:	e1ac      	b.n	8008b0a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	2b07      	cmp	r3, #7
 80087b6:	f240 81a0 	bls.w	8008afa <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087ba:	e0a9      	b.n	8008910 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d139      	bne.n	800883e <HAL_SPI_TransmitReceive+0x2b6>
 80087ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d036      	beq.n	800883e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80087d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d91c      	bls.n	8008810 <HAL_SPI_TransmitReceive+0x288>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d018      	beq.n	8008810 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6812      	ldr	r2, [r2, #0]
 80087e8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ee:	1d1a      	adds	r2, r3, #4
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	3b02      	subs	r3, #2
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800880c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800880e:	e016      	b.n	800883e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008814:	881a      	ldrh	r2, [r3, #0]
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881e:	1c9a      	adds	r2, r3, #2
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800883c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d03a      	beq.n	80088c2 <HAL_SPI_TransmitReceive+0x33a>
 800884c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d037      	beq.n	80088c2 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d018      	beq.n	8008892 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008868:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800886a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008870:	1d1a      	adds	r2, r3, #4
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b02      	subs	r3, #2
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800888e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008890:	e017      	b.n	80088c2 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008896:	6a3a      	ldr	r2, [r7, #32]
 8008898:	8812      	ldrh	r2, [r2, #0]
 800889a:	b292      	uxth	r2, r2
 800889c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088a2:	1c9a      	adds	r2, r3, #2
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088c2:	f7f9 fd99 	bl	80023f8 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d803      	bhi.n	80088da <HAL_SPI_TransmitReceive+0x352>
 80088d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d8:	d102      	bne.n	80088e0 <HAL_SPI_TransmitReceive+0x358>
 80088da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d117      	bne.n	8008910 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f93d 	bl	8008b60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e126      	b.n	8008b58 <HAL_SPI_TransmitReceive+0x5d0>
 800890a:	bf00      	nop
 800890c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008910:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008912:	2b00      	cmp	r3, #0
 8008914:	f47f af52 	bne.w	80087bc <HAL_SPI_TransmitReceive+0x234>
 8008918:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800891a:	2b00      	cmp	r3, #0
 800891c:	f47f af4e 	bne.w	80087bc <HAL_SPI_TransmitReceive+0x234>
 8008920:	e0f3      	b.n	8008b0a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b02      	cmp	r3, #2
 800892e:	d15a      	bne.n	80089e6 <HAL_SPI_TransmitReceive+0x45e>
 8008930:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008932:	2b00      	cmp	r3, #0
 8008934:	d057      	beq.n	80089e6 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008936:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008938:	2b03      	cmp	r3, #3
 800893a:	d91c      	bls.n	8008976 <HAL_SPI_TransmitReceive+0x3ee>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008940:	2b40      	cmp	r3, #64	; 0x40
 8008942:	d918      	bls.n	8008976 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008954:	1d1a      	adds	r2, r3, #4
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008960:	b29b      	uxth	r3, r3
 8008962:	3b04      	subs	r3, #4
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008972:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008974:	e037      	b.n	80089e6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008976:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008978:	2b01      	cmp	r3, #1
 800897a:	d91b      	bls.n	80089b4 <HAL_SPI_TransmitReceive+0x42c>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d017      	beq.n	80089b4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008988:	881a      	ldrh	r2, [r3, #0]
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008992:	1c9a      	adds	r2, r3, #2
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3b02      	subs	r3, #2
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80089b2:	e018      	b.n	80089e6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3320      	adds	r3, #32
 80089be:	7812      	ldrb	r2, [r2, #0]
 80089c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d05e      	beq.n	8008ab2 <HAL_SPI_TransmitReceive+0x52a>
 80089f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d05b      	beq.n	8008ab2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d018      	beq.n	8008a3a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a12:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a18:	1d1a      	adds	r2, r3, #4
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b04      	subs	r3, #4
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a38:	e03b      	b.n	8008ab2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a48:	d918      	bls.n	8008a7c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a4e:	6a3a      	ldr	r2, [r7, #32]
 8008a50:	8812      	ldrh	r2, [r2, #0]
 8008a52:	b292      	uxth	r2, r2
 8008a54:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a5a:	1c9a      	adds	r2, r3, #2
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b02      	subs	r3, #2
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a78:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a7a:	e01a      	b.n	8008ab2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a88:	7812      	ldrb	r2, [r2, #0]
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ab0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ab2:	f7f9 fca1 	bl	80023f8 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d803      	bhi.n	8008aca <HAL_SPI_TransmitReceive+0x542>
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac8:	d102      	bne.n	8008ad0 <HAL_SPI_TransmitReceive+0x548>
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d114      	bne.n	8008afa <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 f845 	bl	8008b60 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e02e      	b.n	8008b58 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008afa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f47f af10 	bne.w	8008922 <HAL_SPI_TransmitReceive+0x39a>
 8008b02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f47f af0c 	bne.w	8008922 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	2200      	movs	r2, #0
 8008b12:	2108      	movs	r1, #8
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f8c3 	bl	8008ca0 <SPI_WaitOnFlagUntilTimeout>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d007      	beq.n	8008b30 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b26:	f043 0220 	orr.w	r2, r3, #32
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f815 	bl	8008b60 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e001      	b.n	8008b58 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8008b54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3730      	adds	r7, #48	; 0x30
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f042 0208 	orr.w	r2, r2, #8
 8008b7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699a      	ldr	r2, [r3, #24]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f042 0210 	orr.w	r2, r2, #16
 8008b8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0201 	bic.w	r2, r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6919      	ldr	r1, [r3, #16]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4b3c      	ldr	r3, [pc, #240]	; (8008c9c <SPI_CloseTransfer+0x13c>)
 8008bac:	400b      	ands	r3, r1
 8008bae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008bbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d014      	beq.n	8008bf6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00f      	beq.n	8008bf6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f042 0220 	orr.w	r2, r2, #32
 8008bf4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d014      	beq.n	8008c2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00f      	beq.n	8008c2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c12:	f043 0204 	orr.w	r2, r3, #4
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00f      	beq.n	8008c56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c3c:	f043 0201 	orr.w	r2, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00f      	beq.n	8008c80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c66:	f043 0208 	orr.w	r2, r3, #8
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699a      	ldr	r2, [r3, #24]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008c90:	bf00      	nop
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	fffffc90 	.word	0xfffffc90

08008ca0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	4613      	mov	r3, r2
 8008cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008cb0:	e010      	b.n	8008cd4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cb2:	f7f9 fba1 	bl	80023f8 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d803      	bhi.n	8008cca <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d102      	bne.n	8008cd0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e00f      	b.n	8008cf4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	bf0c      	ite	eq
 8008ce4:	2301      	moveq	r3, #1
 8008ce6:	2300      	movne	r3, #0
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	461a      	mov	r2, r3
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d0df      	beq.n	8008cb2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	3307      	adds	r3, #7
 8008d1a:	08db      	lsrs	r3, r3, #3
 8008d1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e049      	b.n	8008dd8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d106      	bne.n	8008d5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7f9 f80f 	bl	8001d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2202      	movs	r2, #2
 8008d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4610      	mov	r0, r2
 8008d72:	f000 fd03 	bl	800977c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e049      	b.n	8008e86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d106      	bne.n	8008e0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f841 	bl	8008e8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4610      	mov	r0, r2
 8008e20:	f000 fcac 	bl	800977c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
	...

08008ea4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d109      	bne.n	8008ec8 <HAL_TIM_PWM_Start+0x24>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	bf14      	ite	ne
 8008ec0:	2301      	movne	r3, #1
 8008ec2:	2300      	moveq	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	e03c      	b.n	8008f42 <HAL_TIM_PWM_Start+0x9e>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d109      	bne.n	8008ee2 <HAL_TIM_PWM_Start+0x3e>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	bf14      	ite	ne
 8008eda:	2301      	movne	r3, #1
 8008edc:	2300      	moveq	r3, #0
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	e02f      	b.n	8008f42 <HAL_TIM_PWM_Start+0x9e>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d109      	bne.n	8008efc <HAL_TIM_PWM_Start+0x58>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	bf14      	ite	ne
 8008ef4:	2301      	movne	r3, #1
 8008ef6:	2300      	moveq	r3, #0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	e022      	b.n	8008f42 <HAL_TIM_PWM_Start+0x9e>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b0c      	cmp	r3, #12
 8008f00:	d109      	bne.n	8008f16 <HAL_TIM_PWM_Start+0x72>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	bf14      	ite	ne
 8008f0e:	2301      	movne	r3, #1
 8008f10:	2300      	moveq	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	e015      	b.n	8008f42 <HAL_TIM_PWM_Start+0x9e>
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b10      	cmp	r3, #16
 8008f1a:	d109      	bne.n	8008f30 <HAL_TIM_PWM_Start+0x8c>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	bf14      	ite	ne
 8008f28:	2301      	movne	r3, #1
 8008f2a:	2300      	moveq	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	e008      	b.n	8008f42 <HAL_TIM_PWM_Start+0x9e>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	bf14      	ite	ne
 8008f3c:	2301      	movne	r3, #1
 8008f3e:	2300      	moveq	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e0a1      	b.n	800908e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d104      	bne.n	8008f5a <HAL_TIM_PWM_Start+0xb6>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f58:	e023      	b.n	8008fa2 <HAL_TIM_PWM_Start+0xfe>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d104      	bne.n	8008f6a <HAL_TIM_PWM_Start+0xc6>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f68:	e01b      	b.n	8008fa2 <HAL_TIM_PWM_Start+0xfe>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b08      	cmp	r3, #8
 8008f6e:	d104      	bne.n	8008f7a <HAL_TIM_PWM_Start+0xd6>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2202      	movs	r2, #2
 8008f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f78:	e013      	b.n	8008fa2 <HAL_TIM_PWM_Start+0xfe>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b0c      	cmp	r3, #12
 8008f7e:	d104      	bne.n	8008f8a <HAL_TIM_PWM_Start+0xe6>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2202      	movs	r2, #2
 8008f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f88:	e00b      	b.n	8008fa2 <HAL_TIM_PWM_Start+0xfe>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b10      	cmp	r3, #16
 8008f8e:	d104      	bne.n	8008f9a <HAL_TIM_PWM_Start+0xf6>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f98:	e003      	b.n	8008fa2 <HAL_TIM_PWM_Start+0xfe>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fff4 	bl	8009f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a38      	ldr	r2, [pc, #224]	; (8009098 <HAL_TIM_PWM_Start+0x1f4>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d013      	beq.n	8008fe2 <HAL_TIM_PWM_Start+0x13e>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a37      	ldr	r2, [pc, #220]	; (800909c <HAL_TIM_PWM_Start+0x1f8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00e      	beq.n	8008fe2 <HAL_TIM_PWM_Start+0x13e>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a35      	ldr	r2, [pc, #212]	; (80090a0 <HAL_TIM_PWM_Start+0x1fc>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d009      	beq.n	8008fe2 <HAL_TIM_PWM_Start+0x13e>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a34      	ldr	r2, [pc, #208]	; (80090a4 <HAL_TIM_PWM_Start+0x200>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d004      	beq.n	8008fe2 <HAL_TIM_PWM_Start+0x13e>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a32      	ldr	r2, [pc, #200]	; (80090a8 <HAL_TIM_PWM_Start+0x204>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d101      	bne.n	8008fe6 <HAL_TIM_PWM_Start+0x142>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e000      	b.n	8008fe8 <HAL_TIM_PWM_Start+0x144>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ffa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a25      	ldr	r2, [pc, #148]	; (8009098 <HAL_TIM_PWM_Start+0x1f4>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d022      	beq.n	800904c <HAL_TIM_PWM_Start+0x1a8>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800900e:	d01d      	beq.n	800904c <HAL_TIM_PWM_Start+0x1a8>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a25      	ldr	r2, [pc, #148]	; (80090ac <HAL_TIM_PWM_Start+0x208>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d018      	beq.n	800904c <HAL_TIM_PWM_Start+0x1a8>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a24      	ldr	r2, [pc, #144]	; (80090b0 <HAL_TIM_PWM_Start+0x20c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d013      	beq.n	800904c <HAL_TIM_PWM_Start+0x1a8>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a22      	ldr	r2, [pc, #136]	; (80090b4 <HAL_TIM_PWM_Start+0x210>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00e      	beq.n	800904c <HAL_TIM_PWM_Start+0x1a8>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1a      	ldr	r2, [pc, #104]	; (800909c <HAL_TIM_PWM_Start+0x1f8>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d009      	beq.n	800904c <HAL_TIM_PWM_Start+0x1a8>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a1e      	ldr	r2, [pc, #120]	; (80090b8 <HAL_TIM_PWM_Start+0x214>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_TIM_PWM_Start+0x1a8>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <HAL_TIM_PWM_Start+0x1fc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d115      	bne.n	8009078 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	4b1a      	ldr	r3, [pc, #104]	; (80090bc <HAL_TIM_PWM_Start+0x218>)
 8009054:	4013      	ands	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b06      	cmp	r3, #6
 800905c:	d015      	beq.n	800908a <HAL_TIM_PWM_Start+0x1e6>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009064:	d011      	beq.n	800908a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f042 0201 	orr.w	r2, r2, #1
 8009074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009076:	e008      	b.n	800908a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 0201 	orr.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	e000      	b.n	800908c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	40010000 	.word	0x40010000
 800909c:	40010400 	.word	0x40010400
 80090a0:	40014000 	.word	0x40014000
 80090a4:	40014400 	.word	0x40014400
 80090a8:	40014800 	.word	0x40014800
 80090ac:	40000400 	.word	0x40000400
 80090b0:	40000800 	.word	0x40000800
 80090b4:	40000c00 	.word	0x40000c00
 80090b8:	40001800 	.word	0x40001800
 80090bc:	00010007 	.word	0x00010007

080090c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d122      	bne.n	800911c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f003 0302 	and.w	r3, r3, #2
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d11b      	bne.n	800911c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f06f 0202 	mvn.w	r2, #2
 80090ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	f003 0303 	and.w	r3, r3, #3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fb1c 	bl	8009740 <HAL_TIM_IC_CaptureCallback>
 8009108:	e005      	b.n	8009116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fb0e 	bl	800972c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fb1f 	bl	8009754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f003 0304 	and.w	r3, r3, #4
 8009126:	2b04      	cmp	r3, #4
 8009128:	d122      	bne.n	8009170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f003 0304 	and.w	r3, r3, #4
 8009134:	2b04      	cmp	r3, #4
 8009136:	d11b      	bne.n	8009170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f06f 0204 	mvn.w	r2, #4
 8009140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2202      	movs	r2, #2
 8009146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 faf2 	bl	8009740 <HAL_TIM_IC_CaptureCallback>
 800915c:	e005      	b.n	800916a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fae4 	bl	800972c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 faf5 	bl	8009754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	f003 0308 	and.w	r3, r3, #8
 800917a:	2b08      	cmp	r3, #8
 800917c:	d122      	bne.n	80091c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f003 0308 	and.w	r3, r3, #8
 8009188:	2b08      	cmp	r3, #8
 800918a:	d11b      	bne.n	80091c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f06f 0208 	mvn.w	r2, #8
 8009194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2204      	movs	r2, #4
 800919a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fac8 	bl	8009740 <HAL_TIM_IC_CaptureCallback>
 80091b0:	e005      	b.n	80091be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 faba 	bl	800972c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 facb 	bl	8009754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f003 0310 	and.w	r3, r3, #16
 80091ce:	2b10      	cmp	r3, #16
 80091d0:	d122      	bne.n	8009218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b10      	cmp	r3, #16
 80091de:	d11b      	bne.n	8009218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f06f 0210 	mvn.w	r2, #16
 80091e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2208      	movs	r2, #8
 80091ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fa9e 	bl	8009740 <HAL_TIM_IC_CaptureCallback>
 8009204:	e005      	b.n	8009212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fa90 	bl	800972c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 faa1 	bl	8009754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b01      	cmp	r3, #1
 8009224:	d10e      	bne.n	8009244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b01      	cmp	r3, #1
 8009232:	d107      	bne.n	8009244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f06f 0201 	mvn.w	r2, #1
 800923c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa6a 	bl	8009718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924e:	2b80      	cmp	r3, #128	; 0x80
 8009250:	d10e      	bne.n	8009270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925c:	2b80      	cmp	r3, #128	; 0x80
 800925e:	d107      	bne.n	8009270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fff2 	bl	800a254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927e:	d10e      	bne.n	800929e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928a:	2b80      	cmp	r3, #128	; 0x80
 800928c:	d107      	bne.n	800929e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 ffe5 	bl	800a268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a8:	2b40      	cmp	r3, #64	; 0x40
 80092aa:	d10e      	bne.n	80092ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b6:	2b40      	cmp	r3, #64	; 0x40
 80092b8:	d107      	bne.n	80092ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fa4f 	bl	8009768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f003 0320 	and.w	r3, r3, #32
 80092d4:	2b20      	cmp	r3, #32
 80092d6:	d10e      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f003 0320 	and.w	r3, r3, #32
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d107      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f06f 0220 	mvn.w	r2, #32
 80092ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 ffa5 	bl	800a240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009316:	2b01      	cmp	r3, #1
 8009318:	d101      	bne.n	800931e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800931a:	2302      	movs	r3, #2
 800931c:	e0ff      	b.n	800951e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b14      	cmp	r3, #20
 800932a:	f200 80f0 	bhi.w	800950e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009389 	.word	0x08009389
 8009338:	0800950f 	.word	0x0800950f
 800933c:	0800950f 	.word	0x0800950f
 8009340:	0800950f 	.word	0x0800950f
 8009344:	080093c9 	.word	0x080093c9
 8009348:	0800950f 	.word	0x0800950f
 800934c:	0800950f 	.word	0x0800950f
 8009350:	0800950f 	.word	0x0800950f
 8009354:	0800940b 	.word	0x0800940b
 8009358:	0800950f 	.word	0x0800950f
 800935c:	0800950f 	.word	0x0800950f
 8009360:	0800950f 	.word	0x0800950f
 8009364:	0800944b 	.word	0x0800944b
 8009368:	0800950f 	.word	0x0800950f
 800936c:	0800950f 	.word	0x0800950f
 8009370:	0800950f 	.word	0x0800950f
 8009374:	0800948d 	.word	0x0800948d
 8009378:	0800950f 	.word	0x0800950f
 800937c:	0800950f 	.word	0x0800950f
 8009380:	0800950f 	.word	0x0800950f
 8009384:	080094cd 	.word	0x080094cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68b9      	ldr	r1, [r7, #8]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fa8e 	bl	80098b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0208 	orr.w	r2, r2, #8
 80093a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699a      	ldr	r2, [r3, #24]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0204 	bic.w	r2, r2, #4
 80093b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6999      	ldr	r1, [r3, #24]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	691a      	ldr	r2, [r3, #16]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	619a      	str	r2, [r3, #24]
      break;
 80093c6:	e0a5      	b.n	8009514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 fafe 	bl	80099d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	699a      	ldr	r2, [r3, #24]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6999      	ldr	r1, [r3, #24]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	021a      	lsls	r2, r3, #8
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	619a      	str	r2, [r3, #24]
      break;
 8009408:	e084      	b.n	8009514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	4618      	mov	r0, r3
 8009412:	f000 fb67 	bl	8009ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f042 0208 	orr.w	r2, r2, #8
 8009424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0204 	bic.w	r2, r2, #4
 8009434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69d9      	ldr	r1, [r3, #28]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	61da      	str	r2, [r3, #28]
      break;
 8009448:	e064      	b.n	8009514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68b9      	ldr	r1, [r7, #8]
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fbcf 	bl	8009bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69da      	ldr	r2, [r3, #28]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69da      	ldr	r2, [r3, #28]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69d9      	ldr	r1, [r3, #28]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	021a      	lsls	r2, r3, #8
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	61da      	str	r2, [r3, #28]
      break;
 800948a:	e043      	b.n	8009514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fc18 	bl	8009cc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0208 	orr.w	r2, r2, #8
 80094a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0204 	bic.w	r2, r2, #4
 80094b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	691a      	ldr	r2, [r3, #16]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094ca:	e023      	b.n	8009514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68b9      	ldr	r1, [r7, #8]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fc5c 	bl	8009d90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	021a      	lsls	r2, r3, #8
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800950c:	e002      	b.n	8009514 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	75fb      	strb	r3, [r7, #23]
      break;
 8009512:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop

08009528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <HAL_TIM_ConfigClockSource+0x1c>
 8009540:	2302      	movs	r3, #2
 8009542:	e0dc      	b.n	80096fe <HAL_TIM_ConfigClockSource+0x1d6>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	4b6a      	ldr	r3, [pc, #424]	; (8009708 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009560:	4013      	ands	r3, r2
 8009562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800956a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a64      	ldr	r2, [pc, #400]	; (800970c <HAL_TIM_ConfigClockSource+0x1e4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	f000 80a9 	beq.w	80096d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009580:	4a62      	ldr	r2, [pc, #392]	; (800970c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009582:	4293      	cmp	r3, r2
 8009584:	f200 80ae 	bhi.w	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009588:	4a61      	ldr	r2, [pc, #388]	; (8009710 <HAL_TIM_ConfigClockSource+0x1e8>)
 800958a:	4293      	cmp	r3, r2
 800958c:	f000 80a1 	beq.w	80096d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009590:	4a5f      	ldr	r2, [pc, #380]	; (8009710 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009592:	4293      	cmp	r3, r2
 8009594:	f200 80a6 	bhi.w	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009598:	4a5e      	ldr	r2, [pc, #376]	; (8009714 <HAL_TIM_ConfigClockSource+0x1ec>)
 800959a:	4293      	cmp	r3, r2
 800959c:	f000 8099 	beq.w	80096d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80095a0:	4a5c      	ldr	r2, [pc, #368]	; (8009714 <HAL_TIM_ConfigClockSource+0x1ec>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	f200 809e 	bhi.w	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80095a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095ac:	f000 8091 	beq.w	80096d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80095b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80095b4:	f200 8096 	bhi.w	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80095b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095bc:	f000 8089 	beq.w	80096d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80095c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095c4:	f200 808e 	bhi.w	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80095c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095cc:	d03e      	beq.n	800964c <HAL_TIM_ConfigClockSource+0x124>
 80095ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d2:	f200 8087 	bhi.w	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80095d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095da:	f000 8086 	beq.w	80096ea <HAL_TIM_ConfigClockSource+0x1c2>
 80095de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e2:	d87f      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80095e4:	2b70      	cmp	r3, #112	; 0x70
 80095e6:	d01a      	beq.n	800961e <HAL_TIM_ConfigClockSource+0xf6>
 80095e8:	2b70      	cmp	r3, #112	; 0x70
 80095ea:	d87b      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80095ec:	2b60      	cmp	r3, #96	; 0x60
 80095ee:	d050      	beq.n	8009692 <HAL_TIM_ConfigClockSource+0x16a>
 80095f0:	2b60      	cmp	r3, #96	; 0x60
 80095f2:	d877      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80095f4:	2b50      	cmp	r3, #80	; 0x50
 80095f6:	d03c      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x14a>
 80095f8:	2b50      	cmp	r3, #80	; 0x50
 80095fa:	d873      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80095fc:	2b40      	cmp	r3, #64	; 0x40
 80095fe:	d058      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x18a>
 8009600:	2b40      	cmp	r3, #64	; 0x40
 8009602:	d86f      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009604:	2b30      	cmp	r3, #48	; 0x30
 8009606:	d064      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009608:	2b30      	cmp	r3, #48	; 0x30
 800960a:	d86b      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800960c:	2b20      	cmp	r3, #32
 800960e:	d060      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009610:	2b20      	cmp	r3, #32
 8009612:	d867      	bhi.n	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009614:	2b00      	cmp	r3, #0
 8009616:	d05c      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009618:	2b10      	cmp	r3, #16
 800961a:	d05a      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800961c:	e062      	b.n	80096e4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	6899      	ldr	r1, [r3, #8]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f000 fc93 	bl	8009f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	609a      	str	r2, [r3, #8]
      break;
 800964a:	e04f      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6818      	ldr	r0, [r3, #0]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	6899      	ldr	r1, [r3, #8]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f000 fc7c 	bl	8009f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800966e:	609a      	str	r2, [r3, #8]
      break;
 8009670:	e03c      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6818      	ldr	r0, [r3, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	6859      	ldr	r1, [r3, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	461a      	mov	r2, r3
 8009680:	f000 fbec 	bl	8009e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2150      	movs	r1, #80	; 0x50
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fc46 	bl	8009f1c <TIM_ITRx_SetConfig>
      break;
 8009690:	e02c      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	6859      	ldr	r1, [r3, #4]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	461a      	mov	r2, r3
 80096a0:	f000 fc0b 	bl	8009eba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2160      	movs	r1, #96	; 0x60
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fc36 	bl	8009f1c <TIM_ITRx_SetConfig>
      break;
 80096b0:	e01c      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	6859      	ldr	r1, [r3, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	461a      	mov	r2, r3
 80096c0:	f000 fbcc 	bl	8009e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2140      	movs	r1, #64	; 0x40
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fc26 	bl	8009f1c <TIM_ITRx_SetConfig>
      break;
 80096d0:	e00c      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4619      	mov	r1, r3
 80096dc:	4610      	mov	r0, r2
 80096de:	f000 fc1d 	bl	8009f1c <TIM_ITRx_SetConfig>
      break;
 80096e2:	e003      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]
      break;
 80096e8:	e000      	b.n	80096ec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80096ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	ffceff88 	.word	0xffceff88
 800970c:	00100040 	.word	0x00100040
 8009710:	00100030 	.word	0x00100030
 8009714:	00100020 	.word	0x00100020

08009718 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a40      	ldr	r2, [pc, #256]	; (8009890 <TIM_Base_SetConfig+0x114>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d013      	beq.n	80097bc <TIM_Base_SetConfig+0x40>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800979a:	d00f      	beq.n	80097bc <TIM_Base_SetConfig+0x40>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a3d      	ldr	r2, [pc, #244]	; (8009894 <TIM_Base_SetConfig+0x118>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d00b      	beq.n	80097bc <TIM_Base_SetConfig+0x40>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a3c      	ldr	r2, [pc, #240]	; (8009898 <TIM_Base_SetConfig+0x11c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d007      	beq.n	80097bc <TIM_Base_SetConfig+0x40>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a3b      	ldr	r2, [pc, #236]	; (800989c <TIM_Base_SetConfig+0x120>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d003      	beq.n	80097bc <TIM_Base_SetConfig+0x40>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a3a      	ldr	r2, [pc, #232]	; (80098a0 <TIM_Base_SetConfig+0x124>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d108      	bne.n	80097ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a2f      	ldr	r2, [pc, #188]	; (8009890 <TIM_Base_SetConfig+0x114>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d01f      	beq.n	8009816 <TIM_Base_SetConfig+0x9a>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097dc:	d01b      	beq.n	8009816 <TIM_Base_SetConfig+0x9a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a2c      	ldr	r2, [pc, #176]	; (8009894 <TIM_Base_SetConfig+0x118>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d017      	beq.n	8009816 <TIM_Base_SetConfig+0x9a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a2b      	ldr	r2, [pc, #172]	; (8009898 <TIM_Base_SetConfig+0x11c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d013      	beq.n	8009816 <TIM_Base_SetConfig+0x9a>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a2a      	ldr	r2, [pc, #168]	; (800989c <TIM_Base_SetConfig+0x120>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d00f      	beq.n	8009816 <TIM_Base_SetConfig+0x9a>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a29      	ldr	r2, [pc, #164]	; (80098a0 <TIM_Base_SetConfig+0x124>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d00b      	beq.n	8009816 <TIM_Base_SetConfig+0x9a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a28      	ldr	r2, [pc, #160]	; (80098a4 <TIM_Base_SetConfig+0x128>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d007      	beq.n	8009816 <TIM_Base_SetConfig+0x9a>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a27      	ldr	r2, [pc, #156]	; (80098a8 <TIM_Base_SetConfig+0x12c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d003      	beq.n	8009816 <TIM_Base_SetConfig+0x9a>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a26      	ldr	r2, [pc, #152]	; (80098ac <TIM_Base_SetConfig+0x130>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d108      	bne.n	8009828 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800981c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	4313      	orrs	r3, r2
 8009826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a10      	ldr	r2, [pc, #64]	; (8009890 <TIM_Base_SetConfig+0x114>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d00f      	beq.n	8009874 <TIM_Base_SetConfig+0xf8>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a12      	ldr	r2, [pc, #72]	; (80098a0 <TIM_Base_SetConfig+0x124>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00b      	beq.n	8009874 <TIM_Base_SetConfig+0xf8>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a11      	ldr	r2, [pc, #68]	; (80098a4 <TIM_Base_SetConfig+0x128>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d007      	beq.n	8009874 <TIM_Base_SetConfig+0xf8>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a10      	ldr	r2, [pc, #64]	; (80098a8 <TIM_Base_SetConfig+0x12c>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d003      	beq.n	8009874 <TIM_Base_SetConfig+0xf8>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a0f      	ldr	r2, [pc, #60]	; (80098ac <TIM_Base_SetConfig+0x130>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d103      	bne.n	800987c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	691a      	ldr	r2, [r3, #16]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	615a      	str	r2, [r3, #20]
}
 8009882:	bf00      	nop
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	40010000 	.word	0x40010000
 8009894:	40000400 	.word	0x40000400
 8009898:	40000800 	.word	0x40000800
 800989c:	40000c00 	.word	0x40000c00
 80098a0:	40010400 	.word	0x40010400
 80098a4:	40014000 	.word	0x40014000
 80098a8:	40014400 	.word	0x40014400
 80098ac:	40014800 	.word	0x40014800

080098b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	f023 0201 	bic.w	r2, r3, #1
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4b37      	ldr	r3, [pc, #220]	; (80099b8 <TIM_OC1_SetConfig+0x108>)
 80098dc:	4013      	ands	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 0303 	bic.w	r3, r3, #3
 80098e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f023 0302 	bic.w	r3, r3, #2
 80098f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4313      	orrs	r3, r2
 8009902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a2d      	ldr	r2, [pc, #180]	; (80099bc <TIM_OC1_SetConfig+0x10c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d00f      	beq.n	800992c <TIM_OC1_SetConfig+0x7c>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a2c      	ldr	r2, [pc, #176]	; (80099c0 <TIM_OC1_SetConfig+0x110>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00b      	beq.n	800992c <TIM_OC1_SetConfig+0x7c>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a2b      	ldr	r2, [pc, #172]	; (80099c4 <TIM_OC1_SetConfig+0x114>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d007      	beq.n	800992c <TIM_OC1_SetConfig+0x7c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a2a      	ldr	r2, [pc, #168]	; (80099c8 <TIM_OC1_SetConfig+0x118>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_OC1_SetConfig+0x7c>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a29      	ldr	r2, [pc, #164]	; (80099cc <TIM_OC1_SetConfig+0x11c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d10c      	bne.n	8009946 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f023 0308 	bic.w	r3, r3, #8
 8009932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f023 0304 	bic.w	r3, r3, #4
 8009944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a1c      	ldr	r2, [pc, #112]	; (80099bc <TIM_OC1_SetConfig+0x10c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d00f      	beq.n	800996e <TIM_OC1_SetConfig+0xbe>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a1b      	ldr	r2, [pc, #108]	; (80099c0 <TIM_OC1_SetConfig+0x110>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d00b      	beq.n	800996e <TIM_OC1_SetConfig+0xbe>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a1a      	ldr	r2, [pc, #104]	; (80099c4 <TIM_OC1_SetConfig+0x114>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d007      	beq.n	800996e <TIM_OC1_SetConfig+0xbe>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a19      	ldr	r2, [pc, #100]	; (80099c8 <TIM_OC1_SetConfig+0x118>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d003      	beq.n	800996e <TIM_OC1_SetConfig+0xbe>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a18      	ldr	r2, [pc, #96]	; (80099cc <TIM_OC1_SetConfig+0x11c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d111      	bne.n	8009992 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800997c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	4313      	orrs	r3, r2
 8009986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	4313      	orrs	r3, r2
 8009990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	621a      	str	r2, [r3, #32]
}
 80099ac:	bf00      	nop
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	fffeff8f 	.word	0xfffeff8f
 80099bc:	40010000 	.word	0x40010000
 80099c0:	40010400 	.word	0x40010400
 80099c4:	40014000 	.word	0x40014000
 80099c8:	40014400 	.word	0x40014400
 80099cc:	40014800 	.word	0x40014800

080099d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	f023 0210 	bic.w	r2, r3, #16
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4b34      	ldr	r3, [pc, #208]	; (8009acc <TIM_OC2_SetConfig+0xfc>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	021b      	lsls	r3, r3, #8
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f023 0320 	bic.w	r3, r3, #32
 8009a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	011b      	lsls	r3, r3, #4
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a29      	ldr	r2, [pc, #164]	; (8009ad0 <TIM_OC2_SetConfig+0x100>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d003      	beq.n	8009a38 <TIM_OC2_SetConfig+0x68>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a28      	ldr	r2, [pc, #160]	; (8009ad4 <TIM_OC2_SetConfig+0x104>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d10d      	bne.n	8009a54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	011b      	lsls	r3, r3, #4
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1e      	ldr	r2, [pc, #120]	; (8009ad0 <TIM_OC2_SetConfig+0x100>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d00f      	beq.n	8009a7c <TIM_OC2_SetConfig+0xac>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a1d      	ldr	r2, [pc, #116]	; (8009ad4 <TIM_OC2_SetConfig+0x104>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d00b      	beq.n	8009a7c <TIM_OC2_SetConfig+0xac>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a1c      	ldr	r2, [pc, #112]	; (8009ad8 <TIM_OC2_SetConfig+0x108>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d007      	beq.n	8009a7c <TIM_OC2_SetConfig+0xac>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a1b      	ldr	r2, [pc, #108]	; (8009adc <TIM_OC2_SetConfig+0x10c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d003      	beq.n	8009a7c <TIM_OC2_SetConfig+0xac>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a1a      	ldr	r2, [pc, #104]	; (8009ae0 <TIM_OC2_SetConfig+0x110>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d113      	bne.n	8009aa4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	621a      	str	r2, [r3, #32]
}
 8009abe:	bf00      	nop
 8009ac0:	371c      	adds	r7, #28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	feff8fff 	.word	0xfeff8fff
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40010400 	.word	0x40010400
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	40014400 	.word	0x40014400
 8009ae0:	40014800 	.word	0x40014800

08009ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	4b33      	ldr	r3, [pc, #204]	; (8009bdc <TIM_OC3_SetConfig+0xf8>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f023 0303 	bic.w	r3, r3, #3
 8009b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a28      	ldr	r2, [pc, #160]	; (8009be0 <TIM_OC3_SetConfig+0xfc>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d003      	beq.n	8009b4a <TIM_OC3_SetConfig+0x66>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a27      	ldr	r2, [pc, #156]	; (8009be4 <TIM_OC3_SetConfig+0x100>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d10d      	bne.n	8009b66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a1d      	ldr	r2, [pc, #116]	; (8009be0 <TIM_OC3_SetConfig+0xfc>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d00f      	beq.n	8009b8e <TIM_OC3_SetConfig+0xaa>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a1c      	ldr	r2, [pc, #112]	; (8009be4 <TIM_OC3_SetConfig+0x100>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00b      	beq.n	8009b8e <TIM_OC3_SetConfig+0xaa>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a1b      	ldr	r2, [pc, #108]	; (8009be8 <TIM_OC3_SetConfig+0x104>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d007      	beq.n	8009b8e <TIM_OC3_SetConfig+0xaa>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a1a      	ldr	r2, [pc, #104]	; (8009bec <TIM_OC3_SetConfig+0x108>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d003      	beq.n	8009b8e <TIM_OC3_SetConfig+0xaa>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a19      	ldr	r2, [pc, #100]	; (8009bf0 <TIM_OC3_SetConfig+0x10c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d113      	bne.n	8009bb6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	621a      	str	r2, [r3, #32]
}
 8009bd0:	bf00      	nop
 8009bd2:	371c      	adds	r7, #28
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	fffeff8f 	.word	0xfffeff8f
 8009be0:	40010000 	.word	0x40010000
 8009be4:	40010400 	.word	0x40010400
 8009be8:	40014000 	.word	0x40014000
 8009bec:	40014400 	.word	0x40014400
 8009bf0:	40014800 	.word	0x40014800

08009bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	4b24      	ldr	r3, [pc, #144]	; (8009cb0 <TIM_OC4_SetConfig+0xbc>)
 8009c20:	4013      	ands	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	031b      	lsls	r3, r3, #12
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a19      	ldr	r2, [pc, #100]	; (8009cb4 <TIM_OC4_SetConfig+0xc0>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d00f      	beq.n	8009c74 <TIM_OC4_SetConfig+0x80>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a18      	ldr	r2, [pc, #96]	; (8009cb8 <TIM_OC4_SetConfig+0xc4>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d00b      	beq.n	8009c74 <TIM_OC4_SetConfig+0x80>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <TIM_OC4_SetConfig+0xc8>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d007      	beq.n	8009c74 <TIM_OC4_SetConfig+0x80>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a16      	ldr	r2, [pc, #88]	; (8009cc0 <TIM_OC4_SetConfig+0xcc>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d003      	beq.n	8009c74 <TIM_OC4_SetConfig+0x80>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a15      	ldr	r2, [pc, #84]	; (8009cc4 <TIM_OC4_SetConfig+0xd0>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d109      	bne.n	8009c88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	019b      	lsls	r3, r3, #6
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	621a      	str	r2, [r3, #32]
}
 8009ca2:	bf00      	nop
 8009ca4:	371c      	adds	r7, #28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	feff8fff 	.word	0xfeff8fff
 8009cb4:	40010000 	.word	0x40010000
 8009cb8:	40010400 	.word	0x40010400
 8009cbc:	40014000 	.word	0x40014000
 8009cc0:	40014400 	.word	0x40014400
 8009cc4:	40014800 	.word	0x40014800

08009cc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4b21      	ldr	r3, [pc, #132]	; (8009d78 <TIM_OC5_SetConfig+0xb0>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	041b      	lsls	r3, r3, #16
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a18      	ldr	r2, [pc, #96]	; (8009d7c <TIM_OC5_SetConfig+0xb4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d00f      	beq.n	8009d3e <TIM_OC5_SetConfig+0x76>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a17      	ldr	r2, [pc, #92]	; (8009d80 <TIM_OC5_SetConfig+0xb8>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d00b      	beq.n	8009d3e <TIM_OC5_SetConfig+0x76>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a16      	ldr	r2, [pc, #88]	; (8009d84 <TIM_OC5_SetConfig+0xbc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d007      	beq.n	8009d3e <TIM_OC5_SetConfig+0x76>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a15      	ldr	r2, [pc, #84]	; (8009d88 <TIM_OC5_SetConfig+0xc0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d003      	beq.n	8009d3e <TIM_OC5_SetConfig+0x76>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a14      	ldr	r2, [pc, #80]	; (8009d8c <TIM_OC5_SetConfig+0xc4>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d109      	bne.n	8009d52 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	021b      	lsls	r3, r3, #8
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	621a      	str	r2, [r3, #32]
}
 8009d6c:	bf00      	nop
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	fffeff8f 	.word	0xfffeff8f
 8009d7c:	40010000 	.word	0x40010000
 8009d80:	40010400 	.word	0x40010400
 8009d84:	40014000 	.word	0x40014000
 8009d88:	40014400 	.word	0x40014400
 8009d8c:	40014800 	.word	0x40014800

08009d90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4b22      	ldr	r3, [pc, #136]	; (8009e44 <TIM_OC6_SetConfig+0xb4>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	021b      	lsls	r3, r3, #8
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	051b      	lsls	r3, r3, #20
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a19      	ldr	r2, [pc, #100]	; (8009e48 <TIM_OC6_SetConfig+0xb8>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d00f      	beq.n	8009e08 <TIM_OC6_SetConfig+0x78>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a18      	ldr	r2, [pc, #96]	; (8009e4c <TIM_OC6_SetConfig+0xbc>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d00b      	beq.n	8009e08 <TIM_OC6_SetConfig+0x78>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a17      	ldr	r2, [pc, #92]	; (8009e50 <TIM_OC6_SetConfig+0xc0>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d007      	beq.n	8009e08 <TIM_OC6_SetConfig+0x78>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a16      	ldr	r2, [pc, #88]	; (8009e54 <TIM_OC6_SetConfig+0xc4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d003      	beq.n	8009e08 <TIM_OC6_SetConfig+0x78>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a15      	ldr	r2, [pc, #84]	; (8009e58 <TIM_OC6_SetConfig+0xc8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d109      	bne.n	8009e1c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	029b      	lsls	r3, r3, #10
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	621a      	str	r2, [r3, #32]
}
 8009e36:	bf00      	nop
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	feff8fff 	.word	0xfeff8fff
 8009e48:	40010000 	.word	0x40010000
 8009e4c:	40010400 	.word	0x40010400
 8009e50:	40014000 	.word	0x40014000
 8009e54:	40014400 	.word	0x40014400
 8009e58:	40014800 	.word	0x40014800

08009e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	f023 0201 	bic.w	r2, r3, #1
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	011b      	lsls	r3, r3, #4
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f023 030a 	bic.w	r3, r3, #10
 8009e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	621a      	str	r2, [r3, #32]
}
 8009eae:	bf00      	nop
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b087      	sub	sp, #28
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	f023 0210 	bic.w	r2, r3, #16
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	031b      	lsls	r3, r3, #12
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	621a      	str	r2, [r3, #32]
}
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	4b09      	ldr	r3, [pc, #36]	; (8009f54 <TIM_ITRx_SetConfig+0x38>)
 8009f30:	4013      	ands	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	f043 0307 	orr.w	r3, r3, #7
 8009f3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	609a      	str	r2, [r3, #8]
}
 8009f46:	bf00      	nop
 8009f48:	3714      	adds	r7, #20
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	ffcfff8f 	.word	0xffcfff8f

08009f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	021a      	lsls	r2, r3, #8
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	609a      	str	r2, [r3, #8]
}
 8009f8c:	bf00      	nop
 8009f8e:	371c      	adds	r7, #28
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f003 031f 	and.w	r3, r3, #31
 8009faa:	2201      	movs	r2, #1
 8009fac:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a1a      	ldr	r2, [r3, #32]
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	43db      	mvns	r3, r3
 8009fba:	401a      	ands	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6a1a      	ldr	r2, [r3, #32]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f003 031f 	and.w	r3, r3, #31
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	621a      	str	r2, [r3, #32]
}
 8009fd6:	bf00      	nop
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
	...

08009fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d101      	bne.n	8009ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	e06d      	b.n	800a0d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a30      	ldr	r2, [pc, #192]	; (800a0e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d004      	beq.n	800a030 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a2f      	ldr	r2, [pc, #188]	; (800a0e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d108      	bne.n	800a042 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a036:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	4313      	orrs	r3, r2
 800a040:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a048:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	4313      	orrs	r3, r2
 800a052:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a20      	ldr	r2, [pc, #128]	; (800a0e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d022      	beq.n	800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a06e:	d01d      	beq.n	800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a1d      	ldr	r2, [pc, #116]	; (800a0ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d018      	beq.n	800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a1c      	ldr	r2, [pc, #112]	; (800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d013      	beq.n	800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a1a      	ldr	r2, [pc, #104]	; (800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d00e      	beq.n	800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a15      	ldr	r2, [pc, #84]	; (800a0e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d009      	beq.n	800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a16      	ldr	r2, [pc, #88]	; (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d004      	beq.n	800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a15      	ldr	r2, [pc, #84]	; (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d10c      	bne.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	40010000 	.word	0x40010000
 800a0e8:	40010400 	.word	0x40010400
 800a0ec:	40000400 	.word	0x40000400
 800a0f0:	40000800 	.word	0x40000800
 800a0f4:	40000c00 	.word	0x40000c00
 800a0f8:	40001800 	.word	0x40001800
 800a0fc:	40014000 	.word	0x40014000

0800a100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a114:	2b01      	cmp	r3, #1
 800a116:	d101      	bne.n	800a11c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a118:	2302      	movs	r3, #2
 800a11a:	e087      	b.n	800a22c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	4313      	orrs	r3, r2
 800a130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4313      	orrs	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	4313      	orrs	r3, r2
 800a168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	4313      	orrs	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a182:	4313      	orrs	r3, r2
 800a184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	041b      	lsls	r3, r3, #16
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a27      	ldr	r2, [pc, #156]	; (800a238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d004      	beq.n	800a1aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a25      	ldr	r2, [pc, #148]	; (800a23c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d106      	bne.n	800a1b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a1e      	ldr	r2, [pc, #120]	; (800a238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d004      	beq.n	800a1cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a1d      	ldr	r2, [pc, #116]	; (800a23c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d126      	bne.n	800a21a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d6:	051b      	lsls	r3, r3, #20
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a0e      	ldr	r2, [pc, #56]	; (800a238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d004      	beq.n	800a20c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a0d      	ldr	r2, [pc, #52]	; (800a23c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d106      	bne.n	800a21a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a216:	4313      	orrs	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	40010000 	.word	0x40010000
 800a23c:	40010400 	.word	0x40010400

0800a240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e042      	b.n	800a314 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a294:	2b00      	cmp	r3, #0
 800a296:	d106      	bne.n	800a2a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7f7 fe4b 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2224      	movs	r2, #36	; 0x24
 800a2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0201 	bic.w	r2, r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8c2 	bl	800a448 <UART_SetConfig>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d101      	bne.n	800a2ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e022      	b.n	800a314 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d002      	beq.n	800a2dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 ff14 	bl	800b104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689a      	ldr	r2, [r3, #8]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0201 	orr.w	r2, r2, #1
 800a30a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 ff9b 	bl	800b248 <UART_CheckIdleState>
 800a312:	4603      	mov	r3, r0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08a      	sub	sp, #40	; 0x28
 800a320:	af02      	add	r7, sp, #8
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	603b      	str	r3, [r7, #0]
 800a328:	4613      	mov	r3, r2
 800a32a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a332:	2b20      	cmp	r3, #32
 800a334:	f040 8083 	bne.w	800a43e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_UART_Transmit+0x28>
 800a33e:	88fb      	ldrh	r3, [r7, #6]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e07b      	b.n	800a440 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d101      	bne.n	800a356 <HAL_UART_Transmit+0x3a>
 800a352:	2302      	movs	r3, #2
 800a354:	e074      	b.n	800a440 <HAL_UART_Transmit+0x124>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2221      	movs	r2, #33	; 0x21
 800a36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a36e:	f7f8 f843 	bl	80023f8 <HAL_GetTick>
 800a372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	88fa      	ldrh	r2, [r7, #6]
 800a378:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	88fa      	ldrh	r2, [r7, #6]
 800a380:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38c:	d108      	bne.n	800a3a0 <HAL_UART_Transmit+0x84>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d104      	bne.n	800a3a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a396:	2300      	movs	r3, #0
 800a398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	61bb      	str	r3, [r7, #24]
 800a39e:	e003      	b.n	800a3a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a3b0:	e02c      	b.n	800a40c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2180      	movs	r1, #128	; 0x80
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 ff8e 	bl	800b2de <UART_WaitOnFlagUntilTimeout>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e039      	b.n	800a440 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10b      	bne.n	800a3ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	3302      	adds	r3, #2
 800a3e6:	61bb      	str	r3, [r7, #24]
 800a3e8:	e007      	b.n	800a3fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	781a      	ldrb	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a400:	b29b      	uxth	r3, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	b29a      	uxth	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a412:	b29b      	uxth	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1cc      	bne.n	800a3b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2200      	movs	r2, #0
 800a420:	2140      	movs	r1, #64	; 0x40
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 ff5b 	bl	800b2de <UART_WaitOnFlagUntilTimeout>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e006      	b.n	800a440 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2220      	movs	r2, #32
 800a436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	e000      	b.n	800a440 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a43e:	2302      	movs	r3, #2
  }
}
 800a440:	4618      	mov	r0, r3
 800a442:	3720      	adds	r7, #32
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a448:	b5b0      	push	{r4, r5, r7, lr}
 800a44a:	b08e      	sub	sp, #56	; 0x38
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	689a      	ldr	r2, [r3, #8]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	431a      	orrs	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	431a      	orrs	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	4bbf      	ldr	r3, [pc, #764]	; (800a774 <UART_SetConfig+0x32c>)
 800a476:	4013      	ands	r3, r2
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	6812      	ldr	r2, [r2, #0]
 800a47c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a47e:	430b      	orrs	r3, r1
 800a480:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4ab5      	ldr	r2, [pc, #724]	; (800a778 <UART_SetConfig+0x330>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d004      	beq.n	800a4b2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a1b      	ldr	r3, [r3, #32]
 800a4ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	4bb0      	ldr	r3, [pc, #704]	; (800a77c <UART_SetConfig+0x334>)
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6812      	ldr	r2, [r2, #0]
 800a4c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	f023 010f 	bic.w	r1, r3, #15
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4aa7      	ldr	r2, [pc, #668]	; (800a780 <UART_SetConfig+0x338>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d176      	bne.n	800a5d4 <UART_SetConfig+0x18c>
 800a4e6:	4ba7      	ldr	r3, [pc, #668]	; (800a784 <UART_SetConfig+0x33c>)
 800a4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4ee:	2b28      	cmp	r3, #40	; 0x28
 800a4f0:	d86c      	bhi.n	800a5cc <UART_SetConfig+0x184>
 800a4f2:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <UART_SetConfig+0xb0>)
 800a4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f8:	0800a59d 	.word	0x0800a59d
 800a4fc:	0800a5cd 	.word	0x0800a5cd
 800a500:	0800a5cd 	.word	0x0800a5cd
 800a504:	0800a5cd 	.word	0x0800a5cd
 800a508:	0800a5cd 	.word	0x0800a5cd
 800a50c:	0800a5cd 	.word	0x0800a5cd
 800a510:	0800a5cd 	.word	0x0800a5cd
 800a514:	0800a5cd 	.word	0x0800a5cd
 800a518:	0800a5a5 	.word	0x0800a5a5
 800a51c:	0800a5cd 	.word	0x0800a5cd
 800a520:	0800a5cd 	.word	0x0800a5cd
 800a524:	0800a5cd 	.word	0x0800a5cd
 800a528:	0800a5cd 	.word	0x0800a5cd
 800a52c:	0800a5cd 	.word	0x0800a5cd
 800a530:	0800a5cd 	.word	0x0800a5cd
 800a534:	0800a5cd 	.word	0x0800a5cd
 800a538:	0800a5ad 	.word	0x0800a5ad
 800a53c:	0800a5cd 	.word	0x0800a5cd
 800a540:	0800a5cd 	.word	0x0800a5cd
 800a544:	0800a5cd 	.word	0x0800a5cd
 800a548:	0800a5cd 	.word	0x0800a5cd
 800a54c:	0800a5cd 	.word	0x0800a5cd
 800a550:	0800a5cd 	.word	0x0800a5cd
 800a554:	0800a5cd 	.word	0x0800a5cd
 800a558:	0800a5b5 	.word	0x0800a5b5
 800a55c:	0800a5cd 	.word	0x0800a5cd
 800a560:	0800a5cd 	.word	0x0800a5cd
 800a564:	0800a5cd 	.word	0x0800a5cd
 800a568:	0800a5cd 	.word	0x0800a5cd
 800a56c:	0800a5cd 	.word	0x0800a5cd
 800a570:	0800a5cd 	.word	0x0800a5cd
 800a574:	0800a5cd 	.word	0x0800a5cd
 800a578:	0800a5bd 	.word	0x0800a5bd
 800a57c:	0800a5cd 	.word	0x0800a5cd
 800a580:	0800a5cd 	.word	0x0800a5cd
 800a584:	0800a5cd 	.word	0x0800a5cd
 800a588:	0800a5cd 	.word	0x0800a5cd
 800a58c:	0800a5cd 	.word	0x0800a5cd
 800a590:	0800a5cd 	.word	0x0800a5cd
 800a594:	0800a5cd 	.word	0x0800a5cd
 800a598:	0800a5c5 	.word	0x0800a5c5
 800a59c:	2301      	movs	r3, #1
 800a59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a2:	e326      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a5a4:	2304      	movs	r3, #4
 800a5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5aa:	e322      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a5ac:	2308      	movs	r3, #8
 800a5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b2:	e31e      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a5b4:	2310      	movs	r3, #16
 800a5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ba:	e31a      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a5bc:	2320      	movs	r3, #32
 800a5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c2:	e316      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a5c4:	2340      	movs	r3, #64	; 0x40
 800a5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ca:	e312      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a5cc:	2380      	movs	r3, #128	; 0x80
 800a5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d2:	e30e      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a6b      	ldr	r2, [pc, #428]	; (800a788 <UART_SetConfig+0x340>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d130      	bne.n	800a640 <UART_SetConfig+0x1f8>
 800a5de:	4b69      	ldr	r3, [pc, #420]	; (800a784 <UART_SetConfig+0x33c>)
 800a5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	2b05      	cmp	r3, #5
 800a5e8:	d826      	bhi.n	800a638 <UART_SetConfig+0x1f0>
 800a5ea:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <UART_SetConfig+0x1a8>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a609 	.word	0x0800a609
 800a5f4:	0800a611 	.word	0x0800a611
 800a5f8:	0800a619 	.word	0x0800a619
 800a5fc:	0800a621 	.word	0x0800a621
 800a600:	0800a629 	.word	0x0800a629
 800a604:	0800a631 	.word	0x0800a631
 800a608:	2300      	movs	r3, #0
 800a60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60e:	e2f0      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a610:	2304      	movs	r3, #4
 800a612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a616:	e2ec      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a618:	2308      	movs	r3, #8
 800a61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a61e:	e2e8      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a620:	2310      	movs	r3, #16
 800a622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a626:	e2e4      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a628:	2320      	movs	r3, #32
 800a62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62e:	e2e0      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a630:	2340      	movs	r3, #64	; 0x40
 800a632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a636:	e2dc      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a638:	2380      	movs	r3, #128	; 0x80
 800a63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63e:	e2d8      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a51      	ldr	r2, [pc, #324]	; (800a78c <UART_SetConfig+0x344>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d130      	bne.n	800a6ac <UART_SetConfig+0x264>
 800a64a:	4b4e      	ldr	r3, [pc, #312]	; (800a784 <UART_SetConfig+0x33c>)
 800a64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64e:	f003 0307 	and.w	r3, r3, #7
 800a652:	2b05      	cmp	r3, #5
 800a654:	d826      	bhi.n	800a6a4 <UART_SetConfig+0x25c>
 800a656:	a201      	add	r2, pc, #4	; (adr r2, 800a65c <UART_SetConfig+0x214>)
 800a658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65c:	0800a675 	.word	0x0800a675
 800a660:	0800a67d 	.word	0x0800a67d
 800a664:	0800a685 	.word	0x0800a685
 800a668:	0800a68d 	.word	0x0800a68d
 800a66c:	0800a695 	.word	0x0800a695
 800a670:	0800a69d 	.word	0x0800a69d
 800a674:	2300      	movs	r3, #0
 800a676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67a:	e2ba      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a67c:	2304      	movs	r3, #4
 800a67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a682:	e2b6      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a684:	2308      	movs	r3, #8
 800a686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68a:	e2b2      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a68c:	2310      	movs	r3, #16
 800a68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a692:	e2ae      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a694:	2320      	movs	r3, #32
 800a696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69a:	e2aa      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a69c:	2340      	movs	r3, #64	; 0x40
 800a69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a2:	e2a6      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a6a4:	2380      	movs	r3, #128	; 0x80
 800a6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6aa:	e2a2      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a37      	ldr	r2, [pc, #220]	; (800a790 <UART_SetConfig+0x348>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d130      	bne.n	800a718 <UART_SetConfig+0x2d0>
 800a6b6:	4b33      	ldr	r3, [pc, #204]	; (800a784 <UART_SetConfig+0x33c>)
 800a6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ba:	f003 0307 	and.w	r3, r3, #7
 800a6be:	2b05      	cmp	r3, #5
 800a6c0:	d826      	bhi.n	800a710 <UART_SetConfig+0x2c8>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <UART_SetConfig+0x280>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a6e1 	.word	0x0800a6e1
 800a6cc:	0800a6e9 	.word	0x0800a6e9
 800a6d0:	0800a6f1 	.word	0x0800a6f1
 800a6d4:	0800a6f9 	.word	0x0800a6f9
 800a6d8:	0800a701 	.word	0x0800a701
 800a6dc:	0800a709 	.word	0x0800a709
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e6:	e284      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a6e8:	2304      	movs	r3, #4
 800a6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ee:	e280      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a6f0:	2308      	movs	r3, #8
 800a6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f6:	e27c      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a6f8:	2310      	movs	r3, #16
 800a6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fe:	e278      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a700:	2320      	movs	r3, #32
 800a702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a706:	e274      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a708:	2340      	movs	r3, #64	; 0x40
 800a70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a70e:	e270      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a710:	2380      	movs	r3, #128	; 0x80
 800a712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a716:	e26c      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a1d      	ldr	r2, [pc, #116]	; (800a794 <UART_SetConfig+0x34c>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d142      	bne.n	800a7a8 <UART_SetConfig+0x360>
 800a722:	4b18      	ldr	r3, [pc, #96]	; (800a784 <UART_SetConfig+0x33c>)
 800a724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a726:	f003 0307 	and.w	r3, r3, #7
 800a72a:	2b05      	cmp	r3, #5
 800a72c:	d838      	bhi.n	800a7a0 <UART_SetConfig+0x358>
 800a72e:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <UART_SetConfig+0x2ec>)
 800a730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a734:	0800a74d 	.word	0x0800a74d
 800a738:	0800a755 	.word	0x0800a755
 800a73c:	0800a75d 	.word	0x0800a75d
 800a740:	0800a765 	.word	0x0800a765
 800a744:	0800a76d 	.word	0x0800a76d
 800a748:	0800a799 	.word	0x0800a799
 800a74c:	2300      	movs	r3, #0
 800a74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a752:	e24e      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a754:	2304      	movs	r3, #4
 800a756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75a:	e24a      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a75c:	2308      	movs	r3, #8
 800a75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a762:	e246      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a764:	2310      	movs	r3, #16
 800a766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76a:	e242      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a76c:	2320      	movs	r3, #32
 800a76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a772:	e23e      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a774:	cfff69f3 	.word	0xcfff69f3
 800a778:	58000c00 	.word	0x58000c00
 800a77c:	11fff4ff 	.word	0x11fff4ff
 800a780:	40011000 	.word	0x40011000
 800a784:	58024400 	.word	0x58024400
 800a788:	40004400 	.word	0x40004400
 800a78c:	40004800 	.word	0x40004800
 800a790:	40004c00 	.word	0x40004c00
 800a794:	40005000 	.word	0x40005000
 800a798:	2340      	movs	r3, #64	; 0x40
 800a79a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a79e:	e228      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a7a0:	2380      	movs	r3, #128	; 0x80
 800a7a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a6:	e224      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4ab1      	ldr	r2, [pc, #708]	; (800aa74 <UART_SetConfig+0x62c>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d176      	bne.n	800a8a0 <UART_SetConfig+0x458>
 800a7b2:	4bb1      	ldr	r3, [pc, #708]	; (800aa78 <UART_SetConfig+0x630>)
 800a7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7ba:	2b28      	cmp	r3, #40	; 0x28
 800a7bc:	d86c      	bhi.n	800a898 <UART_SetConfig+0x450>
 800a7be:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <UART_SetConfig+0x37c>)
 800a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c4:	0800a869 	.word	0x0800a869
 800a7c8:	0800a899 	.word	0x0800a899
 800a7cc:	0800a899 	.word	0x0800a899
 800a7d0:	0800a899 	.word	0x0800a899
 800a7d4:	0800a899 	.word	0x0800a899
 800a7d8:	0800a899 	.word	0x0800a899
 800a7dc:	0800a899 	.word	0x0800a899
 800a7e0:	0800a899 	.word	0x0800a899
 800a7e4:	0800a871 	.word	0x0800a871
 800a7e8:	0800a899 	.word	0x0800a899
 800a7ec:	0800a899 	.word	0x0800a899
 800a7f0:	0800a899 	.word	0x0800a899
 800a7f4:	0800a899 	.word	0x0800a899
 800a7f8:	0800a899 	.word	0x0800a899
 800a7fc:	0800a899 	.word	0x0800a899
 800a800:	0800a899 	.word	0x0800a899
 800a804:	0800a879 	.word	0x0800a879
 800a808:	0800a899 	.word	0x0800a899
 800a80c:	0800a899 	.word	0x0800a899
 800a810:	0800a899 	.word	0x0800a899
 800a814:	0800a899 	.word	0x0800a899
 800a818:	0800a899 	.word	0x0800a899
 800a81c:	0800a899 	.word	0x0800a899
 800a820:	0800a899 	.word	0x0800a899
 800a824:	0800a881 	.word	0x0800a881
 800a828:	0800a899 	.word	0x0800a899
 800a82c:	0800a899 	.word	0x0800a899
 800a830:	0800a899 	.word	0x0800a899
 800a834:	0800a899 	.word	0x0800a899
 800a838:	0800a899 	.word	0x0800a899
 800a83c:	0800a899 	.word	0x0800a899
 800a840:	0800a899 	.word	0x0800a899
 800a844:	0800a889 	.word	0x0800a889
 800a848:	0800a899 	.word	0x0800a899
 800a84c:	0800a899 	.word	0x0800a899
 800a850:	0800a899 	.word	0x0800a899
 800a854:	0800a899 	.word	0x0800a899
 800a858:	0800a899 	.word	0x0800a899
 800a85c:	0800a899 	.word	0x0800a899
 800a860:	0800a899 	.word	0x0800a899
 800a864:	0800a891 	.word	0x0800a891
 800a868:	2301      	movs	r3, #1
 800a86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a86e:	e1c0      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a870:	2304      	movs	r3, #4
 800a872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a876:	e1bc      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a878:	2308      	movs	r3, #8
 800a87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a87e:	e1b8      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a880:	2310      	movs	r3, #16
 800a882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a886:	e1b4      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a888:	2320      	movs	r3, #32
 800a88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88e:	e1b0      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a890:	2340      	movs	r3, #64	; 0x40
 800a892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a896:	e1ac      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a898:	2380      	movs	r3, #128	; 0x80
 800a89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a89e:	e1a8      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a75      	ldr	r2, [pc, #468]	; (800aa7c <UART_SetConfig+0x634>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d130      	bne.n	800a90c <UART_SetConfig+0x4c4>
 800a8aa:	4b73      	ldr	r3, [pc, #460]	; (800aa78 <UART_SetConfig+0x630>)
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ae:	f003 0307 	and.w	r3, r3, #7
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	d826      	bhi.n	800a904 <UART_SetConfig+0x4bc>
 800a8b6:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <UART_SetConfig+0x474>)
 800a8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8bc:	0800a8d5 	.word	0x0800a8d5
 800a8c0:	0800a8dd 	.word	0x0800a8dd
 800a8c4:	0800a8e5 	.word	0x0800a8e5
 800a8c8:	0800a8ed 	.word	0x0800a8ed
 800a8cc:	0800a8f5 	.word	0x0800a8f5
 800a8d0:	0800a8fd 	.word	0x0800a8fd
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8da:	e18a      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a8dc:	2304      	movs	r3, #4
 800a8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8e2:	e186      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a8e4:	2308      	movs	r3, #8
 800a8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ea:	e182      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a8ec:	2310      	movs	r3, #16
 800a8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8f2:	e17e      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a8f4:	2320      	movs	r3, #32
 800a8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8fa:	e17a      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a902:	e176      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a904:	2380      	movs	r3, #128	; 0x80
 800a906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a90a:	e172      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a5b      	ldr	r2, [pc, #364]	; (800aa80 <UART_SetConfig+0x638>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d130      	bne.n	800a978 <UART_SetConfig+0x530>
 800a916:	4b58      	ldr	r3, [pc, #352]	; (800aa78 <UART_SetConfig+0x630>)
 800a918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91a:	f003 0307 	and.w	r3, r3, #7
 800a91e:	2b05      	cmp	r3, #5
 800a920:	d826      	bhi.n	800a970 <UART_SetConfig+0x528>
 800a922:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <UART_SetConfig+0x4e0>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a941 	.word	0x0800a941
 800a92c:	0800a949 	.word	0x0800a949
 800a930:	0800a951 	.word	0x0800a951
 800a934:	0800a959 	.word	0x0800a959
 800a938:	0800a961 	.word	0x0800a961
 800a93c:	0800a969 	.word	0x0800a969
 800a940:	2300      	movs	r3, #0
 800a942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a946:	e154      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a948:	2304      	movs	r3, #4
 800a94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a94e:	e150      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a950:	2308      	movs	r3, #8
 800a952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a956:	e14c      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a958:	2310      	movs	r3, #16
 800a95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95e:	e148      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a960:	2320      	movs	r3, #32
 800a962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a966:	e144      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a968:	2340      	movs	r3, #64	; 0x40
 800a96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a96e:	e140      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a970:	2380      	movs	r3, #128	; 0x80
 800a972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a976:	e13c      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a41      	ldr	r2, [pc, #260]	; (800aa84 <UART_SetConfig+0x63c>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	f040 8082 	bne.w	800aa88 <UART_SetConfig+0x640>
 800a984:	4b3c      	ldr	r3, [pc, #240]	; (800aa78 <UART_SetConfig+0x630>)
 800a986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a988:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a98c:	2b28      	cmp	r3, #40	; 0x28
 800a98e:	d86d      	bhi.n	800aa6c <UART_SetConfig+0x624>
 800a990:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <UART_SetConfig+0x550>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800aa3d 	.word	0x0800aa3d
 800a99c:	0800aa6d 	.word	0x0800aa6d
 800a9a0:	0800aa6d 	.word	0x0800aa6d
 800a9a4:	0800aa6d 	.word	0x0800aa6d
 800a9a8:	0800aa6d 	.word	0x0800aa6d
 800a9ac:	0800aa6d 	.word	0x0800aa6d
 800a9b0:	0800aa6d 	.word	0x0800aa6d
 800a9b4:	0800aa6d 	.word	0x0800aa6d
 800a9b8:	0800aa45 	.word	0x0800aa45
 800a9bc:	0800aa6d 	.word	0x0800aa6d
 800a9c0:	0800aa6d 	.word	0x0800aa6d
 800a9c4:	0800aa6d 	.word	0x0800aa6d
 800a9c8:	0800aa6d 	.word	0x0800aa6d
 800a9cc:	0800aa6d 	.word	0x0800aa6d
 800a9d0:	0800aa6d 	.word	0x0800aa6d
 800a9d4:	0800aa6d 	.word	0x0800aa6d
 800a9d8:	0800aa4d 	.word	0x0800aa4d
 800a9dc:	0800aa6d 	.word	0x0800aa6d
 800a9e0:	0800aa6d 	.word	0x0800aa6d
 800a9e4:	0800aa6d 	.word	0x0800aa6d
 800a9e8:	0800aa6d 	.word	0x0800aa6d
 800a9ec:	0800aa6d 	.word	0x0800aa6d
 800a9f0:	0800aa6d 	.word	0x0800aa6d
 800a9f4:	0800aa6d 	.word	0x0800aa6d
 800a9f8:	0800aa55 	.word	0x0800aa55
 800a9fc:	0800aa6d 	.word	0x0800aa6d
 800aa00:	0800aa6d 	.word	0x0800aa6d
 800aa04:	0800aa6d 	.word	0x0800aa6d
 800aa08:	0800aa6d 	.word	0x0800aa6d
 800aa0c:	0800aa6d 	.word	0x0800aa6d
 800aa10:	0800aa6d 	.word	0x0800aa6d
 800aa14:	0800aa6d 	.word	0x0800aa6d
 800aa18:	0800aa5d 	.word	0x0800aa5d
 800aa1c:	0800aa6d 	.word	0x0800aa6d
 800aa20:	0800aa6d 	.word	0x0800aa6d
 800aa24:	0800aa6d 	.word	0x0800aa6d
 800aa28:	0800aa6d 	.word	0x0800aa6d
 800aa2c:	0800aa6d 	.word	0x0800aa6d
 800aa30:	0800aa6d 	.word	0x0800aa6d
 800aa34:	0800aa6d 	.word	0x0800aa6d
 800aa38:	0800aa65 	.word	0x0800aa65
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa42:	e0d6      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800aa44:	2304      	movs	r3, #4
 800aa46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa4a:	e0d2      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800aa4c:	2308      	movs	r3, #8
 800aa4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa52:	e0ce      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800aa54:	2310      	movs	r3, #16
 800aa56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa5a:	e0ca      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800aa5c:	2320      	movs	r3, #32
 800aa5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa62:	e0c6      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800aa64:	2340      	movs	r3, #64	; 0x40
 800aa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa6a:	e0c2      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800aa6c:	2380      	movs	r3, #128	; 0x80
 800aa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa72:	e0be      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800aa74:	40011400 	.word	0x40011400
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	40007800 	.word	0x40007800
 800aa80:	40007c00 	.word	0x40007c00
 800aa84:	40011800 	.word	0x40011800
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4aad      	ldr	r2, [pc, #692]	; (800ad44 <UART_SetConfig+0x8fc>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d176      	bne.n	800ab80 <UART_SetConfig+0x738>
 800aa92:	4bad      	ldr	r3, [pc, #692]	; (800ad48 <UART_SetConfig+0x900>)
 800aa94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa9a:	2b28      	cmp	r3, #40	; 0x28
 800aa9c:	d86c      	bhi.n	800ab78 <UART_SetConfig+0x730>
 800aa9e:	a201      	add	r2, pc, #4	; (adr r2, 800aaa4 <UART_SetConfig+0x65c>)
 800aaa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa4:	0800ab49 	.word	0x0800ab49
 800aaa8:	0800ab79 	.word	0x0800ab79
 800aaac:	0800ab79 	.word	0x0800ab79
 800aab0:	0800ab79 	.word	0x0800ab79
 800aab4:	0800ab79 	.word	0x0800ab79
 800aab8:	0800ab79 	.word	0x0800ab79
 800aabc:	0800ab79 	.word	0x0800ab79
 800aac0:	0800ab79 	.word	0x0800ab79
 800aac4:	0800ab51 	.word	0x0800ab51
 800aac8:	0800ab79 	.word	0x0800ab79
 800aacc:	0800ab79 	.word	0x0800ab79
 800aad0:	0800ab79 	.word	0x0800ab79
 800aad4:	0800ab79 	.word	0x0800ab79
 800aad8:	0800ab79 	.word	0x0800ab79
 800aadc:	0800ab79 	.word	0x0800ab79
 800aae0:	0800ab79 	.word	0x0800ab79
 800aae4:	0800ab59 	.word	0x0800ab59
 800aae8:	0800ab79 	.word	0x0800ab79
 800aaec:	0800ab79 	.word	0x0800ab79
 800aaf0:	0800ab79 	.word	0x0800ab79
 800aaf4:	0800ab79 	.word	0x0800ab79
 800aaf8:	0800ab79 	.word	0x0800ab79
 800aafc:	0800ab79 	.word	0x0800ab79
 800ab00:	0800ab79 	.word	0x0800ab79
 800ab04:	0800ab61 	.word	0x0800ab61
 800ab08:	0800ab79 	.word	0x0800ab79
 800ab0c:	0800ab79 	.word	0x0800ab79
 800ab10:	0800ab79 	.word	0x0800ab79
 800ab14:	0800ab79 	.word	0x0800ab79
 800ab18:	0800ab79 	.word	0x0800ab79
 800ab1c:	0800ab79 	.word	0x0800ab79
 800ab20:	0800ab79 	.word	0x0800ab79
 800ab24:	0800ab69 	.word	0x0800ab69
 800ab28:	0800ab79 	.word	0x0800ab79
 800ab2c:	0800ab79 	.word	0x0800ab79
 800ab30:	0800ab79 	.word	0x0800ab79
 800ab34:	0800ab79 	.word	0x0800ab79
 800ab38:	0800ab79 	.word	0x0800ab79
 800ab3c:	0800ab79 	.word	0x0800ab79
 800ab40:	0800ab79 	.word	0x0800ab79
 800ab44:	0800ab71 	.word	0x0800ab71
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4e:	e050      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800ab50:	2304      	movs	r3, #4
 800ab52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab56:	e04c      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800ab58:	2308      	movs	r3, #8
 800ab5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab5e:	e048      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800ab60:	2310      	movs	r3, #16
 800ab62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab66:	e044      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800ab68:	2320      	movs	r3, #32
 800ab6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab6e:	e040      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800ab70:	2340      	movs	r3, #64	; 0x40
 800ab72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab76:	e03c      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800ab78:	2380      	movs	r3, #128	; 0x80
 800ab7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab7e:	e038      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a71      	ldr	r2, [pc, #452]	; (800ad4c <UART_SetConfig+0x904>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d130      	bne.n	800abec <UART_SetConfig+0x7a4>
 800ab8a:	4b6f      	ldr	r3, [pc, #444]	; (800ad48 <UART_SetConfig+0x900>)
 800ab8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab8e:	f003 0307 	and.w	r3, r3, #7
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	d826      	bhi.n	800abe4 <UART_SetConfig+0x79c>
 800ab96:	a201      	add	r2, pc, #4	; (adr r2, 800ab9c <UART_SetConfig+0x754>)
 800ab98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9c:	0800abb5 	.word	0x0800abb5
 800aba0:	0800abbd 	.word	0x0800abbd
 800aba4:	0800abc5 	.word	0x0800abc5
 800aba8:	0800abcd 	.word	0x0800abcd
 800abac:	0800abd5 	.word	0x0800abd5
 800abb0:	0800abdd 	.word	0x0800abdd
 800abb4:	2302      	movs	r3, #2
 800abb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abba:	e01a      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800abbc:	2304      	movs	r3, #4
 800abbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abc2:	e016      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800abc4:	2308      	movs	r3, #8
 800abc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abca:	e012      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800abcc:	2310      	movs	r3, #16
 800abce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abd2:	e00e      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800abd4:	2320      	movs	r3, #32
 800abd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abda:	e00a      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800abdc:	2340      	movs	r3, #64	; 0x40
 800abde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abe2:	e006      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800abe4:	2380      	movs	r3, #128	; 0x80
 800abe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abea:	e002      	b.n	800abf2 <UART_SetConfig+0x7aa>
 800abec:	2380      	movs	r3, #128	; 0x80
 800abee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a55      	ldr	r2, [pc, #340]	; (800ad4c <UART_SetConfig+0x904>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	f040 80f0 	bne.w	800adde <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac02:	2b20      	cmp	r3, #32
 800ac04:	dc46      	bgt.n	800ac94 <UART_SetConfig+0x84c>
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	db75      	blt.n	800acf6 <UART_SetConfig+0x8ae>
 800ac0a:	3b02      	subs	r3, #2
 800ac0c:	2b1e      	cmp	r3, #30
 800ac0e:	d872      	bhi.n	800acf6 <UART_SetConfig+0x8ae>
 800ac10:	a201      	add	r2, pc, #4	; (adr r2, 800ac18 <UART_SetConfig+0x7d0>)
 800ac12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac16:	bf00      	nop
 800ac18:	0800ac9b 	.word	0x0800ac9b
 800ac1c:	0800acf7 	.word	0x0800acf7
 800ac20:	0800aca3 	.word	0x0800aca3
 800ac24:	0800acf7 	.word	0x0800acf7
 800ac28:	0800acf7 	.word	0x0800acf7
 800ac2c:	0800acf7 	.word	0x0800acf7
 800ac30:	0800acb3 	.word	0x0800acb3
 800ac34:	0800acf7 	.word	0x0800acf7
 800ac38:	0800acf7 	.word	0x0800acf7
 800ac3c:	0800acf7 	.word	0x0800acf7
 800ac40:	0800acf7 	.word	0x0800acf7
 800ac44:	0800acf7 	.word	0x0800acf7
 800ac48:	0800acf7 	.word	0x0800acf7
 800ac4c:	0800acf7 	.word	0x0800acf7
 800ac50:	0800acc3 	.word	0x0800acc3
 800ac54:	0800acf7 	.word	0x0800acf7
 800ac58:	0800acf7 	.word	0x0800acf7
 800ac5c:	0800acf7 	.word	0x0800acf7
 800ac60:	0800acf7 	.word	0x0800acf7
 800ac64:	0800acf7 	.word	0x0800acf7
 800ac68:	0800acf7 	.word	0x0800acf7
 800ac6c:	0800acf7 	.word	0x0800acf7
 800ac70:	0800acf7 	.word	0x0800acf7
 800ac74:	0800acf7 	.word	0x0800acf7
 800ac78:	0800acf7 	.word	0x0800acf7
 800ac7c:	0800acf7 	.word	0x0800acf7
 800ac80:	0800acf7 	.word	0x0800acf7
 800ac84:	0800acf7 	.word	0x0800acf7
 800ac88:	0800acf7 	.word	0x0800acf7
 800ac8c:	0800acf7 	.word	0x0800acf7
 800ac90:	0800ace9 	.word	0x0800ace9
 800ac94:	2b40      	cmp	r3, #64	; 0x40
 800ac96:	d02a      	beq.n	800acee <UART_SetConfig+0x8a6>
 800ac98:	e02d      	b.n	800acf6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac9a:	f7fc fa17 	bl	80070cc <HAL_RCCEx_GetD3PCLK1Freq>
 800ac9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aca0:	e02f      	b.n	800ad02 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aca2:	f107 0314 	add.w	r3, r7, #20
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fc fa26 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acb0:	e027      	b.n	800ad02 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acb2:	f107 0308 	add.w	r3, r7, #8
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fc fb72 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acc0:	e01f      	b.n	800ad02 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acc2:	4b21      	ldr	r3, [pc, #132]	; (800ad48 <UART_SetConfig+0x900>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0320 	and.w	r3, r3, #32
 800acca:	2b00      	cmp	r3, #0
 800accc:	d009      	beq.n	800ace2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acce:	4b1e      	ldr	r3, [pc, #120]	; (800ad48 <UART_SetConfig+0x900>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	08db      	lsrs	r3, r3, #3
 800acd4:	f003 0303 	and.w	r3, r3, #3
 800acd8:	4a1d      	ldr	r2, [pc, #116]	; (800ad50 <UART_SetConfig+0x908>)
 800acda:	fa22 f303 	lsr.w	r3, r2, r3
 800acde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ace0:	e00f      	b.n	800ad02 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800ace2:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <UART_SetConfig+0x908>)
 800ace4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ace6:	e00c      	b.n	800ad02 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ace8:	4b1a      	ldr	r3, [pc, #104]	; (800ad54 <UART_SetConfig+0x90c>)
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acec:	e009      	b.n	800ad02 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acf4:	e005      	b.n	800ad02 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ad00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 81e6 	beq.w	800b0d6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	4a12      	ldr	r2, [pc, #72]	; (800ad58 <UART_SetConfig+0x910>)
 800ad10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad14:	461a      	mov	r2, r3
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad1c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	4613      	mov	r3, r2
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	4413      	add	r3, r2
 800ad28:	6a3a      	ldr	r2, [r7, #32]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d305      	bcc.n	800ad3a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad34:	6a3a      	ldr	r2, [r7, #32]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d910      	bls.n	800ad5c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad40:	e1c9      	b.n	800b0d6 <UART_SetConfig+0xc8e>
 800ad42:	bf00      	nop
 800ad44:	40011c00 	.word	0x40011c00
 800ad48:	58024400 	.word	0x58024400
 800ad4c:	58000c00 	.word	0x58000c00
 800ad50:	03d09000 	.word	0x03d09000
 800ad54:	003d0900 	.word	0x003d0900
 800ad58:	0800c638 	.word	0x0800c638
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f04f 0100 	mov.w	r1, #0
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	4ac1      	ldr	r2, [pc, #772]	; (800b070 <UART_SetConfig+0xc28>)
 800ad6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	f04f 0300 	mov.w	r3, #0
 800ad74:	f7f5 fb0c 	bl	8000390 <__aeabi_uldivmod>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4619      	mov	r1, r3
 800ad80:	f04f 0200 	mov.w	r2, #0
 800ad84:	f04f 0300 	mov.w	r3, #0
 800ad88:	020b      	lsls	r3, r1, #8
 800ad8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad8e:	0202      	lsls	r2, r0, #8
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	6849      	ldr	r1, [r1, #4]
 800ad94:	0849      	lsrs	r1, r1, #1
 800ad96:	4608      	mov	r0, r1
 800ad98:	f04f 0100 	mov.w	r1, #0
 800ad9c:	1814      	adds	r4, r2, r0
 800ad9e:	eb43 0501 	adc.w	r5, r3, r1
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	461a      	mov	r2, r3
 800ada8:	f04f 0300 	mov.w	r3, #0
 800adac:	4620      	mov	r0, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	f7f5 faee 	bl	8000390 <__aeabi_uldivmod>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4613      	mov	r3, r2
 800adba:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adc2:	d308      	bcc.n	800add6 <UART_SetConfig+0x98e>
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adca:	d204      	bcs.n	800add6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800add2:	60da      	str	r2, [r3, #12]
 800add4:	e17f      	b.n	800b0d6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800addc:	e17b      	b.n	800b0d6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ade6:	f040 80bd 	bne.w	800af64 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800adea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adee:	2b20      	cmp	r3, #32
 800adf0:	dc48      	bgt.n	800ae84 <UART_SetConfig+0xa3c>
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	db7b      	blt.n	800aeee <UART_SetConfig+0xaa6>
 800adf6:	2b20      	cmp	r3, #32
 800adf8:	d879      	bhi.n	800aeee <UART_SetConfig+0xaa6>
 800adfa:	a201      	add	r2, pc, #4	; (adr r2, 800ae00 <UART_SetConfig+0x9b8>)
 800adfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae00:	0800ae8b 	.word	0x0800ae8b
 800ae04:	0800ae93 	.word	0x0800ae93
 800ae08:	0800aeef 	.word	0x0800aeef
 800ae0c:	0800aeef 	.word	0x0800aeef
 800ae10:	0800ae9b 	.word	0x0800ae9b
 800ae14:	0800aeef 	.word	0x0800aeef
 800ae18:	0800aeef 	.word	0x0800aeef
 800ae1c:	0800aeef 	.word	0x0800aeef
 800ae20:	0800aeab 	.word	0x0800aeab
 800ae24:	0800aeef 	.word	0x0800aeef
 800ae28:	0800aeef 	.word	0x0800aeef
 800ae2c:	0800aeef 	.word	0x0800aeef
 800ae30:	0800aeef 	.word	0x0800aeef
 800ae34:	0800aeef 	.word	0x0800aeef
 800ae38:	0800aeef 	.word	0x0800aeef
 800ae3c:	0800aeef 	.word	0x0800aeef
 800ae40:	0800aebb 	.word	0x0800aebb
 800ae44:	0800aeef 	.word	0x0800aeef
 800ae48:	0800aeef 	.word	0x0800aeef
 800ae4c:	0800aeef 	.word	0x0800aeef
 800ae50:	0800aeef 	.word	0x0800aeef
 800ae54:	0800aeef 	.word	0x0800aeef
 800ae58:	0800aeef 	.word	0x0800aeef
 800ae5c:	0800aeef 	.word	0x0800aeef
 800ae60:	0800aeef 	.word	0x0800aeef
 800ae64:	0800aeef 	.word	0x0800aeef
 800ae68:	0800aeef 	.word	0x0800aeef
 800ae6c:	0800aeef 	.word	0x0800aeef
 800ae70:	0800aeef 	.word	0x0800aeef
 800ae74:	0800aeef 	.word	0x0800aeef
 800ae78:	0800aeef 	.word	0x0800aeef
 800ae7c:	0800aeef 	.word	0x0800aeef
 800ae80:	0800aee1 	.word	0x0800aee1
 800ae84:	2b40      	cmp	r3, #64	; 0x40
 800ae86:	d02e      	beq.n	800aee6 <UART_SetConfig+0xa9e>
 800ae88:	e031      	b.n	800aeee <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae8a:	f7fa fdbd 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 800ae8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae90:	e033      	b.n	800aefa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae92:	f7fa fdcf 	bl	8005a34 <HAL_RCC_GetPCLK2Freq>
 800ae96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae98:	e02f      	b.n	800aefa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae9a:	f107 0314 	add.w	r3, r7, #20
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fc f92a 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aea8:	e027      	b.n	800aefa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeaa:	f107 0308 	add.w	r3, r7, #8
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fc fa76 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeb8:	e01f      	b.n	800aefa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeba:	4b6e      	ldr	r3, [pc, #440]	; (800b074 <UART_SetConfig+0xc2c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0320 	and.w	r3, r3, #32
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d009      	beq.n	800aeda <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aec6:	4b6b      	ldr	r3, [pc, #428]	; (800b074 <UART_SetConfig+0xc2c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	08db      	lsrs	r3, r3, #3
 800aecc:	f003 0303 	and.w	r3, r3, #3
 800aed0:	4a69      	ldr	r2, [pc, #420]	; (800b078 <UART_SetConfig+0xc30>)
 800aed2:	fa22 f303 	lsr.w	r3, r2, r3
 800aed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aed8:	e00f      	b.n	800aefa <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800aeda:	4b67      	ldr	r3, [pc, #412]	; (800b078 <UART_SetConfig+0xc30>)
 800aedc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aede:	e00c      	b.n	800aefa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aee0:	4b66      	ldr	r3, [pc, #408]	; (800b07c <UART_SetConfig+0xc34>)
 800aee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aee4:	e009      	b.n	800aefa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeec:	e005      	b.n	800aefa <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 80ea 	beq.w	800b0d6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af06:	4a5a      	ldr	r2, [pc, #360]	; (800b070 <UART_SetConfig+0xc28>)
 800af08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af0c:	461a      	mov	r2, r3
 800af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af10:	fbb3 f3f2 	udiv	r3, r3, r2
 800af14:	005a      	lsls	r2, r3, #1
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	085b      	lsrs	r3, r3, #1
 800af1c:	441a      	add	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	fbb2 f3f3 	udiv	r3, r2, r3
 800af26:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	2b0f      	cmp	r3, #15
 800af2c:	d916      	bls.n	800af5c <UART_SetConfig+0xb14>
 800af2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af34:	d212      	bcs.n	800af5c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	b29b      	uxth	r3, r3
 800af3a:	f023 030f 	bic.w	r3, r3, #15
 800af3e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	085b      	lsrs	r3, r3, #1
 800af44:	b29b      	uxth	r3, r3
 800af46:	f003 0307 	and.w	r3, r3, #7
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af4e:	4313      	orrs	r3, r2
 800af50:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800af58:	60da      	str	r2, [r3, #12]
 800af5a:	e0bc      	b.n	800b0d6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800af62:	e0b8      	b.n	800b0d6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af68:	2b20      	cmp	r3, #32
 800af6a:	dc4b      	bgt.n	800b004 <UART_SetConfig+0xbbc>
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f2c0 8087 	blt.w	800b080 <UART_SetConfig+0xc38>
 800af72:	2b20      	cmp	r3, #32
 800af74:	f200 8084 	bhi.w	800b080 <UART_SetConfig+0xc38>
 800af78:	a201      	add	r2, pc, #4	; (adr r2, 800af80 <UART_SetConfig+0xb38>)
 800af7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7e:	bf00      	nop
 800af80:	0800b00b 	.word	0x0800b00b
 800af84:	0800b013 	.word	0x0800b013
 800af88:	0800b081 	.word	0x0800b081
 800af8c:	0800b081 	.word	0x0800b081
 800af90:	0800b01b 	.word	0x0800b01b
 800af94:	0800b081 	.word	0x0800b081
 800af98:	0800b081 	.word	0x0800b081
 800af9c:	0800b081 	.word	0x0800b081
 800afa0:	0800b02b 	.word	0x0800b02b
 800afa4:	0800b081 	.word	0x0800b081
 800afa8:	0800b081 	.word	0x0800b081
 800afac:	0800b081 	.word	0x0800b081
 800afb0:	0800b081 	.word	0x0800b081
 800afb4:	0800b081 	.word	0x0800b081
 800afb8:	0800b081 	.word	0x0800b081
 800afbc:	0800b081 	.word	0x0800b081
 800afc0:	0800b03b 	.word	0x0800b03b
 800afc4:	0800b081 	.word	0x0800b081
 800afc8:	0800b081 	.word	0x0800b081
 800afcc:	0800b081 	.word	0x0800b081
 800afd0:	0800b081 	.word	0x0800b081
 800afd4:	0800b081 	.word	0x0800b081
 800afd8:	0800b081 	.word	0x0800b081
 800afdc:	0800b081 	.word	0x0800b081
 800afe0:	0800b081 	.word	0x0800b081
 800afe4:	0800b081 	.word	0x0800b081
 800afe8:	0800b081 	.word	0x0800b081
 800afec:	0800b081 	.word	0x0800b081
 800aff0:	0800b081 	.word	0x0800b081
 800aff4:	0800b081 	.word	0x0800b081
 800aff8:	0800b081 	.word	0x0800b081
 800affc:	0800b081 	.word	0x0800b081
 800b000:	0800b061 	.word	0x0800b061
 800b004:	2b40      	cmp	r3, #64	; 0x40
 800b006:	d02e      	beq.n	800b066 <UART_SetConfig+0xc1e>
 800b008:	e03a      	b.n	800b080 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b00a:	f7fa fcfd 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 800b00e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b010:	e03c      	b.n	800b08c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b012:	f7fa fd0f 	bl	8005a34 <HAL_RCC_GetPCLK2Freq>
 800b016:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b018:	e038      	b.n	800b08c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b01a:	f107 0314 	add.w	r3, r7, #20
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fc f86a 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b028:	e030      	b.n	800b08c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b02a:	f107 0308 	add.w	r3, r7, #8
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fc f9b6 	bl	80073a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b038:	e028      	b.n	800b08c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b03a:	4b0e      	ldr	r3, [pc, #56]	; (800b074 <UART_SetConfig+0xc2c>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0320 	and.w	r3, r3, #32
 800b042:	2b00      	cmp	r3, #0
 800b044:	d009      	beq.n	800b05a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b046:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <UART_SetConfig+0xc2c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	08db      	lsrs	r3, r3, #3
 800b04c:	f003 0303 	and.w	r3, r3, #3
 800b050:	4a09      	ldr	r2, [pc, #36]	; (800b078 <UART_SetConfig+0xc30>)
 800b052:	fa22 f303 	lsr.w	r3, r2, r3
 800b056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b058:	e018      	b.n	800b08c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800b05a:	4b07      	ldr	r3, [pc, #28]	; (800b078 <UART_SetConfig+0xc30>)
 800b05c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b05e:	e015      	b.n	800b08c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b060:	4b06      	ldr	r3, [pc, #24]	; (800b07c <UART_SetConfig+0xc34>)
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b064:	e012      	b.n	800b08c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b06a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b06c:	e00e      	b.n	800b08c <UART_SetConfig+0xc44>
 800b06e:	bf00      	nop
 800b070:	0800c638 	.word	0x0800c638
 800b074:	58024400 	.word	0x58024400
 800b078:	03d09000 	.word	0x03d09000
 800b07c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b080:	2300      	movs	r3, #0
 800b082:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b08a:	bf00      	nop
    }

    if (pclk != 0U)
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d021      	beq.n	800b0d6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b096:	4a1a      	ldr	r2, [pc, #104]	; (800b100 <UART_SetConfig+0xcb8>)
 800b098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b09c:	461a      	mov	r2, r3
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a0:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	085b      	lsrs	r3, r3, #1
 800b0aa:	441a      	add	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	2b0f      	cmp	r3, #15
 800b0ba:	d909      	bls.n	800b0d0 <UART_SetConfig+0xc88>
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c2:	d205      	bcs.n	800b0d0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	60da      	str	r2, [r3, #12]
 800b0ce:	e002      	b.n	800b0d6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b0f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3738      	adds	r7, #56	; 0x38
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bdb0      	pop	{r4, r5, r7, pc}
 800b0fe:	bf00      	nop
 800b100:	0800c638 	.word	0x0800c638

0800b104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00a      	beq.n	800b12e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b154:	f003 0304 	and.w	r3, r3, #4
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00a      	beq.n	800b172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b176:	f003 0308 	and.w	r3, r3, #8
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	430a      	orrs	r2, r1
 800b192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b198:	f003 0310 	and.w	r3, r3, #16
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00a      	beq.n	800b1b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00a      	beq.n	800b1d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01a      	beq.n	800b21a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b202:	d10a      	bne.n	800b21a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00a      	beq.n	800b23c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	430a      	orrs	r2, r1
 800b23a:	605a      	str	r2, [r3, #4]
  }
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b258:	f7f7 f8ce 	bl	80023f8 <HAL_GetTick>
 800b25c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0308 	and.w	r3, r3, #8
 800b268:	2b08      	cmp	r3, #8
 800b26a:	d10e      	bne.n	800b28a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b26c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f82f 	bl	800b2de <UART_WaitOnFlagUntilTimeout>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b286:	2303      	movs	r3, #3
 800b288:	e025      	b.n	800b2d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 0304 	and.w	r3, r3, #4
 800b294:	2b04      	cmp	r3, #4
 800b296:	d10e      	bne.n	800b2b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f819 	bl	800b2de <UART_WaitOnFlagUntilTimeout>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e00f      	b.n	800b2d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b09c      	sub	sp, #112	; 0x70
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	603b      	str	r3, [r7, #0]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2ee:	e0a9      	b.n	800b444 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f6:	f000 80a5 	beq.w	800b444 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2fa:	f7f7 f87d 	bl	80023f8 <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b306:	429a      	cmp	r2, r3
 800b308:	d302      	bcc.n	800b310 <UART_WaitOnFlagUntilTimeout+0x32>
 800b30a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d140      	bne.n	800b392 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b324:	667b      	str	r3, [r7, #100]	; 0x64
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	461a      	mov	r2, r3
 800b32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b32e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b330:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b33c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e6      	bne.n	800b310 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3308      	adds	r3, #8
 800b348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34c:	e853 3f00 	ldrex	r3, [r3]
 800b350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b354:	f023 0301 	bic.w	r3, r3, #1
 800b358:	663b      	str	r3, [r7, #96]	; 0x60
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3308      	adds	r3, #8
 800b360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b362:	64ba      	str	r2, [r7, #72]	; 0x48
 800b364:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b36a:	e841 2300 	strex	r3, r2, [r1]
 800b36e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1e5      	bne.n	800b342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2220      	movs	r2, #32
 800b37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2220      	movs	r2, #32
 800b382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b38e:	2303      	movs	r3, #3
 800b390:	e069      	b.n	800b466 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0304 	and.w	r3, r3, #4
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d051      	beq.n	800b444 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3ae:	d149      	bne.n	800b444 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	e853 3f00 	ldrex	r3, [r3]
 800b3c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3e0:	e841 2300 	strex	r3, r2, [r1]
 800b3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1e6      	bne.n	800b3ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	e853 3f00 	ldrex	r3, [r3]
 800b3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f023 0301 	bic.w	r3, r3, #1
 800b402:	66bb      	str	r3, [r7, #104]	; 0x68
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	3308      	adds	r3, #8
 800b40a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b40c:	623a      	str	r2, [r7, #32]
 800b40e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	69f9      	ldr	r1, [r7, #28]
 800b412:	6a3a      	ldr	r2, [r7, #32]
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	61bb      	str	r3, [r7, #24]
   return(result);
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e5      	bne.n	800b3ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2220      	movs	r2, #32
 800b424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2220      	movs	r2, #32
 800b42c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2220      	movs	r2, #32
 800b434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	e010      	b.n	800b466 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	69da      	ldr	r2, [r3, #28]
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	4013      	ands	r3, r2
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	429a      	cmp	r2, r3
 800b452:	bf0c      	ite	eq
 800b454:	2301      	moveq	r3, #1
 800b456:	2300      	movne	r3, #0
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	461a      	mov	r2, r3
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	429a      	cmp	r2, r3
 800b460:	f43f af46 	beq.w	800b2f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3770      	adds	r7, #112	; 0x70
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <HAL_UARTEx_DisableFifoMode+0x16>
 800b480:	2302      	movs	r3, #2
 800b482:	e027      	b.n	800b4d4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2224      	movs	r2, #36	; 0x24
 800b490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0201 	bic.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b4b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d101      	bne.n	800b4f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	e02d      	b.n	800b554 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2224      	movs	r2, #36	; 0x24
 800b504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f022 0201 	bic.w	r2, r2, #1
 800b51e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	430a      	orrs	r2, r1
 800b532:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f84f 	bl	800b5d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2220      	movs	r2, #32
 800b546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d101      	bne.n	800b574 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b570:	2302      	movs	r3, #2
 800b572:	e02d      	b.n	800b5d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2224      	movs	r2, #36	; 0x24
 800b580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f022 0201 	bic.w	r2, r2, #1
 800b59a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	430a      	orrs	r2, r1
 800b5ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f811 	bl	800b5d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2220      	movs	r2, #32
 800b5c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d108      	bne.n	800b5fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5f8:	e031      	b.n	800b65e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5fa:	2310      	movs	r3, #16
 800b5fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5fe:	2310      	movs	r3, #16
 800b600:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	0e5b      	lsrs	r3, r3, #25
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	f003 0307 	and.w	r3, r3, #7
 800b610:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	0f5b      	lsrs	r3, r3, #29
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	f003 0307 	and.w	r3, r3, #7
 800b620:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b622:	7bbb      	ldrb	r3, [r7, #14]
 800b624:	7b3a      	ldrb	r2, [r7, #12]
 800b626:	4911      	ldr	r1, [pc, #68]	; (800b66c <UARTEx_SetNbDataToProcess+0x94>)
 800b628:	5c8a      	ldrb	r2, [r1, r2]
 800b62a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b62e:	7b3a      	ldrb	r2, [r7, #12]
 800b630:	490f      	ldr	r1, [pc, #60]	; (800b670 <UARTEx_SetNbDataToProcess+0x98>)
 800b632:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b634:	fb93 f3f2 	sdiv	r3, r3, r2
 800b638:	b29a      	uxth	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	7b7a      	ldrb	r2, [r7, #13]
 800b644:	4909      	ldr	r1, [pc, #36]	; (800b66c <UARTEx_SetNbDataToProcess+0x94>)
 800b646:	5c8a      	ldrb	r2, [r1, r2]
 800b648:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b64c:	7b7a      	ldrb	r2, [r7, #13]
 800b64e:	4908      	ldr	r1, [pc, #32]	; (800b670 <UARTEx_SetNbDataToProcess+0x98>)
 800b650:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b652:	fb93 f3f2 	sdiv	r3, r3, r2
 800b656:	b29a      	uxth	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b65e:	bf00      	nop
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	0800c650 	.word	0x0800c650
 800b670:	0800c658 	.word	0x0800c658

0800b674 <__errno>:
 800b674:	4b01      	ldr	r3, [pc, #4]	; (800b67c <__errno+0x8>)
 800b676:	6818      	ldr	r0, [r3, #0]
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	24000018 	.word	0x24000018

0800b680 <__libc_init_array>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	4d0d      	ldr	r5, [pc, #52]	; (800b6b8 <__libc_init_array+0x38>)
 800b684:	4c0d      	ldr	r4, [pc, #52]	; (800b6bc <__libc_init_array+0x3c>)
 800b686:	1b64      	subs	r4, r4, r5
 800b688:	10a4      	asrs	r4, r4, #2
 800b68a:	2600      	movs	r6, #0
 800b68c:	42a6      	cmp	r6, r4
 800b68e:	d109      	bne.n	800b6a4 <__libc_init_array+0x24>
 800b690:	4d0b      	ldr	r5, [pc, #44]	; (800b6c0 <__libc_init_array+0x40>)
 800b692:	4c0c      	ldr	r4, [pc, #48]	; (800b6c4 <__libc_init_array+0x44>)
 800b694:	f000 ff84 	bl	800c5a0 <_init>
 800b698:	1b64      	subs	r4, r4, r5
 800b69a:	10a4      	asrs	r4, r4, #2
 800b69c:	2600      	movs	r6, #0
 800b69e:	42a6      	cmp	r6, r4
 800b6a0:	d105      	bne.n	800b6ae <__libc_init_array+0x2e>
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a8:	4798      	blx	r3
 800b6aa:	3601      	adds	r6, #1
 800b6ac:	e7ee      	b.n	800b68c <__libc_init_array+0xc>
 800b6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b2:	4798      	blx	r3
 800b6b4:	3601      	adds	r6, #1
 800b6b6:	e7f2      	b.n	800b69e <__libc_init_array+0x1e>
 800b6b8:	0800c700 	.word	0x0800c700
 800b6bc:	0800c700 	.word	0x0800c700
 800b6c0:	0800c700 	.word	0x0800c700
 800b6c4:	0800c704 	.word	0x0800c704

0800b6c8 <memcpy>:
 800b6c8:	440a      	add	r2, r1
 800b6ca:	4291      	cmp	r1, r2
 800b6cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6d0:	d100      	bne.n	800b6d4 <memcpy+0xc>
 800b6d2:	4770      	bx	lr
 800b6d4:	b510      	push	{r4, lr}
 800b6d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6de:	4291      	cmp	r1, r2
 800b6e0:	d1f9      	bne.n	800b6d6 <memcpy+0xe>
 800b6e2:	bd10      	pop	{r4, pc}

0800b6e4 <memset>:
 800b6e4:	4402      	add	r2, r0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d100      	bne.n	800b6ee <memset+0xa>
 800b6ec:	4770      	bx	lr
 800b6ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b6f2:	e7f9      	b.n	800b6e8 <memset+0x4>

0800b6f4 <iprintf>:
 800b6f4:	b40f      	push	{r0, r1, r2, r3}
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <iprintf+0x2c>)
 800b6f8:	b513      	push	{r0, r1, r4, lr}
 800b6fa:	681c      	ldr	r4, [r3, #0]
 800b6fc:	b124      	cbz	r4, 800b708 <iprintf+0x14>
 800b6fe:	69a3      	ldr	r3, [r4, #24]
 800b700:	b913      	cbnz	r3, 800b708 <iprintf+0x14>
 800b702:	4620      	mov	r0, r4
 800b704:	f000 f866 	bl	800b7d4 <__sinit>
 800b708:	ab05      	add	r3, sp, #20
 800b70a:	9a04      	ldr	r2, [sp, #16]
 800b70c:	68a1      	ldr	r1, [r4, #8]
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	4620      	mov	r0, r4
 800b712:	f000 f983 	bl	800ba1c <_vfiprintf_r>
 800b716:	b002      	add	sp, #8
 800b718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b71c:	b004      	add	sp, #16
 800b71e:	4770      	bx	lr
 800b720:	24000018 	.word	0x24000018

0800b724 <std>:
 800b724:	2300      	movs	r3, #0
 800b726:	b510      	push	{r4, lr}
 800b728:	4604      	mov	r4, r0
 800b72a:	e9c0 3300 	strd	r3, r3, [r0]
 800b72e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b732:	6083      	str	r3, [r0, #8]
 800b734:	8181      	strh	r1, [r0, #12]
 800b736:	6643      	str	r3, [r0, #100]	; 0x64
 800b738:	81c2      	strh	r2, [r0, #14]
 800b73a:	6183      	str	r3, [r0, #24]
 800b73c:	4619      	mov	r1, r3
 800b73e:	2208      	movs	r2, #8
 800b740:	305c      	adds	r0, #92	; 0x5c
 800b742:	f7ff ffcf 	bl	800b6e4 <memset>
 800b746:	4b05      	ldr	r3, [pc, #20]	; (800b75c <std+0x38>)
 800b748:	6263      	str	r3, [r4, #36]	; 0x24
 800b74a:	4b05      	ldr	r3, [pc, #20]	; (800b760 <std+0x3c>)
 800b74c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <std+0x40>)
 800b750:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b752:	4b05      	ldr	r3, [pc, #20]	; (800b768 <std+0x44>)
 800b754:	6224      	str	r4, [r4, #32]
 800b756:	6323      	str	r3, [r4, #48]	; 0x30
 800b758:	bd10      	pop	{r4, pc}
 800b75a:	bf00      	nop
 800b75c:	0800bfc5 	.word	0x0800bfc5
 800b760:	0800bfe7 	.word	0x0800bfe7
 800b764:	0800c01f 	.word	0x0800c01f
 800b768:	0800c043 	.word	0x0800c043

0800b76c <_cleanup_r>:
 800b76c:	4901      	ldr	r1, [pc, #4]	; (800b774 <_cleanup_r+0x8>)
 800b76e:	f000 b8af 	b.w	800b8d0 <_fwalk_reent>
 800b772:	bf00      	nop
 800b774:	0800c31d 	.word	0x0800c31d

0800b778 <__sfmoreglue>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	1e4a      	subs	r2, r1, #1
 800b77c:	2568      	movs	r5, #104	; 0x68
 800b77e:	4355      	muls	r5, r2
 800b780:	460e      	mov	r6, r1
 800b782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b786:	f000 f8c5 	bl	800b914 <_malloc_r>
 800b78a:	4604      	mov	r4, r0
 800b78c:	b140      	cbz	r0, 800b7a0 <__sfmoreglue+0x28>
 800b78e:	2100      	movs	r1, #0
 800b790:	e9c0 1600 	strd	r1, r6, [r0]
 800b794:	300c      	adds	r0, #12
 800b796:	60a0      	str	r0, [r4, #8]
 800b798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b79c:	f7ff ffa2 	bl	800b6e4 <memset>
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}

0800b7a4 <__sfp_lock_acquire>:
 800b7a4:	4801      	ldr	r0, [pc, #4]	; (800b7ac <__sfp_lock_acquire+0x8>)
 800b7a6:	f000 b8b3 	b.w	800b910 <__retarget_lock_acquire_recursive>
 800b7aa:	bf00      	nop
 800b7ac:	24000500 	.word	0x24000500

0800b7b0 <__sfp_lock_release>:
 800b7b0:	4801      	ldr	r0, [pc, #4]	; (800b7b8 <__sfp_lock_release+0x8>)
 800b7b2:	f000 b8ae 	b.w	800b912 <__retarget_lock_release_recursive>
 800b7b6:	bf00      	nop
 800b7b8:	24000500 	.word	0x24000500

0800b7bc <__sinit_lock_acquire>:
 800b7bc:	4801      	ldr	r0, [pc, #4]	; (800b7c4 <__sinit_lock_acquire+0x8>)
 800b7be:	f000 b8a7 	b.w	800b910 <__retarget_lock_acquire_recursive>
 800b7c2:	bf00      	nop
 800b7c4:	240004fb 	.word	0x240004fb

0800b7c8 <__sinit_lock_release>:
 800b7c8:	4801      	ldr	r0, [pc, #4]	; (800b7d0 <__sinit_lock_release+0x8>)
 800b7ca:	f000 b8a2 	b.w	800b912 <__retarget_lock_release_recursive>
 800b7ce:	bf00      	nop
 800b7d0:	240004fb 	.word	0x240004fb

0800b7d4 <__sinit>:
 800b7d4:	b510      	push	{r4, lr}
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	f7ff fff0 	bl	800b7bc <__sinit_lock_acquire>
 800b7dc:	69a3      	ldr	r3, [r4, #24]
 800b7de:	b11b      	cbz	r3, 800b7e8 <__sinit+0x14>
 800b7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7e4:	f7ff bff0 	b.w	800b7c8 <__sinit_lock_release>
 800b7e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7ec:	6523      	str	r3, [r4, #80]	; 0x50
 800b7ee:	4b13      	ldr	r3, [pc, #76]	; (800b83c <__sinit+0x68>)
 800b7f0:	4a13      	ldr	r2, [pc, #76]	; (800b840 <__sinit+0x6c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7f6:	42a3      	cmp	r3, r4
 800b7f8:	bf04      	itt	eq
 800b7fa:	2301      	moveq	r3, #1
 800b7fc:	61a3      	streq	r3, [r4, #24]
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 f820 	bl	800b844 <__sfp>
 800b804:	6060      	str	r0, [r4, #4]
 800b806:	4620      	mov	r0, r4
 800b808:	f000 f81c 	bl	800b844 <__sfp>
 800b80c:	60a0      	str	r0, [r4, #8]
 800b80e:	4620      	mov	r0, r4
 800b810:	f000 f818 	bl	800b844 <__sfp>
 800b814:	2200      	movs	r2, #0
 800b816:	60e0      	str	r0, [r4, #12]
 800b818:	2104      	movs	r1, #4
 800b81a:	6860      	ldr	r0, [r4, #4]
 800b81c:	f7ff ff82 	bl	800b724 <std>
 800b820:	68a0      	ldr	r0, [r4, #8]
 800b822:	2201      	movs	r2, #1
 800b824:	2109      	movs	r1, #9
 800b826:	f7ff ff7d 	bl	800b724 <std>
 800b82a:	68e0      	ldr	r0, [r4, #12]
 800b82c:	2202      	movs	r2, #2
 800b82e:	2112      	movs	r1, #18
 800b830:	f7ff ff78 	bl	800b724 <std>
 800b834:	2301      	movs	r3, #1
 800b836:	61a3      	str	r3, [r4, #24]
 800b838:	e7d2      	b.n	800b7e0 <__sinit+0xc>
 800b83a:	bf00      	nop
 800b83c:	0800c660 	.word	0x0800c660
 800b840:	0800b76d 	.word	0x0800b76d

0800b844 <__sfp>:
 800b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b846:	4607      	mov	r7, r0
 800b848:	f7ff ffac 	bl	800b7a4 <__sfp_lock_acquire>
 800b84c:	4b1e      	ldr	r3, [pc, #120]	; (800b8c8 <__sfp+0x84>)
 800b84e:	681e      	ldr	r6, [r3, #0]
 800b850:	69b3      	ldr	r3, [r6, #24]
 800b852:	b913      	cbnz	r3, 800b85a <__sfp+0x16>
 800b854:	4630      	mov	r0, r6
 800b856:	f7ff ffbd 	bl	800b7d4 <__sinit>
 800b85a:	3648      	adds	r6, #72	; 0x48
 800b85c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b860:	3b01      	subs	r3, #1
 800b862:	d503      	bpl.n	800b86c <__sfp+0x28>
 800b864:	6833      	ldr	r3, [r6, #0]
 800b866:	b30b      	cbz	r3, 800b8ac <__sfp+0x68>
 800b868:	6836      	ldr	r6, [r6, #0]
 800b86a:	e7f7      	b.n	800b85c <__sfp+0x18>
 800b86c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b870:	b9d5      	cbnz	r5, 800b8a8 <__sfp+0x64>
 800b872:	4b16      	ldr	r3, [pc, #88]	; (800b8cc <__sfp+0x88>)
 800b874:	60e3      	str	r3, [r4, #12]
 800b876:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b87a:	6665      	str	r5, [r4, #100]	; 0x64
 800b87c:	f000 f847 	bl	800b90e <__retarget_lock_init_recursive>
 800b880:	f7ff ff96 	bl	800b7b0 <__sfp_lock_release>
 800b884:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b888:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b88c:	6025      	str	r5, [r4, #0]
 800b88e:	61a5      	str	r5, [r4, #24]
 800b890:	2208      	movs	r2, #8
 800b892:	4629      	mov	r1, r5
 800b894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b898:	f7ff ff24 	bl	800b6e4 <memset>
 800b89c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8a8:	3468      	adds	r4, #104	; 0x68
 800b8aa:	e7d9      	b.n	800b860 <__sfp+0x1c>
 800b8ac:	2104      	movs	r1, #4
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	f7ff ff62 	bl	800b778 <__sfmoreglue>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	6030      	str	r0, [r6, #0]
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d1d5      	bne.n	800b868 <__sfp+0x24>
 800b8bc:	f7ff ff78 	bl	800b7b0 <__sfp_lock_release>
 800b8c0:	230c      	movs	r3, #12
 800b8c2:	603b      	str	r3, [r7, #0]
 800b8c4:	e7ee      	b.n	800b8a4 <__sfp+0x60>
 800b8c6:	bf00      	nop
 800b8c8:	0800c660 	.word	0x0800c660
 800b8cc:	ffff0001 	.word	0xffff0001

0800b8d0 <_fwalk_reent>:
 800b8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	4688      	mov	r8, r1
 800b8d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8dc:	2700      	movs	r7, #0
 800b8de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8e2:	f1b9 0901 	subs.w	r9, r9, #1
 800b8e6:	d505      	bpl.n	800b8f4 <_fwalk_reent+0x24>
 800b8e8:	6824      	ldr	r4, [r4, #0]
 800b8ea:	2c00      	cmp	r4, #0
 800b8ec:	d1f7      	bne.n	800b8de <_fwalk_reent+0xe>
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8f4:	89ab      	ldrh	r3, [r5, #12]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d907      	bls.n	800b90a <_fwalk_reent+0x3a>
 800b8fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8fe:	3301      	adds	r3, #1
 800b900:	d003      	beq.n	800b90a <_fwalk_reent+0x3a>
 800b902:	4629      	mov	r1, r5
 800b904:	4630      	mov	r0, r6
 800b906:	47c0      	blx	r8
 800b908:	4307      	orrs	r7, r0
 800b90a:	3568      	adds	r5, #104	; 0x68
 800b90c:	e7e9      	b.n	800b8e2 <_fwalk_reent+0x12>

0800b90e <__retarget_lock_init_recursive>:
 800b90e:	4770      	bx	lr

0800b910 <__retarget_lock_acquire_recursive>:
 800b910:	4770      	bx	lr

0800b912 <__retarget_lock_release_recursive>:
 800b912:	4770      	bx	lr

0800b914 <_malloc_r>:
 800b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b916:	1ccd      	adds	r5, r1, #3
 800b918:	f025 0503 	bic.w	r5, r5, #3
 800b91c:	3508      	adds	r5, #8
 800b91e:	2d0c      	cmp	r5, #12
 800b920:	bf38      	it	cc
 800b922:	250c      	movcc	r5, #12
 800b924:	2d00      	cmp	r5, #0
 800b926:	4606      	mov	r6, r0
 800b928:	db01      	blt.n	800b92e <_malloc_r+0x1a>
 800b92a:	42a9      	cmp	r1, r5
 800b92c:	d903      	bls.n	800b936 <_malloc_r+0x22>
 800b92e:	230c      	movs	r3, #12
 800b930:	6033      	str	r3, [r6, #0]
 800b932:	2000      	movs	r0, #0
 800b934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b936:	f000 fda3 	bl	800c480 <__malloc_lock>
 800b93a:	4921      	ldr	r1, [pc, #132]	; (800b9c0 <_malloc_r+0xac>)
 800b93c:	680a      	ldr	r2, [r1, #0]
 800b93e:	4614      	mov	r4, r2
 800b940:	b99c      	cbnz	r4, 800b96a <_malloc_r+0x56>
 800b942:	4f20      	ldr	r7, [pc, #128]	; (800b9c4 <_malloc_r+0xb0>)
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	b923      	cbnz	r3, 800b952 <_malloc_r+0x3e>
 800b948:	4621      	mov	r1, r4
 800b94a:	4630      	mov	r0, r6
 800b94c:	f000 fb2a 	bl	800bfa4 <_sbrk_r>
 800b950:	6038      	str	r0, [r7, #0]
 800b952:	4629      	mov	r1, r5
 800b954:	4630      	mov	r0, r6
 800b956:	f000 fb25 	bl	800bfa4 <_sbrk_r>
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	d123      	bne.n	800b9a6 <_malloc_r+0x92>
 800b95e:	230c      	movs	r3, #12
 800b960:	6033      	str	r3, [r6, #0]
 800b962:	4630      	mov	r0, r6
 800b964:	f000 fd92 	bl	800c48c <__malloc_unlock>
 800b968:	e7e3      	b.n	800b932 <_malloc_r+0x1e>
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	1b5b      	subs	r3, r3, r5
 800b96e:	d417      	bmi.n	800b9a0 <_malloc_r+0x8c>
 800b970:	2b0b      	cmp	r3, #11
 800b972:	d903      	bls.n	800b97c <_malloc_r+0x68>
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	441c      	add	r4, r3
 800b978:	6025      	str	r5, [r4, #0]
 800b97a:	e004      	b.n	800b986 <_malloc_r+0x72>
 800b97c:	6863      	ldr	r3, [r4, #4]
 800b97e:	42a2      	cmp	r2, r4
 800b980:	bf0c      	ite	eq
 800b982:	600b      	streq	r3, [r1, #0]
 800b984:	6053      	strne	r3, [r2, #4]
 800b986:	4630      	mov	r0, r6
 800b988:	f000 fd80 	bl	800c48c <__malloc_unlock>
 800b98c:	f104 000b 	add.w	r0, r4, #11
 800b990:	1d23      	adds	r3, r4, #4
 800b992:	f020 0007 	bic.w	r0, r0, #7
 800b996:	1ac2      	subs	r2, r0, r3
 800b998:	d0cc      	beq.n	800b934 <_malloc_r+0x20>
 800b99a:	1a1b      	subs	r3, r3, r0
 800b99c:	50a3      	str	r3, [r4, r2]
 800b99e:	e7c9      	b.n	800b934 <_malloc_r+0x20>
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	6864      	ldr	r4, [r4, #4]
 800b9a4:	e7cc      	b.n	800b940 <_malloc_r+0x2c>
 800b9a6:	1cc4      	adds	r4, r0, #3
 800b9a8:	f024 0403 	bic.w	r4, r4, #3
 800b9ac:	42a0      	cmp	r0, r4
 800b9ae:	d0e3      	beq.n	800b978 <_malloc_r+0x64>
 800b9b0:	1a21      	subs	r1, r4, r0
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f000 faf6 	bl	800bfa4 <_sbrk_r>
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d1dd      	bne.n	800b978 <_malloc_r+0x64>
 800b9bc:	e7cf      	b.n	800b95e <_malloc_r+0x4a>
 800b9be:	bf00      	nop
 800b9c0:	2400009c 	.word	0x2400009c
 800b9c4:	240000a0 	.word	0x240000a0

0800b9c8 <__sfputc_r>:
 800b9c8:	6893      	ldr	r3, [r2, #8]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	b410      	push	{r4}
 800b9d0:	6093      	str	r3, [r2, #8]
 800b9d2:	da08      	bge.n	800b9e6 <__sfputc_r+0x1e>
 800b9d4:	6994      	ldr	r4, [r2, #24]
 800b9d6:	42a3      	cmp	r3, r4
 800b9d8:	db01      	blt.n	800b9de <__sfputc_r+0x16>
 800b9da:	290a      	cmp	r1, #10
 800b9dc:	d103      	bne.n	800b9e6 <__sfputc_r+0x1e>
 800b9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e2:	f000 bb33 	b.w	800c04c <__swbuf_r>
 800b9e6:	6813      	ldr	r3, [r2, #0]
 800b9e8:	1c58      	adds	r0, r3, #1
 800b9ea:	6010      	str	r0, [r2, #0]
 800b9ec:	7019      	strb	r1, [r3, #0]
 800b9ee:	4608      	mov	r0, r1
 800b9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <__sfputs_r>:
 800b9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	460f      	mov	r7, r1
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	18d5      	adds	r5, r2, r3
 800ba00:	42ac      	cmp	r4, r5
 800ba02:	d101      	bne.n	800ba08 <__sfputs_r+0x12>
 800ba04:	2000      	movs	r0, #0
 800ba06:	e007      	b.n	800ba18 <__sfputs_r+0x22>
 800ba08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0c:	463a      	mov	r2, r7
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f7ff ffda 	bl	800b9c8 <__sfputc_r>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d1f3      	bne.n	800ba00 <__sfputs_r+0xa>
 800ba18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba1c <_vfiprintf_r>:
 800ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	460d      	mov	r5, r1
 800ba22:	b09d      	sub	sp, #116	; 0x74
 800ba24:	4614      	mov	r4, r2
 800ba26:	4698      	mov	r8, r3
 800ba28:	4606      	mov	r6, r0
 800ba2a:	b118      	cbz	r0, 800ba34 <_vfiprintf_r+0x18>
 800ba2c:	6983      	ldr	r3, [r0, #24]
 800ba2e:	b90b      	cbnz	r3, 800ba34 <_vfiprintf_r+0x18>
 800ba30:	f7ff fed0 	bl	800b7d4 <__sinit>
 800ba34:	4b89      	ldr	r3, [pc, #548]	; (800bc5c <_vfiprintf_r+0x240>)
 800ba36:	429d      	cmp	r5, r3
 800ba38:	d11b      	bne.n	800ba72 <_vfiprintf_r+0x56>
 800ba3a:	6875      	ldr	r5, [r6, #4]
 800ba3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba3e:	07d9      	lsls	r1, r3, #31
 800ba40:	d405      	bmi.n	800ba4e <_vfiprintf_r+0x32>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	059a      	lsls	r2, r3, #22
 800ba46:	d402      	bmi.n	800ba4e <_vfiprintf_r+0x32>
 800ba48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba4a:	f7ff ff61 	bl	800b910 <__retarget_lock_acquire_recursive>
 800ba4e:	89ab      	ldrh	r3, [r5, #12]
 800ba50:	071b      	lsls	r3, r3, #28
 800ba52:	d501      	bpl.n	800ba58 <_vfiprintf_r+0x3c>
 800ba54:	692b      	ldr	r3, [r5, #16]
 800ba56:	b9eb      	cbnz	r3, 800ba94 <_vfiprintf_r+0x78>
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f000 fb5a 	bl	800c114 <__swsetup_r>
 800ba60:	b1c0      	cbz	r0, 800ba94 <_vfiprintf_r+0x78>
 800ba62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba64:	07dc      	lsls	r4, r3, #31
 800ba66:	d50e      	bpl.n	800ba86 <_vfiprintf_r+0x6a>
 800ba68:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6c:	b01d      	add	sp, #116	; 0x74
 800ba6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba72:	4b7b      	ldr	r3, [pc, #492]	; (800bc60 <_vfiprintf_r+0x244>)
 800ba74:	429d      	cmp	r5, r3
 800ba76:	d101      	bne.n	800ba7c <_vfiprintf_r+0x60>
 800ba78:	68b5      	ldr	r5, [r6, #8]
 800ba7a:	e7df      	b.n	800ba3c <_vfiprintf_r+0x20>
 800ba7c:	4b79      	ldr	r3, [pc, #484]	; (800bc64 <_vfiprintf_r+0x248>)
 800ba7e:	429d      	cmp	r5, r3
 800ba80:	bf08      	it	eq
 800ba82:	68f5      	ldreq	r5, [r6, #12]
 800ba84:	e7da      	b.n	800ba3c <_vfiprintf_r+0x20>
 800ba86:	89ab      	ldrh	r3, [r5, #12]
 800ba88:	0598      	lsls	r0, r3, #22
 800ba8a:	d4ed      	bmi.n	800ba68 <_vfiprintf_r+0x4c>
 800ba8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba8e:	f7ff ff40 	bl	800b912 <__retarget_lock_release_recursive>
 800ba92:	e7e9      	b.n	800ba68 <_vfiprintf_r+0x4c>
 800ba94:	2300      	movs	r3, #0
 800ba96:	9309      	str	r3, [sp, #36]	; 0x24
 800ba98:	2320      	movs	r3, #32
 800ba9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800baa2:	2330      	movs	r3, #48	; 0x30
 800baa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc68 <_vfiprintf_r+0x24c>
 800baa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baac:	f04f 0901 	mov.w	r9, #1
 800bab0:	4623      	mov	r3, r4
 800bab2:	469a      	mov	sl, r3
 800bab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bab8:	b10a      	cbz	r2, 800babe <_vfiprintf_r+0xa2>
 800baba:	2a25      	cmp	r2, #37	; 0x25
 800babc:	d1f9      	bne.n	800bab2 <_vfiprintf_r+0x96>
 800babe:	ebba 0b04 	subs.w	fp, sl, r4
 800bac2:	d00b      	beq.n	800badc <_vfiprintf_r+0xc0>
 800bac4:	465b      	mov	r3, fp
 800bac6:	4622      	mov	r2, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	4630      	mov	r0, r6
 800bacc:	f7ff ff93 	bl	800b9f6 <__sfputs_r>
 800bad0:	3001      	adds	r0, #1
 800bad2:	f000 80aa 	beq.w	800bc2a <_vfiprintf_r+0x20e>
 800bad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bad8:	445a      	add	r2, fp
 800bada:	9209      	str	r2, [sp, #36]	; 0x24
 800badc:	f89a 3000 	ldrb.w	r3, [sl]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 80a2 	beq.w	800bc2a <_vfiprintf_r+0x20e>
 800bae6:	2300      	movs	r3, #0
 800bae8:	f04f 32ff 	mov.w	r2, #4294967295
 800baec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baf0:	f10a 0a01 	add.w	sl, sl, #1
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	9307      	str	r3, [sp, #28]
 800baf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bafc:	931a      	str	r3, [sp, #104]	; 0x68
 800bafe:	4654      	mov	r4, sl
 800bb00:	2205      	movs	r2, #5
 800bb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb06:	4858      	ldr	r0, [pc, #352]	; (800bc68 <_vfiprintf_r+0x24c>)
 800bb08:	f7f4 fbf2 	bl	80002f0 <memchr>
 800bb0c:	9a04      	ldr	r2, [sp, #16]
 800bb0e:	b9d8      	cbnz	r0, 800bb48 <_vfiprintf_r+0x12c>
 800bb10:	06d1      	lsls	r1, r2, #27
 800bb12:	bf44      	itt	mi
 800bb14:	2320      	movmi	r3, #32
 800bb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb1a:	0713      	lsls	r3, r2, #28
 800bb1c:	bf44      	itt	mi
 800bb1e:	232b      	movmi	r3, #43	; 0x2b
 800bb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb24:	f89a 3000 	ldrb.w	r3, [sl]
 800bb28:	2b2a      	cmp	r3, #42	; 0x2a
 800bb2a:	d015      	beq.n	800bb58 <_vfiprintf_r+0x13c>
 800bb2c:	9a07      	ldr	r2, [sp, #28]
 800bb2e:	4654      	mov	r4, sl
 800bb30:	2000      	movs	r0, #0
 800bb32:	f04f 0c0a 	mov.w	ip, #10
 800bb36:	4621      	mov	r1, r4
 800bb38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb3c:	3b30      	subs	r3, #48	; 0x30
 800bb3e:	2b09      	cmp	r3, #9
 800bb40:	d94e      	bls.n	800bbe0 <_vfiprintf_r+0x1c4>
 800bb42:	b1b0      	cbz	r0, 800bb72 <_vfiprintf_r+0x156>
 800bb44:	9207      	str	r2, [sp, #28]
 800bb46:	e014      	b.n	800bb72 <_vfiprintf_r+0x156>
 800bb48:	eba0 0308 	sub.w	r3, r0, r8
 800bb4c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb50:	4313      	orrs	r3, r2
 800bb52:	9304      	str	r3, [sp, #16]
 800bb54:	46a2      	mov	sl, r4
 800bb56:	e7d2      	b.n	800bafe <_vfiprintf_r+0xe2>
 800bb58:	9b03      	ldr	r3, [sp, #12]
 800bb5a:	1d19      	adds	r1, r3, #4
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	9103      	str	r1, [sp, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	bfbb      	ittet	lt
 800bb64:	425b      	neglt	r3, r3
 800bb66:	f042 0202 	orrlt.w	r2, r2, #2
 800bb6a:	9307      	strge	r3, [sp, #28]
 800bb6c:	9307      	strlt	r3, [sp, #28]
 800bb6e:	bfb8      	it	lt
 800bb70:	9204      	strlt	r2, [sp, #16]
 800bb72:	7823      	ldrb	r3, [r4, #0]
 800bb74:	2b2e      	cmp	r3, #46	; 0x2e
 800bb76:	d10c      	bne.n	800bb92 <_vfiprintf_r+0x176>
 800bb78:	7863      	ldrb	r3, [r4, #1]
 800bb7a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb7c:	d135      	bne.n	800bbea <_vfiprintf_r+0x1ce>
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	1d1a      	adds	r2, r3, #4
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	9203      	str	r2, [sp, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	bfb8      	it	lt
 800bb8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb8e:	3402      	adds	r4, #2
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc78 <_vfiprintf_r+0x25c>
 800bb96:	7821      	ldrb	r1, [r4, #0]
 800bb98:	2203      	movs	r2, #3
 800bb9a:	4650      	mov	r0, sl
 800bb9c:	f7f4 fba8 	bl	80002f0 <memchr>
 800bba0:	b140      	cbz	r0, 800bbb4 <_vfiprintf_r+0x198>
 800bba2:	2340      	movs	r3, #64	; 0x40
 800bba4:	eba0 000a 	sub.w	r0, r0, sl
 800bba8:	fa03 f000 	lsl.w	r0, r3, r0
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	4303      	orrs	r3, r0
 800bbb0:	3401      	adds	r4, #1
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb8:	482c      	ldr	r0, [pc, #176]	; (800bc6c <_vfiprintf_r+0x250>)
 800bbba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbbe:	2206      	movs	r2, #6
 800bbc0:	f7f4 fb96 	bl	80002f0 <memchr>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d03f      	beq.n	800bc48 <_vfiprintf_r+0x22c>
 800bbc8:	4b29      	ldr	r3, [pc, #164]	; (800bc70 <_vfiprintf_r+0x254>)
 800bbca:	bb1b      	cbnz	r3, 800bc14 <_vfiprintf_r+0x1f8>
 800bbcc:	9b03      	ldr	r3, [sp, #12]
 800bbce:	3307      	adds	r3, #7
 800bbd0:	f023 0307 	bic.w	r3, r3, #7
 800bbd4:	3308      	adds	r3, #8
 800bbd6:	9303      	str	r3, [sp, #12]
 800bbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbda:	443b      	add	r3, r7
 800bbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800bbde:	e767      	b.n	800bab0 <_vfiprintf_r+0x94>
 800bbe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbe4:	460c      	mov	r4, r1
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	e7a5      	b.n	800bb36 <_vfiprintf_r+0x11a>
 800bbea:	2300      	movs	r3, #0
 800bbec:	3401      	adds	r4, #1
 800bbee:	9305      	str	r3, [sp, #20]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	f04f 0c0a 	mov.w	ip, #10
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbfc:	3a30      	subs	r2, #48	; 0x30
 800bbfe:	2a09      	cmp	r2, #9
 800bc00:	d903      	bls.n	800bc0a <_vfiprintf_r+0x1ee>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d0c5      	beq.n	800bb92 <_vfiprintf_r+0x176>
 800bc06:	9105      	str	r1, [sp, #20]
 800bc08:	e7c3      	b.n	800bb92 <_vfiprintf_r+0x176>
 800bc0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc0e:	4604      	mov	r4, r0
 800bc10:	2301      	movs	r3, #1
 800bc12:	e7f0      	b.n	800bbf6 <_vfiprintf_r+0x1da>
 800bc14:	ab03      	add	r3, sp, #12
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	462a      	mov	r2, r5
 800bc1a:	4b16      	ldr	r3, [pc, #88]	; (800bc74 <_vfiprintf_r+0x258>)
 800bc1c:	a904      	add	r1, sp, #16
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f3af 8000 	nop.w
 800bc24:	4607      	mov	r7, r0
 800bc26:	1c78      	adds	r0, r7, #1
 800bc28:	d1d6      	bne.n	800bbd8 <_vfiprintf_r+0x1bc>
 800bc2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc2c:	07d9      	lsls	r1, r3, #31
 800bc2e:	d405      	bmi.n	800bc3c <_vfiprintf_r+0x220>
 800bc30:	89ab      	ldrh	r3, [r5, #12]
 800bc32:	059a      	lsls	r2, r3, #22
 800bc34:	d402      	bmi.n	800bc3c <_vfiprintf_r+0x220>
 800bc36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc38:	f7ff fe6b 	bl	800b912 <__retarget_lock_release_recursive>
 800bc3c:	89ab      	ldrh	r3, [r5, #12]
 800bc3e:	065b      	lsls	r3, r3, #25
 800bc40:	f53f af12 	bmi.w	800ba68 <_vfiprintf_r+0x4c>
 800bc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc46:	e711      	b.n	800ba6c <_vfiprintf_r+0x50>
 800bc48:	ab03      	add	r3, sp, #12
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	462a      	mov	r2, r5
 800bc4e:	4b09      	ldr	r3, [pc, #36]	; (800bc74 <_vfiprintf_r+0x258>)
 800bc50:	a904      	add	r1, sp, #16
 800bc52:	4630      	mov	r0, r6
 800bc54:	f000 f880 	bl	800bd58 <_printf_i>
 800bc58:	e7e4      	b.n	800bc24 <_vfiprintf_r+0x208>
 800bc5a:	bf00      	nop
 800bc5c:	0800c684 	.word	0x0800c684
 800bc60:	0800c6a4 	.word	0x0800c6a4
 800bc64:	0800c664 	.word	0x0800c664
 800bc68:	0800c6c4 	.word	0x0800c6c4
 800bc6c:	0800c6ce 	.word	0x0800c6ce
 800bc70:	00000000 	.word	0x00000000
 800bc74:	0800b9f7 	.word	0x0800b9f7
 800bc78:	0800c6ca 	.word	0x0800c6ca

0800bc7c <_printf_common>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	4616      	mov	r6, r2
 800bc82:	4699      	mov	r9, r3
 800bc84:	688a      	ldr	r2, [r1, #8]
 800bc86:	690b      	ldr	r3, [r1, #16]
 800bc88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	bfb8      	it	lt
 800bc90:	4613      	movlt	r3, r2
 800bc92:	6033      	str	r3, [r6, #0]
 800bc94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc98:	4607      	mov	r7, r0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	b10a      	cbz	r2, 800bca2 <_printf_common+0x26>
 800bc9e:	3301      	adds	r3, #1
 800bca0:	6033      	str	r3, [r6, #0]
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	0699      	lsls	r1, r3, #26
 800bca6:	bf42      	ittt	mi
 800bca8:	6833      	ldrmi	r3, [r6, #0]
 800bcaa:	3302      	addmi	r3, #2
 800bcac:	6033      	strmi	r3, [r6, #0]
 800bcae:	6825      	ldr	r5, [r4, #0]
 800bcb0:	f015 0506 	ands.w	r5, r5, #6
 800bcb4:	d106      	bne.n	800bcc4 <_printf_common+0x48>
 800bcb6:	f104 0a19 	add.w	sl, r4, #25
 800bcba:	68e3      	ldr	r3, [r4, #12]
 800bcbc:	6832      	ldr	r2, [r6, #0]
 800bcbe:	1a9b      	subs	r3, r3, r2
 800bcc0:	42ab      	cmp	r3, r5
 800bcc2:	dc26      	bgt.n	800bd12 <_printf_common+0x96>
 800bcc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcc8:	1e13      	subs	r3, r2, #0
 800bcca:	6822      	ldr	r2, [r4, #0]
 800bccc:	bf18      	it	ne
 800bcce:	2301      	movne	r3, #1
 800bcd0:	0692      	lsls	r2, r2, #26
 800bcd2:	d42b      	bmi.n	800bd2c <_printf_common+0xb0>
 800bcd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcd8:	4649      	mov	r1, r9
 800bcda:	4638      	mov	r0, r7
 800bcdc:	47c0      	blx	r8
 800bcde:	3001      	adds	r0, #1
 800bce0:	d01e      	beq.n	800bd20 <_printf_common+0xa4>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	68e5      	ldr	r5, [r4, #12]
 800bce6:	6832      	ldr	r2, [r6, #0]
 800bce8:	f003 0306 	and.w	r3, r3, #6
 800bcec:	2b04      	cmp	r3, #4
 800bcee:	bf08      	it	eq
 800bcf0:	1aad      	subeq	r5, r5, r2
 800bcf2:	68a3      	ldr	r3, [r4, #8]
 800bcf4:	6922      	ldr	r2, [r4, #16]
 800bcf6:	bf0c      	ite	eq
 800bcf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcfc:	2500      	movne	r5, #0
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	bfc4      	itt	gt
 800bd02:	1a9b      	subgt	r3, r3, r2
 800bd04:	18ed      	addgt	r5, r5, r3
 800bd06:	2600      	movs	r6, #0
 800bd08:	341a      	adds	r4, #26
 800bd0a:	42b5      	cmp	r5, r6
 800bd0c:	d11a      	bne.n	800bd44 <_printf_common+0xc8>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	e008      	b.n	800bd24 <_printf_common+0xa8>
 800bd12:	2301      	movs	r3, #1
 800bd14:	4652      	mov	r2, sl
 800bd16:	4649      	mov	r1, r9
 800bd18:	4638      	mov	r0, r7
 800bd1a:	47c0      	blx	r8
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d103      	bne.n	800bd28 <_printf_common+0xac>
 800bd20:	f04f 30ff 	mov.w	r0, #4294967295
 800bd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd28:	3501      	adds	r5, #1
 800bd2a:	e7c6      	b.n	800bcba <_printf_common+0x3e>
 800bd2c:	18e1      	adds	r1, r4, r3
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	2030      	movs	r0, #48	; 0x30
 800bd32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd36:	4422      	add	r2, r4
 800bd38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd40:	3302      	adds	r3, #2
 800bd42:	e7c7      	b.n	800bcd4 <_printf_common+0x58>
 800bd44:	2301      	movs	r3, #1
 800bd46:	4622      	mov	r2, r4
 800bd48:	4649      	mov	r1, r9
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	47c0      	blx	r8
 800bd4e:	3001      	adds	r0, #1
 800bd50:	d0e6      	beq.n	800bd20 <_printf_common+0xa4>
 800bd52:	3601      	adds	r6, #1
 800bd54:	e7d9      	b.n	800bd0a <_printf_common+0x8e>
	...

0800bd58 <_printf_i>:
 800bd58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	4691      	mov	r9, r2
 800bd60:	7e27      	ldrb	r7, [r4, #24]
 800bd62:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bd64:	2f78      	cmp	r7, #120	; 0x78
 800bd66:	4680      	mov	r8, r0
 800bd68:	469a      	mov	sl, r3
 800bd6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd6e:	d807      	bhi.n	800bd80 <_printf_i+0x28>
 800bd70:	2f62      	cmp	r7, #98	; 0x62
 800bd72:	d80a      	bhi.n	800bd8a <_printf_i+0x32>
 800bd74:	2f00      	cmp	r7, #0
 800bd76:	f000 80d8 	beq.w	800bf2a <_printf_i+0x1d2>
 800bd7a:	2f58      	cmp	r7, #88	; 0x58
 800bd7c:	f000 80a3 	beq.w	800bec6 <_printf_i+0x16e>
 800bd80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd88:	e03a      	b.n	800be00 <_printf_i+0xa8>
 800bd8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd8e:	2b15      	cmp	r3, #21
 800bd90:	d8f6      	bhi.n	800bd80 <_printf_i+0x28>
 800bd92:	a001      	add	r0, pc, #4	; (adr r0, 800bd98 <_printf_i+0x40>)
 800bd94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bd98:	0800bdf1 	.word	0x0800bdf1
 800bd9c:	0800be05 	.word	0x0800be05
 800bda0:	0800bd81 	.word	0x0800bd81
 800bda4:	0800bd81 	.word	0x0800bd81
 800bda8:	0800bd81 	.word	0x0800bd81
 800bdac:	0800bd81 	.word	0x0800bd81
 800bdb0:	0800be05 	.word	0x0800be05
 800bdb4:	0800bd81 	.word	0x0800bd81
 800bdb8:	0800bd81 	.word	0x0800bd81
 800bdbc:	0800bd81 	.word	0x0800bd81
 800bdc0:	0800bd81 	.word	0x0800bd81
 800bdc4:	0800bf11 	.word	0x0800bf11
 800bdc8:	0800be35 	.word	0x0800be35
 800bdcc:	0800bef3 	.word	0x0800bef3
 800bdd0:	0800bd81 	.word	0x0800bd81
 800bdd4:	0800bd81 	.word	0x0800bd81
 800bdd8:	0800bf33 	.word	0x0800bf33
 800bddc:	0800bd81 	.word	0x0800bd81
 800bde0:	0800be35 	.word	0x0800be35
 800bde4:	0800bd81 	.word	0x0800bd81
 800bde8:	0800bd81 	.word	0x0800bd81
 800bdec:	0800befb 	.word	0x0800befb
 800bdf0:	680b      	ldr	r3, [r1, #0]
 800bdf2:	1d1a      	adds	r2, r3, #4
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	600a      	str	r2, [r1, #0]
 800bdf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be00:	2301      	movs	r3, #1
 800be02:	e0a3      	b.n	800bf4c <_printf_i+0x1f4>
 800be04:	6825      	ldr	r5, [r4, #0]
 800be06:	6808      	ldr	r0, [r1, #0]
 800be08:	062e      	lsls	r6, r5, #24
 800be0a:	f100 0304 	add.w	r3, r0, #4
 800be0e:	d50a      	bpl.n	800be26 <_printf_i+0xce>
 800be10:	6805      	ldr	r5, [r0, #0]
 800be12:	600b      	str	r3, [r1, #0]
 800be14:	2d00      	cmp	r5, #0
 800be16:	da03      	bge.n	800be20 <_printf_i+0xc8>
 800be18:	232d      	movs	r3, #45	; 0x2d
 800be1a:	426d      	negs	r5, r5
 800be1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be20:	485e      	ldr	r0, [pc, #376]	; (800bf9c <_printf_i+0x244>)
 800be22:	230a      	movs	r3, #10
 800be24:	e019      	b.n	800be5a <_printf_i+0x102>
 800be26:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be2a:	6805      	ldr	r5, [r0, #0]
 800be2c:	600b      	str	r3, [r1, #0]
 800be2e:	bf18      	it	ne
 800be30:	b22d      	sxthne	r5, r5
 800be32:	e7ef      	b.n	800be14 <_printf_i+0xbc>
 800be34:	680b      	ldr	r3, [r1, #0]
 800be36:	6825      	ldr	r5, [r4, #0]
 800be38:	1d18      	adds	r0, r3, #4
 800be3a:	6008      	str	r0, [r1, #0]
 800be3c:	0628      	lsls	r0, r5, #24
 800be3e:	d501      	bpl.n	800be44 <_printf_i+0xec>
 800be40:	681d      	ldr	r5, [r3, #0]
 800be42:	e002      	b.n	800be4a <_printf_i+0xf2>
 800be44:	0669      	lsls	r1, r5, #25
 800be46:	d5fb      	bpl.n	800be40 <_printf_i+0xe8>
 800be48:	881d      	ldrh	r5, [r3, #0]
 800be4a:	4854      	ldr	r0, [pc, #336]	; (800bf9c <_printf_i+0x244>)
 800be4c:	2f6f      	cmp	r7, #111	; 0x6f
 800be4e:	bf0c      	ite	eq
 800be50:	2308      	moveq	r3, #8
 800be52:	230a      	movne	r3, #10
 800be54:	2100      	movs	r1, #0
 800be56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be5a:	6866      	ldr	r6, [r4, #4]
 800be5c:	60a6      	str	r6, [r4, #8]
 800be5e:	2e00      	cmp	r6, #0
 800be60:	bfa2      	ittt	ge
 800be62:	6821      	ldrge	r1, [r4, #0]
 800be64:	f021 0104 	bicge.w	r1, r1, #4
 800be68:	6021      	strge	r1, [r4, #0]
 800be6a:	b90d      	cbnz	r5, 800be70 <_printf_i+0x118>
 800be6c:	2e00      	cmp	r6, #0
 800be6e:	d04d      	beq.n	800bf0c <_printf_i+0x1b4>
 800be70:	4616      	mov	r6, r2
 800be72:	fbb5 f1f3 	udiv	r1, r5, r3
 800be76:	fb03 5711 	mls	r7, r3, r1, r5
 800be7a:	5dc7      	ldrb	r7, [r0, r7]
 800be7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be80:	462f      	mov	r7, r5
 800be82:	42bb      	cmp	r3, r7
 800be84:	460d      	mov	r5, r1
 800be86:	d9f4      	bls.n	800be72 <_printf_i+0x11a>
 800be88:	2b08      	cmp	r3, #8
 800be8a:	d10b      	bne.n	800bea4 <_printf_i+0x14c>
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	07df      	lsls	r7, r3, #31
 800be90:	d508      	bpl.n	800bea4 <_printf_i+0x14c>
 800be92:	6923      	ldr	r3, [r4, #16]
 800be94:	6861      	ldr	r1, [r4, #4]
 800be96:	4299      	cmp	r1, r3
 800be98:	bfde      	ittt	le
 800be9a:	2330      	movle	r3, #48	; 0x30
 800be9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bea0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bea4:	1b92      	subs	r2, r2, r6
 800bea6:	6122      	str	r2, [r4, #16]
 800bea8:	f8cd a000 	str.w	sl, [sp]
 800beac:	464b      	mov	r3, r9
 800beae:	aa03      	add	r2, sp, #12
 800beb0:	4621      	mov	r1, r4
 800beb2:	4640      	mov	r0, r8
 800beb4:	f7ff fee2 	bl	800bc7c <_printf_common>
 800beb8:	3001      	adds	r0, #1
 800beba:	d14c      	bne.n	800bf56 <_printf_i+0x1fe>
 800bebc:	f04f 30ff 	mov.w	r0, #4294967295
 800bec0:	b004      	add	sp, #16
 800bec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec6:	4835      	ldr	r0, [pc, #212]	; (800bf9c <_printf_i+0x244>)
 800bec8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	680e      	ldr	r6, [r1, #0]
 800bed0:	061f      	lsls	r7, r3, #24
 800bed2:	f856 5b04 	ldr.w	r5, [r6], #4
 800bed6:	600e      	str	r6, [r1, #0]
 800bed8:	d514      	bpl.n	800bf04 <_printf_i+0x1ac>
 800beda:	07d9      	lsls	r1, r3, #31
 800bedc:	bf44      	itt	mi
 800bede:	f043 0320 	orrmi.w	r3, r3, #32
 800bee2:	6023      	strmi	r3, [r4, #0]
 800bee4:	b91d      	cbnz	r5, 800beee <_printf_i+0x196>
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	f023 0320 	bic.w	r3, r3, #32
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	2310      	movs	r3, #16
 800bef0:	e7b0      	b.n	800be54 <_printf_i+0xfc>
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	f043 0320 	orr.w	r3, r3, #32
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	2378      	movs	r3, #120	; 0x78
 800befc:	4828      	ldr	r0, [pc, #160]	; (800bfa0 <_printf_i+0x248>)
 800befe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf02:	e7e3      	b.n	800becc <_printf_i+0x174>
 800bf04:	065e      	lsls	r6, r3, #25
 800bf06:	bf48      	it	mi
 800bf08:	b2ad      	uxthmi	r5, r5
 800bf0a:	e7e6      	b.n	800beda <_printf_i+0x182>
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	e7bb      	b.n	800be88 <_printf_i+0x130>
 800bf10:	680b      	ldr	r3, [r1, #0]
 800bf12:	6826      	ldr	r6, [r4, #0]
 800bf14:	6960      	ldr	r0, [r4, #20]
 800bf16:	1d1d      	adds	r5, r3, #4
 800bf18:	600d      	str	r5, [r1, #0]
 800bf1a:	0635      	lsls	r5, r6, #24
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	d501      	bpl.n	800bf24 <_printf_i+0x1cc>
 800bf20:	6018      	str	r0, [r3, #0]
 800bf22:	e002      	b.n	800bf2a <_printf_i+0x1d2>
 800bf24:	0671      	lsls	r1, r6, #25
 800bf26:	d5fb      	bpl.n	800bf20 <_printf_i+0x1c8>
 800bf28:	8018      	strh	r0, [r3, #0]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	6123      	str	r3, [r4, #16]
 800bf2e:	4616      	mov	r6, r2
 800bf30:	e7ba      	b.n	800bea8 <_printf_i+0x150>
 800bf32:	680b      	ldr	r3, [r1, #0]
 800bf34:	1d1a      	adds	r2, r3, #4
 800bf36:	600a      	str	r2, [r1, #0]
 800bf38:	681e      	ldr	r6, [r3, #0]
 800bf3a:	6862      	ldr	r2, [r4, #4]
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f7f4 f9d6 	bl	80002f0 <memchr>
 800bf44:	b108      	cbz	r0, 800bf4a <_printf_i+0x1f2>
 800bf46:	1b80      	subs	r0, r0, r6
 800bf48:	6060      	str	r0, [r4, #4]
 800bf4a:	6863      	ldr	r3, [r4, #4]
 800bf4c:	6123      	str	r3, [r4, #16]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf54:	e7a8      	b.n	800bea8 <_printf_i+0x150>
 800bf56:	6923      	ldr	r3, [r4, #16]
 800bf58:	4632      	mov	r2, r6
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	4640      	mov	r0, r8
 800bf5e:	47d0      	blx	sl
 800bf60:	3001      	adds	r0, #1
 800bf62:	d0ab      	beq.n	800bebc <_printf_i+0x164>
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	079b      	lsls	r3, r3, #30
 800bf68:	d413      	bmi.n	800bf92 <_printf_i+0x23a>
 800bf6a:	68e0      	ldr	r0, [r4, #12]
 800bf6c:	9b03      	ldr	r3, [sp, #12]
 800bf6e:	4298      	cmp	r0, r3
 800bf70:	bfb8      	it	lt
 800bf72:	4618      	movlt	r0, r3
 800bf74:	e7a4      	b.n	800bec0 <_printf_i+0x168>
 800bf76:	2301      	movs	r3, #1
 800bf78:	4632      	mov	r2, r6
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	4640      	mov	r0, r8
 800bf7e:	47d0      	blx	sl
 800bf80:	3001      	adds	r0, #1
 800bf82:	d09b      	beq.n	800bebc <_printf_i+0x164>
 800bf84:	3501      	adds	r5, #1
 800bf86:	68e3      	ldr	r3, [r4, #12]
 800bf88:	9903      	ldr	r1, [sp, #12]
 800bf8a:	1a5b      	subs	r3, r3, r1
 800bf8c:	42ab      	cmp	r3, r5
 800bf8e:	dcf2      	bgt.n	800bf76 <_printf_i+0x21e>
 800bf90:	e7eb      	b.n	800bf6a <_printf_i+0x212>
 800bf92:	2500      	movs	r5, #0
 800bf94:	f104 0619 	add.w	r6, r4, #25
 800bf98:	e7f5      	b.n	800bf86 <_printf_i+0x22e>
 800bf9a:	bf00      	nop
 800bf9c:	0800c6d5 	.word	0x0800c6d5
 800bfa0:	0800c6e6 	.word	0x0800c6e6

0800bfa4 <_sbrk_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4d06      	ldr	r5, [pc, #24]	; (800bfc0 <_sbrk_r+0x1c>)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4604      	mov	r4, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	f7f6 f8c4 	bl	800213c <_sbrk>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	d102      	bne.n	800bfbe <_sbrk_r+0x1a>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	b103      	cbz	r3, 800bfbe <_sbrk_r+0x1a>
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	24000504 	.word	0x24000504

0800bfc4 <__sread>:
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfcc:	f000 fab4 	bl	800c538 <_read_r>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	bfab      	itete	ge
 800bfd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfd6:	89a3      	ldrhlt	r3, [r4, #12]
 800bfd8:	181b      	addge	r3, r3, r0
 800bfda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfde:	bfac      	ite	ge
 800bfe0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfe2:	81a3      	strhlt	r3, [r4, #12]
 800bfe4:	bd10      	pop	{r4, pc}

0800bfe6 <__swrite>:
 800bfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfea:	461f      	mov	r7, r3
 800bfec:	898b      	ldrh	r3, [r1, #12]
 800bfee:	05db      	lsls	r3, r3, #23
 800bff0:	4605      	mov	r5, r0
 800bff2:	460c      	mov	r4, r1
 800bff4:	4616      	mov	r6, r2
 800bff6:	d505      	bpl.n	800c004 <__swrite+0x1e>
 800bff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffc:	2302      	movs	r3, #2
 800bffe:	2200      	movs	r2, #0
 800c000:	f000 f9c8 	bl	800c394 <_lseek_r>
 800c004:	89a3      	ldrh	r3, [r4, #12]
 800c006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c00a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c00e:	81a3      	strh	r3, [r4, #12]
 800c010:	4632      	mov	r2, r6
 800c012:	463b      	mov	r3, r7
 800c014:	4628      	mov	r0, r5
 800c016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c01a:	f000 b869 	b.w	800c0f0 <_write_r>

0800c01e <__sseek>:
 800c01e:	b510      	push	{r4, lr}
 800c020:	460c      	mov	r4, r1
 800c022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c026:	f000 f9b5 	bl	800c394 <_lseek_r>
 800c02a:	1c43      	adds	r3, r0, #1
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	bf15      	itete	ne
 800c030:	6560      	strne	r0, [r4, #84]	; 0x54
 800c032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c03a:	81a3      	strheq	r3, [r4, #12]
 800c03c:	bf18      	it	ne
 800c03e:	81a3      	strhne	r3, [r4, #12]
 800c040:	bd10      	pop	{r4, pc}

0800c042 <__sclose>:
 800c042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c046:	f000 b8d3 	b.w	800c1f0 <_close_r>
	...

0800c04c <__swbuf_r>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	460e      	mov	r6, r1
 800c050:	4614      	mov	r4, r2
 800c052:	4605      	mov	r5, r0
 800c054:	b118      	cbz	r0, 800c05e <__swbuf_r+0x12>
 800c056:	6983      	ldr	r3, [r0, #24]
 800c058:	b90b      	cbnz	r3, 800c05e <__swbuf_r+0x12>
 800c05a:	f7ff fbbb 	bl	800b7d4 <__sinit>
 800c05e:	4b21      	ldr	r3, [pc, #132]	; (800c0e4 <__swbuf_r+0x98>)
 800c060:	429c      	cmp	r4, r3
 800c062:	d12b      	bne.n	800c0bc <__swbuf_r+0x70>
 800c064:	686c      	ldr	r4, [r5, #4]
 800c066:	69a3      	ldr	r3, [r4, #24]
 800c068:	60a3      	str	r3, [r4, #8]
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	071a      	lsls	r2, r3, #28
 800c06e:	d52f      	bpl.n	800c0d0 <__swbuf_r+0x84>
 800c070:	6923      	ldr	r3, [r4, #16]
 800c072:	b36b      	cbz	r3, 800c0d0 <__swbuf_r+0x84>
 800c074:	6923      	ldr	r3, [r4, #16]
 800c076:	6820      	ldr	r0, [r4, #0]
 800c078:	1ac0      	subs	r0, r0, r3
 800c07a:	6963      	ldr	r3, [r4, #20]
 800c07c:	b2f6      	uxtb	r6, r6
 800c07e:	4283      	cmp	r3, r0
 800c080:	4637      	mov	r7, r6
 800c082:	dc04      	bgt.n	800c08e <__swbuf_r+0x42>
 800c084:	4621      	mov	r1, r4
 800c086:	4628      	mov	r0, r5
 800c088:	f000 f948 	bl	800c31c <_fflush_r>
 800c08c:	bb30      	cbnz	r0, 800c0dc <__swbuf_r+0x90>
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	3b01      	subs	r3, #1
 800c092:	60a3      	str	r3, [r4, #8]
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	6022      	str	r2, [r4, #0]
 800c09a:	701e      	strb	r6, [r3, #0]
 800c09c:	6963      	ldr	r3, [r4, #20]
 800c09e:	3001      	adds	r0, #1
 800c0a0:	4283      	cmp	r3, r0
 800c0a2:	d004      	beq.n	800c0ae <__swbuf_r+0x62>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	07db      	lsls	r3, r3, #31
 800c0a8:	d506      	bpl.n	800c0b8 <__swbuf_r+0x6c>
 800c0aa:	2e0a      	cmp	r6, #10
 800c0ac:	d104      	bne.n	800c0b8 <__swbuf_r+0x6c>
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f000 f933 	bl	800c31c <_fflush_r>
 800c0b6:	b988      	cbnz	r0, 800c0dc <__swbuf_r+0x90>
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <__swbuf_r+0x9c>)
 800c0be:	429c      	cmp	r4, r3
 800c0c0:	d101      	bne.n	800c0c6 <__swbuf_r+0x7a>
 800c0c2:	68ac      	ldr	r4, [r5, #8]
 800c0c4:	e7cf      	b.n	800c066 <__swbuf_r+0x1a>
 800c0c6:	4b09      	ldr	r3, [pc, #36]	; (800c0ec <__swbuf_r+0xa0>)
 800c0c8:	429c      	cmp	r4, r3
 800c0ca:	bf08      	it	eq
 800c0cc:	68ec      	ldreq	r4, [r5, #12]
 800c0ce:	e7ca      	b.n	800c066 <__swbuf_r+0x1a>
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f000 f81e 	bl	800c114 <__swsetup_r>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0cb      	beq.n	800c074 <__swbuf_r+0x28>
 800c0dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c0e0:	e7ea      	b.n	800c0b8 <__swbuf_r+0x6c>
 800c0e2:	bf00      	nop
 800c0e4:	0800c684 	.word	0x0800c684
 800c0e8:	0800c6a4 	.word	0x0800c6a4
 800c0ec:	0800c664 	.word	0x0800c664

0800c0f0 <_write_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d07      	ldr	r5, [pc, #28]	; (800c110 <_write_r+0x20>)
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	4608      	mov	r0, r1
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	602a      	str	r2, [r5, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	f7f4 fd4c 	bl	8000b9c <_write>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	d102      	bne.n	800c10e <_write_r+0x1e>
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	b103      	cbz	r3, 800c10e <_write_r+0x1e>
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	bd38      	pop	{r3, r4, r5, pc}
 800c110:	24000504 	.word	0x24000504

0800c114 <__swsetup_r>:
 800c114:	4b32      	ldr	r3, [pc, #200]	; (800c1e0 <__swsetup_r+0xcc>)
 800c116:	b570      	push	{r4, r5, r6, lr}
 800c118:	681d      	ldr	r5, [r3, #0]
 800c11a:	4606      	mov	r6, r0
 800c11c:	460c      	mov	r4, r1
 800c11e:	b125      	cbz	r5, 800c12a <__swsetup_r+0x16>
 800c120:	69ab      	ldr	r3, [r5, #24]
 800c122:	b913      	cbnz	r3, 800c12a <__swsetup_r+0x16>
 800c124:	4628      	mov	r0, r5
 800c126:	f7ff fb55 	bl	800b7d4 <__sinit>
 800c12a:	4b2e      	ldr	r3, [pc, #184]	; (800c1e4 <__swsetup_r+0xd0>)
 800c12c:	429c      	cmp	r4, r3
 800c12e:	d10f      	bne.n	800c150 <__swsetup_r+0x3c>
 800c130:	686c      	ldr	r4, [r5, #4]
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c138:	0719      	lsls	r1, r3, #28
 800c13a:	d42c      	bmi.n	800c196 <__swsetup_r+0x82>
 800c13c:	06dd      	lsls	r5, r3, #27
 800c13e:	d411      	bmi.n	800c164 <__swsetup_r+0x50>
 800c140:	2309      	movs	r3, #9
 800c142:	6033      	str	r3, [r6, #0]
 800c144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	f04f 30ff 	mov.w	r0, #4294967295
 800c14e:	e03e      	b.n	800c1ce <__swsetup_r+0xba>
 800c150:	4b25      	ldr	r3, [pc, #148]	; (800c1e8 <__swsetup_r+0xd4>)
 800c152:	429c      	cmp	r4, r3
 800c154:	d101      	bne.n	800c15a <__swsetup_r+0x46>
 800c156:	68ac      	ldr	r4, [r5, #8]
 800c158:	e7eb      	b.n	800c132 <__swsetup_r+0x1e>
 800c15a:	4b24      	ldr	r3, [pc, #144]	; (800c1ec <__swsetup_r+0xd8>)
 800c15c:	429c      	cmp	r4, r3
 800c15e:	bf08      	it	eq
 800c160:	68ec      	ldreq	r4, [r5, #12]
 800c162:	e7e6      	b.n	800c132 <__swsetup_r+0x1e>
 800c164:	0758      	lsls	r0, r3, #29
 800c166:	d512      	bpl.n	800c18e <__swsetup_r+0x7a>
 800c168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c16a:	b141      	cbz	r1, 800c17e <__swsetup_r+0x6a>
 800c16c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c170:	4299      	cmp	r1, r3
 800c172:	d002      	beq.n	800c17a <__swsetup_r+0x66>
 800c174:	4630      	mov	r0, r6
 800c176:	f000 f98f 	bl	800c498 <_free_r>
 800c17a:	2300      	movs	r3, #0
 800c17c:	6363      	str	r3, [r4, #52]	; 0x34
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c184:	81a3      	strh	r3, [r4, #12]
 800c186:	2300      	movs	r3, #0
 800c188:	6063      	str	r3, [r4, #4]
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	f043 0308 	orr.w	r3, r3, #8
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	6923      	ldr	r3, [r4, #16]
 800c198:	b94b      	cbnz	r3, 800c1ae <__swsetup_r+0x9a>
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1a4:	d003      	beq.n	800c1ae <__swsetup_r+0x9a>
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f000 f929 	bl	800c400 <__smakebuf_r>
 800c1ae:	89a0      	ldrh	r0, [r4, #12]
 800c1b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1b4:	f010 0301 	ands.w	r3, r0, #1
 800c1b8:	d00a      	beq.n	800c1d0 <__swsetup_r+0xbc>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60a3      	str	r3, [r4, #8]
 800c1be:	6963      	ldr	r3, [r4, #20]
 800c1c0:	425b      	negs	r3, r3
 800c1c2:	61a3      	str	r3, [r4, #24]
 800c1c4:	6923      	ldr	r3, [r4, #16]
 800c1c6:	b943      	cbnz	r3, 800c1da <__swsetup_r+0xc6>
 800c1c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1cc:	d1ba      	bne.n	800c144 <__swsetup_r+0x30>
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	0781      	lsls	r1, r0, #30
 800c1d2:	bf58      	it	pl
 800c1d4:	6963      	ldrpl	r3, [r4, #20]
 800c1d6:	60a3      	str	r3, [r4, #8]
 800c1d8:	e7f4      	b.n	800c1c4 <__swsetup_r+0xb0>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	e7f7      	b.n	800c1ce <__swsetup_r+0xba>
 800c1de:	bf00      	nop
 800c1e0:	24000018 	.word	0x24000018
 800c1e4:	0800c684 	.word	0x0800c684
 800c1e8:	0800c6a4 	.word	0x0800c6a4
 800c1ec:	0800c664 	.word	0x0800c664

0800c1f0 <_close_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d06      	ldr	r5, [pc, #24]	; (800c20c <_close_r+0x1c>)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	602b      	str	r3, [r5, #0]
 800c1fc:	f7f5 ff69 	bl	80020d2 <_close>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_close_r+0x1a>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_close_r+0x1a>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	24000504 	.word	0x24000504

0800c210 <__sflush_r>:
 800c210:	898a      	ldrh	r2, [r1, #12]
 800c212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c216:	4605      	mov	r5, r0
 800c218:	0710      	lsls	r0, r2, #28
 800c21a:	460c      	mov	r4, r1
 800c21c:	d458      	bmi.n	800c2d0 <__sflush_r+0xc0>
 800c21e:	684b      	ldr	r3, [r1, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	dc05      	bgt.n	800c230 <__sflush_r+0x20>
 800c224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c226:	2b00      	cmp	r3, #0
 800c228:	dc02      	bgt.n	800c230 <__sflush_r+0x20>
 800c22a:	2000      	movs	r0, #0
 800c22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c232:	2e00      	cmp	r6, #0
 800c234:	d0f9      	beq.n	800c22a <__sflush_r+0x1a>
 800c236:	2300      	movs	r3, #0
 800c238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c23c:	682f      	ldr	r7, [r5, #0]
 800c23e:	602b      	str	r3, [r5, #0]
 800c240:	d032      	beq.n	800c2a8 <__sflush_r+0x98>
 800c242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c244:	89a3      	ldrh	r3, [r4, #12]
 800c246:	075a      	lsls	r2, r3, #29
 800c248:	d505      	bpl.n	800c256 <__sflush_r+0x46>
 800c24a:	6863      	ldr	r3, [r4, #4]
 800c24c:	1ac0      	subs	r0, r0, r3
 800c24e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c250:	b10b      	cbz	r3, 800c256 <__sflush_r+0x46>
 800c252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c254:	1ac0      	subs	r0, r0, r3
 800c256:	2300      	movs	r3, #0
 800c258:	4602      	mov	r2, r0
 800c25a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c25c:	6a21      	ldr	r1, [r4, #32]
 800c25e:	4628      	mov	r0, r5
 800c260:	47b0      	blx	r6
 800c262:	1c43      	adds	r3, r0, #1
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	d106      	bne.n	800c276 <__sflush_r+0x66>
 800c268:	6829      	ldr	r1, [r5, #0]
 800c26a:	291d      	cmp	r1, #29
 800c26c:	d82c      	bhi.n	800c2c8 <__sflush_r+0xb8>
 800c26e:	4a2a      	ldr	r2, [pc, #168]	; (800c318 <__sflush_r+0x108>)
 800c270:	40ca      	lsrs	r2, r1
 800c272:	07d6      	lsls	r6, r2, #31
 800c274:	d528      	bpl.n	800c2c8 <__sflush_r+0xb8>
 800c276:	2200      	movs	r2, #0
 800c278:	6062      	str	r2, [r4, #4]
 800c27a:	04d9      	lsls	r1, r3, #19
 800c27c:	6922      	ldr	r2, [r4, #16]
 800c27e:	6022      	str	r2, [r4, #0]
 800c280:	d504      	bpl.n	800c28c <__sflush_r+0x7c>
 800c282:	1c42      	adds	r2, r0, #1
 800c284:	d101      	bne.n	800c28a <__sflush_r+0x7a>
 800c286:	682b      	ldr	r3, [r5, #0]
 800c288:	b903      	cbnz	r3, 800c28c <__sflush_r+0x7c>
 800c28a:	6560      	str	r0, [r4, #84]	; 0x54
 800c28c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c28e:	602f      	str	r7, [r5, #0]
 800c290:	2900      	cmp	r1, #0
 800c292:	d0ca      	beq.n	800c22a <__sflush_r+0x1a>
 800c294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c298:	4299      	cmp	r1, r3
 800c29a:	d002      	beq.n	800c2a2 <__sflush_r+0x92>
 800c29c:	4628      	mov	r0, r5
 800c29e:	f000 f8fb 	bl	800c498 <_free_r>
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	6360      	str	r0, [r4, #52]	; 0x34
 800c2a6:	e7c1      	b.n	800c22c <__sflush_r+0x1c>
 800c2a8:	6a21      	ldr	r1, [r4, #32]
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	47b0      	blx	r6
 800c2b0:	1c41      	adds	r1, r0, #1
 800c2b2:	d1c7      	bne.n	800c244 <__sflush_r+0x34>
 800c2b4:	682b      	ldr	r3, [r5, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d0c4      	beq.n	800c244 <__sflush_r+0x34>
 800c2ba:	2b1d      	cmp	r3, #29
 800c2bc:	d001      	beq.n	800c2c2 <__sflush_r+0xb2>
 800c2be:	2b16      	cmp	r3, #22
 800c2c0:	d101      	bne.n	800c2c6 <__sflush_r+0xb6>
 800c2c2:	602f      	str	r7, [r5, #0]
 800c2c4:	e7b1      	b.n	800c22a <__sflush_r+0x1a>
 800c2c6:	89a3      	ldrh	r3, [r4, #12]
 800c2c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2cc:	81a3      	strh	r3, [r4, #12]
 800c2ce:	e7ad      	b.n	800c22c <__sflush_r+0x1c>
 800c2d0:	690f      	ldr	r7, [r1, #16]
 800c2d2:	2f00      	cmp	r7, #0
 800c2d4:	d0a9      	beq.n	800c22a <__sflush_r+0x1a>
 800c2d6:	0793      	lsls	r3, r2, #30
 800c2d8:	680e      	ldr	r6, [r1, #0]
 800c2da:	bf08      	it	eq
 800c2dc:	694b      	ldreq	r3, [r1, #20]
 800c2de:	600f      	str	r7, [r1, #0]
 800c2e0:	bf18      	it	ne
 800c2e2:	2300      	movne	r3, #0
 800c2e4:	eba6 0807 	sub.w	r8, r6, r7
 800c2e8:	608b      	str	r3, [r1, #8]
 800c2ea:	f1b8 0f00 	cmp.w	r8, #0
 800c2ee:	dd9c      	ble.n	800c22a <__sflush_r+0x1a>
 800c2f0:	6a21      	ldr	r1, [r4, #32]
 800c2f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2f4:	4643      	mov	r3, r8
 800c2f6:	463a      	mov	r2, r7
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	47b0      	blx	r6
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	dc06      	bgt.n	800c30e <__sflush_r+0xfe>
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	f04f 30ff 	mov.w	r0, #4294967295
 800c30c:	e78e      	b.n	800c22c <__sflush_r+0x1c>
 800c30e:	4407      	add	r7, r0
 800c310:	eba8 0800 	sub.w	r8, r8, r0
 800c314:	e7e9      	b.n	800c2ea <__sflush_r+0xda>
 800c316:	bf00      	nop
 800c318:	20400001 	.word	0x20400001

0800c31c <_fflush_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	690b      	ldr	r3, [r1, #16]
 800c320:	4605      	mov	r5, r0
 800c322:	460c      	mov	r4, r1
 800c324:	b913      	cbnz	r3, 800c32c <_fflush_r+0x10>
 800c326:	2500      	movs	r5, #0
 800c328:	4628      	mov	r0, r5
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	b118      	cbz	r0, 800c336 <_fflush_r+0x1a>
 800c32e:	6983      	ldr	r3, [r0, #24]
 800c330:	b90b      	cbnz	r3, 800c336 <_fflush_r+0x1a>
 800c332:	f7ff fa4f 	bl	800b7d4 <__sinit>
 800c336:	4b14      	ldr	r3, [pc, #80]	; (800c388 <_fflush_r+0x6c>)
 800c338:	429c      	cmp	r4, r3
 800c33a:	d11b      	bne.n	800c374 <_fflush_r+0x58>
 800c33c:	686c      	ldr	r4, [r5, #4]
 800c33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d0ef      	beq.n	800c326 <_fflush_r+0xa>
 800c346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c348:	07d0      	lsls	r0, r2, #31
 800c34a:	d404      	bmi.n	800c356 <_fflush_r+0x3a>
 800c34c:	0599      	lsls	r1, r3, #22
 800c34e:	d402      	bmi.n	800c356 <_fflush_r+0x3a>
 800c350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c352:	f7ff fadd 	bl	800b910 <__retarget_lock_acquire_recursive>
 800c356:	4628      	mov	r0, r5
 800c358:	4621      	mov	r1, r4
 800c35a:	f7ff ff59 	bl	800c210 <__sflush_r>
 800c35e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c360:	07da      	lsls	r2, r3, #31
 800c362:	4605      	mov	r5, r0
 800c364:	d4e0      	bmi.n	800c328 <_fflush_r+0xc>
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	059b      	lsls	r3, r3, #22
 800c36a:	d4dd      	bmi.n	800c328 <_fflush_r+0xc>
 800c36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c36e:	f7ff fad0 	bl	800b912 <__retarget_lock_release_recursive>
 800c372:	e7d9      	b.n	800c328 <_fflush_r+0xc>
 800c374:	4b05      	ldr	r3, [pc, #20]	; (800c38c <_fflush_r+0x70>)
 800c376:	429c      	cmp	r4, r3
 800c378:	d101      	bne.n	800c37e <_fflush_r+0x62>
 800c37a:	68ac      	ldr	r4, [r5, #8]
 800c37c:	e7df      	b.n	800c33e <_fflush_r+0x22>
 800c37e:	4b04      	ldr	r3, [pc, #16]	; (800c390 <_fflush_r+0x74>)
 800c380:	429c      	cmp	r4, r3
 800c382:	bf08      	it	eq
 800c384:	68ec      	ldreq	r4, [r5, #12]
 800c386:	e7da      	b.n	800c33e <_fflush_r+0x22>
 800c388:	0800c684 	.word	0x0800c684
 800c38c:	0800c6a4 	.word	0x0800c6a4
 800c390:	0800c664 	.word	0x0800c664

0800c394 <_lseek_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4d07      	ldr	r5, [pc, #28]	; (800c3b4 <_lseek_r+0x20>)
 800c398:	4604      	mov	r4, r0
 800c39a:	4608      	mov	r0, r1
 800c39c:	4611      	mov	r1, r2
 800c39e:	2200      	movs	r2, #0
 800c3a0:	602a      	str	r2, [r5, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	f7f5 febc 	bl	8002120 <_lseek>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d102      	bne.n	800c3b2 <_lseek_r+0x1e>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	b103      	cbz	r3, 800c3b2 <_lseek_r+0x1e>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	24000504 	.word	0x24000504

0800c3b8 <__swhatbuf_r>:
 800c3b8:	b570      	push	{r4, r5, r6, lr}
 800c3ba:	460e      	mov	r6, r1
 800c3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c0:	2900      	cmp	r1, #0
 800c3c2:	b096      	sub	sp, #88	; 0x58
 800c3c4:	4614      	mov	r4, r2
 800c3c6:	461d      	mov	r5, r3
 800c3c8:	da07      	bge.n	800c3da <__swhatbuf_r+0x22>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	602b      	str	r3, [r5, #0]
 800c3ce:	89b3      	ldrh	r3, [r6, #12]
 800c3d0:	061a      	lsls	r2, r3, #24
 800c3d2:	d410      	bmi.n	800c3f6 <__swhatbuf_r+0x3e>
 800c3d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3d8:	e00e      	b.n	800c3f8 <__swhatbuf_r+0x40>
 800c3da:	466a      	mov	r2, sp
 800c3dc:	f000 f8be 	bl	800c55c <_fstat_r>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	dbf2      	blt.n	800c3ca <__swhatbuf_r+0x12>
 800c3e4:	9a01      	ldr	r2, [sp, #4]
 800c3e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3ee:	425a      	negs	r2, r3
 800c3f0:	415a      	adcs	r2, r3
 800c3f2:	602a      	str	r2, [r5, #0]
 800c3f4:	e7ee      	b.n	800c3d4 <__swhatbuf_r+0x1c>
 800c3f6:	2340      	movs	r3, #64	; 0x40
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	b016      	add	sp, #88	; 0x58
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}

0800c400 <__smakebuf_r>:
 800c400:	898b      	ldrh	r3, [r1, #12]
 800c402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c404:	079d      	lsls	r5, r3, #30
 800c406:	4606      	mov	r6, r0
 800c408:	460c      	mov	r4, r1
 800c40a:	d507      	bpl.n	800c41c <__smakebuf_r+0x1c>
 800c40c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c410:	6023      	str	r3, [r4, #0]
 800c412:	6123      	str	r3, [r4, #16]
 800c414:	2301      	movs	r3, #1
 800c416:	6163      	str	r3, [r4, #20]
 800c418:	b002      	add	sp, #8
 800c41a:	bd70      	pop	{r4, r5, r6, pc}
 800c41c:	ab01      	add	r3, sp, #4
 800c41e:	466a      	mov	r2, sp
 800c420:	f7ff ffca 	bl	800c3b8 <__swhatbuf_r>
 800c424:	9900      	ldr	r1, [sp, #0]
 800c426:	4605      	mov	r5, r0
 800c428:	4630      	mov	r0, r6
 800c42a:	f7ff fa73 	bl	800b914 <_malloc_r>
 800c42e:	b948      	cbnz	r0, 800c444 <__smakebuf_r+0x44>
 800c430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c434:	059a      	lsls	r2, r3, #22
 800c436:	d4ef      	bmi.n	800c418 <__smakebuf_r+0x18>
 800c438:	f023 0303 	bic.w	r3, r3, #3
 800c43c:	f043 0302 	orr.w	r3, r3, #2
 800c440:	81a3      	strh	r3, [r4, #12]
 800c442:	e7e3      	b.n	800c40c <__smakebuf_r+0xc>
 800c444:	4b0d      	ldr	r3, [pc, #52]	; (800c47c <__smakebuf_r+0x7c>)
 800c446:	62b3      	str	r3, [r6, #40]	; 0x28
 800c448:	89a3      	ldrh	r3, [r4, #12]
 800c44a:	6020      	str	r0, [r4, #0]
 800c44c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c450:	81a3      	strh	r3, [r4, #12]
 800c452:	9b00      	ldr	r3, [sp, #0]
 800c454:	6163      	str	r3, [r4, #20]
 800c456:	9b01      	ldr	r3, [sp, #4]
 800c458:	6120      	str	r0, [r4, #16]
 800c45a:	b15b      	cbz	r3, 800c474 <__smakebuf_r+0x74>
 800c45c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c460:	4630      	mov	r0, r6
 800c462:	f000 f88d 	bl	800c580 <_isatty_r>
 800c466:	b128      	cbz	r0, 800c474 <__smakebuf_r+0x74>
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	f023 0303 	bic.w	r3, r3, #3
 800c46e:	f043 0301 	orr.w	r3, r3, #1
 800c472:	81a3      	strh	r3, [r4, #12]
 800c474:	89a0      	ldrh	r0, [r4, #12]
 800c476:	4305      	orrs	r5, r0
 800c478:	81a5      	strh	r5, [r4, #12]
 800c47a:	e7cd      	b.n	800c418 <__smakebuf_r+0x18>
 800c47c:	0800b76d 	.word	0x0800b76d

0800c480 <__malloc_lock>:
 800c480:	4801      	ldr	r0, [pc, #4]	; (800c488 <__malloc_lock+0x8>)
 800c482:	f7ff ba45 	b.w	800b910 <__retarget_lock_acquire_recursive>
 800c486:	bf00      	nop
 800c488:	240004fc 	.word	0x240004fc

0800c48c <__malloc_unlock>:
 800c48c:	4801      	ldr	r0, [pc, #4]	; (800c494 <__malloc_unlock+0x8>)
 800c48e:	f7ff ba40 	b.w	800b912 <__retarget_lock_release_recursive>
 800c492:	bf00      	nop
 800c494:	240004fc 	.word	0x240004fc

0800c498 <_free_r>:
 800c498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c49a:	2900      	cmp	r1, #0
 800c49c:	d048      	beq.n	800c530 <_free_r+0x98>
 800c49e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4a2:	9001      	str	r0, [sp, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f1a1 0404 	sub.w	r4, r1, #4
 800c4aa:	bfb8      	it	lt
 800c4ac:	18e4      	addlt	r4, r4, r3
 800c4ae:	f7ff ffe7 	bl	800c480 <__malloc_lock>
 800c4b2:	4a20      	ldr	r2, [pc, #128]	; (800c534 <_free_r+0x9c>)
 800c4b4:	9801      	ldr	r0, [sp, #4]
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	4615      	mov	r5, r2
 800c4ba:	b933      	cbnz	r3, 800c4ca <_free_r+0x32>
 800c4bc:	6063      	str	r3, [r4, #4]
 800c4be:	6014      	str	r4, [r2, #0]
 800c4c0:	b003      	add	sp, #12
 800c4c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4c6:	f7ff bfe1 	b.w	800c48c <__malloc_unlock>
 800c4ca:	42a3      	cmp	r3, r4
 800c4cc:	d90b      	bls.n	800c4e6 <_free_r+0x4e>
 800c4ce:	6821      	ldr	r1, [r4, #0]
 800c4d0:	1862      	adds	r2, r4, r1
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	bf04      	itt	eq
 800c4d6:	681a      	ldreq	r2, [r3, #0]
 800c4d8:	685b      	ldreq	r3, [r3, #4]
 800c4da:	6063      	str	r3, [r4, #4]
 800c4dc:	bf04      	itt	eq
 800c4de:	1852      	addeq	r2, r2, r1
 800c4e0:	6022      	streq	r2, [r4, #0]
 800c4e2:	602c      	str	r4, [r5, #0]
 800c4e4:	e7ec      	b.n	800c4c0 <_free_r+0x28>
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	b10b      	cbz	r3, 800c4f0 <_free_r+0x58>
 800c4ec:	42a3      	cmp	r3, r4
 800c4ee:	d9fa      	bls.n	800c4e6 <_free_r+0x4e>
 800c4f0:	6811      	ldr	r1, [r2, #0]
 800c4f2:	1855      	adds	r5, r2, r1
 800c4f4:	42a5      	cmp	r5, r4
 800c4f6:	d10b      	bne.n	800c510 <_free_r+0x78>
 800c4f8:	6824      	ldr	r4, [r4, #0]
 800c4fa:	4421      	add	r1, r4
 800c4fc:	1854      	adds	r4, r2, r1
 800c4fe:	42a3      	cmp	r3, r4
 800c500:	6011      	str	r1, [r2, #0]
 800c502:	d1dd      	bne.n	800c4c0 <_free_r+0x28>
 800c504:	681c      	ldr	r4, [r3, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	6053      	str	r3, [r2, #4]
 800c50a:	4421      	add	r1, r4
 800c50c:	6011      	str	r1, [r2, #0]
 800c50e:	e7d7      	b.n	800c4c0 <_free_r+0x28>
 800c510:	d902      	bls.n	800c518 <_free_r+0x80>
 800c512:	230c      	movs	r3, #12
 800c514:	6003      	str	r3, [r0, #0]
 800c516:	e7d3      	b.n	800c4c0 <_free_r+0x28>
 800c518:	6825      	ldr	r5, [r4, #0]
 800c51a:	1961      	adds	r1, r4, r5
 800c51c:	428b      	cmp	r3, r1
 800c51e:	bf04      	itt	eq
 800c520:	6819      	ldreq	r1, [r3, #0]
 800c522:	685b      	ldreq	r3, [r3, #4]
 800c524:	6063      	str	r3, [r4, #4]
 800c526:	bf04      	itt	eq
 800c528:	1949      	addeq	r1, r1, r5
 800c52a:	6021      	streq	r1, [r4, #0]
 800c52c:	6054      	str	r4, [r2, #4]
 800c52e:	e7c7      	b.n	800c4c0 <_free_r+0x28>
 800c530:	b003      	add	sp, #12
 800c532:	bd30      	pop	{r4, r5, pc}
 800c534:	2400009c 	.word	0x2400009c

0800c538 <_read_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	4d07      	ldr	r5, [pc, #28]	; (800c558 <_read_r+0x20>)
 800c53c:	4604      	mov	r4, r0
 800c53e:	4608      	mov	r0, r1
 800c540:	4611      	mov	r1, r2
 800c542:	2200      	movs	r2, #0
 800c544:	602a      	str	r2, [r5, #0]
 800c546:	461a      	mov	r2, r3
 800c548:	f7f5 fda6 	bl	8002098 <_read>
 800c54c:	1c43      	adds	r3, r0, #1
 800c54e:	d102      	bne.n	800c556 <_read_r+0x1e>
 800c550:	682b      	ldr	r3, [r5, #0]
 800c552:	b103      	cbz	r3, 800c556 <_read_r+0x1e>
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	bd38      	pop	{r3, r4, r5, pc}
 800c558:	24000504 	.word	0x24000504

0800c55c <_fstat_r>:
 800c55c:	b538      	push	{r3, r4, r5, lr}
 800c55e:	4d07      	ldr	r5, [pc, #28]	; (800c57c <_fstat_r+0x20>)
 800c560:	2300      	movs	r3, #0
 800c562:	4604      	mov	r4, r0
 800c564:	4608      	mov	r0, r1
 800c566:	4611      	mov	r1, r2
 800c568:	602b      	str	r3, [r5, #0]
 800c56a:	f7f5 fdbe 	bl	80020ea <_fstat>
 800c56e:	1c43      	adds	r3, r0, #1
 800c570:	d102      	bne.n	800c578 <_fstat_r+0x1c>
 800c572:	682b      	ldr	r3, [r5, #0]
 800c574:	b103      	cbz	r3, 800c578 <_fstat_r+0x1c>
 800c576:	6023      	str	r3, [r4, #0]
 800c578:	bd38      	pop	{r3, r4, r5, pc}
 800c57a:	bf00      	nop
 800c57c:	24000504 	.word	0x24000504

0800c580 <_isatty_r>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	4d06      	ldr	r5, [pc, #24]	; (800c59c <_isatty_r+0x1c>)
 800c584:	2300      	movs	r3, #0
 800c586:	4604      	mov	r4, r0
 800c588:	4608      	mov	r0, r1
 800c58a:	602b      	str	r3, [r5, #0]
 800c58c:	f7f5 fdbd 	bl	800210a <_isatty>
 800c590:	1c43      	adds	r3, r0, #1
 800c592:	d102      	bne.n	800c59a <_isatty_r+0x1a>
 800c594:	682b      	ldr	r3, [r5, #0]
 800c596:	b103      	cbz	r3, 800c59a <_isatty_r+0x1a>
 800c598:	6023      	str	r3, [r4, #0]
 800c59a:	bd38      	pop	{r3, r4, r5, pc}
 800c59c:	24000504 	.word	0x24000504

0800c5a0 <_init>:
 800c5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a2:	bf00      	nop
 800c5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5a6:	bc08      	pop	{r3}
 800c5a8:	469e      	mov	lr, r3
 800c5aa:	4770      	bx	lr

0800c5ac <_fini>:
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	bf00      	nop
 800c5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b2:	bc08      	pop	{r3}
 800c5b4:	469e      	mov	lr, r3
 800c5b6:	4770      	bx	lr
