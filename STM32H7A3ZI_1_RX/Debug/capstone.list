
capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2f4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800b5a0  0800b5a0  0001b5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b644  0800b644  0001b644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b64c  0800b64c  0001b64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b650  0800b650  0001b650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  0800b654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000498  24000018  0800b66c  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004b0  0800b66c  000204b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031f86  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004392  00000000  00000000  00051fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a40  00000000  00000000  00056360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018f8  00000000  00000000  00057da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000352e3  00000000  00000000  00059698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000201bd  00000000  00000000  0008e97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162315  00000000  00000000  000aeb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00210e4d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007268  00000000  00000000  00210ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000018 	.word	0x24000018
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b588 	.word	0x0800b588

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400001c 	.word	0x2400001c
 80002e8:	0800b588 	.word	0x0800b588

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <CS_Select>:
#define NRF24_CSN_PORT   GPIOD
#define NRF24_CSN_PIN    GPIO_PIN_15


void CS_Select (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <CS_Select+0x14>)
 80005f0:	f004 fa18 	bl	8004a24 <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	58020c00 	.word	0x58020c00

080005fc <CS_UnSelect>:

void CS_UnSelect (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <CS_UnSelect+0x14>)
 8000608:	f004 fa0c 	bl	8004a24 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	58020c00 	.word	0x58020c00

08000614 <CE_Enable>:


void CE_Enable (void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <CE_Enable+0x14>)
 8000620:	f004 fa00 	bl	8004a24 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58020c00 	.word	0x58020c00

0800062c <CE_Disable>:

void CE_Disable (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <CE_Disable+0x14>)
 8000638:	f004 f9f4 	bl	8004a24 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58020c00 	.word	0x58020c00

08000644 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	b2db      	uxtb	r3, r3
 800065c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000662:	f7ff ffbf 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	2202      	movs	r2, #2
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <nrf24_WriteReg+0x40>)
 8000672:	f007 fb8b 	bl	8007d8c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000676:	f7ff ffc1 	bl	80005fc <CS_UnSelect>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000424 	.word	0x24000424

08000688 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	b2db      	uxtb	r3, r3
 800069e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006a0:	f7ff ffa0 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80006a4:	f107 0114 	add.w	r1, r7, #20
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006ae:	f007 fb6d 	bl	8007d8c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <nrf24_WriteRegMulti+0x48>)
 80006be:	f007 fb65 	bl	8007d8c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006c2:	f7ff ff9b 	bl	80005fc <CS_UnSelect>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	24000424 	.word	0x24000424

080006d4 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006e2:	f7ff ff7f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80006e6:	1df9      	adds	r1, r7, #7
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4808      	ldr	r0, [pc, #32]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006ee:	f007 fb4d 	bl	8007d8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80006f2:	f107 010f 	add.w	r1, r7, #15
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2201      	movs	r2, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <nrf24_ReadReg+0x3c>)
 80006fc:	f007 fd38 	bl	8008170 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000700:	f7ff ff7c 	bl	80005fc <CS_UnSelect>

	return data;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	24000424 	.word	0x24000424

08000714 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000722:	f7ff ff5f 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000726:	f107 010f 	add.w	r1, r7, #15
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	2201      	movs	r2, #1
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000730:	f007 fb2c 	bl	8007d8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b29a      	uxth	r2, r3
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <nrf24_ReadReg_Multi+0x3c>)
 8000740:	f007 fd16 	bl	8008170 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000744:	f7ff ff5a 	bl	80005fc <CS_UnSelect>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	24000424 	.word	0x24000424

08000754 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800075e:	f7ff ff41 	bl	80005e4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <nrfsendCmd+0x28>)
 800076a:	f007 fb0f 	bl	8007d8c <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800076e:	f7ff ff45 	bl	80005fc <CS_UnSelect>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	24000424 	.word	0x24000424

08000780 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b07      	cmp	r3, #7
 800078e:	d104      	bne.n	800079a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000790:	2100      	movs	r1, #0
 8000792:	2007      	movs	r0, #7
 8000794:	f7ff ff56 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000798:	e090      	b.n	80008bc <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b17      	cmp	r3, #23
 800079e:	d104      	bne.n	80007aa <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80007a0:	2111      	movs	r1, #17
 80007a2:	2017      	movs	r0, #23
 80007a4:	f7ff ff4e 	bl	8000644 <nrf24_WriteReg>
}
 80007a8:	e088      	b.n	80008bc <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80007aa:	2108      	movs	r1, #8
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff49 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80007b2:	213f      	movs	r1, #63	; 0x3f
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff45 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80007ba:	2103      	movs	r1, #3
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ff41 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80007c2:	2103      	movs	r1, #3
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff ff3d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80007ca:	2103      	movs	r1, #3
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff ff39 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80007d2:	2102      	movs	r1, #2
 80007d4:	2005      	movs	r0, #5
 80007d6:	f7ff ff35 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80007da:	210e      	movs	r1, #14
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff ff31 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2007      	movs	r0, #7
 80007e6:	f7ff ff2d 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2008      	movs	r0, #8
 80007ee:	f7ff ff29 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2009      	movs	r0, #9
 80007f6:	f7ff ff25 	bl	8000644 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007fa:	4a32      	ldr	r2, [pc, #200]	; (80008c4 <nrf24_reset+0x144>)
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	3304      	adds	r3, #4
 8000808:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2205      	movs	r2, #5
 8000810:	4619      	mov	r1, r3
 8000812:	200a      	movs	r0, #10
 8000814:	f7ff ff38 	bl	8000688 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000818:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <nrf24_reset+0x148>)
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000822:	6018      	str	r0, [r3, #0]
 8000824:	3304      	adds	r3, #4
 8000826:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2205      	movs	r2, #5
 800082e:	4619      	mov	r1, r3
 8000830:	200b      	movs	r0, #11
 8000832:	f7ff ff29 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000836:	21c3      	movs	r1, #195	; 0xc3
 8000838:	200c      	movs	r0, #12
 800083a:	f7ff ff03 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800083e:	21c4      	movs	r1, #196	; 0xc4
 8000840:	200d      	movs	r0, #13
 8000842:	f7ff feff 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000846:	21c5      	movs	r1, #197	; 0xc5
 8000848:	200e      	movs	r0, #14
 800084a:	f7ff fefb 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800084e:	21c6      	movs	r1, #198	; 0xc6
 8000850:	200f      	movs	r0, #15
 8000852:	f7ff fef7 	bl	8000644 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000856:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <nrf24_reset+0x144>)
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000860:	6018      	str	r0, [r3, #0]
 8000862:	3304      	adds	r3, #4
 8000864:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2205      	movs	r2, #5
 800086c:	4619      	mov	r1, r3
 800086e:	2010      	movs	r0, #16
 8000870:	f7ff ff0a 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	2011      	movs	r0, #17
 8000878:	f7ff fee4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2012      	movs	r0, #18
 8000880:	f7ff fee0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2013      	movs	r0, #19
 8000888:	f7ff fedc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	2014      	movs	r0, #20
 8000890:	f7ff fed8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000894:	2100      	movs	r1, #0
 8000896:	2015      	movs	r0, #21
 8000898:	f7ff fed4 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2016      	movs	r0, #22
 80008a0:	f7ff fed0 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80008a4:	2111      	movs	r1, #17
 80008a6:	2017      	movs	r0, #23
 80008a8:	f7ff fecc 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f7ff fec8 	bl	8000644 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	201d      	movs	r0, #29
 80008b8:	f7ff fec4 	bl	8000644 <nrf24_WriteReg>
}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	0800b5a0 	.word	0x0800b5a0
 80008c8:	0800b5a8 	.word	0x0800b5a8

080008cc <NRF24_Init>:




void NRF24_Init (void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80008d0:	f7ff feac 	bl	800062c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff53 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80008da:	2100      	movs	r1, #0
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff feb1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80008e2:	2100      	movs	r1, #0
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fead 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80008ea:	2100      	movs	r1, #0
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff fea9 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80008f2:	2103      	movs	r1, #3
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff fea5 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80008fa:	2100      	movs	r1, #0
 80008fc:	2004      	movs	r0, #4
 80008fe:	f7ff fea1 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000902:	2100      	movs	r1, #0
 8000904:	2005      	movs	r0, #5
 8000906:	f7ff fe9d 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800090a:	210e      	movs	r1, #14
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff fe99 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000912:	f7ff fe7f 	bl	8000614 <CE_Enable>

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000926:	f7ff fe81 	bl	800062c <CE_Disable>

	nrf24_reset (STATUS);
 800092a:	2007      	movs	r0, #7
 800092c:	f7ff ff28 	bl	8000780 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	4619      	mov	r1, r3
 8000934:	2005      	movs	r0, #5
 8000936:	f7ff fe85 	bl	8000644 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff feca 	bl	80006d4 <nrf24_ReadReg>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4619      	mov	r1, r3
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fe77 	bl	8000644 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000956:	2205      	movs	r2, #5
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	200b      	movs	r0, #11
 800095c:	f7ff fe94 	bl	8000688 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000960:	21ee      	movs	r1, #238	; 0xee
 8000962:	200c      	movs	r0, #12
 8000964:	f7ff fe6e 	bl	8000644 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000968:	2120      	movs	r1, #32
 800096a:	2013      	movs	r0, #19
 800096c:	f7ff fe6a 	bl	8000644 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff feaf 	bl	80006d4 <nrf24_ReadReg>
 8000976:	4603      	mov	r3, r0
 8000978:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	f043 0303 	orr.w	r3, r3, #3
 8000980:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	4619      	mov	r1, r3
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fe5c 	bl	8000644 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800098c:	f7ff fe42 	bl	8000614 <CE_Enable>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80009a0:	2007      	movs	r0, #7
 80009a2:	f7ff fe97 	bl	80006d4 <nrf24_ReadReg>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00b      	beq.n	80009cc <isDataAvailable+0x34>
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	2007      	movs	r0, #7
 80009c4:	f7ff fe3e 	bl	8000644 <nrf24_WriteReg>

		return 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <isDataAvailable+0x36>
	}

	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80009e4:	f7ff fdfe 	bl	80005e4 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80009e8:	2361      	movs	r3, #97	; 0x61
 80009ea:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80009ec:	f107 010f 	add.w	r1, r7, #15
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2201      	movs	r2, #1
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <NRF24_Receive+0x50>)
 80009f6:	f007 f9c9 	bl	8007d8c <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	2220      	movs	r2, #32
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <NRF24_Receive+0x50>)
 8000a04:	f007 fbb4 	bl	8008170 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000a08:	f7ff fdf8 	bl	80005fc <CS_UnSelect>

	HAL_Delay(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f001 fce5 	bl	80023dc <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000a12:	23e2      	movs	r3, #226	; 0xe2
 8000a14:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe9b 	bl	8000754 <nrfsendCmd>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000424 	.word	0x24000424

08000a2c <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e00c      	b.n	8000a54 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	b2d9      	uxtb	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	18d4      	adds	r4, r2, r3
 8000a44:	4608      	mov	r0, r1
 8000a46:	f7ff fe45 	bl	80006d4 <nrf24_ReadReg>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b09      	cmp	r3, #9
 8000a58:	ddef      	ble.n	8000a3a <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	330a      	adds	r3, #10
 8000a5e:	2205      	movs	r2, #5
 8000a60:	4619      	mov	r1, r3
 8000a62:	200a      	movs	r0, #10
 8000a64:	f7ff fe56 	bl	8000714 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	330f      	adds	r3, #15
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	4619      	mov	r1, r3
 8000a70:	200b      	movs	r0, #11
 8000a72:	f7ff fe4f 	bl	8000714 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f103 0414 	add.w	r4, r3, #20
 8000a7c:	200c      	movs	r0, #12
 8000a7e:	f7ff fe29 	bl	80006d4 <nrf24_ReadReg>
 8000a82:	4603      	mov	r3, r0
 8000a84:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f103 0415 	add.w	r4, r3, #21
 8000a8c:	200d      	movs	r0, #13
 8000a8e:	f7ff fe21 	bl	80006d4 <nrf24_ReadReg>
 8000a92:	4603      	mov	r3, r0
 8000a94:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f103 0416 	add.w	r4, r3, #22
 8000a9c:	200e      	movs	r0, #14
 8000a9e:	f7ff fe19 	bl	80006d4 <nrf24_ReadReg>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f103 0417 	add.w	r4, r3, #23
 8000aac:	200f      	movs	r0, #15
 8000aae:	f7ff fe11 	bl	80006d4 <nrf24_ReadReg>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	2205      	movs	r2, #5
 8000abc:	4619      	mov	r1, r3
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f7ff fe28 	bl	8000714 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000ac4:	231d      	movs	r3, #29
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	e00e      	b.n	8000ae8 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	3b0c      	subs	r3, #12
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	18d4      	adds	r4, r2, r3
 8000ad8:	4608      	mov	r0, r1
 8000ada:	f7ff fdfb 	bl	80006d4 <nrf24_ReadReg>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b25      	cmp	r3, #37	; 0x25
 8000aec:	dded      	ble.n	8000aca <NRF24_ReadAll+0x9e>
	}

}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <buzzer>:
  D = 852,
  E = 758,
  F = 716,
  G = 638
};
void buzzer (void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

	  for(int i=0;i<11;i++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e00c      	b.n	8000b1e <buzzer+0x26>
	  {a[i]=RxData_From_Node3[i]-'0';}
 8000b04:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <buzzer+0xd4>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b10:	492f      	ldr	r1, [pc, #188]	; (8000bd0 <buzzer+0xd8>)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i=0;i<11;i++)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2b0a      	cmp	r3, #10
 8000b22:	ddef      	ble.n	8000b04 <buzzer+0xc>

	  int Distance1 = 100* a[1]  +10*a[2] +a[3];
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <buzzer+0xd8>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2264      	movs	r2, #100	; 0x64
 8000b2a:	fb02 f103 	mul.w	r1, r2, r3
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <buzzer+0xd8>)
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	4613      	mov	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4413      	add	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	18ca      	adds	r2, r1, r3
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <buzzer+0xd8>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
	  int Distance2 = 100* a[4]  +10*a[5] +a[6];
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <buzzer+0xd8>)
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	2264      	movs	r2, #100	; 0x64
 8000b4a:	fb02 f103 	mul.w	r1, r2, r3
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <buzzer+0xd8>)
 8000b50:	695a      	ldr	r2, [r3, #20]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	18ca      	adds	r2, r1, r3
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <buzzer+0xd8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4413      	add	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]
	  int Distance3 = 100* a[8]  +10*a[9] +a[10];
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <buzzer+0xd8>)
 8000b66:	6a1b      	ldr	r3, [r3, #32]
 8000b68:	2264      	movs	r2, #100	; 0x64
 8000b6a:	fb02 f103 	mul.w	r1, r2, r3
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <buzzer+0xd8>)
 8000b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	18ca      	adds	r2, r1, r3
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <buzzer+0xd8>)
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	4413      	add	r3, r2
 8000b82:	603b      	str	r3, [r7, #0]
    if (Distance1 <= 15 || Distance2 <= 15 || Distance3 <= 15)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2b0f      	cmp	r3, #15
 8000b88:	dd05      	ble.n	8000b96 <buzzer+0x9e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	dd02      	ble.n	8000b96 <buzzer+0x9e>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	dc15      	bgt.n	8000bc2 <buzzer+0xca>
    {
	 	  TIM2->ARR = C;
 8000b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9a:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
	 	  TIM2->CCR1 = TIM2->ARR / 2;
 8000ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000baa:	085b      	lsrs	r3, r3, #1
 8000bac:	6353      	str	r3, [r2, #52]	; 0x34
	 	  HAL_Delay(50);
 8000bae:	2032      	movs	r0, #50	; 0x32
 8000bb0:	f001 fc14 	bl	80023dc <HAL_Delay>
	 	  TIM2->CCR1 = 0;
 8000bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb8:	2200      	movs	r2, #0
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34
	 	  HAL_Delay(50);
 8000bbc:	2032      	movs	r0, #50	; 0x32
 8000bbe:	f001 fc0d 	bl	80023dc <HAL_Delay>
	 	  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	240000b4 	.word	0x240000b4
 8000bd0:	24000110 	.word	0x24000110

08000bd4 <HAL_FDCAN_RxFifo0Callback>:
#include "canfd.h"



void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d10f      	bne.n	8000c08 <HAL_FDCAN_RxFifo0Callback+0x34>
   {
	  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00a      	beq.n	8000c08 <HAL_FDCAN_RxFifo0Callback+0x34>
	  {

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node3) != HAL_OK)
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f002 ff01 	bl	8003a00 <HAL_FDCAN_GetRxMessage>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_FDCAN_RxFifo0Callback+0x34>
		{
		Error_Handler();
 8000c04:	f000 fe4e 	bl	80018a4 <Error_Handler>
		}

	  }
   }

 }//choumpa jodo
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	4000a000 	.word	0x4000a000
 8000c14:	240000b4 	.word	0x240000b4
 8000c18:	2400016c 	.word	0x2400016c

08000c1c <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_FDCAN_RxFifo1Callback+0x3c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d10f      	bne.n	8000c50 <HAL_FDCAN_RxFifo1Callback+0x34>
   {
	  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00a      	beq.n	8000c50 <HAL_FDCAN_RxFifo1Callback+0x34>
	  {
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData_From_Node1) != HAL_OK)
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_FDCAN_RxFifo1Callback+0x40>)
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_FDCAN_RxFifo1Callback+0x44>)
 8000c3e:	2141      	movs	r1, #65	; 0x41
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f002 fedd 	bl	8003a00 <HAL_FDCAN_GetRxMessage>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_FDCAN_RxFifo1Callback+0x34>
		{
		Error_Handler();
 8000c4c:	f000 fe2a 	bl	80018a4 <Error_Handler>
		}

	  }
   }
 }//rider
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	4000a000 	.word	0x4000a000
 8000c5c:	240000a4 	.word	0x240000a4
 8000c60:	2400016c 	.word	0x2400016c

08000c64 <HAL_FDCAN_RxBufferNewMessageCallback>:
void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

    if (FDCAN1 == hfdcan->Instance)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_FDCAN_RxBufferNewMessageCallback+0x30>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10a      	bne.n	8000c8c <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
    {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_BUFFER0, &RxHeader, RxData_From_Node4) != HAL_OK)
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_FDCAN_RxBufferNewMessageCallback+0x34>)
 8000c78:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_FDCAN_RxBufferNewMessageCallback+0x38>)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f002 febf 	bl	8003a00 <HAL_FDCAN_GetRxMessage>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_FDCAN_RxBufferNewMessageCallback+0x28>
        {
            Error_Handler();
 8000c88:	f000 fe0c 	bl	80018a4 <Error_Handler>
        }
    }

}//raspi
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	4000a000 	.word	0x4000a000
 8000c98:	2400005c 	.word	0x2400005c
 8000c9c:	2400016c 	.word	0x2400016c

08000ca0 <light_sensor>:
#include "light_sensor.h"

void light_sensor (void){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0

	 for(int l=12;l<=14;l++)
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	e00c      	b.n	8000cc6 <light_sensor+0x26>
	 {a[l]=RxData_From_Node3[l]-'0';}
 8000cac:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <light_sensor+0x70>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000cb8:	4916      	ldr	r1, [pc, #88]	; (8000d14 <light_sensor+0x74>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 for(int l=12;l<=14;l++)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0e      	cmp	r3, #14
 8000cca:	ddef      	ble.n	8000cac <light_sensor+0xc>
	 int jodo = 100* a[12]  +10*a[13] +a[14];
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <light_sensor+0x74>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	2264      	movs	r2, #100	; 0x64
 8000cd2:	fb02 f103 	mul.w	r1, r2, r3
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <light_sensor+0x74>)
 8000cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	18ca      	adds	r2, r1, r3
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <light_sensor+0x74>)
 8000ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce8:	4413      	add	r3, r2
 8000cea:	603b      	str	r3, [r7, #0]
	      htim3.Instance->CCR1=jodo;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <light_sensor+0x78>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	635a      	str	r2, [r3, #52]	; 0x34
	      if (jodo<45)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b2c      	cmp	r3, #44	; 0x2c
 8000cf8:	dc03      	bgt.n	8000d02 <light_sensor+0x62>
	      {
	    	  htim3.Instance->CCR1=0;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <light_sensor+0x78>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
	      }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	240000b4 	.word	0x240000b4
 8000d14:	24000110 	.word	0x24000110
 8000d18:	240001b4 	.word	0x240001b4

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f001 faca 	bl	80022b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f85e 	bl	8000de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f000 fcaa 	bl	8001680 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d2c:	f000 fa56 	bl	80011dc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000d30:	f000 fc5a 	bl	80015e8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000d34:	f000 faa8 	bl	8001288 <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000d38:	f000 f942 	bl	8000fc0 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000d3c:	f000 fb68 	bl	8001410 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000d40:	f000 f8c6 	bl	8000ed0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d44:	f000 fbda 	bl	80014fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//////////////nrf///////////
  NRF24_Init();
 8000d48:	f7ff fdc0 	bl	80008cc <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);//nrf rx
 8000d4c:	210a      	movs	r1, #10
 8000d4e:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <main+0xa8>)
 8000d50:	f7ff fde3 	bl	800091a <NRF24_RxMode>
  NRF24_ReadAll(data);//nrf rx
 8000d54:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <main+0xac>)
 8000d56:	f7ff fe69 	bl	8000a2c <NRF24_ReadAll>
////////////////////////////

////////////motor///////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//motor back1
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	481b      	ldr	r0, [pc, #108]	; (8000dcc <main+0xb0>)
 8000d5e:	f008 f887 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//motor back2
 8000d62:	2104      	movs	r1, #4
 8000d64:	4819      	ldr	r0, [pc, #100]	; (8000dcc <main+0xb0>)
 8000d66:	f008 f883 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//motor front
 8000d6a:	2108      	movs	r1, #8
 8000d6c:	4817      	ldr	r0, [pc, #92]	; (8000dcc <main+0xb0>)
 8000d6e:	f008 f87f 	bl	8008e70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,1);//motor enable1
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d78:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <main+0xb4>)
 8000d7a:	f003 fe53 	bl	8004a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//motor enable2
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <main+0xb8>)
 8000d86:	f003 fe4d 	bl	8004a24 <HAL_GPIO_WritePin>
////////////////////////////

///////////jodo///////////
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//led jodo
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <main+0xbc>)
 8000d8e:	f008 f86f 	bl	8008e70 <HAL_TIM_PWM_Start>
//////////jodo////////////



//////////////buzzer/////////
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d92:	2100      	movs	r1, #0
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <main+0xc0>)
 8000d96:	f008 f86b 	bl	8008e70 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isDataAvailable(2) == 1)
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f7ff fdfc 	bl	8000998 <isDataAvailable>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d102      	bne.n	8000dac <main+0x90>
	  {
		  NRF24_Receive(RxData);
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <main+0xc4>)
 8000da8:	f7ff fe16 	bl	80009d8 <NRF24_Receive>
	  }

	  go_back();
 8000dac:	f000 fd80 	bl	80018b0 <go_back>
	  buzzer();
 8000db0:	f7ff fea2 	bl	8000af8 <buzzer>
	  light_sensor();
 8000db4:	f7ff ff74 	bl	8000ca0 <light_sensor>
	  nrf_motor();
 8000db8:	f000 fdd4 	bl	8001964 <nrf_motor>
	  rpi_motor();
 8000dbc:	f000 fe5e 	bl	8001a7c <rpi_motor>
	  if (isDataAvailable(2) == 1)
 8000dc0:	e7eb      	b.n	8000d9a <main+0x7e>
 8000dc2:	bf00      	nop
 8000dc4:	24000000 	.word	0x24000000
 8000dc8:	240003a0 	.word	0x240003a0
 8000dcc:	240003d4 	.word	0x240003d4
 8000dd0:	58021400 	.word	0x58021400
 8000dd4:	58020000 	.word	0x58020000
 8000dd8:	240001b4 	.word	0x240001b4
 8000ddc:	240000c4 	.word	0x240000c4
 8000de0:	24000034 	.word	0x24000034

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09c      	sub	sp, #112	; 0x70
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	224c      	movs	r2, #76	; 0x4c
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f00a fbc0 	bl	800b578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00a fbba 	bl	800b578 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e04:	2004      	movs	r0, #4
 8000e06:	f003 fe27 	bl	8004a58 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <SystemClock_Config+0xe4>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a2d      	ldr	r2, [pc, #180]	; (8000ec8 <SystemClock_Config+0xe4>)
 8000e14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <SystemClock_Config+0xe4>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e26:	bf00      	nop
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <SystemClock_Config+0xe4>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e34:	d1f8      	bne.n	8000e28 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <SystemClock_Config+0xe8>)
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	4a24      	ldr	r2, [pc, #144]	; (8000ecc <SystemClock_Config+0xe8>)
 8000e3c:	f023 0303 	bic.w	r3, r3, #3
 8000e40:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e42:	2302      	movs	r3, #2
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e52:	2300      	movs	r3, #0
 8000e54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e56:	2304      	movs	r3, #4
 8000e58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8000e62:	2320      	movs	r3, #32
 8000e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fe46 	bl	8004b0c <HAL_RCC_OscConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e86:	f000 fd0d 	bl	80018a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8a:	233f      	movs	r3, #63	; 0x3f
 8000e8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e9a:	2340      	movs	r3, #64	; 0x40
 8000e9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e9e:	2340      	movs	r3, #64	; 0x40
 8000ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ea8:	2340      	movs	r3, #64	; 0x40
 8000eaa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 fa2f 	bl	8005314 <HAL_RCC_ClockConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ebc:	f000 fcf2 	bl	80018a4 <Error_Handler>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3770      	adds	r7, #112	; 0x70
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	58024800 	.word	0x58024800
 8000ecc:	58024400 	.word	0x58024400

08000ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000ef6:	4a30      	ldr	r2, [pc, #192]	; (8000fb8 <MX_ADC1_Init+0xe8>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f0e:	2204      	movs	r2, #4
 8000f10:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f52:	f001 fbf3 	bl	800273c <HAL_ADC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f5c:	f000 fca2 	bl	80018a4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f6c:	f002 f918 	bl	80031a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f76:	f000 fc95 	bl	80018a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_ADC1_Init+0xec>)
 8000f7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7e:	2306      	movs	r3, #6
 8000f80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f8a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_ADC1_Init+0xe4>)
 8000f9e:	f001 fd27 	bl	80029f0 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000fa8:	f000 fc7c 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000298 	.word	0x24000298
 8000fb8:	40022000 	.word	0x40022000
 8000fbc:	08600004 	.word	0x08600004

08000fc0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000fc4:	4b7f      	ldr	r3, [pc, #508]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fc6:	4a80      	ldr	r2, [pc, #512]	; (80011c8 <MX_FDCAN1_Init+0x208>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000fca:	4b7e      	ldr	r3, [pc, #504]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000fd2:	4b7c      	ldr	r3, [pc, #496]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000fd8:	4b7a      	ldr	r3, [pc, #488]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000fde:	4b79      	ldr	r3, [pc, #484]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000fe4:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000fea:	4b76      	ldr	r3, [pc, #472]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ff0:	4b74      	ldr	r3, [pc, #464]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000ff6:	4b73      	ldr	r3, [pc, #460]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ffc:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001002:	4b70      	ldr	r3, [pc, #448]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001004:	2201      	movs	r2, #1
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001008:	4b6e      	ldr	r3, [pc, #440]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800100a:	2204      	movs	r2, #4
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800100e:	4b6d      	ldr	r3, [pc, #436]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001010:	2205      	movs	r2, #5
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001014:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001016:	2204      	movs	r2, #4
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800101a:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 3;
 8001020:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001022:	2203      	movs	r2, #3
 8001024:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001026:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001028:	2200      	movs	r2, #0
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800102c:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800102e:	2201      	movs	r2, #1
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 8001032:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001034:	2206      	movs	r2, #6
 8001036:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 8001038:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800103a:	2201      	movs	r2, #1
 800103c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_16;
 800103e:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001040:	2206      	movs	r2, #6
 8001042:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001044:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001046:	2201      	movs	r2, #1
 8001048:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_16;
 800104a:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800104c:	2206      	movs	r2, #6
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001050:	4b5c      	ldr	r3, [pc, #368]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001052:	2200      	movs	r2, #0
 8001054:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001056:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001058:	2200      	movs	r2, #0
 800105a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800105c:	4b59      	ldr	r3, [pc, #356]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800105e:	2200      	movs	r2, #0
 8001060:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001062:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001064:	2200      	movs	r2, #0
 8001066:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 8001068:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800106a:	2206      	movs	r2, #6
 800106c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800106e:	4855      	ldr	r0, [pc, #340]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001070:	f002 fa42 	bl	80034f8 <HAL_FDCAN_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800107a:	f000 fc13 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  	  	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800107e:	4b53      	ldr	r3, [pc, #332]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
        sFilterConfig.FilterIndex = 1;
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 8001086:	2201      	movs	r2, #1
 8001088:	605a      	str	r2, [r3, #4]
        sFilterConfig.RxBufferIndex = 1;
 800108a:	4b50      	ldr	r3, [pc, #320]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 800108c:	2201      	movs	r2, #1
 800108e:	619a      	str	r2, [r3, #24]
        sFilterConfig.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 8001090:	4b4e      	ldr	r3, [pc, #312]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 8001092:	2201      	movs	r2, #1
 8001094:	609a      	str	r2, [r3, #8]
        sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 8001098:	2201      	movs	r2, #1
 800109a:	60da      	str	r2, [r3, #12]
        sFilterConfig.FilterID1 = 0x33; // ID Node2
 800109c:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 800109e:	2233      	movs	r2, #51	; 0x33
 80010a0:	611a      	str	r2, [r3, #16]
        sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80010a2:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 80010a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010a8:	615a      	str	r2, [r3, #20]
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80010aa:	4948      	ldr	r1, [pc, #288]	; (80011cc <MX_FDCAN1_Init+0x20c>)
 80010ac:	4845      	ldr	r0, [pc, #276]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 80010ae:	f002 fc05 	bl	80038bc <HAL_FDCAN_ConfigFilter>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_FDCAN1_Init+0xfc>
               {
                  Error_Handler();
 80010b8:	f000 fbf4 	bl	80018a4 <Error_Handler>
               }
//
  	  	sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 80010bc:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
        sFilterConfig1.FilterIndex = 2;
 80010c2:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	605a      	str	r2, [r3, #4]
        sFilterConfig1.RxBufferIndex = 2;
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	619a      	str	r2, [r3, #24]
        sFilterConfig1.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 80010ce:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	609a      	str	r2, [r3, #8]
        sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80010d4:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	60da      	str	r2, [r3, #12]
        sFilterConfig1.FilterID1 = 0x11; // ID Node2
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010dc:	2211      	movs	r2, #17
 80010de:	611a      	str	r2, [r3, #16]
        sFilterConfig1.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80010e0:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010e6:	615a      	str	r2, [r3, #20]
//
        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig1) != HAL_OK)
 80010e8:	4939      	ldr	r1, [pc, #228]	; (80011d0 <MX_FDCAN1_Init+0x210>)
 80010ea:	4836      	ldr	r0, [pc, #216]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 80010ec:	f002 fbe6 	bl	80038bc <HAL_FDCAN_ConfigFilter>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_FDCAN1_Init+0x13a>
        {
           Error_Handler();
 80010f6:	f000 fbd5 	bl	80018a4 <Error_Handler>
        }
  	  	sFilterConfig2.IdType = FDCAN_STANDARD_ID;
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
        sFilterConfig2.FilterIndex = 0;
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
        sFilterConfig2.RxBufferIndex = 0;
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
        sFilterConfig2.FilterType = FDCAN_FILTER_DUAL; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 800110e:	2201      	movs	r2, #1
 8001110:	609a      	str	r2, [r3, #8]
        sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001114:	2207      	movs	r2, #7
 8001116:	60da      	str	r2, [r3, #12]
        sFilterConfig2.FilterID1 = 0x44; // ID Node2
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 800111a:	2244      	movs	r2, #68	; 0x44
 800111c:	611a      	str	r2, [r3, #16]
        sFilterConfig2.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001120:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001124:	615a      	str	r2, [r3, #20]

        if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig2) != HAL_OK)
 8001126:	492b      	ldr	r1, [pc, #172]	; (80011d4 <MX_FDCAN1_Init+0x214>)
 8001128:	4826      	ldr	r0, [pc, #152]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800112a:	f002 fbc7 	bl	80038bc <HAL_FDCAN_ConfigFilter>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_FDCAN1_Init+0x178>
               {
                  Error_Handler();
 8001134:	f000 fbb6 	bl	80018a4 <Error_Handler>
               }

        if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001138:	4822      	ldr	r0, [pc, #136]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 800113a:	f002 fc35 	bl	80039a8 <HAL_FDCAN_Start>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_FDCAN1_Init+0x188>
              {
                Error_Handler();
 8001144:	f000 fbae 	bl	80018a4 <Error_Handler>





        if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_BUFFER_NEW_MESSAGE, 0) != HAL_OK)
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800114e:	481d      	ldr	r0, [pc, #116]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001150:	f002 fdc4 	bl	8003cdc <HAL_FDCAN_ActivateNotification>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_FDCAN1_Init+0x19e>
          {
            /* Notification Error */
            Error_Handler();
 800115a:	f000 fba3 	bl	80018a4 <Error_Handler>
          }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800115e:	2200      	movs	r2, #0
 8001160:	2101      	movs	r1, #1
 8001162:	4818      	ldr	r0, [pc, #96]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001164:	f002 fdba 	bl	8003cdc <HAL_FDCAN_ActivateNotification>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_FDCAN1_Init+0x1b2>
              {
                Error_Handler();
 800116e:	f000 fb99 	bl	80018a4 <Error_Handler>
              }
            if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8001172:	2200      	movs	r2, #0
 8001174:	2110      	movs	r1, #16
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <MX_FDCAN1_Init+0x204>)
 8001178:	f002 fdb0 	bl	8003cdc <HAL_FDCAN_ActivateNotification>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_FDCAN1_Init+0x1c6>
              {
                Error_Handler();
 8001182:	f000 fb8f 	bl	80018a4 <Error_Handler>
              }

            TxHeader.Identifier = 0x22;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 8001188:	2222      	movs	r2, #34	; 0x22
 800118a:	601a      	str	r2, [r3, #0]
            TxHeader.IdType = FDCAN_STANDARD_ID;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
            TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
            TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 800119a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800119e:	60da      	str	r2, [r3, #12]
            TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
            TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
            TxHeader.FDFormat = FDCAN_FD_CAN;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011b2:	619a      	str	r2, [r3, #24]
            TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
            TxHeader.MessageMarker = 0x0;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_FDCAN1_Init+0x218>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]



  /* USER CODE END FDCAN1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000300 	.word	0x24000300
 80011c8:	4000a000 	.word	0x4000a000
 80011cc:	2400003c 	.word	0x2400003c
 80011d0:	24000084 	.word	0x24000084
 80011d4:	24000194 	.word	0x24000194
 80011d8:	24000148 	.word	0x24000148

080011dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011e2:	4a28      	ldr	r2, [pc, #160]	; (8001284 <MX_SPI1_Init+0xa8>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011f6:	2207      	movs	r2, #7
 80011f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_SPI1_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001208:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800120c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001210:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001214:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_SPI1_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_SPI1_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_SPI1_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_SPI1_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_SPI1_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_SPI1_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_SPI1_Init+0xa4>)
 800126e:	f006 fc87 	bl	8007b80 <HAL_SPI_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001278:	f000 fb14 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	24000424 	.word	0x24000424
 8001284:	40013000 	.word	0x40013000

08001288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09c      	sub	sp, #112	; 0x70
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2234      	movs	r2, #52	; 0x34
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a f958 	bl	800b578 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <MX_TIM1_Init+0x180>)
 80012ca:	4a50      	ldr	r2, [pc, #320]	; (800140c <MX_TIM1_Init+0x184>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65;
 80012ce:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <MX_TIM1_Init+0x180>)
 80012d0:	2241      	movs	r2, #65	; 0x41
 80012d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <MX_TIM1_Init+0x180>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80012da:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <MX_TIM1_Init+0x180>)
 80012dc:	2264      	movs	r2, #100	; 0x64
 80012de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b49      	ldr	r3, [pc, #292]	; (8001408 <MX_TIM1_Init+0x180>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e6:	4b48      	ldr	r3, [pc, #288]	; (8001408 <MX_TIM1_Init+0x180>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b46      	ldr	r3, [pc, #280]	; (8001408 <MX_TIM1_Init+0x180>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f2:	4845      	ldr	r0, [pc, #276]	; (8001408 <MX_TIM1_Init+0x180>)
 80012f4:	f007 fd03 	bl	8008cfe <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012fe:	f000 fad1 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800130c:	4619      	mov	r1, r3
 800130e:	483e      	ldr	r0, [pc, #248]	; (8001408 <MX_TIM1_Init+0x180>)
 8001310:	f008 f8f0 	bl	80094f4 <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800131a:	f000 fac3 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131e:	483a      	ldr	r0, [pc, #232]	; (8001408 <MX_TIM1_Init+0x180>)
 8001320:	f007 fd44 	bl	8008dac <HAL_TIM_PWM_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800132a:	f000 fabb 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800133e:	4619      	mov	r1, r3
 8001340:	4831      	ldr	r0, [pc, #196]	; (8001408 <MX_TIM1_Init+0x180>)
 8001342:	f008 fe35 	bl	8009fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800134c:	f000 faaa 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001350:	2360      	movs	r3, #96	; 0x60
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8001354:	2332      	movs	r3, #50	; 0x32
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001358:	2300      	movs	r3, #0
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800135c:	2300      	movs	r3, #0
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	4824      	ldr	r0, [pc, #144]	; (8001408 <MX_TIM1_Init+0x180>)
 8001376:	f007 ffa9 	bl	80092cc <HAL_TIM_PWM_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001380:	f000 fa90 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001384:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001388:	2204      	movs	r2, #4
 800138a:	4619      	mov	r1, r3
 800138c:	481e      	ldr	r0, [pc, #120]	; (8001408 <MX_TIM1_Init+0x180>)
 800138e:	f007 ff9d 	bl	80092cc <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001398:	f000 fa84 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800139c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013a0:	2208      	movs	r2, #8
 80013a2:	4619      	mov	r1, r3
 80013a4:	4818      	ldr	r0, [pc, #96]	; (8001408 <MX_TIM1_Init+0x180>)
 80013a6:	f007 ff91 	bl	80092cc <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80013b0:	f000 fa78 	bl	80018a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <MX_TIM1_Init+0x180>)
 80013ea:	f008 fe6f 	bl	800a0cc <HAL_TIMEx_ConfigBreakDeadTime>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80013f4:	f000 fa56 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <MX_TIM1_Init+0x180>)
 80013fa:	f000 fd81 	bl	8001f00 <HAL_TIM_MspPostInit>

}
 80013fe:	bf00      	nop
 8001400:	3770      	adds	r7, #112	; 0x70
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	240003d4 	.word	0x240003d4
 800140c:	40010000 	.word	0x40010000

08001410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	; 0x38
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	615a      	str	r2, [r3, #20]
 8001440:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001448:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128-1;
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_TIM2_Init+0xe8>)
 800144c:	227f      	movs	r2, #127	; 0x7f
 800144e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001452:	2210      	movs	r2, #16
 8001454:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001458:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800146a:	4823      	ldr	r0, [pc, #140]	; (80014f8 <MX_TIM2_Init+0xe8>)
 800146c:	f007 fc47 	bl	8008cfe <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001476:	f000 fa15 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001484:	4619      	mov	r1, r3
 8001486:	481c      	ldr	r0, [pc, #112]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001488:	f008 f834 	bl	80094f4 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001492:	f000 fa07 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001498:	f007 fc88 	bl	8008dac <HAL_TIM_PWM_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014a2:	f000 f9ff 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4810      	ldr	r0, [pc, #64]	; (80014f8 <MX_TIM2_Init+0xe8>)
 80014b6:	f008 fd7b 	bl	8009fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014c0:	f000 f9f0 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c4:	2360      	movs	r3, #96	; 0x60
 80014c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM2_Init+0xe8>)
 80014dc:	f007 fef6 	bl	80092cc <HAL_TIM_PWM_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014e6:	f000 f9dd 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ea:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM2_Init+0xe8>)
 80014ec:	f000 fd08 	bl	8001f00 <HAL_TIM_MspPostInit>

}
 80014f0:	bf00      	nop
 80014f2:	3738      	adds	r7, #56	; 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	240000c4 	.word	0x240000c4

080014fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001530:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <MX_TIM3_Init+0xe8>)
 8001532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8001534:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001536:	2240      	movs	r2, #64	; 0x40
 8001538:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <MX_TIM3_Init+0xe4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001540:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001542:	2264      	movs	r2, #100	; 0x64
 8001544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <MX_TIM3_Init+0xe4>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001552:	4823      	ldr	r0, [pc, #140]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001554:	f007 fbd3 	bl	8008cfe <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800155e:	f000 f9a1 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156c:	4619      	mov	r1, r3
 800156e:	481c      	ldr	r0, [pc, #112]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001570:	f007 ffc0 	bl	80094f4 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800157a:	f000 f993 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800157e:	4818      	ldr	r0, [pc, #96]	; (80015e0 <MX_TIM3_Init+0xe4>)
 8001580:	f007 fc14 	bl	8008dac <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800158a:	f000 f98b 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4810      	ldr	r0, [pc, #64]	; (80015e0 <MX_TIM3_Init+0xe4>)
 800159e:	f008 fd07 	bl	8009fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015a8:	f000 f97c 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	; 0x60
 80015ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80015b0:	2332      	movs	r3, #50	; 0x32
 80015b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <MX_TIM3_Init+0xe4>)
 80015c4:	f007 fe82 	bl	80092cc <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015ce:	f000 f969 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <MX_TIM3_Init+0xe4>)
 80015d4:	f000 fc94 	bl	8001f00 <HAL_TIM_MspPostInit>

}
 80015d8:	bf00      	nop
 80015da:	3738      	adds	r7, #56	; 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	240001b4 	.word	0x240001b4
 80015e4:	40000400 	.word	0x40000400

080015e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <MX_USART3_UART_Init+0x90>)
 80015ee:	4a23      	ldr	r2, [pc, #140]	; (800167c <MX_USART3_UART_Init+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <MX_USART3_UART_Init+0x90>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_USART3_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_USART3_UART_Init+0x90>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_USART3_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001630:	4811      	ldr	r0, [pc, #68]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001632:	f008 fe09 	bl	800a248 <HAL_UART_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800163c:	f000 f932 	bl	80018a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001644:	f009 fe9c 	bl	800b380 <HAL_UARTEx_SetTxFifoThreshold>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800164e:	f000 f929 	bl	80018a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001656:	f009 fed1 	bl	800b3fc <HAL_UARTEx_SetRxFifoThreshold>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001660:	f000 f920 	bl	80018a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001666:	f009 fe52 	bl	800b30e <HAL_UARTEx_DisableFifoMode>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001670:	f000 f918 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	24000208 	.word	0x24000208
 800167c:	40004800 	.word	0x40004800

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	; 0x38
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001696:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <MX_GPIO_Init+0x208>)
 8001698:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800169c:	4a7a      	ldr	r2, [pc, #488]	; (8001888 <MX_GPIO_Init+0x208>)
 800169e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016a6:	4b78      	ldr	r3, [pc, #480]	; (8001888 <MX_GPIO_Init+0x208>)
 80016a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b74      	ldr	r3, [pc, #464]	; (8001888 <MX_GPIO_Init+0x208>)
 80016b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ba:	4a73      	ldr	r2, [pc, #460]	; (8001888 <MX_GPIO_Init+0x208>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016c4:	4b70      	ldr	r3, [pc, #448]	; (8001888 <MX_GPIO_Init+0x208>)
 80016c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b6d      	ldr	r3, [pc, #436]	; (8001888 <MX_GPIO_Init+0x208>)
 80016d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016d8:	4a6b      	ldr	r2, [pc, #428]	; (8001888 <MX_GPIO_Init+0x208>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016e2:	4b69      	ldr	r3, [pc, #420]	; (8001888 <MX_GPIO_Init+0x208>)
 80016e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f0:	4b65      	ldr	r3, [pc, #404]	; (8001888 <MX_GPIO_Init+0x208>)
 80016f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016f6:	4a64      	ldr	r2, [pc, #400]	; (8001888 <MX_GPIO_Init+0x208>)
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001700:	4b61      	ldr	r3, [pc, #388]	; (8001888 <MX_GPIO_Init+0x208>)
 8001702:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	4b5e      	ldr	r3, [pc, #376]	; (8001888 <MX_GPIO_Init+0x208>)
 8001710:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001714:	4a5c      	ldr	r2, [pc, #368]	; (8001888 <MX_GPIO_Init+0x208>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800171e:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <MX_GPIO_Init+0x208>)
 8001720:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	4b56      	ldr	r3, [pc, #344]	; (8001888 <MX_GPIO_Init+0x208>)
 800172e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001732:	4a55      	ldr	r2, [pc, #340]	; (8001888 <MX_GPIO_Init+0x208>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800173c:	4b52      	ldr	r3, [pc, #328]	; (8001888 <MX_GPIO_Init+0x208>)
 800173e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <MX_GPIO_Init+0x208>)
 800174c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001750:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <MX_GPIO_Init+0x208>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800175a:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <MX_GPIO_Init+0x208>)
 800175c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001768:	4b47      	ldr	r3, [pc, #284]	; (8001888 <MX_GPIO_Init+0x208>)
 800176a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800176e:	4a46      	ldr	r2, [pc, #280]	; (8001888 <MX_GPIO_Init+0x208>)
 8001770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001774:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <MX_GPIO_Init+0x208>)
 800177a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7184 	mov.w	r1, #264	; 0x108
 800178c:	483f      	ldr	r0, [pc, #252]	; (800188c <MX_GPIO_Init+0x20c>)
 800178e:	f003 f949 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2164      	movs	r1, #100	; 0x64
 8001796:	483e      	ldr	r0, [pc, #248]	; (8001890 <MX_GPIO_Init+0x210>)
 8001798:	f003 f944 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a2:	483c      	ldr	r0, [pc, #240]	; (8001894 <MX_GPIO_Init+0x214>)
 80017a4:	f003 f93e 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f24c 0101 	movw	r1, #49153	; 0xc001
 80017ae:	483a      	ldr	r0, [pc, #232]	; (8001898 <MX_GPIO_Init+0x218>)
 80017b0:	f003 f938 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ce_Pin|csn_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80017ba:	4838      	ldr	r0, [pc, #224]	; (800189c <MX_GPIO_Init+0x21c>)
 80017bc:	f003 f932 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IRQ_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80017c6:	4836      	ldr	r0, [pc, #216]	; (80018a0 <MX_GPIO_Init+0x220>)
 80017c8:	f003 f92c 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 80017cc:	f44f 7384 	mov.w	r3, #264	; 0x108
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4829      	ldr	r0, [pc, #164]	; (800188c <MX_GPIO_Init+0x20c>)
 80017e6:	f002 ff6d 	bl	80046c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80017ea:	2364      	movs	r3, #100	; 0x64
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	4823      	ldr	r0, [pc, #140]	; (8001890 <MX_GPIO_Init+0x210>)
 8001802:	f002 ff5f 	bl	80046c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	481d      	ldr	r0, [pc, #116]	; (8001894 <MX_GPIO_Init+0x214>)
 8001820:	f002 ff50 	bl	80046c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
 8001824:	f24c 0301 	movw	r3, #49153	; 0xc001
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4816      	ldr	r0, [pc, #88]	; (8001898 <MX_GPIO_Init+0x218>)
 800183e:	f002 ff41 	bl	80046c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ce_Pin csn_Pin */
  GPIO_InitStruct.Pin = ce_Pin|csn_Pin;
 8001842:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4810      	ldr	r0, [pc, #64]	; (800189c <MX_GPIO_Init+0x21c>)
 800185c:	f002 ff32 	bl	80046c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Pin PG14 */
  GPIO_InitStruct.Pin = IRQ_Pin|GPIO_PIN_14;
 8001860:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_GPIO_Init+0x220>)
 800187a:	f002 ff23 	bl	80046c4 <HAL_GPIO_Init>

}
 800187e:	bf00      	nop
 8001880:	3738      	adds	r7, #56	; 0x38
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	58024400 	.word	0x58024400
 800188c:	58020000 	.word	0x58020000
 8001890:	58020400 	.word	0x58020400
 8001894:	58021400 	.word	0x58021400
 8001898:	58021000 	.word	0x58021000
 800189c:	58020c00 	.word	0x58020c00
 80018a0:	58021800 	.word	0x58021800

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	e7fe      	b.n	80018ac <Error_Handler+0x8>
	...

080018b0 <go_back>:
  D = 852,
  E = 758,
  F = 716,
  G = 638
};
void go_back(void){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
		if(RxData[2]==0)
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <go_back+0xa4>)
 80018b6:	789b      	ldrb	r3, [r3, #2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d122      	bne.n	8001902 <go_back+0x52>
			  {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c2:	4825      	ldr	r0, [pc, #148]	; (8001958 <go_back+0xa8>)
 80018c4:	f003 f8ae 	bl	8004a24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2108      	movs	r1, #8
 80018cc:	4823      	ldr	r0, [pc, #140]	; (800195c <go_back+0xac>)
 80018ce:	f003 f8a9 	bl	8004a24 <HAL_GPIO_WritePin>
			  htim1.Instance->CCR1=RxData[0];
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <go_back+0xa4>)
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <go_back+0xb0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
			  htim1.Instance->CCR2=RxData[0];
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <go_back+0xa4>)
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <go_back+0xb0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
			  if(RxData[0]>=100)
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <go_back+0xa4>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b63      	cmp	r3, #99	; 0x63
 80018ec:	d907      	bls.n	80018fe <go_back+0x4e>
				  {
					  htim1.Instance->CCR1=99;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <go_back+0xb0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2263      	movs	r2, #99	; 0x63
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34
					  htim1.Instance->CCR2=99;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <go_back+0xb0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2263      	movs	r2, #99	; 0x63
 80018fc:	639a      	str	r2, [r3, #56]	; 0x38
				  }
			  light_sensor();
 80018fe:	f7ff f9cf 	bl	8000ca0 <light_sensor>
			 // ridar();
			  }
		if(RxData[2]==1)
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <go_back+0xa4>)
 8001904:	789b      	ldrb	r3, [r3, #2]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d122      	bne.n	8001950 <go_back+0xa0>
				{
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001910:	4811      	ldr	r0, [pc, #68]	; (8001958 <go_back+0xa8>)
 8001912:	f003 f887 	bl	8004a24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,1);
 8001916:	2201      	movs	r2, #1
 8001918:	2108      	movs	r1, #8
 800191a:	4810      	ldr	r0, [pc, #64]	; (800195c <go_back+0xac>)
 800191c:	f003 f882 	bl	8004a24 <HAL_GPIO_WritePin>
				htim1.Instance->CCR1=RxData[0];
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <go_back+0xa4>)
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <go_back+0xb0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
			    htim1.Instance->CCR2=RxData[0];
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <go_back+0xa4>)
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <go_back+0xb0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	639a      	str	r2, [r3, #56]	; 0x38
				if(RxData[0]>=100)
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <go_back+0xa4>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b63      	cmp	r3, #99	; 0x63
 800193a:	d907      	bls.n	800194c <go_back+0x9c>
					{
						htim1.Instance->CCR1=99;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <go_back+0xb0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2263      	movs	r2, #99	; 0x63
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
						htim1.Instance->CCR2=99;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <go_back+0xb0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2263      	movs	r2, #99	; 0x63
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
				    }
				light_sensor();
 800194c:	f7ff f9a8 	bl	8000ca0 <light_sensor>
			//	ridar();
			  }
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	24000034 	.word	0x24000034
 8001958:	58021000 	.word	0x58021000
 800195c:	58020000 	.word	0x58020000
 8001960:	240003d4 	.word	0x240003d4

08001964 <nrf_motor>:

void nrf_motor (void){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	if(RxData[3]==0)
 8001968:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <nrf_motor+0x10c>)
 800196a:	78db      	ldrb	r3, [r3, #3]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d17c      	bne.n	8001a6a <nrf_motor+0x106>
	{
			  if (RxData[1]  <50)
 8001970:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <nrf_motor+0x10c>)
 8001972:	785b      	ldrb	r3, [r3, #1]
 8001974:	2b31      	cmp	r3, #49	; 0x31
 8001976:	d83a      	bhi.n	80019ee <nrf_motor+0x8a>
				  {
					  while (RxData[1]  < 50)
 8001978:	e035      	b.n	80019e6 <nrf_motor+0x82>
					  {

						  light_sensor();
 800197a:	f7ff f991 	bl	8000ca0 <light_sensor>
						       buzzer();
 800197e:	f7ff f8bb 	bl	8000af8 <buzzer>
						  if (isDataAvailable(2) == 1)
 8001982:	2002      	movs	r0, #2
 8001984:	f7ff f808 	bl	8000998 <isDataAvailable>
 8001988:	4603      	mov	r3, r0
 800198a:	2b01      	cmp	r3, #1
 800198c:	d102      	bne.n	8001994 <nrf_motor+0x30>
						  {
							  NRF24_Receive(RxData);
 800198e:	4838      	ldr	r0, [pc, #224]	; (8001a70 <nrf_motor+0x10c>)
 8001990:	f7ff f822 	bl	80009d8 <NRF24_Receive>
						  }
						  htim1.Instance->CCR3 = 80;
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <nrf_motor+0x110>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2250      	movs	r2, #80	; 0x50
 800199a:	63da      	str	r2, [r3, #60]	; 0x3c
						  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a2:	4835      	ldr	r0, [pc, #212]	; (8001a78 <nrf_motor+0x114>)
 80019a4:	f003 f83e 	bl	8004a24 <HAL_GPIO_WritePin>
						  HAL_Delay(100);
 80019a8:	2064      	movs	r0, #100	; 0x64
 80019aa:	f000 fd17 	bl	80023dc <HAL_Delay>
						  go_back();
 80019ae:	f7ff ff7f 	bl	80018b0 <go_back>

						  if(50<=RxData[1]&&RxData[1]<=65)
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <nrf_motor+0x10c>)
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	2b31      	cmp	r3, #49	; 0x31
 80019b8:	d915      	bls.n	80019e6 <nrf_motor+0x82>
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <nrf_motor+0x10c>)
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	2b41      	cmp	r3, #65	; 0x41
 80019c0:	d811      	bhi.n	80019e6 <nrf_motor+0x82>
						  {
							  htim1.Instance->CCR3 = 100;
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <nrf_motor+0x110>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2264      	movs	r2, #100	; 0x64
 80019c8:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d0:	4829      	ldr	r0, [pc, #164]	; (8001a78 <nrf_motor+0x114>)
 80019d2:	f003 f827 	bl	8004a24 <HAL_GPIO_WritePin>
							  HAL_Delay(300);
 80019d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019da:	f000 fcff 	bl	80023dc <HAL_Delay>
							  htim1.Instance->CCR3 = 0;
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <nrf_motor+0x110>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	63da      	str	r2, [r3, #60]	; 0x3c
					  while (RxData[1]  < 50)
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <nrf_motor+0x10c>)
 80019e8:	785b      	ldrb	r3, [r3, #1]
 80019ea:	2b31      	cmp	r3, #49	; 0x31
 80019ec:	d9c5      	bls.n	800197a <nrf_motor+0x16>
						  }
					  }
				  }
			  if (RxData[1] > 65)
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <nrf_motor+0x10c>)
 80019f0:	785b      	ldrb	r3, [r3, #1]
 80019f2:	2b41      	cmp	r3, #65	; 0x41
 80019f4:	d939      	bls.n	8001a6a <nrf_motor+0x106>
					  {
						  while (RxData[1] > 65)
 80019f6:	e034      	b.n	8001a62 <nrf_motor+0xfe>
						  {
							  light_sensor();
 80019f8:	f7ff f952 	bl	8000ca0 <light_sensor>
							       buzzer();
 80019fc:	f7ff f87c 	bl	8000af8 <buzzer>
							  if (isDataAvailable(2) == 1)
 8001a00:	2002      	movs	r0, #2
 8001a02:	f7fe ffc9 	bl	8000998 <isDataAvailable>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d102      	bne.n	8001a12 <nrf_motor+0xae>
							  {
								  NRF24_Receive(RxData);
 8001a0c:	4818      	ldr	r0, [pc, #96]	; (8001a70 <nrf_motor+0x10c>)
 8001a0e:	f7fe ffe3 	bl	80009d8 <NRF24_Receive>
							  }
							  htim1.Instance->CCR3 = 80;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <nrf_motor+0x110>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2250      	movs	r2, #80	; 0x50
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c
							  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a20:	4815      	ldr	r0, [pc, #84]	; (8001a78 <nrf_motor+0x114>)
 8001a22:	f002 ffff 	bl	8004a24 <HAL_GPIO_WritePin>
							  HAL_Delay(100);
 8001a26:	2064      	movs	r0, #100	; 0x64
 8001a28:	f000 fcd8 	bl	80023dc <HAL_Delay>
							  go_back();
 8001a2c:	f7ff ff40 	bl	80018b0 <go_back>
							  if(50<=RxData[1]&&RxData[1]<=65)
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <nrf_motor+0x10c>)
 8001a32:	785b      	ldrb	r3, [r3, #1]
 8001a34:	2b31      	cmp	r3, #49	; 0x31
 8001a36:	d914      	bls.n	8001a62 <nrf_motor+0xfe>
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <nrf_motor+0x10c>)
 8001a3a:	785b      	ldrb	r3, [r3, #1]
 8001a3c:	2b41      	cmp	r3, #65	; 0x41
 8001a3e:	d810      	bhi.n	8001a62 <nrf_motor+0xfe>
							  {
								  htim1.Instance->CCR3 = 90;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <nrf_motor+0x110>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	225a      	movs	r2, #90	; 0x5a
 8001a46:	63da      	str	r2, [r3, #60]	; 0x3c
								  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4e:	480a      	ldr	r0, [pc, #40]	; (8001a78 <nrf_motor+0x114>)
 8001a50:	f002 ffe8 	bl	8004a24 <HAL_GPIO_WritePin>
								  HAL_Delay(250);
 8001a54:	20fa      	movs	r0, #250	; 0xfa
 8001a56:	f000 fcc1 	bl	80023dc <HAL_Delay>
								  htim1.Instance->CCR3 = 0;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <nrf_motor+0x110>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	63da      	str	r2, [r3, #60]	; 0x3c
						  while (RxData[1] > 65)
 8001a62:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <nrf_motor+0x10c>)
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	2b41      	cmp	r3, #65	; 0x41
 8001a68:	d8c6      	bhi.n	80019f8 <nrf_motor+0x94>
						  }
					  }


	  }
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	24000034 	.word	0x24000034
 8001a74:	240003d4 	.word	0x240003d4
 8001a78:	58021800 	.word	0x58021800

08001a7c <rpi_motor>:
int executedOnce_l = 0;

void rpi_motor (void){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	  if(RxData[3]==1)
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <rpi_motor+0x104>)
 8001a82:	78db      	ldrb	r3, [r3, #3]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d179      	bne.n	8001b7c <rpi_motor+0x100>
												  }

									  }

				    		}*/
		  while (RxData_From_Node4[0]=='L')
 8001a88:	e035      	b.n	8001af6 <rpi_motor+0x7a>
		  {
			  light_sensor();
 8001a8a:	f7ff f909 	bl	8000ca0 <light_sensor>
			       buzzer();
 8001a8e:	f7ff f833 	bl	8000af8 <buzzer>
			  if (isDataAvailable(2) == 1)
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7fe ff80 	bl	8000998 <isDataAvailable>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d102      	bne.n	8001aa4 <rpi_motor+0x28>
			  {
				  NRF24_Receive(RxData);
 8001a9e:	4838      	ldr	r0, [pc, #224]	; (8001b80 <rpi_motor+0x104>)
 8001aa0:	f7fe ff9a 	bl	80009d8 <NRF24_Receive>
			  }
			  htim1.Instance->CCR3 = 80;
 8001aa4:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <rpi_motor+0x108>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2250      	movs	r2, #80	; 0x50
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ab2:	4835      	ldr	r0, [pc, #212]	; (8001b88 <rpi_motor+0x10c>)
 8001ab4:	f002 ffb6 	bl	8004a24 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8001ab8:	2064      	movs	r0, #100	; 0x64
 8001aba:	f000 fc8f 	bl	80023dc <HAL_Delay>
			  go_back();
 8001abe:	f7ff fef7 	bl	80018b0 <go_back>
			  if(RxData[3]==0)
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <rpi_motor+0x104>)
 8001ac4:	78db      	ldrb	r3, [r3, #3]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d01a      	beq.n	8001b00 <rpi_motor+0x84>
			  {
				  break;
			  }
			  if(RxData_From_Node4[0]=='G')
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <rpi_motor+0x110>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b47      	cmp	r3, #71	; 0x47
 8001ad0:	d111      	bne.n	8001af6 <rpi_motor+0x7a>
			  {
				  htim1.Instance->CCR3 = 100;
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <rpi_motor+0x108>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2264      	movs	r2, #100	; 0x64
 8001ad8:	63da      	str	r2, [r3, #60]	; 0x3c
				  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae0:	4829      	ldr	r0, [pc, #164]	; (8001b88 <rpi_motor+0x10c>)
 8001ae2:	f002 ff9f 	bl	8004a24 <HAL_GPIO_WritePin>
				  HAL_Delay(200);
 8001ae6:	20c8      	movs	r0, #200	; 0xc8
 8001ae8:	f000 fc78 	bl	80023dc <HAL_Delay>
				  htim1.Instance->CCR3 = 0;
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <rpi_motor+0x108>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2200      	movs	r2, #0
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8001af4:	e005      	b.n	8001b02 <rpi_motor+0x86>
		  while (RxData_From_Node4[0]=='L')
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <rpi_motor+0x110>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b4c      	cmp	r3, #76	; 0x4c
 8001afc:	d0c5      	beq.n	8001a8a <rpi_motor+0xe>
 8001afe:	e037      	b.n	8001b70 <rpi_motor+0xf4>
				  break;
 8001b00:	bf00      	nop
			  }

		  }
//80 100 80 90

			  while (RxData_From_Node4[0]=='R')
 8001b02:	e035      	b.n	8001b70 <rpi_motor+0xf4>
			  {
					   light_sensor();
 8001b04:	f7ff f8cc 	bl	8000ca0 <light_sensor>
				       buzzer();
 8001b08:	f7fe fff6 	bl	8000af8 <buzzer>
				  if (isDataAvailable(2) == 1)
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f7fe ff43 	bl	8000998 <isDataAvailable>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d102      	bne.n	8001b1e <rpi_motor+0xa2>
				  {
					  NRF24_Receive(RxData);
 8001b18:	4819      	ldr	r0, [pc, #100]	; (8001b80 <rpi_motor+0x104>)
 8001b1a:	f7fe ff5d 	bl	80009d8 <NRF24_Receive>
				  }
				  htim1.Instance->CCR3 = 80;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <rpi_motor+0x108>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2250      	movs	r2, #80	; 0x50
 8001b24:	63da      	str	r2, [r3, #60]	; 0x3c
				  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8001b26:	2201      	movs	r2, #1
 8001b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2c:	4816      	ldr	r0, [pc, #88]	; (8001b88 <rpi_motor+0x10c>)
 8001b2e:	f002 ff79 	bl	8004a24 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001b32:	2064      	movs	r0, #100	; 0x64
 8001b34:	f000 fc52 	bl	80023dc <HAL_Delay>
				  go_back();
 8001b38:	f7ff feba 	bl	80018b0 <go_back>
				  if(RxData[3]==0)
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <rpi_motor+0x104>)
 8001b3e:	78db      	ldrb	r3, [r3, #3]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01a      	beq.n	8001b7a <rpi_motor+0xfe>
				  {
					  break;
				  }
				  if(RxData_From_Node4[0]=='G')
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <rpi_motor+0x110>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b47      	cmp	r3, #71	; 0x47
 8001b4a:	d111      	bne.n	8001b70 <rpi_motor+0xf4>
				  {
					  htim1.Instance->CCR3 = 90;
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <rpi_motor+0x108>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	225a      	movs	r2, #90	; 0x5a
 8001b52:	63da      	str	r2, [r3, #60]	; 0x3c
					  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	480b      	ldr	r0, [pc, #44]	; (8001b88 <rpi_motor+0x10c>)
 8001b5c:	f002 ff62 	bl	8004a24 <HAL_GPIO_WritePin>
					  HAL_Delay(200);
 8001b60:	20c8      	movs	r0, #200	; 0xc8
 8001b62:	f000 fc3b 	bl	80023dc <HAL_Delay>
					  htim1.Instance->CCR3 = 0;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <rpi_motor+0x108>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	63da      	str	r2, [r3, #60]	; 0x3c
					break;
 8001b6e:	e005      	b.n	8001b7c <rpi_motor+0x100>
			  while (RxData_From_Node4[0]=='R')
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <rpi_motor+0x110>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b52      	cmp	r3, #82	; 0x52
 8001b76:	d0c5      	beq.n	8001b04 <rpi_motor+0x88>
							  }*/



	  }
}
 8001b78:	e000      	b.n	8001b7c <rpi_motor+0x100>
					  break;
 8001b7a:	bf00      	nop
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	24000034 	.word	0x24000034
 8001b84:	240003d4 	.word	0x240003d4
 8001b88:	58021800 	.word	0x58021800
 8001b8c:	2400005c 	.word	0x2400005c

08001b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_MspInit+0x30>)
 8001b98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001b9c:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_MspInit+0x30>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_MspInit+0x30>)
 8001ba8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	58024400 	.word	0x58024400

08001bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0b8      	sub	sp, #224	; 0xe0
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	22b8      	movs	r2, #184	; 0xb8
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f009 fcc7 	bl	800b578 <memset>
  if(hadc->Instance==ADC1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_ADC_MspInit+0xd4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d14d      	bne.n	8001c90 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bf8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8001bfe:	2381      	movs	r3, #129	; 0x81
 8001c00:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001c0e:	2340      	movs	r3, #64	; 0x40
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 ff01 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c30:	f7ff fe38 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c36:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001c3a:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c3c:	f043 0320 	orr.w	r3, r3, #32
 8001c40:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c46:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c58:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c5a:	f043 0320 	orr.w	r3, r3, #32
 8001c5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_ADC_MspInit+0xd8>)
 8001c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_ADC_MspInit+0xdc>)
 8001c8c:	f002 fd1a 	bl	80046c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	37e0      	adds	r7, #224	; 0xe0
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58021400 	.word	0x58021400

08001ca4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0b8      	sub	sp, #224	; 0xe0
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	22b8      	movs	r2, #184	; 0xb8
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f009 fc57 	bl	800b578 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a2d      	ldr	r2, [pc, #180]	; (8001d84 <HAL_FDCAN_MspInit+0xe0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d153      	bne.n	8001d7c <HAL_FDCAN_MspInit+0xd8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cd8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001cda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fea0 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001cf2:	f7ff fdd7 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_FDCAN_MspInit+0xe4>)
 8001cf8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001cfc:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <HAL_FDCAN_MspInit+0xe4>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_FDCAN_MspInit+0xe4>)
 8001d08:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_FDCAN_MspInit+0xe4>)
 8001d16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d1a:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_FDCAN_MspInit+0xe4>)
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_FDCAN_MspInit+0xe4>)
 8001d26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d32:	2303      	movs	r3, #3
 8001d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d4a:	2309      	movs	r3, #9
 8001d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <HAL_FDCAN_MspInit+0xe8>)
 8001d58:	f002 fcb4 	bl	80046c4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2013      	movs	r0, #19
 8001d62:	f001 fb94 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001d66:	2013      	movs	r0, #19
 8001d68:	f001 fbab 	bl	80034c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2015      	movs	r0, #21
 8001d72:	f001 fb8c 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001d76:	2015      	movs	r0, #21
 8001d78:	f001 fba3 	bl	80034c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001d7c:	bf00      	nop
 8001d7e:	37e0      	adds	r7, #224	; 0xe0
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	4000a000 	.word	0x4000a000
 8001d88:	58024400 	.word	0x58024400
 8001d8c:	58020c00 	.word	0x58020c00

08001d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0b8      	sub	sp, #224	; 0xe0
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	22b8      	movs	r2, #184	; 0xb8
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f009 fbe1 	bl	800b578 <memset>
  if(hspi->Instance==SPI1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_SPI_MspInit+0xbc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d141      	bne.n	8001e44 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 fe2c 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001dda:	f7ff fd63 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_SPI_MspInit+0xc0>)
 8001de0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001de4:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <HAL_SPI_MspInit+0xc0>)
 8001de6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dea:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_SPI_MspInit+0xc0>)
 8001df0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_SPI_MspInit+0xc0>)
 8001dfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_SPI_MspInit+0xc0>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_SPI_MspInit+0xc0>)
 8001e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e1a:	23e0      	movs	r3, #224	; 0xe0
 8001e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e32:	2305      	movs	r3, #5
 8001e34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <HAL_SPI_MspInit+0xc4>)
 8001e40:	f002 fc40 	bl	80046c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	37e0      	adds	r7, #224	; 0xe0
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013000 	.word	0x40013000
 8001e50:	58024400 	.word	0x58024400
 8001e54:	58020000 	.word	0x58020000

08001e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_TIM_Base_MspInit+0x9c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10f      	bne.n	8001e8a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8001e6c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e70:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8001e7c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e88:	e030      	b.n	8001eec <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d117      	bne.n	8001ec4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8001e96:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e9a:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8001ea6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	201c      	movs	r0, #28
 8001eb8:	f001 fae9 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ebc:	201c      	movs	r0, #28
 8001ebe:	f001 fb00 	bl	80034c2 <HAL_NVIC_EnableIRQ>
}
 8001ec2:	e013      	b.n	8001eec <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_TIM_Base_MspInit+0xa4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8001ed0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_TIM_Base_MspInit+0xa0>)
 8001ee0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	40000400 	.word	0x40000400

08001f00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a38      	ldr	r2, [pc, #224]	; (8002000 <HAL_TIM_MspPostInit+0x100>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d120      	bne.n	8001f64 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f22:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_TIM_MspPostInit+0x104>)
 8001f24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f28:	4a36      	ldr	r2, [pc, #216]	; (8002004 <HAL_TIM_MspPostInit+0x104>)
 8001f2a:	f043 0310 	orr.w	r3, r3, #16
 8001f2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_TIM_MspPostInit+0x104>)
 8001f34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001f40:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	482a      	ldr	r0, [pc, #168]	; (8002008 <HAL_TIM_MspPostInit+0x108>)
 8001f5e:	f002 fbb1 	bl	80046c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f62:	e048      	b.n	8001ff6 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6c:	d11f      	bne.n	8001fae <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_TIM_MspPostInit+0x104>)
 8001f70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f74:	4a23      	ldr	r2, [pc, #140]	; (8002004 <HAL_TIM_MspPostInit+0x104>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_TIM_MspPostInit+0x104>)
 8001f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4819      	ldr	r0, [pc, #100]	; (800200c <HAL_TIM_MspPostInit+0x10c>)
 8001fa8:	f002 fb8c 	bl	80046c4 <HAL_GPIO_Init>
}
 8001fac:	e023      	b.n	8001ff6 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_TIM_MspPostInit+0x110>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d11e      	bne.n	8001ff6 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_TIM_MspPostInit+0x104>)
 8001fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fbe:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_TIM_MspPostInit+0x104>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_TIM_MspPostInit+0x104>)
 8001fca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fd6:	2340      	movs	r3, #64	; 0x40
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4808      	ldr	r0, [pc, #32]	; (8002014 <HAL_TIM_MspPostInit+0x114>)
 8001ff2:	f002 fb67 	bl	80046c4 <HAL_GPIO_Init>
}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40010000 	.word	0x40010000
 8002004:	58024400 	.word	0x58024400
 8002008:	58021000 	.word	0x58021000
 800200c:	58020000 	.word	0x58020000
 8002010:	40000400 	.word	0x40000400
 8002014:	58020800 	.word	0x58020800

08002018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b0b8      	sub	sp, #224	; 0xe0
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	22b8      	movs	r2, #184	; 0xb8
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f009 fa9d 	bl	800b578 <memset>
  if(huart->Instance==USART3)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <HAL_UART_MspInit+0xc0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d142      	bne.n	80020ce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002048:	2302      	movs	r3, #2
 800204a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fce8 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002062:	f7ff fc1f 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_UART_MspInit+0xc4>)
 8002068:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_UART_MspInit+0xc4>)
 800206e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002072:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_UART_MspInit+0xc4>)
 8002078:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800207c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_UART_MspInit+0xc4>)
 8002086:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_UART_MspInit+0xc4>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_UART_MspInit+0xc4>)
 8002096:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020bc:	2307      	movs	r3, #7
 80020be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_UART_MspInit+0xc8>)
 80020ca:	f002 fafb 	bl	80046c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	37e0      	adds	r7, #224	; 0xe0
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40004800 	.word	0x40004800
 80020dc:	58024400 	.word	0x58024400
 80020e0:	58020c00 	.word	0x58020c00

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x4>

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 f934 	bl	800239c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <FDCAN1_IT0_IRQHandler+0x10>)
 800213e:	f001 fe47 	bl	8003dd0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	24000300 	.word	0x24000300

0800214c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <FDCAN1_IT1_IRQHandler+0x10>)
 8002152:	f001 fe3d 	bl	8003dd0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	24000300 	.word	0x24000300

08002160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM2_IRQHandler+0x10>)
 8002166:	f006 ff91 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	240000c4 	.word	0x240000c4

08002174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002178:	4b32      	ldr	r3, [pc, #200]	; (8002244 <SystemInit+0xd0>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a31      	ldr	r2, [pc, #196]	; (8002244 <SystemInit+0xd0>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <SystemInit+0xd4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	2b02      	cmp	r3, #2
 8002192:	d807      	bhi.n	80021a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <SystemInit+0xd4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 030f 	bic.w	r3, r3, #15
 800219c:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <SystemInit+0xd4>)
 800219e:	f043 0303 	orr.w	r3, r3, #3
 80021a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021a4:	4b29      	ldr	r3, [pc, #164]	; (800224c <SystemInit+0xd8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a28      	ldr	r2, [pc, #160]	; (800224c <SystemInit+0xd8>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021b0:	4b26      	ldr	r3, [pc, #152]	; (800224c <SystemInit+0xd8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021b6:	4b25      	ldr	r3, [pc, #148]	; (800224c <SystemInit+0xd8>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4924      	ldr	r1, [pc, #144]	; (800224c <SystemInit+0xd8>)
 80021bc:	4b24      	ldr	r3, [pc, #144]	; (8002250 <SystemInit+0xdc>)
 80021be:	4013      	ands	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <SystemInit+0xd4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <SystemInit+0xd4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 030f 	bic.w	r3, r3, #15
 80021d6:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <SystemInit+0xd4>)
 80021d8:	f043 0303 	orr.w	r3, r3, #3
 80021dc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <SystemInit+0xd8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <SystemInit+0xd8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <SystemInit+0xd8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <SystemInit+0xd8>)
 80021f2:	4a18      	ldr	r2, [pc, #96]	; (8002254 <SystemInit+0xe0>)
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <SystemInit+0xd8>)
 80021f8:	4a17      	ldr	r2, [pc, #92]	; (8002258 <SystemInit+0xe4>)
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <SystemInit+0xd8>)
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <SystemInit+0xe8>)
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <SystemInit+0xd8>)
 8002204:	2200      	movs	r2, #0
 8002206:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <SystemInit+0xd8>)
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <SystemInit+0xe8>)
 800220c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <SystemInit+0xd8>)
 8002210:	2200      	movs	r2, #0
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <SystemInit+0xd8>)
 8002216:	4a11      	ldr	r2, [pc, #68]	; (800225c <SystemInit+0xe8>)
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <SystemInit+0xd8>)
 800221c:	2200      	movs	r2, #0
 800221e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <SystemInit+0xd8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a09      	ldr	r2, [pc, #36]	; (800224c <SystemInit+0xd8>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <SystemInit+0xd8>)
 800222e:	2200      	movs	r2, #0
 8002230:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <SystemInit+0xec>)
 8002234:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002238:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00
 8002248:	52002000 	.word	0x52002000
 800224c:	58024400 	.word	0x58024400
 8002250:	eaf6ed7f 	.word	0xeaf6ed7f
 8002254:	02020200 	.word	0x02020200
 8002258:	01ff0000 	.word	0x01ff0000
 800225c:	01010280 	.word	0x01010280
 8002260:	52004000 	.word	0x52004000

08002264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800229c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002268:	f7ff ff84 	bl	8002174 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800226e:	490d      	ldr	r1, [pc, #52]	; (80022a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002274:	e002      	b.n	800227c <LoopCopyDataInit>

08002276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227a:	3304      	adds	r3, #4

0800227c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800227c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002280:	d3f9      	bcc.n	8002276 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002284:	4c0a      	ldr	r4, [pc, #40]	; (80022b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002288:	e001      	b.n	800228e <LoopFillZerobss>

0800228a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800228c:	3204      	adds	r2, #4

0800228e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002290:	d3fb      	bcc.n	800228a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002292:	f009 f93f 	bl	800b514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002296:	f7fe fd41 	bl	8000d1c <main>
  bx  lr
 800229a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800229c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80022a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022a4:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 80022a8:	0800b654 	.word	0x0800b654
  ldr r2, =_sbss
 80022ac:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 80022b0:	240004b0 	.word	0x240004b0

080022b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC_IRQHandler>
	...

080022b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022be:	2003      	movs	r0, #3
 80022c0:	f001 f8da 	bl	8003478 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80022c4:	f003 f9dc 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_Init+0x68>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	4913      	ldr	r1, [pc, #76]	; (8002324 <HAL_Init+0x6c>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_Init+0x68>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_Init+0x6c>)
 80022ec:	5cd3      	ldrb	r3, [r2, r3]
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <HAL_Init+0x70>)
 80022fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022fc:	4a0b      	ldr	r2, [pc, #44]	; (800232c <HAL_Init+0x74>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002302:	200f      	movs	r0, #15
 8002304:	f000 f814 	bl	8002330 <HAL_InitTick>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e002      	b.n	8002318 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002312:	f7ff fc3d 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	58024400 	.word	0x58024400
 8002324:	0800b5fc 	.word	0x0800b5fc
 8002328:	2400000c 	.word	0x2400000c
 800232c:	24000008 	.word	0x24000008

08002330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_InitTick+0x60>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e021      	b.n	8002388 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_InitTick+0x64>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_InitTick+0x60>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002352:	fbb3 f3f1 	udiv	r3, r3, r1
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	4618      	mov	r0, r3
 800235c:	f001 f8bf 	bl	80034de <HAL_SYSTICK_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e00e      	b.n	8002388 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b0f      	cmp	r3, #15
 800236e:	d80a      	bhi.n	8002386 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002370:	2200      	movs	r2, #0
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f001 f889 	bl	800348e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <HAL_InitTick+0x68>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	24000014 	.word	0x24000014
 8002394:	24000008 	.word	0x24000008
 8002398:	24000010 	.word	0x24000010

0800239c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_IncTick+0x20>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x24>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_IncTick+0x24>)
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	24000014 	.word	0x24000014
 80023c0:	240004ac 	.word	0x240004ac

080023c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_GetTick+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	240004ac 	.word	0x240004ac

080023dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff ffee 	bl	80023c4 <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d005      	beq.n	8002402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_Delay+0x44>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002402:	bf00      	nop
 8002404:	f7ff ffde 	bl	80023c4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d8f7      	bhi.n	8002404 <HAL_Delay+0x28>
  {
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	24000014 	.word	0x24000014

08002424 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	609a      	str	r2, [r3, #8]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3360      	adds	r3, #96	; 0x60
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	431a      	orrs	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024c0:	bf00      	nop
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	611a      	str	r2, [r3, #16]
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80024fe:	b480      	push	{r7}
 8002500:	b087      	sub	sp, #28
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3360      	adds	r3, #96	; 0x60
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	431a      	orrs	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	601a      	str	r2, [r3, #0]
  }
}
 8002528:	bf00      	nop
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3330      	adds	r3, #48	; 0x30
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	4413      	add	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	211f      	movs	r1, #31
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0e9b      	lsrs	r3, r3, #26
 800256c:	f003 011f 	and.w	r1, r3, #31
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	431a      	orrs	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3314      	adds	r3, #20
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	0e5b      	lsrs	r3, r3, #25
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	4413      	add	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	0d1b      	lsrs	r3, r3, #20
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2107      	movs	r1, #7
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	0d1b      	lsrs	r3, r3, #20
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	431a      	orrs	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025fc:	43db      	mvns	r3, r3
 80025fe:	401a      	ands	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0318 	and.w	r3, r3, #24
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002608:	40d9      	lsrs	r1, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	400b      	ands	r3, r1
 800260e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002612:	431a      	orrs	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	000fffff 	.word	0x000fffff

0800262c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <LL_ADC_DisableDeepPowerDown+0x20>)
 800263a:	4013      	ands	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6093      	str	r3, [r2, #8]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	5fffffc0 	.word	0x5fffffc0

08002650 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002664:	d101      	bne.n	800266a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <LL_ADC_EnableInternalRegulator+0x24>)
 8002686:	4013      	ands	r3, r2
 8002688:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	6fffffc0 	.word	0x6fffffc0

080026a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026b4:	d101      	bne.n	80026ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <LL_ADC_IsEnabled+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_ADC_IsEnabled+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d101      	bne.n	8002706 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b08      	cmp	r3, #8
 8002726:	d101      	bne.n	800272c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e138      	b.n	80029c8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff fa2d 	bl	8001bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff67 	bl	8002650 <LL_ADC_IsDeepPowerDownEnabled>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff4d 	bl	800262c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff82 	bl	80026a0 <LL_ADC_IsInternalRegulatorEnabled>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d114      	bne.n	80027cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff66 	bl	8002678 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027ac:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_ADC_Init+0x294>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	4a88      	ldr	r2, [pc, #544]	; (80029d4 <HAL_ADC_Init+0x298>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	3301      	adds	r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027be:	e002      	b.n	80027c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f9      	bne.n	80027c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff65 	bl	80026a0 <LL_ADC_IsInternalRegulatorEnabled>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10d      	bne.n	80027f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0210 	orr.w	r2, r3, #16
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff76 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002802:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	f040 80d2 	bne.w	80029b6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f040 80ce 	bne.w	80029b6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff4a 	bl	80026c8 <LL_ADC_IsEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d110      	bne.n	800285c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800283a:	4867      	ldr	r0, [pc, #412]	; (80029d8 <HAL_ADC_Init+0x29c>)
 800283c:	f7ff ff44 	bl	80026c8 <LL_ADC_IsEnabled>
 8002840:	4604      	mov	r4, r0
 8002842:	4866      	ldr	r0, [pc, #408]	; (80029dc <HAL_ADC_Init+0x2a0>)
 8002844:	f7ff ff40 	bl	80026c8 <LL_ADC_IsEnabled>
 8002848:	4603      	mov	r3, r0
 800284a:	4323      	orrs	r3, r4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4619      	mov	r1, r3
 8002856:	4862      	ldr	r0, [pc, #392]	; (80029e0 <HAL_ADC_Init+0x2a4>)
 8002858:	f7ff fde4 	bl	8002424 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7d5b      	ldrb	r3, [r3, #21]
 8002860:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002866:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800286c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7f1b      	ldrb	r3, [r3, #28]
 8002872:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7f1b      	ldrb	r3, [r3, #28]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d106      	bne.n	800288e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	3b01      	subs	r3, #1
 8002886:	045b      	lsls	r3, r3, #17
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	4b4c      	ldr	r3, [pc, #304]	; (80029e4 <HAL_ADC_Init+0x2a8>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	69b9      	ldr	r1, [r7, #24]
 80028ba:	430b      	orrs	r3, r1
 80028bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff13 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 80028c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff20 	bl	8002714 <LL_ADC_INJ_IsConversionOngoing>
 80028d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d14a      	bne.n	8002972 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d147      	bne.n	8002972 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7d1b      	ldrb	r3, [r3, #20]
 80028e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	4b3c      	ldr	r3, [pc, #240]	; (80029e8 <HAL_ADC_Init+0x2ac>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	430b      	orrs	r3, r1
 8002902:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800290a:	2b01      	cmp	r3, #1
 800290c:	d11b      	bne.n	8002946 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	4b34      	ldr	r3, [pc, #208]	; (80029ec <HAL_ADC_Init+0x2b0>)
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002922:	3a01      	subs	r2, #1
 8002924:	0411      	lsls	r1, r2, #16
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002930:	4311      	orrs	r1, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002936:	430a      	orrs	r2, r1
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	611a      	str	r2, [r3, #16]
 8002944:	e007      	b.n	8002956 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fb25 	bl	8002fbc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d10c      	bne.n	8002994 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	f023 010f 	bic.w	r1, r3, #15
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
 8002992:	e007      	b.n	80029a4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 020f 	bic.w	r2, r2, #15
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	f023 0303 	bic.w	r3, r3, #3
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
 80029b4:	e007      	b.n	80029c6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ba:	f043 0210 	orr.w	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3724      	adds	r7, #36	; 0x24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}
 80029d0:	24000008 	.word	0x24000008
 80029d4:	053e2d63 	.word	0x053e2d63
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40022100 	.word	0x40022100
 80029e0:	40022300 	.word	0x40022300
 80029e4:	fff0c003 	.word	0xfff0c003
 80029e8:	ffffbffc 	.word	0xffffbffc
 80029ec:	fc00f81e 	.word	0xfc00f81e

080029f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b0a1      	sub	sp, #132	; 0x84
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a9a      	ldr	r2, [pc, #616]	; (8002c74 <HAL_ADC_ConfigChannel+0x284>)
 8002a0a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x2a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e2bc      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x5a4>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fe61 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 82a1 	bne.w	8002f76 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d108      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x62>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	e016      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x90>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a62:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	69d1      	ldr	r1, [r2, #28]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f7ff fd4a 	bl	8002534 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fe22 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002aaa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fe2f 	bl	8002714 <LL_ADC_INJ_IsConversionOngoing>
 8002ab6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 80a0 	bne.w	8002c00 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 809c 	bne.w	8002c00 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f7ff fd59 	bl	800258c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x110>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	e00a      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x126>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d027      	beq.n	8002b70 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6919      	ldr	r1, [r3, #16]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b2e:	f7ff fcad 	bl	800248c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6919      	ldr	r1, [r3, #16]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7e5b      	ldrb	r3, [r3, #25]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x158>
 8002b42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b46:	e000      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x15a>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f7ff fcd7 	bl	80024fe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6919      	ldr	r1, [r3, #16]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	7e1b      	ldrb	r3, [r3, #24]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x176>
 8002b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b64:	e000      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x178>
 8002b66:	2300      	movs	r3, #0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f7ff fcaf 	bl	80024cc <LL_ADC_SetDataRightShift>
 8002b6e:	e047      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	069b      	lsls	r3, r3, #26
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b92:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	069b      	lsls	r3, r3, #26
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d107      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bb6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	069b      	lsls	r3, r3, #26
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d107      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bda:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	069b      	lsls	r3, r3, #26
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d107      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bfe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fd5f 	bl	80026c8 <LL_ADC_IsEnabled>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f040 81bb 	bne.w	8002f88 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f7ff fce0 	bl	80025e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <HAL_ADC_ConfigChannel+0x284>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	f040 8130 	bne.w	8002e90 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x268>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	3301      	adds	r3, #1
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	bf94      	ite	ls
 8002c50:	2301      	movls	r3, #1
 8002c52:	2300      	movhi	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e01b      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x2a0>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d103      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002c70:	2320      	movs	r3, #32
 8002c72:	e005      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x290>
 8002c74:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	bf94      	ite	ls
 8002c8a:	2301      	movls	r3, #1
 8002c8c:	2300      	movhi	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d079      	beq.n	8002d88 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x2c0>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	069b      	lsls	r3, r3, #26
 8002caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cae:	e015      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x2ec>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e003      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x30c>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	e017      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x33c>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x362>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	3301      	adds	r3, #1
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	051b      	lsls	r3, r3, #20
 8002d50:	e018      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x394>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	430b      	orrs	r3, r1
 8002d86:	e07e      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x3b4>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	069b      	lsls	r3, r3, #26
 8002d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da2:	e015      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x3e0>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	069b      	lsls	r3, r3, #26
 8002dcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x400>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	e017      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x430>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	61bb      	str	r3, [r7, #24]
  return result;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e003      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	ea42 0103 	orr.w	r1, r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x45c>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	051b      	lsls	r3, r3, #20
 8002e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	e01b      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x494>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	60fb      	str	r3, [r7, #12]
  return result;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e003      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 021f 	and.w	r2, r3, #31
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b1e      	subs	r3, #30
 8002e7e:	051b      	lsls	r3, r3, #20
 8002e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e84:	430b      	orrs	r3, r1
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	6892      	ldr	r2, [r2, #8]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f7ff fb7e 	bl	800258c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	da77      	bge.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e98:	4840      	ldr	r0, [pc, #256]	; (8002f9c <HAL_ADC_ConfigChannel+0x5ac>)
 8002e9a:	f7ff fae9 	bl	8002470 <LL_ADC_GetCommonPathInternalCh>
 8002e9e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea0:	483f      	ldr	r0, [pc, #252]	; (8002fa0 <HAL_ADC_ConfigChannel+0x5b0>)
 8002ea2:	f7ff fc11 	bl	80026c8 <LL_ADC_IsEnabled>
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	483e      	ldr	r0, [pc, #248]	; (8002fa4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002eaa:	f7ff fc0d 	bl	80026c8 <LL_ADC_IsEnabled>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4323      	orrs	r3, r4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d155      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a3b      	ldr	r2, [pc, #236]	; (8002fa8 <HAL_ADC_ConfigChannel+0x5b8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d122      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x516>
 8002ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11d      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a35      	ldr	r2, [pc, #212]	; (8002fa4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d159      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eda:	4619      	mov	r1, r3
 8002edc:	482f      	ldr	r0, [pc, #188]	; (8002f9c <HAL_ADC_ConfigChannel+0x5ac>)
 8002ede:	f7ff fab4 	bl	800244a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ee2:	4b32      	ldr	r3, [pc, #200]	; (8002fac <HAL_ADC_ConfigChannel+0x5bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	4a31      	ldr	r2, [pc, #196]	; (8002fb0 <HAL_ADC_ConfigChannel+0x5c0>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ef6:	e002      	b.n	8002efe <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f9      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f04:	e040      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <HAL_ADC_ConfigChannel+0x5c4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d111      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x544>
 8002f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d131      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	481b      	ldr	r0, [pc, #108]	; (8002f9c <HAL_ADC_ConfigChannel+0x5ac>)
 8002f2e:	f7ff fa8c 	bl	800244a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f32:	e029      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d124      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d11f      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d11a      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4810      	ldr	r0, [pc, #64]	; (8002f9c <HAL_ADC_ConfigChannel+0x5ac>)
 8002f5c:	f7ff fa75 	bl	800244a <LL_ADC_SetCommonPathInternalCh>
 8002f60:	e012      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f74:	e008      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3784      	adds	r7, #132	; 0x84
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd90      	pop	{r4, r7, pc}
 8002f9c:	40022300 	.word	0x40022300
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	40022100 	.word	0x40022100
 8002fa8:	cb840000 	.word	0xcb840000
 8002fac:	24000008 	.word	0x24000008
 8002fb0:	053e2d63 	.word	0x053e2d63
 8002fb4:	bac04000 	.word	0xbac04000
 8002fb8:	cfb80000 	.word	0xcfb80000

08002fbc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002fc4:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <ADC_ConfigureBoostMode+0x188>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01c      	beq.n	800300a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002fd0:	f002 fcd0 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8002fd4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fde:	d010      	beq.n	8003002 <ADC_ConfigureBoostMode+0x46>
 8002fe0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fe4:	d871      	bhi.n	80030ca <ADC_ConfigureBoostMode+0x10e>
 8002fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fea:	d002      	beq.n	8002ff2 <ADC_ConfigureBoostMode+0x36>
 8002fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff0:	d16b      	bne.n	80030ca <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	0c1b      	lsrs	r3, r3, #16
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	60fb      	str	r3, [r7, #12]
        break;
 8003000:	e066      	b.n	80030d0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	60fb      	str	r3, [r7, #12]
        break;
 8003008:	e062      	b.n	80030d0 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800300a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800300e:	f003 fc19 	bl	8006844 <HAL_RCCEx_GetPeriphCLKFreq>
 8003012:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800301c:	d051      	beq.n	80030c2 <ADC_ConfigureBoostMode+0x106>
 800301e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003022:	d854      	bhi.n	80030ce <ADC_ConfigureBoostMode+0x112>
 8003024:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003028:	d047      	beq.n	80030ba <ADC_ConfigureBoostMode+0xfe>
 800302a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800302e:	d84e      	bhi.n	80030ce <ADC_ConfigureBoostMode+0x112>
 8003030:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003034:	d03d      	beq.n	80030b2 <ADC_ConfigureBoostMode+0xf6>
 8003036:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800303a:	d848      	bhi.n	80030ce <ADC_ConfigureBoostMode+0x112>
 800303c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003040:	d033      	beq.n	80030aa <ADC_ConfigureBoostMode+0xee>
 8003042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003046:	d842      	bhi.n	80030ce <ADC_ConfigureBoostMode+0x112>
 8003048:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800304c:	d029      	beq.n	80030a2 <ADC_ConfigureBoostMode+0xe6>
 800304e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003052:	d83c      	bhi.n	80030ce <ADC_ConfigureBoostMode+0x112>
 8003054:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003058:	d01a      	beq.n	8003090 <ADC_ConfigureBoostMode+0xd4>
 800305a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800305e:	d836      	bhi.n	80030ce <ADC_ConfigureBoostMode+0x112>
 8003060:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003064:	d014      	beq.n	8003090 <ADC_ConfigureBoostMode+0xd4>
 8003066:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800306a:	d830      	bhi.n	80030ce <ADC_ConfigureBoostMode+0x112>
 800306c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003070:	d00e      	beq.n	8003090 <ADC_ConfigureBoostMode+0xd4>
 8003072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003076:	d82a      	bhi.n	80030ce <ADC_ConfigureBoostMode+0x112>
 8003078:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800307c:	d008      	beq.n	8003090 <ADC_ConfigureBoostMode+0xd4>
 800307e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003082:	d824      	bhi.n	80030ce <ADC_ConfigureBoostMode+0x112>
 8003084:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003088:	d002      	beq.n	8003090 <ADC_ConfigureBoostMode+0xd4>
 800308a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800308e:	d11e      	bne.n	80030ce <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0c9b      	lsrs	r3, r3, #18
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	60fb      	str	r3, [r7, #12]
        break;
 80030a0:	e016      	b.n	80030d0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]
        break;
 80030a8:	e012      	b.n	80030d0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	60fb      	str	r3, [r7, #12]
        break;
 80030b0:	e00e      	b.n	80030d0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	60fb      	str	r3, [r7, #12]
        break;
 80030b8:	e00a      	b.n	80030d0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	09db      	lsrs	r3, r3, #7
 80030be:	60fb      	str	r3, [r7, #12]
        break;
 80030c0:	e006      	b.n	80030d0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	60fb      	str	r3, [r7, #12]
        break;
 80030c8:	e002      	b.n	80030d0 <ADC_ConfigureBoostMode+0x114>
        break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 80030ce:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <ADC_ConfigureBoostMode+0x18c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d808      	bhi.n	80030f0 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030ec:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80030ee:	e025      	b.n	800313c <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a16      	ldr	r2, [pc, #88]	; (800314c <ADC_ConfigureBoostMode+0x190>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d80a      	bhi.n	800310e <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	e016      	b.n	800313c <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <ADC_ConfigureBoostMode+0x194>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d80a      	bhi.n	800312c <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	609a      	str	r2, [r3, #8]
}
 800312a:	e007      	b.n	800313c <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40022300 	.word	0x40022300
 8003148:	005f5e10 	.word	0x005f5e10
 800314c:	00bebc20 	.word	0x00bebc20
 8003150:	017d7840 	.word	0x017d7840

08003154 <LL_ADC_IsEnabled>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <LL_ADC_IsEnabled+0x18>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <LL_ADC_IsEnabled+0x1a>
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <LL_ADC_REG_IsConversionOngoing>:
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d101      	bne.n	8003192 <LL_ADC_REG_IsConversionOngoing+0x18>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b09f      	sub	sp, #124	; 0x7c
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e080      	b.n	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a3d      	ldr	r2, [pc, #244]	; (80032c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d102      	bne.n	80031de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	e001      	b.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e05f      	b.n	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ffb9 	bl	800317a <LL_ADC_REG_IsConversionOngoing>
 8003208:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ffb3 	bl	800317a <LL_ADC_REG_IsConversionOngoing>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d141      	bne.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800321a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800321c:	2b00      	cmp	r3, #0
 800321e:	d13e      	bne.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003222:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800322c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	431a      	orrs	r2, r3
 800323a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800323e:	4822      	ldr	r0, [pc, #136]	; (80032c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003240:	f7ff ff88 	bl	8003154 <LL_ADC_IsEnabled>
 8003244:	4604      	mov	r4, r0
 8003246:	4821      	ldr	r0, [pc, #132]	; (80032cc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003248:	f7ff ff84 	bl	8003154 <LL_ADC_IsEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	4323      	orrs	r3, r4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d12e      	bne.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800325a:	4013      	ands	r3, r2
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	6811      	ldr	r1, [r2, #0]
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	6892      	ldr	r2, [r2, #8]
 8003264:	430a      	orrs	r2, r1
 8003266:	431a      	orrs	r2, r3
 8003268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800326c:	e021      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800326e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003278:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800327a:	4813      	ldr	r0, [pc, #76]	; (80032c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800327c:	f7ff ff6a 	bl	8003154 <LL_ADC_IsEnabled>
 8003280:	4604      	mov	r4, r0
 8003282:	4812      	ldr	r0, [pc, #72]	; (80032cc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003284:	f7ff ff66 	bl	8003154 <LL_ADC_IsEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	4323      	orrs	r3, r4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d110      	bne.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003296:	4013      	ands	r3, r2
 8003298:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800329a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800329c:	e009      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032b0:	e000      	b.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	377c      	adds	r7, #124	; 0x7c
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd90      	pop	{r4, r7, pc}
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40022100 	.word	0x40022100
 80032d0:	40022300 	.word	0x40022300
 80032d4:	fffff0e0 	.word	0xfffff0e0

080032d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <__NVIC_SetPriorityGrouping+0x40>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f4:	4013      	ands	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <__NVIC_SetPriorityGrouping+0x44>)
 8003302:	4313      	orrs	r3, r2
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	; (8003318 <__NVIC_SetPriorityGrouping+0x40>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00
 800331c:	05fa0000 	.word	0x05fa0000

08003320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <__NVIC_GetPriorityGrouping+0x18>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 0307 	and.w	r3, r3, #7
}
 800332e:	4618      	mov	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db0b      	blt.n	8003366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	4907      	ldr	r1, [pc, #28]	; (8003374 <__NVIC_EnableIRQ+0x38>)
 8003356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2001      	movs	r0, #1
 800335e:	fa00 f202 	lsl.w	r2, r0, r2
 8003362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	e000e100 	.word	0xe000e100

08003378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003388:	2b00      	cmp	r3, #0
 800338a:	db0a      	blt.n	80033a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	490c      	ldr	r1, [pc, #48]	; (80033c4 <__NVIC_SetPriority+0x4c>)
 8003392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	440b      	add	r3, r1
 800339c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a0:	e00a      	b.n	80033b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4908      	ldr	r1, [pc, #32]	; (80033c8 <__NVIC_SetPriority+0x50>)
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3b04      	subs	r3, #4
 80033b0:	0112      	lsls	r2, r2, #4
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	440b      	add	r3, r1
 80033b6:	761a      	strb	r2, [r3, #24]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000e100 	.word	0xe000e100
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f1c3 0307 	rsb	r3, r3, #7
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	bf28      	it	cs
 80033ea:	2304      	movcs	r3, #4
 80033ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d902      	bls.n	80033fc <NVIC_EncodePriority+0x30>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3b03      	subs	r3, #3
 80033fa:	e000      	b.n	80033fe <NVIC_EncodePriority+0x32>
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	401a      	ands	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003414:	f04f 31ff 	mov.w	r1, #4294967295
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43d9      	mvns	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	4313      	orrs	r3, r2
         );
}
 8003426:	4618      	mov	r0, r3
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003444:	d301      	bcc.n	800344a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003446:	2301      	movs	r3, #1
 8003448:	e00f      	b.n	800346a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <SysTick_Config+0x40>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003452:	210f      	movs	r1, #15
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	f7ff ff8e 	bl	8003378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <SysTick_Config+0x40>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <SysTick_Config+0x40>)
 8003464:	2207      	movs	r2, #7
 8003466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	e000e010 	.word	0xe000e010

08003478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff29 	bl	80032d8 <__NVIC_SetPriorityGrouping>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800349c:	f7ff ff40 	bl	8003320 <__NVIC_GetPriorityGrouping>
 80034a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	6978      	ldr	r0, [r7, #20]
 80034a8:	f7ff ff90 	bl	80033cc <NVIC_EncodePriority>
 80034ac:	4602      	mov	r2, r0
 80034ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff5f 	bl	8003378 <__NVIC_SetPriority>
}
 80034ba:	bf00      	nop
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff33 	bl	800333c <__NVIC_EnableIRQ>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ffa4 	bl	8003434 <SysTick_Config>
 80034ec:	4603      	mov	r3, r0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b098      	sub	sp, #96	; 0x60
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003500:	4a84      	ldr	r2, [pc, #528]	; (8003714 <HAL_FDCAN_Init+0x21c>)
 8003502:	f107 030c 	add.w	r3, r7, #12
 8003506:	4611      	mov	r1, r2
 8003508:	224c      	movs	r2, #76	; 0x4c
 800350a:	4618      	mov	r0, r3
 800350c:	f008 f826 	bl	800b55c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e1ca      	b.n	80038b0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7e      	ldr	r2, [pc, #504]	; (8003718 <HAL_FDCAN_Init+0x220>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d106      	bne.n	8003532 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800352c:	461a      	mov	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fe fbac 	bl	8001ca4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0210 	bic.w	r2, r2, #16
 800355a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800355c:	f7fe ff32 	bl	80023c4 <HAL_GetTick>
 8003560:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003562:	e014      	b.n	800358e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003564:	f7fe ff2e 	bl	80023c4 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b0a      	cmp	r3, #10
 8003570:	d90d      	bls.n	800358e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2203      	movs	r2, #3
 8003586:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e190      	b.n	80038b0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b08      	cmp	r3, #8
 800359a:	d0e3      	beq.n	8003564 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ac:	f7fe ff0a 	bl	80023c4 <HAL_GetTick>
 80035b0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035b2:	e014      	b.n	80035de <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80035b4:	f7fe ff06 	bl	80023c4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b0a      	cmp	r3, #10
 80035c0:	d90d      	bls.n	80035de <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035c8:	f043 0201 	orr.w	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e168      	b.n	80038b0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0e3      	beq.n	80035b4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0202 	orr.w	r2, r2, #2
 80035fa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7c1b      	ldrb	r3, [r3, #16]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003612:	619a      	str	r2, [r3, #24]
 8003614:	e007      	b.n	8003626 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699a      	ldr	r2, [r3, #24]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003624:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7c5b      	ldrb	r3, [r3, #17]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d108      	bne.n	8003640 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363c:	619a      	str	r2, [r3, #24]
 800363e:	e007      	b.n	8003650 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800364e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7c9b      	ldrb	r3, [r3, #18]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d108      	bne.n	800366a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003666:	619a      	str	r2, [r3, #24]
 8003668:	e007      	b.n	800367a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003678:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800369e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0210 	bic.w	r2, r2, #16
 80036ae:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d108      	bne.n	80036ca <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0204 	orr.w	r2, r2, #4
 80036c6:	619a      	str	r2, [r3, #24]
 80036c8:	e030      	b.n	800372c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d02c      	beq.n	800372c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d020      	beq.n	800371c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036e8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0210 	orr.w	r2, r2, #16
 80036f8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d114      	bne.n	800372c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0220 	orr.w	r2, r2, #32
 8003710:	619a      	str	r2, [r3, #24]
 8003712:	e00b      	b.n	800372c <HAL_FDCAN_Init+0x234>
 8003714:	0800b5b0 	.word	0x0800b5b0
 8003718:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0220 	orr.w	r2, r2, #32
 800372a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	3b01      	subs	r3, #1
 8003732:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	3b01      	subs	r3, #1
 800373a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800373c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003744:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	3b01      	subs	r3, #1
 800374e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003754:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003756:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003760:	d115      	bne.n	800378e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	3b01      	subs	r3, #1
 800376e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003770:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	3b01      	subs	r3, #1
 8003778:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800377a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	3b01      	subs	r3, #1
 8003784:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800378a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800378c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	4413      	add	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d012      	beq.n	80037e0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80037c2:	f023 0107 	bic.w	r1, r3, #7
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037d0:	4413      	add	r3, r2
 80037d2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d012      	beq.n	800380e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80037f0:	f023 0107 	bic.w	r1, r3, #7
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037fe:	4413      	add	r3, r2
 8003800:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d013      	beq.n	800383e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800381e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800382c:	4413      	add	r3, r2
 800382e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003832:	011a      	lsls	r2, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003842:	2b00      	cmp	r3, #0
 8003844:	d013      	beq.n	800386e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800384e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800385c:	4413      	add	r3, r2
 800385e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003862:	021a      	lsls	r2, r3, #8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <HAL_FDCAN_Init+0x3c0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d107      	bne.n	8003888 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f022 0203 	bic.w	r2, r2, #3
 8003886:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fd89 	bl	80043b8 <FDCAN_CalcultateRamBlockAddresses>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80038ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3760      	adds	r7, #96	; 0x60
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	4000a000 	.word	0x4000a000

080038bc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80038cc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d002      	beq.n	80038da <HAL_FDCAN_ConfigFilter+0x1e>
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d157      	bne.n	800398a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d12b      	bne.n	800393a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b07      	cmp	r3, #7
 80038e8:	d10d      	bne.n	8003906 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80038f6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80038fc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80038fe:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e00e      	b.n	8003924 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003912:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800391a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e025      	b.n	8003986 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	075a      	lsls	r2, r3, #29
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b07      	cmp	r3, #7
 800394e:	d103      	bne.n	8003958 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e006      	b.n	8003966 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	079a      	lsls	r2, r3, #30
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3304      	adds	r3, #4
 800397e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e008      	b.n	800399c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003990:	f043 0202 	orr.w	r2, r3, #2
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d111      	bne.n	80039e0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e008      	b.n	80039f2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b08b      	sub	sp, #44	; 0x2c
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a18:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003a1a:	7efb      	ldrb	r3, [r7, #27]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	f040 814b 	bne.w	8003cb8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d14d      	bne.n	8003ac4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a30:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a3e:	f043 0220 	orr.w	r2, r3, #32
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e13e      	b.n	8003cca <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e12c      	b.n	8003cca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a78:	0e1b      	lsrs	r3, r3, #24
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d10b      	bne.n	8003a9a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a8a:	0fdb      	lsrs	r3, r3, #31
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a94:	d101      	bne.n	8003a9a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003a96:	2301      	movs	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	69f9      	ldr	r1, [r7, #28]
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac2:	e069      	b.n	8003b98 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b41      	cmp	r3, #65	; 0x41
 8003ac8:	d14d      	bne.n	8003b66 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ad2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0ed      	b.n	8003cca <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0db      	b.n	8003cca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b1a:	0e1b      	lsrs	r3, r3, #24
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d10b      	bne.n	8003b3c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b2c:	0fdb      	lsrs	r3, r3, #31
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b36:	d101      	bne.n	8003b3c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b58:	69f9      	ldr	r1, [r7, #28]
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	e018      	b.n	8003b98 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d309      	bcc.n	8003b84 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0a2      	b.n	8003cca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0c9b      	lsrs	r3, r3, #18
 8003bb2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e005      	b.n	8003bc8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	3304      	adds	r3, #4
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0e1b      	lsrs	r3, r3, #24
 8003c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	0fda      	lsrs	r2, r3, #31
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	3304      	adds	r3, #4
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	e00a      	b.n	8003c52 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	441a      	add	r2, r3
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	440b      	add	r3, r1
 8003c48:	7812      	ldrb	r2, [r2, #0]
 8003c4a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	4a1f      	ldr	r2, [pc, #124]	; (8003cd8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d3eb      	bcc.n	8003c3c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d105      	bne.n	8003c76 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003c74:	e01e      	b.n	8003cb4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b41      	cmp	r3, #65	; 0x41
 8003c7a:	d105      	bne.n	8003c88 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003c86:	e015      	b.n	8003cb4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b1f      	cmp	r3, #31
 8003c8c:	d808      	bhi.n	8003ca0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2101      	movs	r1, #1
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003c9e:	e009      	b.n	8003cb4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 021f 	and.w	r2, r3, #31
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e008      	b.n	8003cca <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cbe:	f043 0208 	orr.w	r2, r3, #8
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	372c      	adds	r7, #44	; 0x2c
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	0800b60c 	.word	0x0800b60c

08003cdc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003cee:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d002      	beq.n	8003cfc <HAL_FDCAN_ActivateNotification+0x20>
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d155      	bne.n	8003da8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d1a:	e014      	b.n	8003d46 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4013      	ands	r3, r2
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d108      	bne.n	8003d3e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0202 	orr.w	r2, r2, #2
 8003d3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d3c:	e003      	b.n	8003d46 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2203      	movs	r2, #3
 8003d44:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <HAL_FDCAN_ActivateNotification+0xec>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	430b      	orrs	r3, r1
 8003d94:	6553      	str	r3, [r2, #84]	; 0x54
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_FDCAN_ActivateNotification+0xf0>)
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	0f9b      	lsrs	r3, r3, #30
 8003d9e:	490b      	ldr	r1, [pc, #44]	; (8003dcc <HAL_FDCAN_ActivateNotification+0xf0>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e008      	b.n	8003dba <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	3fcfffff 	.word	0x3fcfffff
 8003dcc:	4000a800 	.word	0x4000a800

08003dd0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b092      	sub	sp, #72	; 0x48
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003dd8:	4b90      	ldr	r3, [pc, #576]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	079b      	lsls	r3, r3, #30
 8003dde:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003de0:	4b8e      	ldr	r3, [pc, #568]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	079b      	lsls	r3, r3, #30
 8003de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003de8:	4013      	ands	r3, r2
 8003dea:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003df6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e00:	4013      	ands	r3, r2
 8003e02:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e18:	4013      	ands	r3, r2
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e30:	4013      	ands	r3, r2
 8003e32:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003e3e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e48:	4013      	ands	r3, r2
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e52:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e60:	4013      	ands	r3, r2
 8003e62:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d011      	beq.n	8003e96 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e88:	651a      	str	r2, [r3, #80]	; 0x50
 8003e8a:	4b64      	ldr	r3, [pc, #400]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fa45 	bl	8004320 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01e      	beq.n	8003ee2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ed2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ed4:	4b51      	ldr	r3, [pc, #324]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fa00 	bl	80042e2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00d      	beq.n	8003f04 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003eee:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <HAL_FDCAN_IRQHandler+0x250>)
 8003ef0:	400b      	ands	r3, r1
 8003ef2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ef4:	4a49      	ldr	r2, [pc, #292]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef8:	0f9b      	lsrs	r3, r3, #30
 8003efa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003efc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9c4 	bl	800428c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00d      	beq.n	8003f26 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f10:	4b43      	ldr	r3, [pc, #268]	; (8004020 <HAL_FDCAN_IRQHandler+0x250>)
 8003f12:	400b      	ands	r3, r1
 8003f14:	6513      	str	r3, [r2, #80]	; 0x50
 8003f16:	4a41      	ldr	r2, [pc, #260]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1a:	0f9b      	lsrs	r3, r3, #30
 8003f1c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f9be 	bl	80042a2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <HAL_FDCAN_IRQHandler+0x250>)
 8003f34:	400b      	ands	r3, r1
 8003f36:	6513      	str	r3, [r2, #80]	; 0x50
 8003f38:	4a38      	ldr	r2, [pc, #224]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3c:	0f9b      	lsrs	r3, r3, #30
 8003f3e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003f40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc fe46 	bl	8000bd4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f54:	4b32      	ldr	r3, [pc, #200]	; (8004020 <HAL_FDCAN_IRQHandler+0x250>)
 8003f56:	400b      	ands	r3, r1
 8003f58:	6513      	str	r3, [r2, #80]	; 0x50
 8003f5a:	4a30      	ldr	r2, [pc, #192]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	0f9b      	lsrs	r3, r3, #30
 8003f60:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003f62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7fc fe59 	bl	8000c1c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d011      	beq.n	8003f9c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f8e:	651a      	str	r2, [r3, #80]	; 0x50
 8003f90:	4b22      	ldr	r3, [pc, #136]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f98e 	bl	80042b8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01e      	beq.n	8003fe8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d017      	beq.n	8003fe8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fcc:	4013      	ands	r3, r2
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd8:	651a      	str	r2, [r3, #80]	; 0x50
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f972 	bl	80042cc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00f      	beq.n	8004024 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800400c:	651a      	str	r2, [r3, #80]	; 0x50
 800400e:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_FDCAN_IRQHandler+0x24c>)
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fc fe25 	bl	8000c64 <HAL_FDCAN_RxBufferNewMessageCallback>
 800401a:	e003      	b.n	8004024 <HAL_FDCAN_IRQHandler+0x254>
 800401c:	4000a800 	.word	0x4000a800
 8004020:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d011      	beq.n	8004056 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004048:	651a      	str	r2, [r3, #80]	; 0x50
 800404a:	4b8d      	ldr	r3, [pc, #564]	; (8004280 <HAL_FDCAN_IRQHandler+0x4b0>)
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f951 	bl	80042f8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d011      	beq.n	8004088 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800407a:	651a      	str	r2, [r3, #80]	; 0x50
 800407c:	4b80      	ldr	r3, [pc, #512]	; (8004280 <HAL_FDCAN_IRQHandler+0x4b0>)
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f942 	bl	800430c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00f      	beq.n	80040c4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040ac:	651a      	str	r2, [r3, #80]	; 0x50
 80040ae:	4b74      	ldr	r3, [pc, #464]	; (8004280 <HAL_FDCAN_IRQHandler+0x4b0>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040d0:	4b6c      	ldr	r3, [pc, #432]	; (8004284 <HAL_FDCAN_IRQHandler+0x4b4>)
 80040d2:	400b      	ands	r3, r1
 80040d4:	6513      	str	r3, [r2, #80]	; 0x50
 80040d6:	4a6a      	ldr	r2, [pc, #424]	; (8004280 <HAL_FDCAN_IRQHandler+0x4b0>)
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	0f9b      	lsrs	r3, r3, #30
 80040dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80040de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f931 	bl	8004348 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80040e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d011      	beq.n	8004110 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040f2:	4b64      	ldr	r3, [pc, #400]	; (8004284 <HAL_FDCAN_IRQHandler+0x4b4>)
 80040f4:	400b      	ands	r3, r1
 80040f6:	6513      	str	r3, [r2, #80]	; 0x50
 80040f8:	4a61      	ldr	r2, [pc, #388]	; (8004280 <HAL_FDCAN_IRQHandler+0x4b0>)
 80040fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fc:	0f9b      	lsrs	r3, r3, #30
 80040fe:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a5c      	ldr	r2, [pc, #368]	; (8004288 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	f040 80a6 	bne.w	8004268 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 809e 	beq.w	8004268 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	4013      	ands	r3, r2
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800414e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	4013      	ands	r3, r2
 800415a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004166:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	4013      	ands	r3, r2
 8004172:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800417e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004196:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4013      	ands	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80041b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8d2 	bl	800435e <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80041c8:	6a39      	ldr	r1, [r7, #32]
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f8d2 	bl	8004374 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01b      	beq.n	8004216 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d014      	beq.n	8004216 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004202:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2240      	movs	r2, #64	; 0x40
 800420a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	6939      	ldr	r1, [r7, #16]
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f8ba 	bl	800438a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004224:	69f9      	ldr	r1, [r7, #28]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8bb 	bl	80043a2 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f85e 	bl	8004334 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004278:	bf00      	nop
 800427a:	3748      	adds	r7, #72	; 0x48
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	4000a800 	.word	0x4000a800
 8004284:	3fcfffff 	.word	0x3fcfffff
 8004288:	4000a000 	.word	0x4000a000

0800428c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80043ce:	4ba7      	ldr	r3, [pc, #668]	; (800466c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	0091      	lsls	r1, r2, #2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	430b      	orrs	r3, r1
 80043dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	041a      	lsls	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	4413      	add	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800440e:	4b97      	ldr	r3, [pc, #604]	; (800466c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004410:	4013      	ands	r3, r2
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	0091      	lsls	r1, r2, #2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	430b      	orrs	r3, r1
 800441c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	041a      	lsls	r2, r3, #16
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	4413      	add	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004450:	4b86      	ldr	r3, [pc, #536]	; (800466c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004452:	4013      	ands	r3, r2
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	0091      	lsls	r1, r2, #2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	430b      	orrs	r3, r1
 800445e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800446a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	041a      	lsls	r2, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4413      	add	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004498:	4b74      	ldr	r3, [pc, #464]	; (800466c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800449a:	4013      	ands	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	0091      	lsls	r1, r2, #2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044b2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4413      	add	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80044e0:	4b62      	ldr	r3, [pc, #392]	; (800466c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	0091      	lsls	r1, r2, #2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	430b      	orrs	r3, r1
 80044ee:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4413      	add	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800450c:	4b57      	ldr	r3, [pc, #348]	; (800466c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800450e:	4013      	ands	r3, r2
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	0091      	lsls	r1, r2, #2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	430b      	orrs	r3, r1
 800451a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004526:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452e:	041a      	lsls	r2, r3, #16
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	4413      	add	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800454e:	4b47      	ldr	r3, [pc, #284]	; (800466c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004550:	4013      	ands	r3, r2
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	0091      	lsls	r1, r2, #2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	430b      	orrs	r3, r1
 800455c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004568:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	041a      	lsls	r2, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004584:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458c:	061a      	lsls	r2, r3, #24
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459c:	4b34      	ldr	r3, [pc, #208]	; (8004670 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800459e:	4413      	add	r3, r2
 80045a0:	009a      	lsls	r2, r3, #2
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	441a      	add	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	441a      	add	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	4a04      	ldr	r2, [pc, #16]	; (8004674 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d915      	bls.n	8004694 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004668:	e006      	b.n	8004678 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800466a:	bf00      	nop
 800466c:	ffff0003 	.word	0xffff0003
 8004670:	10002b00 	.word	0x10002b00
 8004674:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2203      	movs	r2, #3
 800468c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e010      	b.n	80046b6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e005      	b.n	80046a8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3304      	adds	r3, #4
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3f3      	bcc.n	800469c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop

080046c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	; 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80046d2:	4b89      	ldr	r3, [pc, #548]	; (80048f8 <HAL_GPIO_Init+0x234>)
 80046d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046d6:	e194      	b.n	8004a02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	2101      	movs	r1, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8186 	beq.w	80049fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d005      	beq.n	8004708 <HAL_GPIO_Init+0x44>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d130      	bne.n	800476a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2203      	movs	r2, #3
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800473e:	2201      	movs	r2, #1
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	f003 0201 	and.w	r2, r3, #1
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b03      	cmp	r3, #3
 8004774:	d017      	beq.n	80047a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2203      	movs	r2, #3
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d123      	bne.n	80047fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	08da      	lsrs	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3208      	adds	r2, #8
 80047ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	220f      	movs	r2, #15
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	08da      	lsrs	r2, r3, #3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3208      	adds	r2, #8
 80047f4:	69b9      	ldr	r1, [r7, #24]
 80047f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	2203      	movs	r2, #3
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0203 	and.w	r2, r3, #3
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80e0 	beq.w	80049fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483c:	4b2f      	ldr	r3, [pc, #188]	; (80048fc <HAL_GPIO_Init+0x238>)
 800483e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004842:	4a2e      	ldr	r2, [pc, #184]	; (80048fc <HAL_GPIO_Init+0x238>)
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800484c:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_GPIO_Init+0x238>)
 800484e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800485a:	4a29      	ldr	r2, [pc, #164]	; (8004900 <HAL_GPIO_Init+0x23c>)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	3302      	adds	r3, #2
 8004862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	220f      	movs	r2, #15
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a20      	ldr	r2, [pc, #128]	; (8004904 <HAL_GPIO_Init+0x240>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d052      	beq.n	800492c <HAL_GPIO_Init+0x268>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a1f      	ldr	r2, [pc, #124]	; (8004908 <HAL_GPIO_Init+0x244>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d031      	beq.n	80048f2 <HAL_GPIO_Init+0x22e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_GPIO_Init+0x248>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02b      	beq.n	80048ee <HAL_GPIO_Init+0x22a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <HAL_GPIO_Init+0x24c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d025      	beq.n	80048ea <HAL_GPIO_Init+0x226>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <HAL_GPIO_Init+0x250>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01f      	beq.n	80048e6 <HAL_GPIO_Init+0x222>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <HAL_GPIO_Init+0x254>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d019      	beq.n	80048e2 <HAL_GPIO_Init+0x21e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1a      	ldr	r2, [pc, #104]	; (800491c <HAL_GPIO_Init+0x258>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_GPIO_Init+0x21a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a19      	ldr	r2, [pc, #100]	; (8004920 <HAL_GPIO_Init+0x25c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00d      	beq.n	80048da <HAL_GPIO_Init+0x216>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a18      	ldr	r2, [pc, #96]	; (8004924 <HAL_GPIO_Init+0x260>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <HAL_GPIO_Init+0x212>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a17      	ldr	r2, [pc, #92]	; (8004928 <HAL_GPIO_Init+0x264>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_GPIO_Init+0x20e>
 80048ce:	2309      	movs	r3, #9
 80048d0:	e02d      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048d2:	230a      	movs	r3, #10
 80048d4:	e02b      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048d6:	2308      	movs	r3, #8
 80048d8:	e029      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048da:	2307      	movs	r3, #7
 80048dc:	e027      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048de:	2306      	movs	r3, #6
 80048e0:	e025      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048e2:	2305      	movs	r3, #5
 80048e4:	e023      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048e6:	2304      	movs	r3, #4
 80048e8:	e021      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048ea:	2303      	movs	r3, #3
 80048ec:	e01f      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e01d      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e01b      	b.n	800492e <HAL_GPIO_Init+0x26a>
 80048f6:	bf00      	nop
 80048f8:	58000080 	.word	0x58000080
 80048fc:	58024400 	.word	0x58024400
 8004900:	58000400 	.word	0x58000400
 8004904:	58020000 	.word	0x58020000
 8004908:	58020400 	.word	0x58020400
 800490c:	58020800 	.word	0x58020800
 8004910:	58020c00 	.word	0x58020c00
 8004914:	58021000 	.word	0x58021000
 8004918:	58021400 	.word	0x58021400
 800491c:	58021800 	.word	0x58021800
 8004920:	58021c00 	.word	0x58021c00
 8004924:	58022000 	.word	0x58022000
 8004928:	58022400 	.word	0x58022400
 800492c:	2300      	movs	r3, #0
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	f002 0203 	and.w	r2, r2, #3
 8004934:	0092      	lsls	r2, r2, #2
 8004936:	4093      	lsls	r3, r2
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800493e:	4938      	ldr	r1, [pc, #224]	; (8004a20 <HAL_GPIO_Init+0x35c>)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	089b      	lsrs	r3, r3, #2
 8004944:	3302      	adds	r3, #2
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f47f ae63 	bne.w	80046d8 <HAL_GPIO_Init+0x14>
  }
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	3724      	adds	r7, #36	; 0x24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	58000400 	.word	0x58000400

08004a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
 8004a30:	4613      	mov	r3, r2
 8004a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a34:	787b      	ldrb	r3, [r7, #1]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a40:	e003      	b.n	8004a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a42:	887b      	ldrh	r3, [r7, #2]
 8004a44:	041a      	lsls	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	619a      	str	r2, [r3, #24]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004a60:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	2b06      	cmp	r3, #6
 8004a6a:	d00a      	beq.n	8004a82 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a6c:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d001      	beq.n	8004a7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e040      	b.n	8004b00 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e03e      	b.n	8004b00 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004a8a:	491f      	ldr	r1, [pc, #124]	; (8004b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a92:	f7fd fc97 	bl	80023c4 <HAL_GetTick>
 8004a96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a98:	e009      	b.n	8004aae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a9a:	f7fd fc93 	bl	80023c4 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa8:	d901      	bls.n	8004aae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e028      	b.n	8004b00 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004aae:	4b16      	ldr	r3, [pc, #88]	; (8004b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aba:	d1ee      	bne.n	8004a9a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b1e      	cmp	r3, #30
 8004ac0:	d008      	beq.n	8004ad4 <HAL_PWREx_ConfigSupply+0x7c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac6:	d005      	beq.n	8004ad4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b1d      	cmp	r3, #29
 8004acc:	d002      	beq.n	8004ad4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b2d      	cmp	r3, #45	; 0x2d
 8004ad2:	d114      	bne.n	8004afe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004ad4:	f7fd fc76 	bl	80023c4 <HAL_GetTick>
 8004ad8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004ada:	e009      	b.n	8004af0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004adc:	f7fd fc72 	bl	80023c4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aea:	d901      	bls.n	8004af0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e007      	b.n	8004b00 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afc:	d1ee      	bne.n	8004adc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	58024800 	.word	0x58024800

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08c      	sub	sp, #48	; 0x30
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e3f3      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80b3 	beq.w	8004c92 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b2c:	4b9e      	ldr	r3, [pc, #632]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b36:	4b9c      	ldr	r3, [pc, #624]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d007      	beq.n	8004b52 <HAL_RCC_OscConfig+0x46>
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	2b18      	cmp	r3, #24
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_OscConfig+0x62>
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d10d      	bne.n	8004b6e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b52:	4b95      	ldr	r3, [pc, #596]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8098 	beq.w	8004c90 <HAL_RCC_OscConfig+0x184>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f040 8093 	bne.w	8004c90 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e3cb      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x7a>
 8004b78:	4b8b      	ldr	r3, [pc, #556]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a8a      	ldr	r2, [pc, #552]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e058      	b.n	8004c38 <HAL_RCC_OscConfig+0x12c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d112      	bne.n	8004bb4 <HAL_RCC_OscConfig+0xa8>
 8004b8e:	4b86      	ldr	r3, [pc, #536]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a85      	ldr	r2, [pc, #532]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b83      	ldr	r3, [pc, #524]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a82      	ldr	r2, [pc, #520]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004ba0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b80      	ldr	r3, [pc, #512]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7f      	ldr	r2, [pc, #508]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e041      	b.n	8004c38 <HAL_RCC_OscConfig+0x12c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bbc:	d112      	bne.n	8004be4 <HAL_RCC_OscConfig+0xd8>
 8004bbe:	4b7a      	ldr	r3, [pc, #488]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a79      	ldr	r2, [pc, #484]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	4b77      	ldr	r3, [pc, #476]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a76      	ldr	r2, [pc, #472]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bd0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	4b74      	ldr	r3, [pc, #464]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a73      	ldr	r2, [pc, #460]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e029      	b.n	8004c38 <HAL_RCC_OscConfig+0x12c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004bec:	d112      	bne.n	8004c14 <HAL_RCC_OscConfig+0x108>
 8004bee:	4b6e      	ldr	r3, [pc, #440]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a6d      	ldr	r2, [pc, #436]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b6b      	ldr	r3, [pc, #428]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4b68      	ldr	r3, [pc, #416]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a67      	ldr	r2, [pc, #412]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e011      	b.n	8004c38 <HAL_RCC_OscConfig+0x12c>
 8004c14:	4b64      	ldr	r3, [pc, #400]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a63      	ldr	r2, [pc, #396]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a60      	ldr	r2, [pc, #384]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b5e      	ldr	r3, [pc, #376]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5d      	ldr	r2, [pc, #372]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d013      	beq.n	8004c68 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd fbc0 	bl	80023c4 <HAL_GetTick>
 8004c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fd fbbc 	bl	80023c4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e355      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c5a:	4b53      	ldr	r3, [pc, #332]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x13c>
 8004c66:	e014      	b.n	8004c92 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fd fbac 	bl	80023c4 <HAL_GetTick>
 8004c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fd fba8 	bl	80023c4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e341      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c82:	4b49      	ldr	r3, [pc, #292]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x164>
 8004c8e:	e000      	b.n	8004c92 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 808c 	beq.w	8004db8 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca0:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ca8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004caa:	4b3f      	ldr	r3, [pc, #252]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x1ba>
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	2b18      	cmp	r3, #24
 8004cba:	d137      	bne.n	8004d2c <HAL_RCC_OscConfig+0x220>
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d132      	bne.n	8004d2c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc6:	4b38      	ldr	r3, [pc, #224]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_RCC_OscConfig+0x1d2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e313      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cde:	4b32      	ldr	r3, [pc, #200]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 0219 	bic.w	r2, r3, #25
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	492f      	ldr	r1, [pc, #188]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cf0:	f7fd fb68 	bl	80023c4 <HAL_GetTick>
 8004cf4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf8:	f7fd fb64 	bl	80023c4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e2fd      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d0a:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	061b      	lsls	r3, r3, #24
 8004d24:	4920      	ldr	r1, [pc, #128]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d2a:	e045      	b.n	8004db8 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d026      	beq.n	8004d82 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d34:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 0219 	bic.w	r2, r3, #25
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4919      	ldr	r1, [pc, #100]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fd fb3d 	bl	80023c4 <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d4e:	f7fd fb39 	bl	80023c4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e2d2      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d60:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	490b      	ldr	r1, [pc, #44]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]
 8004d80:	e01a      	b.n	8004db8 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <HAL_RCC_OscConfig+0x29c>)
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fd fb19 	bl	80023c4 <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d96:	f7fd fb15 	bl	80023c4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d903      	bls.n	8004dac <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e2ae      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
 8004da8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dac:	4b99      	ldr	r3, [pc, #612]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1ee      	bne.n	8004d96 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d06a      	beq.n	8004e9a <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc4:	4b93      	ldr	r3, [pc, #588]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dce:	4b91      	ldr	r3, [pc, #580]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d007      	beq.n	8004dea <HAL_RCC_OscConfig+0x2de>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b18      	cmp	r3, #24
 8004dde:	d11b      	bne.n	8004e18 <HAL_RCC_OscConfig+0x30c>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d116      	bne.n	8004e18 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dea:	4b8a      	ldr	r3, [pc, #552]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_RCC_OscConfig+0x2f6>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e281      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e02:	4b84      	ldr	r3, [pc, #528]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	4980      	ldr	r1, [pc, #512]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e16:	e040      	b.n	8004e9a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d023      	beq.n	8004e68 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e20:	4b7c      	ldr	r3, [pc, #496]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7b      	ldr	r2, [pc, #492]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd faca 	bl	80023c4 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e34:	f7fd fac6 	bl	80023c4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e25f      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e46:	4b73      	ldr	r3, [pc, #460]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e52:	4b70      	ldr	r3, [pc, #448]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	061b      	lsls	r3, r3, #24
 8004e60:	496c      	ldr	r1, [pc, #432]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60cb      	str	r3, [r1, #12]
 8004e66:	e018      	b.n	8004e9a <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e68:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a69      	ldr	r2, [pc, #420]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fd faa6 	bl	80023c4 <HAL_GetTick>
 8004e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e7c:	f7fd faa2 	bl	80023c4 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e23b      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e8e:	4b61      	ldr	r3, [pc, #388]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d036      	beq.n	8004f14 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d019      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eae:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	4a58      	ldr	r2, [pc, #352]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eba:	f7fd fa83 	bl	80023c4 <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec2:	f7fd fa7f 	bl	80023c4 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e218      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ed4:	4b4f      	ldr	r3, [pc, #316]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x3b6>
 8004ee0:	e018      	b.n	8004f14 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee2:	4b4c      	ldr	r3, [pc, #304]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee6:	4a4b      	ldr	r2, [pc, #300]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eee:	f7fd fa69 	bl	80023c4 <HAL_GetTick>
 8004ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ef6:	f7fd fa65 	bl	80023c4 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e1fe      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f08:	4b42      	ldr	r3, [pc, #264]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d036      	beq.n	8004f8e <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d019      	beq.n	8004f5c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f28:	4b3a      	ldr	r3, [pc, #232]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a39      	ldr	r2, [pc, #228]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f34:	f7fd fa46 	bl	80023c4 <HAL_GetTick>
 8004f38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f3c:	f7fd fa42 	bl	80023c4 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e1db      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f4e:	4b31      	ldr	r3, [pc, #196]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x430>
 8004f5a:	e018      	b.n	8004f8e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f5c:	4b2d      	ldr	r3, [pc, #180]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f68:	f7fd fa2c 	bl	80023c4 <HAL_GetTick>
 8004f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f70:	f7fd fa28 	bl	80023c4 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1c1      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f82:	4b24      	ldr	r3, [pc, #144]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80af 	beq.w	80050fa <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <HAL_RCC_OscConfig+0x50c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <HAL_RCC_OscConfig+0x50c>)
 8004fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fa8:	f7fd fa0c 	bl	80023c4 <HAL_GetTick>
 8004fac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fb0:	f7fd fa08 	bl	80023c4 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e1a1      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <HAL_RCC_OscConfig+0x50c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d106      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x4d8>
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	4a0e      	ldr	r2, [pc, #56]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe2:	e05b      	b.n	800509c <HAL_RCC_OscConfig+0x590>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d117      	bne.n	800501c <HAL_RCC_OscConfig+0x510>
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	4a08      	ldr	r2, [pc, #32]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005002:	6713      	str	r3, [r2, #112]	; 0x70
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	4a02      	ldr	r2, [pc, #8]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 800500a:	f023 0304 	bic.w	r3, r3, #4
 800500e:	6713      	str	r3, [r2, #112]	; 0x70
 8005010:	e044      	b.n	800509c <HAL_RCC_OscConfig+0x590>
 8005012:	bf00      	nop
 8005014:	58024400 	.word	0x58024400
 8005018:	58024800 	.word	0x58024800
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b05      	cmp	r3, #5
 8005022:	d112      	bne.n	800504a <HAL_RCC_OscConfig+0x53e>
 8005024:	4b95      	ldr	r3, [pc, #596]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	4a94      	ldr	r2, [pc, #592]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800502a:	f043 0304 	orr.w	r3, r3, #4
 800502e:	6713      	str	r3, [r2, #112]	; 0x70
 8005030:	4b92      	ldr	r3, [pc, #584]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	4a91      	ldr	r2, [pc, #580]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503a:	6713      	str	r3, [r2, #112]	; 0x70
 800503c:	4b8f      	ldr	r3, [pc, #572]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	4a8e      	ldr	r2, [pc, #568]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6713      	str	r3, [r2, #112]	; 0x70
 8005048:	e028      	b.n	800509c <HAL_RCC_OscConfig+0x590>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b85      	cmp	r3, #133	; 0x85
 8005050:	d112      	bne.n	8005078 <HAL_RCC_OscConfig+0x56c>
 8005052:	4b8a      	ldr	r3, [pc, #552]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	4a89      	ldr	r2, [pc, #548]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005058:	f043 0304 	orr.w	r3, r3, #4
 800505c:	6713      	str	r3, [r2, #112]	; 0x70
 800505e:	4b87      	ldr	r3, [pc, #540]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	4a86      	ldr	r2, [pc, #536]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005068:	6713      	str	r3, [r2, #112]	; 0x70
 800506a:	4b84      	ldr	r3, [pc, #528]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	4a83      	ldr	r2, [pc, #524]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6713      	str	r3, [r2, #112]	; 0x70
 8005076:	e011      	b.n	800509c <HAL_RCC_OscConfig+0x590>
 8005078:	4b80      	ldr	r3, [pc, #512]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	4a7f      	ldr	r2, [pc, #508]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6713      	str	r3, [r2, #112]	; 0x70
 8005084:	4b7d      	ldr	r3, [pc, #500]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	4a7c      	ldr	r2, [pc, #496]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800508a:	f023 0304 	bic.w	r3, r3, #4
 800508e:	6713      	str	r3, [r2, #112]	; 0x70
 8005090:	4b7a      	ldr	r3, [pc, #488]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	4a79      	ldr	r2, [pc, #484]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800509a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a4:	f7fd f98e 	bl	80023c4 <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ac:	f7fd f98a 	bl	80023c4 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e121      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050c2:	4b6e      	ldr	r3, [pc, #440]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0ee      	beq.n	80050ac <HAL_RCC_OscConfig+0x5a0>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d0:	f7fd f978 	bl	80023c4 <HAL_GetTick>
 80050d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050d6:	e00a      	b.n	80050ee <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d8:	f7fd f974 	bl	80023c4 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e10b      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050ee:	4b63      	ldr	r3, [pc, #396]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1ee      	bne.n	80050d8 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8100 	beq.w	8005304 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005104:	4b5d      	ldr	r3, [pc, #372]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800510c:	2b18      	cmp	r3, #24
 800510e:	f000 80bb 	beq.w	8005288 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	2b02      	cmp	r3, #2
 8005118:	f040 8095 	bne.w	8005246 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511c:	4b57      	ldr	r3, [pc, #348]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a56      	ldr	r2, [pc, #344]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fd f94c 	bl	80023c4 <HAL_GetTick>
 800512c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005130:	f7fd f948 	bl	80023c4 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0e1      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005142:	4b4e      	ldr	r3, [pc, #312]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800514e:	4b4b      	ldr	r3, [pc, #300]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005152:	4b4b      	ldr	r3, [pc, #300]	; (8005280 <HAL_RCC_OscConfig+0x774>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800515e:	0112      	lsls	r2, r2, #4
 8005160:	430a      	orrs	r2, r1
 8005162:	4946      	ldr	r1, [pc, #280]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005164:	4313      	orrs	r3, r2
 8005166:	628b      	str	r3, [r1, #40]	; 0x28
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	3b01      	subs	r3, #1
 800516e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	3b01      	subs	r3, #1
 8005178:	025b      	lsls	r3, r3, #9
 800517a:	b29b      	uxth	r3, r3
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	3b01      	subs	r3, #1
 8005184:	041b      	lsls	r3, r3, #16
 8005186:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	3b01      	subs	r3, #1
 8005192:	061b      	lsls	r3, r3, #24
 8005194:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005198:	4938      	ldr	r1, [pc, #224]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800519a:	4313      	orrs	r3, r2
 800519c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800519e:	4b37      	ldr	r3, [pc, #220]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	4a36      	ldr	r2, [pc, #216]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051aa:	4b34      	ldr	r3, [pc, #208]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ae:	4b35      	ldr	r3, [pc, #212]	; (8005284 <HAL_RCC_OscConfig+0x778>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051b6:	00d2      	lsls	r2, r2, #3
 80051b8:	4930      	ldr	r1, [pc, #192]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051be:	4b2f      	ldr	r3, [pc, #188]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	f023 020c 	bic.w	r2, r3, #12
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	492c      	ldr	r1, [pc, #176]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051d0:	4b2a      	ldr	r3, [pc, #168]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	f023 0202 	bic.w	r2, r3, #2
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051dc:	4927      	ldr	r1, [pc, #156]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051e2:	4b26      	ldr	r3, [pc, #152]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	4a25      	ldr	r2, [pc, #148]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ee:	4b23      	ldr	r3, [pc, #140]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	4a22      	ldr	r2, [pc, #136]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051fa:	4b20      	ldr	r3, [pc, #128]	; (800527c <HAL_RCC_OscConfig+0x770>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	4a1f      	ldr	r2, [pc, #124]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	4a1c      	ldr	r2, [pc, #112]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005212:	4b1a      	ldr	r3, [pc, #104]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a19      	ldr	r2, [pc, #100]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800521c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521e:	f7fd f8d1 	bl	80023c4 <HAL_GetTick>
 8005222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005226:	f7fd f8cd 	bl	80023c4 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e066      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x71a>
 8005244:	e05e      	b.n	8005304 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005246:	4b0d      	ldr	r3, [pc, #52]	; (800527c <HAL_RCC_OscConfig+0x770>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a0c      	ldr	r2, [pc, #48]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800524c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005252:	f7fd f8b7 	bl	80023c4 <HAL_GetTick>
 8005256:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525a:	f7fd f8b3 	bl	80023c4 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e04c      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800526c:	4b03      	ldr	r3, [pc, #12]	; (800527c <HAL_RCC_OscConfig+0x770>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <HAL_RCC_OscConfig+0x74e>
 8005278:	e044      	b.n	8005304 <HAL_RCC_OscConfig+0x7f8>
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
 8005280:	fffffc0c 	.word	0xfffffc0c
 8005284:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005288:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCC_OscConfig+0x804>)
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800528e:	4b20      	ldr	r3, [pc, #128]	; (8005310 <HAL_RCC_OscConfig+0x804>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	2b01      	cmp	r3, #1
 800529a:	d031      	beq.n	8005300 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f003 0203 	and.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d12a      	bne.n	8005300 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d122      	bne.n	8005300 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d11a      	bne.n	8005300 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	0a5b      	lsrs	r3, r3, #9
 80052ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d111      	bne.n	8005300 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d108      	bne.n	8005300 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	0e1b      	lsrs	r3, r3, #24
 80052f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3730      	adds	r7, #48	; 0x30
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	58024400 	.word	0x58024400

08005314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e19c      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b8a      	ldr	r3, [pc, #552]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d910      	bls.n	8005358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b87      	ldr	r3, [pc, #540]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	4985      	ldr	r1, [pc, #532]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b83      	ldr	r3, [pc, #524]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e184      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d010      	beq.n	8005386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	4b7b      	ldr	r3, [pc, #492]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005370:	429a      	cmp	r2, r3
 8005372:	d908      	bls.n	8005386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005374:	4b78      	ldr	r3, [pc, #480]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	4975      	ldr	r1, [pc, #468]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005382:	4313      	orrs	r3, r2
 8005384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	4b70      	ldr	r3, [pc, #448]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800539e:	429a      	cmp	r2, r3
 80053a0:	d908      	bls.n	80053b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053a2:	4b6d      	ldr	r3, [pc, #436]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	496a      	ldr	r1, [pc, #424]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d010      	beq.n	80053e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	4b64      	ldr	r3, [pc, #400]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d908      	bls.n	80053e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053d0:	4b61      	ldr	r3, [pc, #388]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	495e      	ldr	r1, [pc, #376]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d010      	beq.n	8005410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	4b59      	ldr	r3, [pc, #356]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d908      	bls.n	8005410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053fe:	4b56      	ldr	r3, [pc, #344]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	4953      	ldr	r1, [pc, #332]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800540c:	4313      	orrs	r3, r2
 800540e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d010      	beq.n	800543e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	4b4d      	ldr	r3, [pc, #308]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	429a      	cmp	r2, r3
 800542a:	d908      	bls.n	800543e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800542c:	4b4a      	ldr	r3, [pc, #296]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f023 020f 	bic.w	r2, r3, #15
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4947      	ldr	r1, [pc, #284]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800543a:	4313      	orrs	r3, r2
 800543c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d055      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	4940      	ldr	r1, [pc, #256]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005458:	4313      	orrs	r3, r2
 800545a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d107      	bne.n	8005474 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005464:	4b3c      	ldr	r3, [pc, #240]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d121      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0f6      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d107      	bne.n	800548c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800547c:	4b36      	ldr	r3, [pc, #216]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d115      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0ea      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005494:	4b30      	ldr	r3, [pc, #192]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d109      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0de      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a4:	4b2c      	ldr	r3, [pc, #176]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0d6      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054b4:	4b28      	ldr	r3, [pc, #160]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f023 0207 	bic.w	r2, r3, #7
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4925      	ldr	r1, [pc, #148]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c6:	f7fc ff7d 	bl	80023c4 <HAL_GetTick>
 80054ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054cc:	e00a      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ce:	f7fc ff79 	bl	80023c4 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054dc:	4293      	cmp	r3, r2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e0be      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e4:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d1eb      	bne.n	80054ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	4b14      	ldr	r3, [pc, #80]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	429a      	cmp	r2, r3
 8005510:	d208      	bcs.n	8005524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005512:	4b11      	ldr	r3, [pc, #68]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f023 020f 	bic.w	r2, r3, #15
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	490e      	ldr	r1, [pc, #56]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005520:	4313      	orrs	r3, r2
 8005522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d214      	bcs.n	800555c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 020f 	bic.w	r2, r3, #15
 800553a:	4906      	ldr	r1, [pc, #24]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b04      	ldr	r3, [pc, #16]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d005      	beq.n	800555c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e086      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
 8005554:	52002000 	.word	0x52002000
 8005558:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d010      	beq.n	800558a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	4b3f      	ldr	r3, [pc, #252]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005574:	429a      	cmp	r2, r3
 8005576:	d208      	bcs.n	800558a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005578:	4b3c      	ldr	r3, [pc, #240]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	4939      	ldr	r1, [pc, #228]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 8005586:	4313      	orrs	r3, r2
 8005588:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d010      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	4b34      	ldr	r3, [pc, #208]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d208      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055a6:	4b31      	ldr	r3, [pc, #196]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	492e      	ldr	r1, [pc, #184]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d010      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	4b28      	ldr	r3, [pc, #160]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d208      	bcs.n	80055e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055d4:	4b25      	ldr	r3, [pc, #148]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	4922      	ldr	r1, [pc, #136]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d010      	beq.n	8005614 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	4b1d      	ldr	r3, [pc, #116]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055fe:	429a      	cmp	r2, r3
 8005600:	d208      	bcs.n	8005614 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005602:	4b1a      	ldr	r3, [pc, #104]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	4917      	ldr	r1, [pc, #92]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 8005610:	4313      	orrs	r3, r2
 8005612:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005614:	f000 f834 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b14      	ldr	r3, [pc, #80]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	4912      	ldr	r1, [pc, #72]	; (8005670 <HAL_RCC_ClockConfig+0x35c>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005632:	4b0e      	ldr	r3, [pc, #56]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	4a0d      	ldr	r2, [pc, #52]	; (8005670 <HAL_RCC_ClockConfig+0x35c>)
 800563c:	5cd3      	ldrb	r3, [r2, r3]
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
 8005648:	4a0a      	ldr	r2, [pc, #40]	; (8005674 <HAL_RCC_ClockConfig+0x360>)
 800564a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800564c:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <HAL_RCC_ClockConfig+0x364>)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <HAL_RCC_ClockConfig+0x368>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7fc fe6a 	bl	8002330 <HAL_InitTick>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
 8005670:	0800b5fc 	.word	0x0800b5fc
 8005674:	2400000c 	.word	0x2400000c
 8005678:	24000008 	.word	0x24000008
 800567c:	24000010 	.word	0x24000010

08005680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	; 0x24
 8005684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005686:	4bb3      	ldr	r3, [pc, #716]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800568e:	2b18      	cmp	r3, #24
 8005690:	f200 8155 	bhi.w	800593e <HAL_RCC_GetSysClockFreq+0x2be>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	08005701 	.word	0x08005701
 80056a0:	0800593f 	.word	0x0800593f
 80056a4:	0800593f 	.word	0x0800593f
 80056a8:	0800593f 	.word	0x0800593f
 80056ac:	0800593f 	.word	0x0800593f
 80056b0:	0800593f 	.word	0x0800593f
 80056b4:	0800593f 	.word	0x0800593f
 80056b8:	0800593f 	.word	0x0800593f
 80056bc:	08005727 	.word	0x08005727
 80056c0:	0800593f 	.word	0x0800593f
 80056c4:	0800593f 	.word	0x0800593f
 80056c8:	0800593f 	.word	0x0800593f
 80056cc:	0800593f 	.word	0x0800593f
 80056d0:	0800593f 	.word	0x0800593f
 80056d4:	0800593f 	.word	0x0800593f
 80056d8:	0800593f 	.word	0x0800593f
 80056dc:	0800572d 	.word	0x0800572d
 80056e0:	0800593f 	.word	0x0800593f
 80056e4:	0800593f 	.word	0x0800593f
 80056e8:	0800593f 	.word	0x0800593f
 80056ec:	0800593f 	.word	0x0800593f
 80056f0:	0800593f 	.word	0x0800593f
 80056f4:	0800593f 	.word	0x0800593f
 80056f8:	0800593f 	.word	0x0800593f
 80056fc:	08005733 	.word	0x08005733
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005700:	4b94      	ldr	r3, [pc, #592]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800570c:	4b91      	ldr	r3, [pc, #580]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	08db      	lsrs	r3, r3, #3
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	4a90      	ldr	r2, [pc, #576]	; (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
 800571c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800571e:	e111      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005720:	4b8d      	ldr	r3, [pc, #564]	; (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005722:	61bb      	str	r3, [r7, #24]
    break;
 8005724:	e10e      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005726:	4b8d      	ldr	r3, [pc, #564]	; (800595c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005728:	61bb      	str	r3, [r7, #24]
    break;
 800572a:	e10b      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800572c:	4b8c      	ldr	r3, [pc, #560]	; (8005960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800572e:	61bb      	str	r3, [r7, #24]
    break;
 8005730:	e108      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005732:	4b88      	ldr	r3, [pc, #544]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800573c:	4b85      	ldr	r3, [pc, #532]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005746:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005748:	4b82      	ldr	r3, [pc, #520]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005752:	4b80      	ldr	r3, [pc, #512]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	08db      	lsrs	r3, r3, #3
 8005758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80e1 	beq.w	8005938 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b02      	cmp	r3, #2
 800577a:	f000 8083 	beq.w	8005884 <HAL_RCC_GetSysClockFreq+0x204>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b02      	cmp	r3, #2
 8005782:	f200 80a1 	bhi.w	80058c8 <HAL_RCC_GetSysClockFreq+0x248>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x114>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d056      	beq.n	8005840 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005792:	e099      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005794:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02d      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057a0:	4b6c      	ldr	r3, [pc, #432]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	4a6b      	ldr	r2, [pc, #428]	; (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
 80057b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b62      	ldr	r3, [pc, #392]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a02 	vldr	s12, [r7, #8]
 80057de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80057fa:	e087      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b51      	ldr	r3, [pc, #324]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005822:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800583e:	e065      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800596c <HAL_RCC_GetSysClockFreq+0x2ec>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b40      	ldr	r3, [pc, #256]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a02 	vldr	s12, [r7, #8]
 8005866:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005882:	e043      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005970 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005896:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058c6:	e021      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800596c <HAL_RCC_GetSysClockFreq+0x2ec>
 80058d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058da:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800590a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800590c:	4b11      	ldr	r3, [pc, #68]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	0a5b      	lsrs	r3, r3, #9
 8005912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005916:	3301      	adds	r3, #1
 8005918:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	ee07 3a90 	vmov	s15, r3
 8005920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005924:	edd7 6a07 	vldr	s13, [r7, #28]
 8005928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800592c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005930:	ee17 3a90 	vmov	r3, s15
 8005934:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005936:	e005      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]
    break;
 800593c:	e002      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005940:	61bb      	str	r3, [r7, #24]
    break;
 8005942:	bf00      	nop
  }

  return sysclockfreq;
 8005944:	69bb      	ldr	r3, [r7, #24]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3724      	adds	r7, #36	; 0x24
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	58024400 	.word	0x58024400
 8005958:	03d09000 	.word	0x03d09000
 800595c:	003d0900 	.word	0x003d0900
 8005960:	016e3600 	.word	0x016e3600
 8005964:	46000000 	.word	0x46000000
 8005968:	4c742400 	.word	0x4c742400
 800596c:	4a742400 	.word	0x4a742400
 8005970:	4bb71b00 	.word	0x4bb71b00

08005974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800597a:	f7ff fe81 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 800597e:	4602      	mov	r2, r0
 8005980:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	490f      	ldr	r1, [pc, #60]	; (80059c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800598c:	5ccb      	ldrb	r3, [r1, r3]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80059a2:	5cd3      	ldrb	r3, [r2, r3]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a07      	ldr	r2, [pc, #28]	; (80059cc <HAL_RCC_GetHCLKFreq+0x58>)
 80059b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059b2:	4a07      	ldr	r2, [pc, #28]	; (80059d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <HAL_RCC_GetHCLKFreq+0x58>)
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	58024400 	.word	0x58024400
 80059c8:	0800b5fc 	.word	0x0800b5fc
 80059cc:	2400000c 	.word	0x2400000c
 80059d0:	24000008 	.word	0x24000008

080059d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80059d8:	f7ff ffcc 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	4904      	ldr	r1, [pc, #16]	; (80059fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ea:	5ccb      	ldrb	r3, [r1, r3]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	58024400 	.word	0x58024400
 80059fc:	0800b5fc 	.word	0x0800b5fc

08005a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005a04:	f7ff ffb6 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	4904      	ldr	r1, [pc, #16]	; (8005a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a16:	5ccb      	ldrb	r3, [r1, r3]
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	58024400 	.word	0x58024400
 8005a28:	0800b5fc 	.word	0x0800b5fc

08005a2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a34:	2300      	movs	r3, #0
 8005a36:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a38:	2300      	movs	r3, #0
 8005a3a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d03f      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a50:	d02a      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a56:	d824      	bhi.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a5c:	d018      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a62:	d81e      	bhi.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6c:	d007      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a6e:	e018      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4ba6      	ldr	r3, [pc, #664]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4aa5      	ldr	r2, [pc, #660]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a7c:	e015      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3304      	adds	r3, #4
 8005a82:	2102      	movs	r1, #2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 ff17 	bl	80078b8 <RCCEx_PLL2_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a8e:	e00c      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3324      	adds	r3, #36	; 0x24
 8005a94:	2102      	movs	r1, #2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 ffc0 	bl	8007a1c <RCCEx_PLL3_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005aa0:	e003      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa6:	e000      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ab0:	4b96      	ldr	r3, [pc, #600]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005abc:	4993      	ldr	r1, [pc, #588]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ac2:	e001      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d03d      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d826      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005af9 	.word	0x08005af9
 8005ae8:	08005b07 	.word	0x08005b07
 8005aec:	08005b19 	.word	0x08005b19
 8005af0:	08005b31 	.word	0x08005b31
 8005af4:	08005b31 	.word	0x08005b31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af8:	4b84      	ldr	r3, [pc, #528]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	4a83      	ldr	r2, [pc, #524]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b04:	e015      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 fed3 	bl	80078b8 <RCCEx_PLL2_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b16:	e00c      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3324      	adds	r3, #36	; 0x24
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 ff7c 	bl	8007a1c <RCCEx_PLL3_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b28:	e003      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2e:	e000      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d109      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b38:	4b74      	ldr	r3, [pc, #464]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	f023 0207 	bic.w	r2, r3, #7
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b44:	4971      	ldr	r1, [pc, #452]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	650b      	str	r3, [r1, #80]	; 0x50
 8005b4a:	e001      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d04a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b60:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005b64:	d031      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005b66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005b6a:	d82b      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b70:	d02d      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b76:	d825      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005b78:	2bc0      	cmp	r3, #192	; 0xc0
 8005b7a:	d02a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005b7c:	2bc0      	cmp	r3, #192	; 0xc0
 8005b7e:	d821      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005b80:	2b80      	cmp	r3, #128	; 0x80
 8005b82:	d016      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005b84:	2b80      	cmp	r3, #128	; 0x80
 8005b86:	d81d      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	d007      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005b90:	e018      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b92:	4b5e      	ldr	r3, [pc, #376]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	4a5d      	ldr	r2, [pc, #372]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005b9e:	e019      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fe86 	bl	80078b8 <RCCEx_PLL2_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005bb0:	e010      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3324      	adds	r3, #36	; 0x24
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 ff2f 	bl	8007a1c <RCCEx_PLL3_Config>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005bc2:	e007      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc8:	e004      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005bca:	bf00      	nop
 8005bcc:	e002      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005bce:	bf00      	nop
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005bda:	4b4c      	ldr	r3, [pc, #304]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be6:	4949      	ldr	r1, [pc, #292]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	650b      	str	r3, [r1, #80]	; 0x50
 8005bec:	e001      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d04f      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c02:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005c06:	d036      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005c08:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005c0c:	d830      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c12:	d032      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c18:	d82a      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c1e:	d02e      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8005c20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c24:	d824      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2a:	d018      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c30:	d81e      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c3a:	d007      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005c3c:	e018      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c3e:	4b33      	ldr	r3, [pc, #204]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	4a32      	ldr	r2, [pc, #200]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005c4a:	e019      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 fe30 	bl	80078b8 <RCCEx_PLL2_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005c5c:	e010      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3324      	adds	r3, #36	; 0x24
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 fed9 	bl	8007a1c <RCCEx_PLL3_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005c6e:	e007      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
      break;
 8005c74:	e004      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005c76:	bf00      	nop
 8005c78:	e002      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005c86:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c92:	491e      	ldr	r1, [pc, #120]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	650b      	str	r3, [r1, #80]	; 0x50
 8005c98:	e001      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d034      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cae:	2b30      	cmp	r3, #48	; 0x30
 8005cb0:	d01c      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005cb2:	2b30      	cmp	r3, #48	; 0x30
 8005cb4:	d817      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d813      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d016      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d10f      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005cd2:	e00e      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	2102      	movs	r1, #2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 fdec 	bl	80078b8 <RCCEx_PLL2_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005ce4:	e005      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cea:	e002      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005cec:	bf00      	nop
 8005cee:	e000      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8005cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005cf8:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d04:	4901      	ldr	r1, [pc, #4]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d047      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d28:	d030      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d2e:	d82a      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005d30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d34:	d02c      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005d36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d3a:	d824      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d40:	d018      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d46:	d81e      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d50:	d007      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005d52:	e018      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d54:	4bb0      	ldr	r3, [pc, #704]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	4aaf      	ldr	r2, [pc, #700]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d60:	e017      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3304      	adds	r3, #4
 8005d66:	2100      	movs	r1, #0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 fda5 	bl	80078b8 <RCCEx_PLL2_Config>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d72:	e00e      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3324      	adds	r3, #36	; 0x24
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fe4e 	bl	8007a1c <RCCEx_PLL3_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d84:	e005      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8a:	e002      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d98:	4b9f      	ldr	r3, [pc, #636]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da4:	499c      	ldr	r1, [pc, #624]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	650b      	str	r3, [r1, #80]	; 0x50
 8005daa:	e001      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d049      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dc4:	d02e      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dca:	d828      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005dcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dd0:	d02a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005dd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dd6:	d822      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005dd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ddc:	d026      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005dde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005de2:	d81c      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de8:	d010      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dee:	d816      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01d      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d111      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	2101      	movs	r1, #1
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fd59 	bl	80078b8 <RCCEx_PLL2_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e0a:	e012      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3324      	adds	r3, #36	; 0x24
 8005e10:	2101      	movs	r1, #1
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 fe02 	bl	8007a1c <RCCEx_PLL3_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e1c:	e009      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
      break;
 8005e22:	e006      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005e24:	bf00      	nop
 8005e26:	e004      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005e28:	bf00      	nop
 8005e2a:	e002      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005e2c:	bf00      	nop
 8005e2e:	e000      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e38:	4b77      	ldr	r3, [pc, #476]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e44:	4974      	ldr	r1, [pc, #464]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	650b      	str	r3, [r1, #80]	; 0x50
 8005e4a:	e001      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
 8005e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d053      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e62:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005e66:	d034      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e68:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005e6c:	d82e      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e72:	d030      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e78:	d828      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7e:	d02c      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d822      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e8a:	d028      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005e8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e90:	d81c      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e96:	d010      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e9c:	d816      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d01f      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ea6:	d111      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	2101      	movs	r1, #1
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fd02 	bl	80078b8 <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005eb8:	e014      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3324      	adds	r3, #36	; 0x24
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fdab 	bl	8007a1c <RCCEx_PLL3_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005ed2:	bf00      	nop
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005ed6:	bf00      	nop
 8005ed8:	e004      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005eea:	4b4b      	ldr	r3, [pc, #300]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ef8:	4947      	ldr	r1, [pc, #284]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	658b      	str	r3, [r1, #88]	; 0x58
 8005efe:	e001      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d02f      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f18:	d00e      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f1e:	d814      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d015      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f28:	d10f      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2a:	4b3b      	ldr	r3, [pc, #236]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	4a3a      	ldr	r2, [pc, #232]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f36:	e00c      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fcba 	bl	80078b8 <RCCEx_PLL2_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f48:	e003      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4e:	e000      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d109      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f58:	4b2f      	ldr	r3, [pc, #188]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f64:	492c      	ldr	r1, [pc, #176]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	650b      	str	r3, [r1, #80]	; 0x50
 8005f6a:	e001      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d032      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d81b      	bhi.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x590>
 8005f84:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005fc3 	.word	0x08005fc3
 8005f90:	08005f9d 	.word	0x08005f9d
 8005f94:	08005fab 	.word	0x08005fab
 8005f98:	08005fc3 	.word	0x08005fc3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	4a1d      	ldr	r2, [pc, #116]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fa8:	e00c      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2102      	movs	r1, #2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 fc81 	bl	80078b8 <RCCEx_PLL2_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fba:	e003      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc0:	e000      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8005fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005fca:	4b13      	ldr	r3, [pc, #76]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fce:	f023 0203 	bic.w	r2, r3, #3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	4910      	ldr	r1, [pc, #64]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005fdc:	e001      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 808a 	beq.w	8006104 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a09      	ldr	r2, [pc, #36]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ffc:	f7fc f9e2 	bl	80023c4 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006002:	e00d      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006004:	f7fc f9de 	bl	80023c4 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d906      	bls.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	75fb      	strb	r3, [r7, #23]
        break;
 8006016:	e009      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8006018:	58024400 	.word	0x58024400
 800601c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006020:	4bba      	ldr	r3, [pc, #744]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0eb      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 800602c:	7dfb      	ldrb	r3, [r7, #23]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d166      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006032:	4bb7      	ldr	r3, [pc, #732]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006034:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800603c:	4053      	eors	r3, r2
 800603e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006042:	2b00      	cmp	r3, #0
 8006044:	d013      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006046:	4bb2      	ldr	r3, [pc, #712]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006050:	4baf      	ldr	r3, [pc, #700]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006054:	4aae      	ldr	r2, [pc, #696]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800605c:	4bac      	ldr	r3, [pc, #688]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006060:	4aab      	ldr	r2, [pc, #684]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006066:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006068:	4aa9      	ldr	r2, [pc, #676]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006078:	d115      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fc f9a3 	bl	80023c4 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006080:	e00b      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006082:	f7fc f99f 	bl	80023c4 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006090:	4293      	cmp	r3, r2
 8006092:	d902      	bls.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	75fb      	strb	r3, [r7, #23]
            break;
 8006098:	e005      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800609a:	4b9d      	ldr	r3, [pc, #628]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0ed      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d126      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ba:	d10d      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80060bc:	4b94      	ldr	r3, [pc, #592]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060ca:	0919      	lsrs	r1, r3, #4
 80060cc:	4b91      	ldr	r3, [pc, #580]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80060ce:	400b      	ands	r3, r1
 80060d0:	498f      	ldr	r1, [pc, #572]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	610b      	str	r3, [r1, #16]
 80060d6:	e005      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80060d8:	4b8d      	ldr	r3, [pc, #564]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	4a8c      	ldr	r2, [pc, #560]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060e2:	6113      	str	r3, [r2, #16]
 80060e4:	4b8a      	ldr	r3, [pc, #552]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f2:	4987      	ldr	r1, [pc, #540]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	670b      	str	r3, [r1, #112]	; 0x70
 80060f8:	e004      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
 80060fc:	75bb      	strb	r3, [r7, #22]
 80060fe:	e001      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d07f      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006116:	2b28      	cmp	r3, #40	; 0x28
 8006118:	d866      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800611a:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	080061ef 	.word	0x080061ef
 8006124:	080061e9 	.word	0x080061e9
 8006128:	080061e9 	.word	0x080061e9
 800612c:	080061e9 	.word	0x080061e9
 8006130:	080061e9 	.word	0x080061e9
 8006134:	080061e9 	.word	0x080061e9
 8006138:	080061e9 	.word	0x080061e9
 800613c:	080061e9 	.word	0x080061e9
 8006140:	080061c5 	.word	0x080061c5
 8006144:	080061e9 	.word	0x080061e9
 8006148:	080061e9 	.word	0x080061e9
 800614c:	080061e9 	.word	0x080061e9
 8006150:	080061e9 	.word	0x080061e9
 8006154:	080061e9 	.word	0x080061e9
 8006158:	080061e9 	.word	0x080061e9
 800615c:	080061e9 	.word	0x080061e9
 8006160:	080061d7 	.word	0x080061d7
 8006164:	080061e9 	.word	0x080061e9
 8006168:	080061e9 	.word	0x080061e9
 800616c:	080061e9 	.word	0x080061e9
 8006170:	080061e9 	.word	0x080061e9
 8006174:	080061e9 	.word	0x080061e9
 8006178:	080061e9 	.word	0x080061e9
 800617c:	080061e9 	.word	0x080061e9
 8006180:	080061ef 	.word	0x080061ef
 8006184:	080061e9 	.word	0x080061e9
 8006188:	080061e9 	.word	0x080061e9
 800618c:	080061e9 	.word	0x080061e9
 8006190:	080061e9 	.word	0x080061e9
 8006194:	080061e9 	.word	0x080061e9
 8006198:	080061e9 	.word	0x080061e9
 800619c:	080061e9 	.word	0x080061e9
 80061a0:	080061ef 	.word	0x080061ef
 80061a4:	080061e9 	.word	0x080061e9
 80061a8:	080061e9 	.word	0x080061e9
 80061ac:	080061e9 	.word	0x080061e9
 80061b0:	080061e9 	.word	0x080061e9
 80061b4:	080061e9 	.word	0x080061e9
 80061b8:	080061e9 	.word	0x080061e9
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	080061ef 	.word	0x080061ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	2101      	movs	r1, #1
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 fb74 	bl	80078b8 <RCCEx_PLL2_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80061d4:	e00c      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3324      	adds	r3, #36	; 0x24
 80061da:	2101      	movs	r1, #1
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 fc1d 	bl	8007a1c <RCCEx_PLL3_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80061e6:	e003      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]
      break;
 80061ec:	e000      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80061ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061f6:	4b46      	ldr	r3, [pc, #280]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006204:	4942      	ldr	r1, [pc, #264]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006206:	4313      	orrs	r3, r2
 8006208:	654b      	str	r3, [r1, #84]	; 0x54
 800620a:	e001      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d038      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006220:	2b05      	cmp	r3, #5
 8006222:	d821      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	0800626f 	.word	0x0800626f
 8006230:	08006245 	.word	0x08006245
 8006234:	08006257 	.word	0x08006257
 8006238:	0800626f 	.word	0x0800626f
 800623c:	0800626f 	.word	0x0800626f
 8006240:	0800626f 	.word	0x0800626f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3304      	adds	r3, #4
 8006248:	2101      	movs	r1, #1
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fb34 	bl	80078b8 <RCCEx_PLL2_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006254:	e00c      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3324      	adds	r3, #36	; 0x24
 800625a:	2101      	movs	r1, #1
 800625c:	4618      	mov	r0, r3
 800625e:	f001 fbdd 	bl	8007a1c <RCCEx_PLL3_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006266:	e003      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	75fb      	strb	r3, [r7, #23]
      break;
 800626c:	e000      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800626e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006276:	4b26      	ldr	r3, [pc, #152]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	f023 0207 	bic.w	r2, r3, #7
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006282:	4923      	ldr	r1, [pc, #140]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006284:	4313      	orrs	r3, r2
 8006286:	654b      	str	r3, [r1, #84]	; 0x54
 8006288:	e001      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628a:	7dfb      	ldrb	r3, [r7, #23]
 800628c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d040      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062a0:	2b05      	cmp	r3, #5
 80062a2:	d821      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062ef 	.word	0x080062ef
 80062b0:	080062c5 	.word	0x080062c5
 80062b4:	080062d7 	.word	0x080062d7
 80062b8:	080062ef 	.word	0x080062ef
 80062bc:	080062ef 	.word	0x080062ef
 80062c0:	080062ef 	.word	0x080062ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	2101      	movs	r1, #1
 80062ca:	4618      	mov	r0, r3
 80062cc:	f001 faf4 	bl	80078b8 <RCCEx_PLL2_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062d4:	e00c      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3324      	adds	r3, #36	; 0x24
 80062da:	2101      	movs	r1, #1
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 fb9d 	bl	8007a1c <RCCEx_PLL3_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062e6:	e003      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	75fb      	strb	r3, [r7, #23]
      break;
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80062ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d110      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062f6:	4b06      	ldr	r3, [pc, #24]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80062f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fa:	f023 0207 	bic.w	r2, r3, #7
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006304:	4902      	ldr	r1, [pc, #8]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006306:	4313      	orrs	r3, r2
 8006308:	658b      	str	r3, [r1, #88]	; 0x58
 800630a:	e007      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800630c:	58024800 	.word	0x58024800
 8006310:	58024400 	.word	0x58024400
 8006314:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d04b      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800632e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006332:	d02e      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006338:	d828      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800633a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633e:	d02a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d822      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006346:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800634a:	d026      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800634c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006350:	d81c      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006356:	d010      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635c:	d816      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01d      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006366:	d111      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f001 faa2 	bl	80078b8 <RCCEx_PLL2_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006378:	e012      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3324      	adds	r3, #36	; 0x24
 800637e:	2102      	movs	r1, #2
 8006380:	4618      	mov	r0, r3
 8006382:	f001 fb4b 	bl	8007a1c <RCCEx_PLL3_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800638a:	e009      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
      break;
 8006390:	e006      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006392:	bf00      	nop
 8006394:	e004      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006396:	bf00      	nop
 8006398:	e002      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800639e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a6:	4bb3      	ldr	r3, [pc, #716]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80063a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b4:	49af      	ldr	r1, [pc, #700]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	654b      	str	r3, [r1, #84]	; 0x54
 80063ba:	e001      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d04b      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063d6:	d02e      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80063d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063dc:	d828      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80063de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e2:	d02a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80063e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e8:	d822      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80063ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ee:	d026      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80063f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f4:	d81c      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80063f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fa:	d010      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80063fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006400:	d816      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01d      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640a:	d111      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f001 fa50 	bl	80078b8 <RCCEx_PLL2_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800641c:	e012      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3324      	adds	r3, #36	; 0x24
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f001 faf9 	bl	8007a1c <RCCEx_PLL3_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800642e:	e009      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	75fb      	strb	r3, [r7, #23]
      break;
 8006434:	e006      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006436:	bf00      	nop
 8006438:	e004      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800643a:	bf00      	nop
 800643c:	e002      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800643e:	bf00      	nop
 8006440:	e000      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006444:	7dfb      	ldrb	r3, [r7, #23]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800644a:	4b8a      	ldr	r3, [pc, #552]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800644c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006458:	4986      	ldr	r1, [pc, #536]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800645a:	4313      	orrs	r3, r2
 800645c:	658b      	str	r3, [r1, #88]	; 0x58
 800645e:	e001      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b00      	cmp	r3, #0
 800646e:	d04b      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006476:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800647a:	d02e      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800647c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006480:	d828      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006486:	d02a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648c:	d822      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800648e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006492:	d026      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006494:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006498:	d81c      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800649a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800649e:	d010      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80064a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064a4:	d816      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01d      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ae:	d111      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 f9fe 	bl	80078b8 <RCCEx_PLL2_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064c0:	e012      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3324      	adds	r3, #36	; 0x24
 80064c6:	2102      	movs	r1, #2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 faa7 	bl	8007a1c <RCCEx_PLL3_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064d2:	e009      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	e006      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80064da:	bf00      	nop
 80064dc:	e004      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80064de:	bf00      	nop
 80064e0:	e002      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80064e2:	bf00      	nop
 80064e4:	e000      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80064e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064ee:	4b61      	ldr	r3, [pc, #388]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80064f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064fc:	495d      	ldr	r1, [pc, #372]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	658b      	str	r3, [r1, #88]	; 0x58
 8006502:	e001      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651e:	d10a      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3324      	adds	r3, #36	; 0x24
 8006524:	2102      	movs	r1, #2
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fa78 	bl	8007a1c <RCCEx_PLL3_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006536:	4b4f      	ldr	r3, [pc, #316]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006544:	494b      	ldr	r1, [pc, #300]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006546:	4313      	orrs	r3, r2
 8006548:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	d01a      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800655c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006560:	d10a      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3324      	adds	r3, #36	; 0x24
 8006566:	2102      	movs	r1, #2
 8006568:	4618      	mov	r0, r3
 800656a:	f001 fa57 	bl	8007a1c <RCCEx_PLL3_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006578:	4b3e      	ldr	r3, [pc, #248]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800657a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006586:	493b      	ldr	r1, [pc, #236]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006588:	4313      	orrs	r3, r2
 800658a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d034      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800659e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065a2:	d01d      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80065a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065a8:	d817      	bhi.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80065ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b2:	d009      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80065b4:	e011      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3304      	adds	r3, #4
 80065ba:	2100      	movs	r1, #0
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 f97b 	bl	80078b8 <RCCEx_PLL2_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065c6:	e00c      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3324      	adds	r3, #36	; 0x24
 80065cc:	2102      	movs	r1, #2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 fa24 	bl	8007a1c <RCCEx_PLL3_Config>
 80065d4:	4603      	mov	r3, r0
 80065d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065d8:	e003      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	75fb      	strb	r3, [r7, #23]
      break;
 80065de:	e000      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80065e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065e8:	4b22      	ldr	r3, [pc, #136]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065f6:	491f      	ldr	r1, [pc, #124]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	658b      	str	r3, [r1, #88]	; 0x58
 80065fc:	e001      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d036      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006614:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006618:	d01c      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800661a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800661e:	d816      	bhi.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006624:	d003      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800662a:	d007      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800662c:	e00f      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662e:	4b11      	ldr	r3, [pc, #68]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006638:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800663a:	e00c      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3324      	adds	r3, #36	; 0x24
 8006640:	2101      	movs	r1, #1
 8006642:	4618      	mov	r0, r3
 8006644:	f001 f9ea 	bl	8007a1c <RCCEx_PLL3_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800664c:	e003      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
      break;
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10d      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800665e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666a:	4902      	ldr	r1, [pc, #8]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800666c:	4313      	orrs	r3, r2
 800666e:	654b      	str	r3, [r1, #84]	; 0x54
 8006670:	e004      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006672:	bf00      	nop
 8006674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d029      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006694:	d007      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8006696:	e00f      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006698:	4b69      	ldr	r3, [pc, #420]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	4a68      	ldr	r2, [pc, #416]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800669e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066a4:	e00b      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3304      	adds	r3, #4
 80066aa:	2102      	movs	r1, #2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 f903 	bl	80078b8 <RCCEx_PLL2_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066b6:	e002      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
      break;
 80066bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d109      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066c4:	4b5e      	ldr	r3, [pc, #376]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80066c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d0:	495b      	ldr	r1, [pc, #364]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066d6:	e001      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3324      	adds	r3, #36	; 0x24
 80066ec:	2102      	movs	r1, #2
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 f994 	bl	8007a1c <RCCEx_PLL3_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d032      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006714:	d017      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8006716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800671a:	d811      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800671c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006720:	d013      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8006722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006726:	d80b      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d010      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800672c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006730:	d106      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006732:	4b43      	ldr	r3, [pc, #268]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	4a42      	ldr	r2, [pc, #264]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800673e:	e007      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
      break;
 8006744:	e004      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8006746:	bf00      	nop
 8006748:	e002      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800674a:	bf00      	nop
 800674c:	e000      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800674e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10a      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006756:	4b3a      	ldr	r3, [pc, #232]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006764:	4936      	ldr	r1, [pc, #216]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006766:	4313      	orrs	r3, r2
 8006768:	654b      	str	r3, [r1, #84]	; 0x54
 800676a:	e001      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800677c:	4b30      	ldr	r3, [pc, #192]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006788:	492d      	ldr	r1, [pc, #180]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800678a:	4313      	orrs	r3, r2
 800678c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d008      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800679a:	4b29      	ldr	r3, [pc, #164]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800679c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a6:	4926      	ldr	r1, [pc, #152]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80067b8:	4b21      	ldr	r3, [pc, #132]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c4:	491e      	ldr	r1, [pc, #120]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00d      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067d6:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	4a19      	ldr	r2, [pc, #100]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067e0:	6113      	str	r3, [r2, #16]
 80067e2:	4b17      	ldr	r3, [pc, #92]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067ec:	4914      	ldr	r1, [pc, #80]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	da08      	bge.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067fa:	4b11      	ldr	r3, [pc, #68]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006806:	490e      	ldr	r1, [pc, #56]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006808:	4313      	orrs	r3, r2
 800680a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d009      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006818:	4b09      	ldr	r3, [pc, #36]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800681a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	4906      	ldr	r1, [pc, #24]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006828:	4313      	orrs	r3, r2
 800682a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800682c:	7dbb      	ldrb	r3, [r7, #22]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	e000      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	58024400 	.word	0x58024400

08006844 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b090      	sub	sp, #64	; 0x40
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006852:	f040 8089 	bne.w	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006856:	4ba8      	ldr	r3, [pc, #672]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	633b      	str	r3, [r7, #48]	; 0x30
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	2b04      	cmp	r3, #4
 8006864:	d87d      	bhi.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006881 	.word	0x08006881
 8006870:	080068a5 	.word	0x080068a5
 8006874:	080068c9 	.word	0x080068c9
 8006878:	0800695d 	.word	0x0800695d
 800687c:	080068ed 	.word	0x080068ed

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006880:	4b9d      	ldr	r3, [pc, #628]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800688c:	d107      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800688e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006892:	4618      	mov	r0, r3
 8006894:	f000 febe 	bl	8007614 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800689c:	e3f5      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068a2:	e3f2      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068a4:	4b94      	ldr	r3, [pc, #592]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068b0:	d107      	bne.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068b2:	f107 0318 	add.w	r3, r7, #24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fc04 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068c0:	e3e3      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068c6:	e3e0      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068c8:	4b8b      	ldr	r3, [pc, #556]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068d4:	d107      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fd46 	bl	800736c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068e4:	e3d1      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ea:	e3ce      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068ec:	4b82      	ldr	r3, [pc, #520]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068f4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068f6:	4b80      	ldr	r3, [pc, #512]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d10c      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006904:	2b00      	cmp	r3, #0
 8006906:	d109      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006908:	4b7b      	ldr	r3, [pc, #492]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	08db      	lsrs	r3, r3, #3
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	4a7a      	ldr	r2, [pc, #488]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800691a:	e01e      	b.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800691c:	4b76      	ldr	r3, [pc, #472]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006928:	d106      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006930:	d102      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006932:	4b73      	ldr	r3, [pc, #460]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006936:	e010      	b.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006938:	4b6f      	ldr	r3, [pc, #444]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006944:	d106      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694c:	d102      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800694e:	4b6d      	ldr	r3, [pc, #436]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006952:	e002      	b.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006958:	e397      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800695a:	e396      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800695c:	4b6a      	ldr	r3, [pc, #424]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006960:	e393      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006966:	e390      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696e:	f040 8095 	bne.w	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8006972:	4b61      	ldr	r3, [pc, #388]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006976:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800697a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006982:	d04d      	beq.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800698a:	f200 8084 	bhi.w	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2bc0      	cmp	r3, #192	; 0xc0
 8006992:	d07d      	beq.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	2bc0      	cmp	r3, #192	; 0xc0
 8006998:	d87d      	bhi.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	2b80      	cmp	r3, #128	; 0x80
 800699e:	d02d      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d877      	bhi.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d012      	beq.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80069b2:	e070      	b.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069b4:	4b50      	ldr	r3, [pc, #320]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069c0:	d107      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fe24 	bl	8007614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069d0:	e35b      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d6:	e358      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069d8:	4b47      	ldr	r3, [pc, #284]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e4:	d107      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069e6:	f107 0318 	add.w	r3, r7, #24
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fb6a 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069f4:	e349      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069fa:	e346      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069fc:	4b3e      	ldr	r3, [pc, #248]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a08:	d107      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0a:	f107 030c 	add.w	r3, r7, #12
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fcac 	bl	800736c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a18:	e337      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a1e:	e334      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a20:	4b35      	ldr	r3, [pc, #212]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a2a:	4b33      	ldr	r3, [pc, #204]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d10c      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d109      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a3c:	4b2e      	ldr	r3, [pc, #184]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	08db      	lsrs	r3, r3, #3
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	4a2d      	ldr	r2, [pc, #180]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a48:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4e:	e01e      	b.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a50:	4b29      	ldr	r3, [pc, #164]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5c:	d106      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a64:	d102      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a66:	4b26      	ldr	r3, [pc, #152]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a6a:	e010      	b.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a6c:	4b22      	ldr	r3, [pc, #136]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a78:	d106      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a80:	d102      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006a82:	4b20      	ldr	r3, [pc, #128]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a86:	e002      	b.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006a8c:	e2fd      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006a8e:	e2fc      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a90:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a94:	e2f9      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a9a:	e2f6      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa2:	f040 80a7 	bne.w	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006aa6:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aaa:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab6:	d05f      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006abe:	f200 8096 	bhi.w	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ac8:	f000 808e 	beq.w	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ad2:	f200 808c 	bhi.w	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d03a      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae4:	f200 8083 	bhi.w	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00e      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af4:	d01c      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8006af6:	e07a      	b.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006af8:	58024400 	.word	0x58024400
 8006afc:	03d09000 	.word	0x03d09000
 8006b00:	003d0900 	.word	0x003d0900
 8006b04:	016e3600 	.word	0x016e3600
 8006b08:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b0c:	4ba8      	ldr	r3, [pc, #672]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b18:	d107      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fd78 	bl	8007614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b28:	e2af      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b2e:	e2ac      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b30:	4b9f      	ldr	r3, [pc, #636]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b3c:	d107      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b3e:	f107 0318 	add.w	r3, r7, #24
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fabe 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b4c:	e29d      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b52:	e29a      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b54:	4b96      	ldr	r3, [pc, #600]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b60:	d107      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b62:	f107 030c 	add.w	r3, r7, #12
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fc00 	bl	800736c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b70:	e28b      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b76:	e288      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b78:	4b8d      	ldr	r3, [pc, #564]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b82:	4b8b      	ldr	r3, [pc, #556]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0304 	and.w	r3, r3, #4
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d10c      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b94:	4b86      	ldr	r3, [pc, #536]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	08db      	lsrs	r3, r3, #3
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	4a85      	ldr	r2, [pc, #532]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba6:	e01e      	b.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ba8:	4b81      	ldr	r3, [pc, #516]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb4:	d106      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006bbe:	4b7e      	ldr	r3, [pc, #504]	; (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc2:	e010      	b.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bc4:	4b7a      	ldr	r3, [pc, #488]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bd0:	d106      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bd8:	d102      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006bda:	4b78      	ldr	r3, [pc, #480]	; (8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bde:	e002      	b.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8006be4:	e251      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006be6:	e250      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006be8:	4b75      	ldr	r3, [pc, #468]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bec:	e24d      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf2:	e24a      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfa:	f040 809c 	bne.w	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006bfe:	4b6c      	ldr	r3, [pc, #432]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c02:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c0e:	d054      	beq.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c16:	f200 808b 	bhi.w	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c20:	f000 8083 	beq.w	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c2a:	f200 8081 	bhi.w	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c34:	d02f      	beq.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c3c:	d878      	bhi.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4a:	d012      	beq.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8006c4c:	e070      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c4e:	4b58      	ldr	r3, [pc, #352]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c5a:	d107      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fcd7 	bl	8007614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c6a:	e20e      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c70:	e20b      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c72:	4b4f      	ldr	r3, [pc, #316]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c80:	f107 0318 	add.w	r3, r7, #24
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fa1d 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c8e:	e1fc      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c94:	e1f9      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c96:	4b46      	ldr	r3, [pc, #280]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca2:	d107      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca4:	f107 030c 	add.w	r3, r7, #12
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fb5f 	bl	800736c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cb2:	e1ea      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cb8:	e1e7      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006cba:	4b3d      	ldr	r3, [pc, #244]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cc4:	4b3a      	ldr	r3, [pc, #232]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d10c      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cd6:	4b36      	ldr	r3, [pc, #216]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	08db      	lsrs	r3, r3, #3
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	4a34      	ldr	r2, [pc, #208]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce8:	e01e      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cea:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf6:	d106      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cfe:	d102      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d00:	4b2d      	ldr	r3, [pc, #180]	; (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d04:	e010      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d06:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d12:	d106      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1a:	d102      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d1c:	4b27      	ldr	r3, [pc, #156]	; (8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d20:	e002      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d26:	e1b0      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006d28:	e1af      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d2a:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d2e:	e1ac      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d34:	e1a9      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d3c:	d17d      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006d3e:	4b1c      	ldr	r3, [pc, #112]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4e:	d039      	beq.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d56:	d86d      	bhi.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d64:	d012      	beq.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006d66:	e065      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d68:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d74:	d107      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d76:	f107 0318 	add.w	r3, r7, #24
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f9a2 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d84:	e181      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d8a:	e17e      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d8c:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d98:	d107      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d9a:	f107 030c 	add.w	r3, r7, #12
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fae4 	bl	800736c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006da8:	e16f      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dae:	e16c      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006db0:	58024400 	.word	0x58024400
 8006db4:	03d09000 	.word	0x03d09000
 8006db8:	003d0900 	.word	0x003d0900
 8006dbc:	016e3600 	.word	0x016e3600
 8006dc0:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006dc4:	4ba0      	ldr	r3, [pc, #640]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dcc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dce:	4b9e      	ldr	r3, [pc, #632]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0304 	and.w	r3, r3, #4
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8006dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006de0:	4b99      	ldr	r3, [pc, #612]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	08db      	lsrs	r3, r3, #3
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	4a98      	ldr	r2, [pc, #608]	; (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006dec:	fa22 f303 	lsr.w	r3, r2, r3
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df2:	e01e      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006df4:	4b94      	ldr	r3, [pc, #592]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e00:	d106      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e08:	d102      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e0a:	4b91      	ldr	r3, [pc, #580]	; (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0e:	e010      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e10:	4b8d      	ldr	r3, [pc, #564]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e1c:	d106      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e24:	d102      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e26:	4b8b      	ldr	r3, [pc, #556]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2a:	e002      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e30:	e12b      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006e32:	e12a      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e38:	e127      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e40:	d133      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006e42:	4b81      	ldr	r3, [pc, #516]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e4a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e58:	d012      	beq.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006e5a:	e023      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e5c:	4b7a      	ldr	r3, [pc, #488]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e68:	d107      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fbd0 	bl	8007614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e78:	e107      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e7e:	e104      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e80:	4b71      	ldr	r3, [pc, #452]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e8e:	f107 0318 	add.w	r3, r7, #24
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 f916 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e9c:	e0f5      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea2:	e0f2      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea8:	e0ef      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb0:	f040 8091 	bne.w	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006eb4:	4b64      	ldr	r3, [pc, #400]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006ebc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006ec4:	f000 8081 	beq.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006ece:	d87f      	bhi.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed6:	d06b      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ede:	d877      	bhi.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee6:	d056      	beq.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eee:	d86f      	bhi.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ef6:	d03b      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006efe:	d867      	bhi.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f06:	d021      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f0e:	d85f      	bhi.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f1c:	d004      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8006f1e:	e057      	b.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f20:	f000 f8ba 	bl	8007098 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f24:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006f26:	e0b0      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f28:	4b47      	ldr	r3, [pc, #284]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f34:	d107      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f36:	f107 0318 	add.w	r3, r7, #24
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 f8c2 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f44:	e0a1      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f4a:	e09e      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f4c:	4b3e      	ldr	r3, [pc, #248]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f58:	d107      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f5a:	f107 030c 	add.w	r3, r7, #12
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fa04 	bl	800736c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f68:	e08f      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f6e:	e08c      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f70:	4b35      	ldr	r3, [pc, #212]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d109      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f7c:	4b32      	ldr	r3, [pc, #200]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	08db      	lsrs	r3, r3, #3
 8006f82:	f003 0303 	and.w	r3, r3, #3
 8006f86:	4a31      	ldr	r2, [pc, #196]	; (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006f88:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f8e:	e07c      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f94:	e079      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f96:	4b2c      	ldr	r3, [pc, #176]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa2:	d102      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8006fa4:	4b2a      	ldr	r3, [pc, #168]	; (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fa8:	e06f      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fae:	e06c      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fb0:	4b25      	ldr	r3, [pc, #148]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fbc:	d102      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8006fbe:	4b25      	ldr	r3, [pc, #148]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fc2:	e062      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc8:	e05f      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006fca:	4b23      	ldr	r3, [pc, #140]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fce:	e05c      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fd4:	e059      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fdc:	d153      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006fde:	4b1a      	ldr	r3, [pc, #104]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fe6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fee:	d035      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff6:	d843      	bhi.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007004:	d00d      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8007006:	e03b      	b.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007008:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007014:	d102      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800701a:	e036      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007020:	e033      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007022:	4b09      	ldr	r3, [pc, #36]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800702e:	d107      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007034:	4618      	mov	r0, r3
 8007036:	f000 faed 	bl	8007614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800703e:	e024      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007044:	e021      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007046:	bf00      	nop
 8007048:	58024400 	.word	0x58024400
 800704c:	03d09000 	.word	0x03d09000
 8007050:	003d0900 	.word	0x003d0900
 8007054:	016e3600 	.word	0x016e3600
 8007058:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800705c:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007068:	d107      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800706a:	f107 0318 	add.w	r3, r7, #24
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f828 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007078:	e007      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800707e:	e004      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007084:	e001      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800708c:	4618      	mov	r0, r3
 800708e:	3740      	adds	r7, #64	; 0x40
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	58024400 	.word	0x58024400

08007098 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800709c:	f7fe fc6a 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 80070a0:	4602      	mov	r2, r0
 80070a2:	4b06      	ldr	r3, [pc, #24]	; (80070bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	091b      	lsrs	r3, r3, #4
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	4904      	ldr	r1, [pc, #16]	; (80070c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070ae:	5ccb      	ldrb	r3, [r1, r3]
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	58024400 	.word	0x58024400
 80070c0:	0800b5fc 	.word	0x0800b5fc

080070c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b089      	sub	sp, #36	; 0x24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070cc:	4ba1      	ldr	r3, [pc, #644]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80070d6:	4b9f      	ldr	r3, [pc, #636]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	0b1b      	lsrs	r3, r3, #12
 80070dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070e2:	4b9c      	ldr	r3, [pc, #624]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	091b      	lsrs	r3, r3, #4
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80070ee:	4b99      	ldr	r3, [pc, #612]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	08db      	lsrs	r3, r3, #3
 80070f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 8111 	beq.w	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b02      	cmp	r3, #2
 8007116:	f000 8083 	beq.w	8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b02      	cmp	r3, #2
 800711e:	f200 80a1 	bhi.w	8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d056      	beq.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800712e:	e099      	b.n	8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007130:	4b88      	ldr	r3, [pc, #544]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b00      	cmp	r3, #0
 800713a:	d02d      	beq.n	8007198 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800713c:	4b85      	ldr	r3, [pc, #532]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	08db      	lsrs	r3, r3, #3
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	4a84      	ldr	r2, [pc, #528]	; (8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007148:	fa22 f303 	lsr.w	r3, r2, r3
 800714c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b7b      	ldr	r3, [pc, #492]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a03 	vldr	s12, [r7, #12]
 800717a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800735c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007196:	e087      	b.n	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b6a      	ldr	r3, [pc, #424]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80071be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800735c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071da:	e065      	b.n	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ee:	4b59      	ldr	r3, [pc, #356]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007202:	eddf 5a56 	vldr	s11, [pc, #344]	; 800735c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800721e:	e043      	b.n	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800722e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007232:	4b48      	ldr	r3, [pc, #288]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007242:	ed97 6a03 	vldr	s12, [r7, #12]
 8007246:	eddf 5a45 	vldr	s11, [pc, #276]	; 800735c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800724a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800725a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007262:	e021      	b.n	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007276:	4b37      	ldr	r3, [pc, #220]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007286:	ed97 6a03 	vldr	s12, [r7, #12]
 800728a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800735c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800728e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800729a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80072a8:	4b2a      	ldr	r3, [pc, #168]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	0a5b      	lsrs	r3, r3, #9
 80072ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ce:	ee17 2a90 	vmov	r2, s15
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80072d6:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	0c1b      	lsrs	r3, r3, #16
 80072dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fc:	ee17 2a90 	vmov	r2, s15
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007304:	4b13      	ldr	r3, [pc, #76]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	0e1b      	lsrs	r3, r3, #24
 800730a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800731a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732a:	ee17 2a90 	vmov	r2, s15
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007332:	e008      	b.n	8007346 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	609a      	str	r2, [r3, #8]
}
 8007346:	bf00      	nop
 8007348:	3724      	adds	r7, #36	; 0x24
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	58024400 	.word	0x58024400
 8007358:	03d09000 	.word	0x03d09000
 800735c:	46000000 	.word	0x46000000
 8007360:	4c742400 	.word	0x4c742400
 8007364:	4a742400 	.word	0x4a742400
 8007368:	4bb71b00 	.word	0x4bb71b00

0800736c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800736c:	b480      	push	{r7}
 800736e:	b089      	sub	sp, #36	; 0x24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007374:	4ba1      	ldr	r3, [pc, #644]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800737e:	4b9f      	ldr	r3, [pc, #636]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007382:	0d1b      	lsrs	r3, r3, #20
 8007384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007388:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800738a:	4b9c      	ldr	r3, [pc, #624]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	0a1b      	lsrs	r3, r3, #8
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007396:	4b99      	ldr	r3, [pc, #612]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739a:	08db      	lsrs	r3, r3, #3
 800739c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	fb02 f303 	mul.w	r3, r2, r3
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8111 	beq.w	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	f000 8083 	beq.w	80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	f200 80a1 	bhi.w	800750c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d056      	beq.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073d6:	e099      	b.n	800750c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d8:	4b88      	ldr	r3, [pc, #544]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0320 	and.w	r3, r3, #32
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d02d      	beq.n	8007440 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073e4:	4b85      	ldr	r3, [pc, #532]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	08db      	lsrs	r3, r3, #3
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	4a84      	ldr	r2, [pc, #528]	; (8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073f0:	fa22 f303 	lsr.w	r3, r2, r3
 80073f4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740e:	4b7b      	ldr	r3, [pc, #492]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007422:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800743e:	e087      	b.n	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800744e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007452:	4b6a      	ldr	r3, [pc, #424]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007462:	ed97 6a03 	vldr	s12, [r7, #12]
 8007466:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800746a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007482:	e065      	b.n	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800760c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007496:	4b59      	ldr	r3, [pc, #356]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074c6:	e043      	b.n	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074da:	4b48      	ldr	r3, [pc, #288]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800750a:	e021      	b.n	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800760c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b37      	ldr	r3, [pc, #220]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007532:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800754e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007550:	4b2a      	ldr	r3, [pc, #168]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	0a5b      	lsrs	r3, r3, #9
 8007556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800756a:	edd7 6a07 	vldr	s13, [r7, #28]
 800756e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007576:	ee17 2a90 	vmov	r2, s15
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800757e:	4b1f      	ldr	r3, [pc, #124]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	0c1b      	lsrs	r3, r3, #16
 8007584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007598:	edd7 6a07 	vldr	s13, [r7, #28]
 800759c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a4:	ee17 2a90 	vmov	r2, s15
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80075ac:	4b13      	ldr	r3, [pc, #76]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	0e1b      	lsrs	r3, r3, #24
 80075b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d2:	ee17 2a90 	vmov	r2, s15
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075da:	e008      	b.n	80075ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	609a      	str	r2, [r3, #8]
}
 80075ee:	bf00      	nop
 80075f0:	3724      	adds	r7, #36	; 0x24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	58024400 	.word	0x58024400
 8007600:	03d09000 	.word	0x03d09000
 8007604:	46000000 	.word	0x46000000
 8007608:	4c742400 	.word	0x4c742400
 800760c:	4a742400 	.word	0x4a742400
 8007610:	4bb71b00 	.word	0x4bb71b00

08007614 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007614:	b480      	push	{r7}
 8007616:	b089      	sub	sp, #36	; 0x24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800761c:	4ba0      	ldr	r3, [pc, #640]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007626:	4b9e      	ldr	r3, [pc, #632]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762a:	091b      	lsrs	r3, r3, #4
 800762c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007630:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007632:	4b9b      	ldr	r3, [pc, #620]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800763c:	4b98      	ldr	r3, [pc, #608]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800763e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007640:	08db      	lsrs	r3, r3, #3
 8007642:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	fb02 f303 	mul.w	r3, r2, r3
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007654:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8111 	beq.w	8007882 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b02      	cmp	r3, #2
 8007664:	f000 8083 	beq.w	800776e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b02      	cmp	r3, #2
 800766c:	f200 80a1 	bhi.w	80077b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d056      	beq.n	800772a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800767c:	e099      	b.n	80077b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800767e:	4b88      	ldr	r3, [pc, #544]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d02d      	beq.n	80076e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800768a:	4b85      	ldr	r3, [pc, #532]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	08db      	lsrs	r3, r3, #3
 8007690:	f003 0303 	and.w	r3, r3, #3
 8007694:	4a83      	ldr	r2, [pc, #524]	; (80078a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007696:	fa22 f303 	lsr.w	r3, r2, r3
 800769a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	ee07 3a90 	vmov	s15, r3
 80076ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b4:	4b7a      	ldr	r3, [pc, #488]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076e4:	e087      	b.n	80077f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	ee07 3a90 	vmov	s15, r3
 80076ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80078ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f8:	4b69      	ldr	r3, [pc, #420]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007708:	ed97 6a03 	vldr	s12, [r7, #12]
 800770c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007728:	e065      	b.n	80077f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	ee07 3a90 	vmov	s15, r3
 8007730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007734:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80078b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773c:	4b58      	ldr	r3, [pc, #352]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007750:	eddf 5a55 	vldr	s11, [pc, #340]	; 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007768:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800776c:	e043      	b.n	80077f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	ee07 3a90 	vmov	s15, r3
 8007774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007778:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80078b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800777c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007780:	4b47      	ldr	r3, [pc, #284]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007790:	ed97 6a03 	vldr	s12, [r7, #12]
 8007794:	eddf 5a44 	vldr	s11, [pc, #272]	; 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077b0:	e021      	b.n	80077f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	ee07 3a90 	vmov	s15, r3
 80077b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80078ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c4:	4b36      	ldr	r3, [pc, #216]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80077f6:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	0a5b      	lsrs	r3, r3, #9
 80077fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800780c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007810:	edd7 6a07 	vldr	s13, [r7, #28]
 8007814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781c:	ee17 2a90 	vmov	r2, s15
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007824:	4b1e      	ldr	r3, [pc, #120]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800783a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800783e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800784a:	ee17 2a90 	vmov	r2, s15
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007852:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	0e1b      	lsrs	r3, r3, #24
 8007858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800786c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007878:	ee17 2a90 	vmov	r2, s15
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007880:	e008      	b.n	8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	609a      	str	r2, [r3, #8]
}
 8007894:	bf00      	nop
 8007896:	3724      	adds	r7, #36	; 0x24
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	58024400 	.word	0x58024400
 80078a4:	03d09000 	.word	0x03d09000
 80078a8:	46000000 	.word	0x46000000
 80078ac:	4c742400 	.word	0x4c742400
 80078b0:	4a742400 	.word	0x4a742400
 80078b4:	4bb71b00 	.word	0x4bb71b00

080078b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078c6:	4b53      	ldr	r3, [pc, #332]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d101      	bne.n	80078d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e099      	b.n	8007a0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078d6:	4b4f      	ldr	r3, [pc, #316]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a4e      	ldr	r2, [pc, #312]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80078dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e2:	f7fa fd6f 	bl	80023c4 <HAL_GetTick>
 80078e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078e8:	e008      	b.n	80078fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80078ea:	f7fa fd6b 	bl	80023c4 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e086      	b.n	8007a0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078fc:	4b45      	ldr	r3, [pc, #276]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1f0      	bne.n	80078ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007908:	4b42      	ldr	r3, [pc, #264]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	031b      	lsls	r3, r3, #12
 8007916:	493f      	ldr	r1, [pc, #252]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007918:	4313      	orrs	r3, r2
 800791a:	628b      	str	r3, [r1, #40]	; 0x28
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	3b01      	subs	r3, #1
 8007922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	3b01      	subs	r3, #1
 800792c:	025b      	lsls	r3, r3, #9
 800792e:	b29b      	uxth	r3, r3
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	3b01      	subs	r3, #1
 8007938:	041b      	lsls	r3, r3, #16
 800793a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	3b01      	subs	r3, #1
 8007946:	061b      	lsls	r3, r3, #24
 8007948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800794c:	4931      	ldr	r1, [pc, #196]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 800794e:	4313      	orrs	r3, r2
 8007950:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007952:	4b30      	ldr	r3, [pc, #192]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	492d      	ldr	r1, [pc, #180]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007960:	4313      	orrs	r3, r2
 8007962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007964:	4b2b      	ldr	r3, [pc, #172]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	f023 0220 	bic.w	r2, r3, #32
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	4928      	ldr	r1, [pc, #160]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007972:	4313      	orrs	r3, r2
 8007974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007976:	4b27      	ldr	r3, [pc, #156]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	4a26      	ldr	r2, [pc, #152]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 800797c:	f023 0310 	bic.w	r3, r3, #16
 8007980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007982:	4b24      	ldr	r3, [pc, #144]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007986:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <RCCEx_PLL2_Config+0x160>)
 8007988:	4013      	ands	r3, r2
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	69d2      	ldr	r2, [r2, #28]
 800798e:	00d2      	lsls	r2, r2, #3
 8007990:	4920      	ldr	r1, [pc, #128]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007992:	4313      	orrs	r3, r2
 8007994:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007996:	4b1f      	ldr	r3, [pc, #124]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 800799c:	f043 0310 	orr.w	r3, r3, #16
 80079a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4a19      	ldr	r2, [pc, #100]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079b4:	e00f      	b.n	80079d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d106      	bne.n	80079ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079bc:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	4a14      	ldr	r2, [pc, #80]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079c8:	e005      	b.n	80079d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	4a11      	ldr	r2, [pc, #68]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a0e      	ldr	r2, [pc, #56]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079e2:	f7fa fcef 	bl	80023c4 <HAL_GetTick>
 80079e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079e8:	e008      	b.n	80079fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079ea:	f7fa fceb 	bl	80023c4 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d901      	bls.n	80079fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e006      	b.n	8007a0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079fc:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0f0      	beq.n	80079ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	58024400 	.word	0x58024400
 8007a18:	ffff0007 	.word	0xffff0007

08007a1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a2a:	4b53      	ldr	r3, [pc, #332]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d101      	bne.n	8007a3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e099      	b.n	8007b6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a3a:	4b4f      	ldr	r3, [pc, #316]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a4e      	ldr	r2, [pc, #312]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a46:	f7fa fcbd 	bl	80023c4 <HAL_GetTick>
 8007a4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a4c:	e008      	b.n	8007a60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a4e:	f7fa fcb9 	bl	80023c4 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d901      	bls.n	8007a60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e086      	b.n	8007b6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a60:	4b45      	ldr	r3, [pc, #276]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f0      	bne.n	8007a4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a6c:	4b42      	ldr	r3, [pc, #264]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	051b      	lsls	r3, r3, #20
 8007a7a:	493f      	ldr	r1, [pc, #252]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	025b      	lsls	r3, r3, #9
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	041b      	lsls	r3, r3, #16
 8007a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	061b      	lsls	r3, r3, #24
 8007aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ab0:	4931      	ldr	r1, [pc, #196]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ab6:	4b30      	ldr	r3, [pc, #192]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	492d      	ldr	r1, [pc, #180]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ac8:	4b2b      	ldr	r3, [pc, #172]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	4928      	ldr	r1, [pc, #160]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ada:	4b27      	ldr	r3, [pc, #156]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	4a26      	ldr	r2, [pc, #152]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ae6:	4b24      	ldr	r3, [pc, #144]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aea:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <RCCEx_PLL3_Config+0x160>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	69d2      	ldr	r2, [r2, #28]
 8007af2:	00d2      	lsls	r2, r2, #3
 8007af4:	4920      	ldr	r1, [pc, #128]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007afa:	4b1f      	ldr	r3, [pc, #124]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	4a1e      	ldr	r2, [pc, #120]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	4a19      	ldr	r2, [pc, #100]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b18:	e00f      	b.n	8007b3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d106      	bne.n	8007b2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b20:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b2c:	e005      	b.n	8007b3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	4a11      	ldr	r2, [pc, #68]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b46:	f7fa fc3d 	bl	80023c4 <HAL_GetTick>
 8007b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b4c:	e008      	b.n	8007b60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b4e:	f7fa fc39 	bl	80023c4 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e006      	b.n	8007b6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	ffff0007 	.word	0xffff0007

08007b80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e0f1      	b.n	8007d76 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a78      	ldr	r2, [pc, #480]	; (8007d80 <HAL_SPI_Init+0x200>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00f      	beq.n	8007bc2 <HAL_SPI_Init+0x42>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a77      	ldr	r2, [pc, #476]	; (8007d84 <HAL_SPI_Init+0x204>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00a      	beq.n	8007bc2 <HAL_SPI_Init+0x42>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a75      	ldr	r2, [pc, #468]	; (8007d88 <HAL_SPI_Init+0x208>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d005      	beq.n	8007bc2 <HAL_SPI_Init+0x42>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	2b0f      	cmp	r3, #15
 8007bbc:	d901      	bls.n	8007bc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e0d9      	b.n	8007d76 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 f880 	bl	8008cc8 <SPI_GetPacketSize>
 8007bc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a6c      	ldr	r2, [pc, #432]	; (8007d80 <HAL_SPI_Init+0x200>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00c      	beq.n	8007bee <HAL_SPI_Init+0x6e>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a6a      	ldr	r2, [pc, #424]	; (8007d84 <HAL_SPI_Init+0x204>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <HAL_SPI_Init+0x6e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a69      	ldr	r2, [pc, #420]	; (8007d88 <HAL_SPI_Init+0x208>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d002      	beq.n	8007bee <HAL_SPI_Init+0x6e>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d811      	bhi.n	8007c12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bf2:	4a63      	ldr	r2, [pc, #396]	; (8007d80 <HAL_SPI_Init+0x200>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a61      	ldr	r2, [pc, #388]	; (8007d84 <HAL_SPI_Init+0x204>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_SPI_Init+0x8c>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a60      	ldr	r2, [pc, #384]	; (8007d88 <HAL_SPI_Init+0x208>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d104      	bne.n	8007c16 <HAL_SPI_Init+0x96>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d901      	bls.n	8007c16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e0af      	b.n	8007d76 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fa f8b0 	bl	8001d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0201 	bic.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007c52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c5c:	d119      	bne.n	8007c92 <HAL_SPI_Init+0x112>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c66:	d103      	bne.n	8007c70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10c      	bne.n	8007c92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c80:	d107      	bne.n	8007c92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69da      	ldr	r2, [r3, #28]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca4:	ea42 0103 	orr.w	r1, r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf2:	ea42 0103 	orr.w	r1, r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d113      	bne.n	8007d32 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	40013000 	.word	0x40013000
 8007d84:	40003800 	.word	0x40003800
 8007d88:	40003c00 	.word	0x40003c00

08007d8c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3320      	adds	r3, #32
 8007da2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d101      	bne.n	8007db6 <HAL_SPI_Transmit+0x2a>
 8007db2:	2302      	movs	r3, #2
 8007db4:	e1d7      	b.n	8008166 <HAL_SPI_Transmit+0x3da>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dbe:	f7fa fb01 	bl	80023c4 <HAL_GetTick>
 8007dc2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d007      	beq.n	8007de0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ddc:	7efb      	ldrb	r3, [r7, #27]
 8007dde:	e1c2      	b.n	8008166 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <HAL_SPI_Transmit+0x60>
 8007de6:	88fb      	ldrh	r3, [r7, #6]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d107      	bne.n	8007dfc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007df8:	7efb      	ldrb	r3, [r7, #27]
 8007dfa:	e1b4      	b.n	8008166 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	88fa      	ldrh	r2, [r7, #6]
 8007e16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	88fa      	ldrh	r2, [r7, #6]
 8007e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007e4c:	d107      	bne.n	8007e5e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	4b96      	ldr	r3, [pc, #600]	; (80080c0 <HAL_SPI_Transmit+0x334>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	88f9      	ldrh	r1, [r7, #6]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	6812      	ldr	r2, [r2, #0]
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0201 	orr.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e8a:	d107      	bne.n	8007e9c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2b0f      	cmp	r3, #15
 8007ea2:	d947      	bls.n	8007f34 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007ea4:	e03f      	b.n	8007f26 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d114      	bne.n	8007ede <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6812      	ldr	r2, [r2, #0]
 8007ebe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec4:	1d1a      	adds	r2, r3, #4
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007edc:	e023      	b.n	8007f26 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ede:	f7fa fa71 	bl	80023c4 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d803      	bhi.n	8007ef6 <HAL_SPI_Transmit+0x16a>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef4:	d102      	bne.n	8007efc <HAL_SPI_Transmit+0x170>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d114      	bne.n	8007f26 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fe15 	bl	8008b2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e11f      	b.n	8008166 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1b9      	bne.n	8007ea6 <HAL_SPI_Transmit+0x11a>
 8007f32:	e0f2      	b.n	800811a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	2b07      	cmp	r3, #7
 8007f3a:	f240 80e7 	bls.w	800810c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007f3e:	e05d      	b.n	8007ffc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d132      	bne.n	8007fb4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d918      	bls.n	8007f8c <HAL_SPI_Transmit+0x200>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d014      	beq.n	8007f8c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6812      	ldr	r2, [r2, #0]
 8007f6c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f72:	1d1a      	adds	r2, r3, #4
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b02      	subs	r3, #2
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007f8a:	e037      	b.n	8007ffc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f90:	881a      	ldrh	r2, [r3, #0]
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f9a:	1c9a      	adds	r2, r3, #2
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007fb2:	e023      	b.n	8007ffc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fb4:	f7fa fa06 	bl	80023c4 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d803      	bhi.n	8007fcc <HAL_SPI_Transmit+0x240>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fca:	d102      	bne.n	8007fd2 <HAL_SPI_Transmit+0x246>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d114      	bne.n	8007ffc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 fdaa 	bl	8008b2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fe6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e0b4      	b.n	8008166 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008002:	b29b      	uxth	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d19b      	bne.n	8007f40 <HAL_SPI_Transmit+0x1b4>
 8008008:	e087      	b.n	800811a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b02      	cmp	r3, #2
 8008016:	d155      	bne.n	80080c4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800801e:	b29b      	uxth	r3, r3
 8008020:	2b03      	cmp	r3, #3
 8008022:	d918      	bls.n	8008056 <HAL_SPI_Transmit+0x2ca>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008028:	2b40      	cmp	r3, #64	; 0x40
 800802a:	d914      	bls.n	8008056 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6812      	ldr	r2, [r2, #0]
 8008036:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803c:	1d1a      	adds	r2, r3, #4
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b04      	subs	r3, #4
 800804c:	b29a      	uxth	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008054:	e05a      	b.n	800810c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800805c:	b29b      	uxth	r3, r3
 800805e:	2b01      	cmp	r3, #1
 8008060:	d917      	bls.n	8008092 <HAL_SPI_Transmit+0x306>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d013      	beq.n	8008092 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806e:	881a      	ldrh	r2, [r3, #0]
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008078:	1c9a      	adds	r2, r3, #2
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008084:	b29b      	uxth	r3, r3
 8008086:	3b02      	subs	r3, #2
 8008088:	b29a      	uxth	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008090:	e03c      	b.n	800810c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3320      	adds	r3, #32
 800809c:	7812      	ldrb	r2, [r2, #0]
 800809e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80080bc:	e026      	b.n	800810c <HAL_SPI_Transmit+0x380>
 80080be:	bf00      	nop
 80080c0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c4:	f7fa f97e 	bl	80023c4 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d803      	bhi.n	80080dc <HAL_SPI_Transmit+0x350>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080da:	d102      	bne.n	80080e2 <HAL_SPI_Transmit+0x356>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d114      	bne.n	800810c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fd22 	bl	8008b2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e02c      	b.n	8008166 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008112:	b29b      	uxth	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	f47f af78 	bne.w	800800a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2200      	movs	r2, #0
 8008122:	2108      	movs	r1, #8
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fda1 	bl	8008c6c <SPI_WaitOnFlagUntilTimeout>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008136:	f043 0220 	orr.w	r2, r3, #32
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 fcf3 	bl	8008b2c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008164:	7efb      	ldrb	r3, [r7, #27]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3720      	adds	r7, #32
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop

08008170 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	; 0x28
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3330      	adds	r3, #48	; 0x30
 800818a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008194:	d112      	bne.n	80081bc <HAL_SPI_Receive+0x4c>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10e      	bne.n	80081bc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2204      	movs	r2, #4
 80081a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081a6:	88fa      	ldrh	r2, [r7, #6]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4613      	mov	r3, r2
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 f9ce 	bl	8008554 <HAL_SPI_TransmitReceive>
 80081b8:	4603      	mov	r3, r0
 80081ba:	e1c7      	b.n	800854c <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_SPI_Receive+0x5a>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e1c0      	b.n	800854c <HAL_SPI_Receive+0x3dc>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081d2:	f7fa f8f7 	bl	80023c4 <HAL_GetTick>
 80081d6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d007      	beq.n	80081f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80081e4:	2302      	movs	r3, #2
 80081e6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80081f0:	7ffb      	ldrb	r3, [r7, #31]
 80081f2:	e1ab      	b.n	800854c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <HAL_SPI_Receive+0x90>
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d107      	bne.n	8008210 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800820c:	7ffb      	ldrb	r3, [r7, #31]
 800820e:	e19d      	b.n	800854c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2204      	movs	r2, #4
 8008214:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	88fa      	ldrh	r2, [r7, #6]
 800822a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008260:	d107      	bne.n	8008272 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008270:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	4b94      	ldr	r3, [pc, #592]	; (80084cc <HAL_SPI_Receive+0x35c>)
 800827a:	4013      	ands	r3, r2
 800827c:	88f9      	ldrh	r1, [r7, #6]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	6812      	ldr	r2, [r2, #0]
 8008282:	430b      	orrs	r3, r1
 8008284:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0201 	orr.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800829e:	d107      	bne.n	80082b0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	2b0f      	cmp	r3, #15
 80082b6:	d948      	bls.n	800834a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80082b8:	e040      	b.n	800833c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	695a      	ldr	r2, [r3, #20]
 80082c0:	f248 0308 	movw	r3, #32776	; 0x8008
 80082c4:	4013      	ands	r3, r2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d014      	beq.n	80082f4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80082d4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082da:	1d1a      	adds	r2, r3, #4
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80082f2:	e023      	b.n	800833c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082f4:	f7fa f866 	bl	80023c4 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d803      	bhi.n	800830c <HAL_SPI_Receive+0x19c>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d102      	bne.n	8008312 <HAL_SPI_Receive+0x1a2>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d114      	bne.n	800833c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 fc0a 	bl	8008b2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008326:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e107      	b.n	800854c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1b8      	bne.n	80082ba <HAL_SPI_Receive+0x14a>
 8008348:	e0ed      	b.n	8008526 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	2b07      	cmp	r3, #7
 8008350:	f240 80e2 	bls.w	8008518 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008354:	e05b      	b.n	800840e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d030      	beq.n	80083c6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d014      	beq.n	800839c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800837a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800837c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008382:	1d1a      	adds	r2, r3, #4
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800838e:	b29b      	uxth	r3, r3
 8008390:	3b02      	subs	r3, #2
 8008392:	b29a      	uxth	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800839a:	e038      	b.n	800840e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	8812      	ldrh	r2, [r2, #0]
 80083a4:	b292      	uxth	r2, r2
 80083a6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ac:	1c9a      	adds	r2, r3, #2
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80083c4:	e023      	b.n	800840e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083c6:	f7f9 fffd 	bl	80023c4 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d803      	bhi.n	80083de <HAL_SPI_Receive+0x26e>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d102      	bne.n	80083e4 <HAL_SPI_Receive+0x274>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d114      	bne.n	800840e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fba1 	bl	8008b2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e09e      	b.n	800854c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d19d      	bne.n	8008356 <HAL_SPI_Receive+0x1e6>
 800841a:	e084      	b.n	8008526 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d052      	beq.n	80084d0 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d014      	beq.n	8008462 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008440:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008442:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008448:	1d1a      	adds	r2, r3, #4
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008454:	b29b      	uxth	r3, r3
 8008456:	3b04      	subs	r3, #4
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008460:	e05a      	b.n	8008518 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800846c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008470:	d914      	bls.n	800849c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	8812      	ldrh	r2, [r2, #0]
 800847a:	b292      	uxth	r2, r2
 800847c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008482:	1c9a      	adds	r2, r3, #2
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800848e:	b29b      	uxth	r3, r3
 8008490:	3b02      	subs	r3, #2
 8008492:	b29a      	uxth	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800849a:	e03d      	b.n	8008518 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a8:	7812      	ldrb	r2, [r2, #0]
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80084ca:	e025      	b.n	8008518 <HAL_SPI_Receive+0x3a8>
 80084cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084d0:	f7f9 ff78 	bl	80023c4 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d803      	bhi.n	80084e8 <HAL_SPI_Receive+0x378>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e6:	d102      	bne.n	80084ee <HAL_SPI_Receive+0x37e>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d114      	bne.n	8008518 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 fb1c 	bl	8008b2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e019      	b.n	800854c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	f47f af7b 	bne.w	800841c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fb00 	bl	8008b2c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800854a:	7ffb      	ldrb	r3, [r7, #31]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3720      	adds	r7, #32
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08e      	sub	sp, #56	; 0x38
 8008558:	af02      	add	r7, sp, #8
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3320      	adds	r3, #32
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3330      	adds	r3, #48	; 0x30
 8008576:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_SPI_TransmitReceive+0x32>
 8008582:	2302      	movs	r3, #2
 8008584:	e2ce      	b.n	8008b24 <HAL_SPI_TransmitReceive+0x5d0>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800858e:	f7f9 ff19 	bl	80023c4 <HAL_GetTick>
 8008592:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008594:	887b      	ldrh	r3, [r7, #2]
 8008596:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008598:	887b      	ldrh	r3, [r7, #2]
 800859a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80085a2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085aa:	7efb      	ldrb	r3, [r7, #27]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d014      	beq.n	80085da <HAL_SPI_TransmitReceive+0x86>
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085b6:	d106      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d102      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80085c0:	7efb      	ldrb	r3, [r7, #27]
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d009      	beq.n	80085da <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80085c6:	2302      	movs	r3, #2
 80085c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80085d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085d8:	e2a4      	b.n	8008b24 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <HAL_SPI_TransmitReceive+0x98>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <HAL_SPI_TransmitReceive+0x98>
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d109      	bne.n	8008600 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80085fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085fe:	e291      	b.n	8008b24 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b04      	cmp	r3, #4
 800860a:	d003      	beq.n	8008614 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2205      	movs	r2, #5
 8008610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	887a      	ldrh	r2, [r7, #2]
 8008626:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	887a      	ldrh	r2, [r7, #2]
 800862e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	887a      	ldrh	r2, [r7, #2]
 800863c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	887a      	ldrh	r2, [r7, #2]
 8008644:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	4b9f      	ldr	r3, [pc, #636]	; (80088d8 <HAL_SPI_TransmitReceive+0x384>)
 800865c:	4013      	ands	r3, r2
 800865e:	8879      	ldrh	r1, [r7, #2]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	6812      	ldr	r2, [r2, #0]
 8008664:	430b      	orrs	r3, r1
 8008666:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008680:	d107      	bne.n	8008692 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	2b0f      	cmp	r3, #15
 8008698:	d970      	bls.n	800877c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800869a:	e068      	b.n	800876e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d11a      	bne.n	80086e0 <HAL_SPI_TransmitReceive+0x18c>
 80086aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d017      	beq.n	80086e0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c0:	1d1a      	adds	r2, r3, #4
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086de:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	695a      	ldr	r2, [r3, #20]
 80086e6:	f248 0308 	movw	r3, #32776	; 0x8008
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01a      	beq.n	8008726 <HAL_SPI_TransmitReceive+0x1d2>
 80086f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d017      	beq.n	8008726 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008700:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008706:	1d1a      	adds	r2, r3, #4
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008712:	b29b      	uxth	r3, r3
 8008714:	3b01      	subs	r3, #1
 8008716:	b29a      	uxth	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008724:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008726:	f7f9 fe4d 	bl	80023c4 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008732:	429a      	cmp	r2, r3
 8008734:	d803      	bhi.n	800873e <HAL_SPI_TransmitReceive+0x1ea>
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873c:	d102      	bne.n	8008744 <HAL_SPI_TransmitReceive+0x1f0>
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	2b00      	cmp	r3, #0
 8008742:	d114      	bne.n	800876e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 f9f1 	bl	8008b2c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008758:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e1da      	b.n	8008b24 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800876e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008770:	2b00      	cmp	r3, #0
 8008772:	d193      	bne.n	800869c <HAL_SPI_TransmitReceive+0x148>
 8008774:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008776:	2b00      	cmp	r3, #0
 8008778:	d190      	bne.n	800869c <HAL_SPI_TransmitReceive+0x148>
 800877a:	e1ac      	b.n	8008ad6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	2b07      	cmp	r3, #7
 8008782:	f240 81a0 	bls.w	8008ac6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008786:	e0a9      	b.n	80088dc <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b02      	cmp	r3, #2
 8008794:	d139      	bne.n	800880a <HAL_SPI_TransmitReceive+0x2b6>
 8008796:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008798:	2b00      	cmp	r3, #0
 800879a:	d036      	beq.n	800880a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800879c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d91c      	bls.n	80087dc <HAL_SPI_TransmitReceive+0x288>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d018      	beq.n	80087dc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6812      	ldr	r2, [r2, #0]
 80087b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ba:	1d1a      	adds	r2, r3, #4
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	3b02      	subs	r3, #2
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80087da:	e016      	b.n	800880a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e0:	881a      	ldrh	r2, [r3, #0]
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ea:	1c9a      	adds	r2, r3, #2
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008808:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d03a      	beq.n	800888e <HAL_SPI_TransmitReceive+0x33a>
 8008818:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d037      	beq.n	800888e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d018      	beq.n	800885e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008834:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008836:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800883c:	1d1a      	adds	r2, r3, #4
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b02      	subs	r3, #2
 800884c:	b29a      	uxth	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800885a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800885c:	e017      	b.n	800888e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008862:	6a3a      	ldr	r2, [r7, #32]
 8008864:	8812      	ldrh	r2, [r2, #0]
 8008866:	b292      	uxth	r2, r2
 8008868:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800886e:	1c9a      	adds	r2, r3, #2
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800887a:	b29b      	uxth	r3, r3
 800887c:	3b01      	subs	r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800888c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800888e:	f7f9 fd99 	bl	80023c4 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800889a:	429a      	cmp	r2, r3
 800889c:	d803      	bhi.n	80088a6 <HAL_SPI_TransmitReceive+0x352>
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a4:	d102      	bne.n	80088ac <HAL_SPI_TransmitReceive+0x358>
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d117      	bne.n	80088dc <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f93d 	bl	8008b2c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e126      	b.n	8008b24 <HAL_SPI_TransmitReceive+0x5d0>
 80088d6:	bf00      	nop
 80088d8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80088dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f47f af52 	bne.w	8008788 <HAL_SPI_TransmitReceive+0x234>
 80088e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f47f af4e 	bne.w	8008788 <HAL_SPI_TransmitReceive+0x234>
 80088ec:	e0f3      	b.n	8008ad6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d15a      	bne.n	80089b2 <HAL_SPI_TransmitReceive+0x45e>
 80088fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d057      	beq.n	80089b2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008902:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008904:	2b03      	cmp	r3, #3
 8008906:	d91c      	bls.n	8008942 <HAL_SPI_TransmitReceive+0x3ee>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890c:	2b40      	cmp	r3, #64	; 0x40
 800890e:	d918      	bls.n	8008942 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6812      	ldr	r2, [r2, #0]
 800891a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008920:	1d1a      	adds	r2, r3, #4
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800892c:	b29b      	uxth	r3, r3
 800892e:	3b04      	subs	r3, #4
 8008930:	b29a      	uxth	r2, r3
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800893e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008940:	e037      	b.n	80089b2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008942:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008944:	2b01      	cmp	r3, #1
 8008946:	d91b      	bls.n	8008980 <HAL_SPI_TransmitReceive+0x42c>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d017      	beq.n	8008980 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008954:	881a      	ldrh	r2, [r3, #0]
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895e:	1c9a      	adds	r2, r3, #2
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800896a:	b29b      	uxth	r3, r3
 800896c:	3b02      	subs	r3, #2
 800896e:	b29a      	uxth	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800897c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800897e:	e018      	b.n	80089b2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3320      	adds	r3, #32
 800898a:	7812      	ldrb	r2, [r2, #0]
 800898c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3b01      	subs	r3, #1
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d05e      	beq.n	8008a7e <HAL_SPI_TransmitReceive+0x52a>
 80089c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d05b      	beq.n	8008a7e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d018      	beq.n	8008a06 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089de:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e4:	1d1a      	adds	r2, r3, #4
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	3b04      	subs	r3, #4
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a04:	e03b      	b.n	8008a7e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a14:	d918      	bls.n	8008a48 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1a:	6a3a      	ldr	r2, [r7, #32]
 8008a1c:	8812      	ldrh	r2, [r2, #0]
 8008a1e:	b292      	uxth	r2, r2
 8008a20:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a26:	1c9a      	adds	r2, r3, #2
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	3b02      	subs	r3, #2
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a44:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a46:	e01a      	b.n	8008a7e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a54:	7812      	ldrb	r2, [r2, #0]
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a7e:	f7f9 fca1 	bl	80023c4 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d803      	bhi.n	8008a96 <HAL_SPI_TransmitReceive+0x542>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a94:	d102      	bne.n	8008a9c <HAL_SPI_TransmitReceive+0x548>
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d114      	bne.n	8008ac6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f845 	bl	8008b2c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e02e      	b.n	8008b24 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f47f af10 	bne.w	80088ee <HAL_SPI_TransmitReceive+0x39a>
 8008ace:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f47f af0c 	bne.w	80088ee <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2108      	movs	r1, #8
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 f8c3 	bl	8008c6c <SPI_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d007      	beq.n	8008afc <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af2:	f043 0220 	orr.w	r2, r3, #32
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f815 	bl	8008b2c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e001      	b.n	8008b24 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8008b20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3730      	adds	r7, #48	; 0x30
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0208 	orr.w	r2, r2, #8
 8008b4a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699a      	ldr	r2, [r3, #24]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0210 	orr.w	r2, r2, #16
 8008b5a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0201 	bic.w	r2, r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6919      	ldr	r1, [r3, #16]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4b3c      	ldr	r3, [pc, #240]	; (8008c68 <SPI_CloseTransfer+0x13c>)
 8008b78:	400b      	ands	r3, r1
 8008b7a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008b8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d014      	beq.n	8008bc2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00f      	beq.n	8008bc2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f042 0220 	orr.w	r2, r2, #32
 8008bc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d014      	beq.n	8008bf8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00f      	beq.n	8008bf8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bde:	f043 0204 	orr.w	r2, r3, #4
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bf6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00f      	beq.n	8008c22 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c08:	f043 0201 	orr.w	r2, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00f      	beq.n	8008c4c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c32:	f043 0208 	orr.w	r2, r3, #8
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	fffffc90 	.word	0xfffffc90

08008c6c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008c7c:	e010      	b.n	8008ca0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c7e:	f7f9 fba1 	bl	80023c4 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d803      	bhi.n	8008c96 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d102      	bne.n	8008c9c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e00f      	b.n	8008cc0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695a      	ldr	r2, [r3, #20]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d0df      	beq.n	8008c7e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	3307      	adds	r3, #7
 8008ce6:	08db      	lsrs	r3, r3, #3
 8008ce8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	fb02 f303 	mul.w	r3, r2, r3
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e049      	b.n	8008da4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7f9 f897 	bl	8001e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f000 fd03 	bl	8009748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e049      	b.n	8008e52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d106      	bne.n	8008dd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f841 	bl	8008e5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3304      	adds	r3, #4
 8008de8:	4619      	mov	r1, r3
 8008dea:	4610      	mov	r0, r2
 8008dec:	f000 fcac 	bl	8009748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
	...

08008e70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d109      	bne.n	8008e94 <HAL_TIM_PWM_Start+0x24>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	bf14      	ite	ne
 8008e8c:	2301      	movne	r3, #1
 8008e8e:	2300      	moveq	r3, #0
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	e03c      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d109      	bne.n	8008eae <HAL_TIM_PWM_Start+0x3e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	bf14      	ite	ne
 8008ea6:	2301      	movne	r3, #1
 8008ea8:	2300      	moveq	r3, #0
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	e02f      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d109      	bne.n	8008ec8 <HAL_TIM_PWM_Start+0x58>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	bf14      	ite	ne
 8008ec0:	2301      	movne	r3, #1
 8008ec2:	2300      	moveq	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	e022      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b0c      	cmp	r3, #12
 8008ecc:	d109      	bne.n	8008ee2 <HAL_TIM_PWM_Start+0x72>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	bf14      	ite	ne
 8008eda:	2301      	movne	r3, #1
 8008edc:	2300      	moveq	r3, #0
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	e015      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b10      	cmp	r3, #16
 8008ee6:	d109      	bne.n	8008efc <HAL_TIM_PWM_Start+0x8c>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	bf14      	ite	ne
 8008ef4:	2301      	movne	r3, #1
 8008ef6:	2300      	moveq	r3, #0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	e008      	b.n	8008f0e <HAL_TIM_PWM_Start+0x9e>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	bf14      	ite	ne
 8008f08:	2301      	movne	r3, #1
 8008f0a:	2300      	moveq	r3, #0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e0a1      	b.n	800905a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <HAL_TIM_PWM_Start+0xb6>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f24:	e023      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d104      	bne.n	8008f36 <HAL_TIM_PWM_Start+0xc6>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f34:	e01b      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d104      	bne.n	8008f46 <HAL_TIM_PWM_Start+0xd6>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f44:	e013      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b0c      	cmp	r3, #12
 8008f4a:	d104      	bne.n	8008f56 <HAL_TIM_PWM_Start+0xe6>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f54:	e00b      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d104      	bne.n	8008f66 <HAL_TIM_PWM_Start+0xf6>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f64:	e003      	b.n	8008f6e <HAL_TIM_PWM_Start+0xfe>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2201      	movs	r2, #1
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fff4 	bl	8009f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a38      	ldr	r2, [pc, #224]	; (8009064 <HAL_TIM_PWM_Start+0x1f4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d013      	beq.n	8008fae <HAL_TIM_PWM_Start+0x13e>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a37      	ldr	r2, [pc, #220]	; (8009068 <HAL_TIM_PWM_Start+0x1f8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00e      	beq.n	8008fae <HAL_TIM_PWM_Start+0x13e>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a35      	ldr	r2, [pc, #212]	; (800906c <HAL_TIM_PWM_Start+0x1fc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d009      	beq.n	8008fae <HAL_TIM_PWM_Start+0x13e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a34      	ldr	r2, [pc, #208]	; (8009070 <HAL_TIM_PWM_Start+0x200>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d004      	beq.n	8008fae <HAL_TIM_PWM_Start+0x13e>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a32      	ldr	r2, [pc, #200]	; (8009074 <HAL_TIM_PWM_Start+0x204>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d101      	bne.n	8008fb2 <HAL_TIM_PWM_Start+0x142>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <HAL_TIM_PWM_Start+0x144>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d007      	beq.n	8008fc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a25      	ldr	r2, [pc, #148]	; (8009064 <HAL_TIM_PWM_Start+0x1f4>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d022      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fda:	d01d      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a25      	ldr	r2, [pc, #148]	; (8009078 <HAL_TIM_PWM_Start+0x208>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d018      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a24      	ldr	r2, [pc, #144]	; (800907c <HAL_TIM_PWM_Start+0x20c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d013      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a22      	ldr	r2, [pc, #136]	; (8009080 <HAL_TIM_PWM_Start+0x210>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00e      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a1a      	ldr	r2, [pc, #104]	; (8009068 <HAL_TIM_PWM_Start+0x1f8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d009      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1e      	ldr	r2, [pc, #120]	; (8009084 <HAL_TIM_PWM_Start+0x214>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d004      	beq.n	8009018 <HAL_TIM_PWM_Start+0x1a8>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a16      	ldr	r2, [pc, #88]	; (800906c <HAL_TIM_PWM_Start+0x1fc>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d115      	bne.n	8009044 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	4b1a      	ldr	r3, [pc, #104]	; (8009088 <HAL_TIM_PWM_Start+0x218>)
 8009020:	4013      	ands	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b06      	cmp	r3, #6
 8009028:	d015      	beq.n	8009056 <HAL_TIM_PWM_Start+0x1e6>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009030:	d011      	beq.n	8009056 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0201 	orr.w	r2, r2, #1
 8009040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009042:	e008      	b.n	8009056 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	e000      	b.n	8009058 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	40010000 	.word	0x40010000
 8009068:	40010400 	.word	0x40010400
 800906c:	40014000 	.word	0x40014000
 8009070:	40014400 	.word	0x40014400
 8009074:	40014800 	.word	0x40014800
 8009078:	40000400 	.word	0x40000400
 800907c:	40000800 	.word	0x40000800
 8009080:	40000c00 	.word	0x40000c00
 8009084:	40001800 	.word	0x40001800
 8009088:	00010007 	.word	0x00010007

0800908c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d122      	bne.n	80090e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f003 0302 	and.w	r3, r3, #2
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d11b      	bne.n	80090e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f06f 0202 	mvn.w	r2, #2
 80090b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fb1c 	bl	800970c <HAL_TIM_IC_CaptureCallback>
 80090d4:	e005      	b.n	80090e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fb0e 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fb1f 	bl	8009720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d122      	bne.n	800913c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b04      	cmp	r3, #4
 8009102:	d11b      	bne.n	800913c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0204 	mvn.w	r2, #4
 800910c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 faf2 	bl	800970c <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fae4 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 faf5 	bl	8009720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	f003 0308 	and.w	r3, r3, #8
 8009146:	2b08      	cmp	r3, #8
 8009148:	d122      	bne.n	8009190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b08      	cmp	r3, #8
 8009156:	d11b      	bne.n	8009190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f06f 0208 	mvn.w	r2, #8
 8009160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2204      	movs	r2, #4
 8009166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fac8 	bl	800970c <HAL_TIM_IC_CaptureCallback>
 800917c:	e005      	b.n	800918a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 faba 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 facb 	bl	8009720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	f003 0310 	and.w	r3, r3, #16
 800919a:	2b10      	cmp	r3, #16
 800919c:	d122      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	d11b      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f06f 0210 	mvn.w	r2, #16
 80091b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2208      	movs	r2, #8
 80091ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fa9e 	bl	800970c <HAL_TIM_IC_CaptureCallback>
 80091d0:	e005      	b.n	80091de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fa90 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 faa1 	bl	8009720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d10e      	bne.n	8009210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d107      	bne.n	8009210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0201 	mvn.w	r2, #1
 8009208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa6a 	bl	80096e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921a:	2b80      	cmp	r3, #128	; 0x80
 800921c:	d10e      	bne.n	800923c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009228:	2b80      	cmp	r3, #128	; 0x80
 800922a:	d107      	bne.n	800923c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fff2 	bl	800a220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924a:	d10e      	bne.n	800926a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009256:	2b80      	cmp	r3, #128	; 0x80
 8009258:	d107      	bne.n	800926a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 ffe5 	bl	800a234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	d10e      	bne.n	8009296 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d107      	bne.n	8009296 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800928e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fa4f 	bl	8009734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d10e      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d107      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f06f 0220 	mvn.w	r2, #32
 80092ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 ffa5 	bl	800a20c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e0ff      	b.n	80094ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b14      	cmp	r3, #20
 80092f6:	f200 80f0 	bhi.w	80094da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80092fa:	a201      	add	r2, pc, #4	; (adr r2, 8009300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009300:	08009355 	.word	0x08009355
 8009304:	080094db 	.word	0x080094db
 8009308:	080094db 	.word	0x080094db
 800930c:	080094db 	.word	0x080094db
 8009310:	08009395 	.word	0x08009395
 8009314:	080094db 	.word	0x080094db
 8009318:	080094db 	.word	0x080094db
 800931c:	080094db 	.word	0x080094db
 8009320:	080093d7 	.word	0x080093d7
 8009324:	080094db 	.word	0x080094db
 8009328:	080094db 	.word	0x080094db
 800932c:	080094db 	.word	0x080094db
 8009330:	08009417 	.word	0x08009417
 8009334:	080094db 	.word	0x080094db
 8009338:	080094db 	.word	0x080094db
 800933c:	080094db 	.word	0x080094db
 8009340:	08009459 	.word	0x08009459
 8009344:	080094db 	.word	0x080094db
 8009348:	080094db 	.word	0x080094db
 800934c:	080094db 	.word	0x080094db
 8009350:	08009499 	.word	0x08009499
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68b9      	ldr	r1, [r7, #8]
 800935a:	4618      	mov	r0, r3
 800935c:	f000 fa8e 	bl	800987c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	699a      	ldr	r2, [r3, #24]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f042 0208 	orr.w	r2, r2, #8
 800936e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699a      	ldr	r2, [r3, #24]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0204 	bic.w	r2, r2, #4
 800937e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6999      	ldr	r1, [r3, #24]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	691a      	ldr	r2, [r3, #16]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	619a      	str	r2, [r3, #24]
      break;
 8009392:	e0a5      	b.n	80094e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fafe 	bl	800999c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6999      	ldr	r1, [r3, #24]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	021a      	lsls	r2, r3, #8
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	619a      	str	r2, [r3, #24]
      break;
 80093d4:	e084      	b.n	80094e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68b9      	ldr	r1, [r7, #8]
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fb67 	bl	8009ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	69da      	ldr	r2, [r3, #28]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0208 	orr.w	r2, r2, #8
 80093f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	69da      	ldr	r2, [r3, #28]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0204 	bic.w	r2, r2, #4
 8009400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	69d9      	ldr	r1, [r3, #28]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	691a      	ldr	r2, [r3, #16]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	430a      	orrs	r2, r1
 8009412:	61da      	str	r2, [r3, #28]
      break;
 8009414:	e064      	b.n	80094e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fbcf 	bl	8009bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69da      	ldr	r2, [r3, #28]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69da      	ldr	r2, [r3, #28]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69d9      	ldr	r1, [r3, #28]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	021a      	lsls	r2, r3, #8
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	430a      	orrs	r2, r1
 8009454:	61da      	str	r2, [r3, #28]
      break;
 8009456:	e043      	b.n	80094e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68b9      	ldr	r1, [r7, #8]
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fc18 	bl	8009c94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f042 0208 	orr.w	r2, r2, #8
 8009472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0204 	bic.w	r2, r2, #4
 8009482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	691a      	ldr	r2, [r3, #16]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009496:	e023      	b.n	80094e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fc5c 	bl	8009d5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	021a      	lsls	r2, r3, #8
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	430a      	orrs	r2, r1
 80094d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094d8:	e002      	b.n	80094e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	75fb      	strb	r3, [r7, #23]
      break;
 80094de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop

080094f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009508:	2b01      	cmp	r3, #1
 800950a:	d101      	bne.n	8009510 <HAL_TIM_ConfigClockSource+0x1c>
 800950c:	2302      	movs	r3, #2
 800950e:	e0dc      	b.n	80096ca <HAL_TIM_ConfigClockSource+0x1d6>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2202      	movs	r2, #2
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	4b6a      	ldr	r3, [pc, #424]	; (80096d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800952c:	4013      	ands	r3, r2
 800952e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009536:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a64      	ldr	r2, [pc, #400]	; (80096d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009546:	4293      	cmp	r3, r2
 8009548:	f000 80a9 	beq.w	800969e <HAL_TIM_ConfigClockSource+0x1aa>
 800954c:	4a62      	ldr	r2, [pc, #392]	; (80096d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800954e:	4293      	cmp	r3, r2
 8009550:	f200 80ae 	bhi.w	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009554:	4a61      	ldr	r2, [pc, #388]	; (80096dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	f000 80a1 	beq.w	800969e <HAL_TIM_ConfigClockSource+0x1aa>
 800955c:	4a5f      	ldr	r2, [pc, #380]	; (80096dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800955e:	4293      	cmp	r3, r2
 8009560:	f200 80a6 	bhi.w	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009564:	4a5e      	ldr	r2, [pc, #376]	; (80096e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009566:	4293      	cmp	r3, r2
 8009568:	f000 8099 	beq.w	800969e <HAL_TIM_ConfigClockSource+0x1aa>
 800956c:	4a5c      	ldr	r2, [pc, #368]	; (80096e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800956e:	4293      	cmp	r3, r2
 8009570:	f200 809e 	bhi.w	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009574:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009578:	f000 8091 	beq.w	800969e <HAL_TIM_ConfigClockSource+0x1aa>
 800957c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009580:	f200 8096 	bhi.w	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009588:	f000 8089 	beq.w	800969e <HAL_TIM_ConfigClockSource+0x1aa>
 800958c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009590:	f200 808e 	bhi.w	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009598:	d03e      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x124>
 800959a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800959e:	f200 8087 	bhi.w	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095a6:	f000 8086 	beq.w	80096b6 <HAL_TIM_ConfigClockSource+0x1c2>
 80095aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ae:	d87f      	bhi.n	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095b0:	2b70      	cmp	r3, #112	; 0x70
 80095b2:	d01a      	beq.n	80095ea <HAL_TIM_ConfigClockSource+0xf6>
 80095b4:	2b70      	cmp	r3, #112	; 0x70
 80095b6:	d87b      	bhi.n	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095b8:	2b60      	cmp	r3, #96	; 0x60
 80095ba:	d050      	beq.n	800965e <HAL_TIM_ConfigClockSource+0x16a>
 80095bc:	2b60      	cmp	r3, #96	; 0x60
 80095be:	d877      	bhi.n	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095c0:	2b50      	cmp	r3, #80	; 0x50
 80095c2:	d03c      	beq.n	800963e <HAL_TIM_ConfigClockSource+0x14a>
 80095c4:	2b50      	cmp	r3, #80	; 0x50
 80095c6:	d873      	bhi.n	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095c8:	2b40      	cmp	r3, #64	; 0x40
 80095ca:	d058      	beq.n	800967e <HAL_TIM_ConfigClockSource+0x18a>
 80095cc:	2b40      	cmp	r3, #64	; 0x40
 80095ce:	d86f      	bhi.n	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095d0:	2b30      	cmp	r3, #48	; 0x30
 80095d2:	d064      	beq.n	800969e <HAL_TIM_ConfigClockSource+0x1aa>
 80095d4:	2b30      	cmp	r3, #48	; 0x30
 80095d6:	d86b      	bhi.n	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095d8:	2b20      	cmp	r3, #32
 80095da:	d060      	beq.n	800969e <HAL_TIM_ConfigClockSource+0x1aa>
 80095dc:	2b20      	cmp	r3, #32
 80095de:	d867      	bhi.n	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d05c      	beq.n	800969e <HAL_TIM_ConfigClockSource+0x1aa>
 80095e4:	2b10      	cmp	r3, #16
 80095e6:	d05a      	beq.n	800969e <HAL_TIM_ConfigClockSource+0x1aa>
 80095e8:	e062      	b.n	80096b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	6899      	ldr	r1, [r3, #8]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f000 fc93 	bl	8009f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800960c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	609a      	str	r2, [r3, #8]
      break;
 8009616:	e04f      	b.n	80096b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6818      	ldr	r0, [r3, #0]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	6899      	ldr	r1, [r3, #8]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f000 fc7c 	bl	8009f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800963a:	609a      	str	r2, [r3, #8]
      break;
 800963c:	e03c      	b.n	80096b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	6859      	ldr	r1, [r3, #4]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	461a      	mov	r2, r3
 800964c:	f000 fbec 	bl	8009e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2150      	movs	r1, #80	; 0x50
 8009656:	4618      	mov	r0, r3
 8009658:	f000 fc46 	bl	8009ee8 <TIM_ITRx_SetConfig>
      break;
 800965c:	e02c      	b.n	80096b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6818      	ldr	r0, [r3, #0]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6859      	ldr	r1, [r3, #4]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	461a      	mov	r2, r3
 800966c:	f000 fc0b 	bl	8009e86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2160      	movs	r1, #96	; 0x60
 8009676:	4618      	mov	r0, r3
 8009678:	f000 fc36 	bl	8009ee8 <TIM_ITRx_SetConfig>
      break;
 800967c:	e01c      	b.n	80096b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	6859      	ldr	r1, [r3, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	461a      	mov	r2, r3
 800968c:	f000 fbcc 	bl	8009e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2140      	movs	r1, #64	; 0x40
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fc26 	bl	8009ee8 <TIM_ITRx_SetConfig>
      break;
 800969c:	e00c      	b.n	80096b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f000 fc1d 	bl	8009ee8 <TIM_ITRx_SetConfig>
      break;
 80096ae:	e003      	b.n	80096b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	73fb      	strb	r3, [r7, #15]
      break;
 80096b4:	e000      	b.n	80096b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80096b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	ffceff88 	.word	0xffceff88
 80096d8:	00100040 	.word	0x00100040
 80096dc:	00100030 	.word	0x00100030
 80096e0:	00100020 	.word	0x00100020

080096e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a40      	ldr	r2, [pc, #256]	; (800985c <TIM_Base_SetConfig+0x114>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d013      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009766:	d00f      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a3d      	ldr	r2, [pc, #244]	; (8009860 <TIM_Base_SetConfig+0x118>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00b      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a3c      	ldr	r2, [pc, #240]	; (8009864 <TIM_Base_SetConfig+0x11c>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d007      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a3b      	ldr	r2, [pc, #236]	; (8009868 <TIM_Base_SetConfig+0x120>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d003      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a3a      	ldr	r2, [pc, #232]	; (800986c <TIM_Base_SetConfig+0x124>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d108      	bne.n	800979a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800978e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	4313      	orrs	r3, r2
 8009798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a2f      	ldr	r2, [pc, #188]	; (800985c <TIM_Base_SetConfig+0x114>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d01f      	beq.n	80097e2 <TIM_Base_SetConfig+0x9a>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a8:	d01b      	beq.n	80097e2 <TIM_Base_SetConfig+0x9a>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a2c      	ldr	r2, [pc, #176]	; (8009860 <TIM_Base_SetConfig+0x118>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d017      	beq.n	80097e2 <TIM_Base_SetConfig+0x9a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a2b      	ldr	r2, [pc, #172]	; (8009864 <TIM_Base_SetConfig+0x11c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d013      	beq.n	80097e2 <TIM_Base_SetConfig+0x9a>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a2a      	ldr	r2, [pc, #168]	; (8009868 <TIM_Base_SetConfig+0x120>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d00f      	beq.n	80097e2 <TIM_Base_SetConfig+0x9a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a29      	ldr	r2, [pc, #164]	; (800986c <TIM_Base_SetConfig+0x124>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d00b      	beq.n	80097e2 <TIM_Base_SetConfig+0x9a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a28      	ldr	r2, [pc, #160]	; (8009870 <TIM_Base_SetConfig+0x128>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d007      	beq.n	80097e2 <TIM_Base_SetConfig+0x9a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a27      	ldr	r2, [pc, #156]	; (8009874 <TIM_Base_SetConfig+0x12c>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d003      	beq.n	80097e2 <TIM_Base_SetConfig+0x9a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a26      	ldr	r2, [pc, #152]	; (8009878 <TIM_Base_SetConfig+0x130>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d108      	bne.n	80097f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a10      	ldr	r2, [pc, #64]	; (800985c <TIM_Base_SetConfig+0x114>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00f      	beq.n	8009840 <TIM_Base_SetConfig+0xf8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a12      	ldr	r2, [pc, #72]	; (800986c <TIM_Base_SetConfig+0x124>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d00b      	beq.n	8009840 <TIM_Base_SetConfig+0xf8>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a11      	ldr	r2, [pc, #68]	; (8009870 <TIM_Base_SetConfig+0x128>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d007      	beq.n	8009840 <TIM_Base_SetConfig+0xf8>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a10      	ldr	r2, [pc, #64]	; (8009874 <TIM_Base_SetConfig+0x12c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d003      	beq.n	8009840 <TIM_Base_SetConfig+0xf8>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a0f      	ldr	r2, [pc, #60]	; (8009878 <TIM_Base_SetConfig+0x130>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d103      	bne.n	8009848 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	691a      	ldr	r2, [r3, #16]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	615a      	str	r2, [r3, #20]
}
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	40010000 	.word	0x40010000
 8009860:	40000400 	.word	0x40000400
 8009864:	40000800 	.word	0x40000800
 8009868:	40000c00 	.word	0x40000c00
 800986c:	40010400 	.word	0x40010400
 8009870:	40014000 	.word	0x40014000
 8009874:	40014400 	.word	0x40014400
 8009878:	40014800 	.word	0x40014800

0800987c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	f023 0201 	bic.w	r2, r3, #1
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4b37      	ldr	r3, [pc, #220]	; (8009984 <TIM_OC1_SetConfig+0x108>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f023 0303 	bic.w	r3, r3, #3
 80098b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f023 0302 	bic.w	r3, r3, #2
 80098c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a2d      	ldr	r2, [pc, #180]	; (8009988 <TIM_OC1_SetConfig+0x10c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d00f      	beq.n	80098f8 <TIM_OC1_SetConfig+0x7c>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a2c      	ldr	r2, [pc, #176]	; (800998c <TIM_OC1_SetConfig+0x110>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00b      	beq.n	80098f8 <TIM_OC1_SetConfig+0x7c>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a2b      	ldr	r2, [pc, #172]	; (8009990 <TIM_OC1_SetConfig+0x114>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d007      	beq.n	80098f8 <TIM_OC1_SetConfig+0x7c>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a2a      	ldr	r2, [pc, #168]	; (8009994 <TIM_OC1_SetConfig+0x118>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d003      	beq.n	80098f8 <TIM_OC1_SetConfig+0x7c>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a29      	ldr	r2, [pc, #164]	; (8009998 <TIM_OC1_SetConfig+0x11c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d10c      	bne.n	8009912 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f023 0308 	bic.w	r3, r3, #8
 80098fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	4313      	orrs	r3, r2
 8009908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f023 0304 	bic.w	r3, r3, #4
 8009910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a1c      	ldr	r2, [pc, #112]	; (8009988 <TIM_OC1_SetConfig+0x10c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d00f      	beq.n	800993a <TIM_OC1_SetConfig+0xbe>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a1b      	ldr	r2, [pc, #108]	; (800998c <TIM_OC1_SetConfig+0x110>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00b      	beq.n	800993a <TIM_OC1_SetConfig+0xbe>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a1a      	ldr	r2, [pc, #104]	; (8009990 <TIM_OC1_SetConfig+0x114>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d007      	beq.n	800993a <TIM_OC1_SetConfig+0xbe>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a19      	ldr	r2, [pc, #100]	; (8009994 <TIM_OC1_SetConfig+0x118>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d003      	beq.n	800993a <TIM_OC1_SetConfig+0xbe>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a18      	ldr	r2, [pc, #96]	; (8009998 <TIM_OC1_SetConfig+0x11c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d111      	bne.n	800995e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	4313      	orrs	r3, r2
 800995c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	621a      	str	r2, [r3, #32]
}
 8009978:	bf00      	nop
 800997a:	371c      	adds	r7, #28
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	fffeff8f 	.word	0xfffeff8f
 8009988:	40010000 	.word	0x40010000
 800998c:	40010400 	.word	0x40010400
 8009990:	40014000 	.word	0x40014000
 8009994:	40014400 	.word	0x40014400
 8009998:	40014800 	.word	0x40014800

0800999c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800999c:	b480      	push	{r7}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	f023 0210 	bic.w	r2, r3, #16
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4b34      	ldr	r3, [pc, #208]	; (8009a98 <TIM_OC2_SetConfig+0xfc>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	021b      	lsls	r3, r3, #8
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4313      	orrs	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f023 0320 	bic.w	r3, r3, #32
 80099e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a29      	ldr	r2, [pc, #164]	; (8009a9c <TIM_OC2_SetConfig+0x100>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d003      	beq.n	8009a04 <TIM_OC2_SetConfig+0x68>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a28      	ldr	r2, [pc, #160]	; (8009aa0 <TIM_OC2_SetConfig+0x104>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d10d      	bne.n	8009a20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	011b      	lsls	r3, r3, #4
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a1e      	ldr	r2, [pc, #120]	; (8009a9c <TIM_OC2_SetConfig+0x100>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00f      	beq.n	8009a48 <TIM_OC2_SetConfig+0xac>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a1d      	ldr	r2, [pc, #116]	; (8009aa0 <TIM_OC2_SetConfig+0x104>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d00b      	beq.n	8009a48 <TIM_OC2_SetConfig+0xac>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a1c      	ldr	r2, [pc, #112]	; (8009aa4 <TIM_OC2_SetConfig+0x108>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d007      	beq.n	8009a48 <TIM_OC2_SetConfig+0xac>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a1b      	ldr	r2, [pc, #108]	; (8009aa8 <TIM_OC2_SetConfig+0x10c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d003      	beq.n	8009a48 <TIM_OC2_SetConfig+0xac>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a1a      	ldr	r2, [pc, #104]	; (8009aac <TIM_OC2_SetConfig+0x110>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d113      	bne.n	8009a70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	695b      	ldr	r3, [r3, #20]
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	621a      	str	r2, [r3, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	feff8fff 	.word	0xfeff8fff
 8009a9c:	40010000 	.word	0x40010000
 8009aa0:	40010400 	.word	0x40010400
 8009aa4:	40014000 	.word	0x40014000
 8009aa8:	40014400 	.word	0x40014400
 8009aac:	40014800 	.word	0x40014800

08009ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	4b33      	ldr	r3, [pc, #204]	; (8009ba8 <TIM_OC3_SetConfig+0xf8>)
 8009adc:	4013      	ands	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
 8009ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a28      	ldr	r2, [pc, #160]	; (8009bac <TIM_OC3_SetConfig+0xfc>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d003      	beq.n	8009b16 <TIM_OC3_SetConfig+0x66>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a27      	ldr	r2, [pc, #156]	; (8009bb0 <TIM_OC3_SetConfig+0x100>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d10d      	bne.n	8009b32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a1d      	ldr	r2, [pc, #116]	; (8009bac <TIM_OC3_SetConfig+0xfc>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d00f      	beq.n	8009b5a <TIM_OC3_SetConfig+0xaa>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a1c      	ldr	r2, [pc, #112]	; (8009bb0 <TIM_OC3_SetConfig+0x100>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d00b      	beq.n	8009b5a <TIM_OC3_SetConfig+0xaa>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a1b      	ldr	r2, [pc, #108]	; (8009bb4 <TIM_OC3_SetConfig+0x104>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d007      	beq.n	8009b5a <TIM_OC3_SetConfig+0xaa>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a1a      	ldr	r2, [pc, #104]	; (8009bb8 <TIM_OC3_SetConfig+0x108>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d003      	beq.n	8009b5a <TIM_OC3_SetConfig+0xaa>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a19      	ldr	r2, [pc, #100]	; (8009bbc <TIM_OC3_SetConfig+0x10c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d113      	bne.n	8009b82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	011b      	lsls	r3, r3, #4
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	011b      	lsls	r3, r3, #4
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	621a      	str	r2, [r3, #32]
}
 8009b9c:	bf00      	nop
 8009b9e:	371c      	adds	r7, #28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	fffeff8f 	.word	0xfffeff8f
 8009bac:	40010000 	.word	0x40010000
 8009bb0:	40010400 	.word	0x40010400
 8009bb4:	40014000 	.word	0x40014000
 8009bb8:	40014400 	.word	0x40014400
 8009bbc:	40014800 	.word	0x40014800

08009bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4b24      	ldr	r3, [pc, #144]	; (8009c7c <TIM_OC4_SetConfig+0xbc>)
 8009bec:	4013      	ands	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	031b      	lsls	r3, r3, #12
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a19      	ldr	r2, [pc, #100]	; (8009c80 <TIM_OC4_SetConfig+0xc0>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d00f      	beq.n	8009c40 <TIM_OC4_SetConfig+0x80>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a18      	ldr	r2, [pc, #96]	; (8009c84 <TIM_OC4_SetConfig+0xc4>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d00b      	beq.n	8009c40 <TIM_OC4_SetConfig+0x80>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <TIM_OC4_SetConfig+0xc8>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d007      	beq.n	8009c40 <TIM_OC4_SetConfig+0x80>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a16      	ldr	r2, [pc, #88]	; (8009c8c <TIM_OC4_SetConfig+0xcc>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d003      	beq.n	8009c40 <TIM_OC4_SetConfig+0x80>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a15      	ldr	r2, [pc, #84]	; (8009c90 <TIM_OC4_SetConfig+0xd0>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d109      	bne.n	8009c54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	019b      	lsls	r3, r3, #6
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	621a      	str	r2, [r3, #32]
}
 8009c6e:	bf00      	nop
 8009c70:	371c      	adds	r7, #28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	feff8fff 	.word	0xfeff8fff
 8009c80:	40010000 	.word	0x40010000
 8009c84:	40010400 	.word	0x40010400
 8009c88:	40014000 	.word	0x40014000
 8009c8c:	40014400 	.word	0x40014400
 8009c90:	40014800 	.word	0x40014800

08009c94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	4b21      	ldr	r3, [pc, #132]	; (8009d44 <TIM_OC5_SetConfig+0xb0>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	041b      	lsls	r3, r3, #16
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a18      	ldr	r2, [pc, #96]	; (8009d48 <TIM_OC5_SetConfig+0xb4>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d00f      	beq.n	8009d0a <TIM_OC5_SetConfig+0x76>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a17      	ldr	r2, [pc, #92]	; (8009d4c <TIM_OC5_SetConfig+0xb8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d00b      	beq.n	8009d0a <TIM_OC5_SetConfig+0x76>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a16      	ldr	r2, [pc, #88]	; (8009d50 <TIM_OC5_SetConfig+0xbc>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d007      	beq.n	8009d0a <TIM_OC5_SetConfig+0x76>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a15      	ldr	r2, [pc, #84]	; (8009d54 <TIM_OC5_SetConfig+0xc0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d003      	beq.n	8009d0a <TIM_OC5_SetConfig+0x76>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a14      	ldr	r2, [pc, #80]	; (8009d58 <TIM_OC5_SetConfig+0xc4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d109      	bne.n	8009d1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	695b      	ldr	r3, [r3, #20]
 8009d16:	021b      	lsls	r3, r3, #8
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	621a      	str	r2, [r3, #32]
}
 8009d38:	bf00      	nop
 8009d3a:	371c      	adds	r7, #28
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	fffeff8f 	.word	0xfffeff8f
 8009d48:	40010000 	.word	0x40010000
 8009d4c:	40010400 	.word	0x40010400
 8009d50:	40014000 	.word	0x40014000
 8009d54:	40014400 	.word	0x40014400
 8009d58:	40014800 	.word	0x40014800

08009d5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4b22      	ldr	r3, [pc, #136]	; (8009e10 <TIM_OC6_SetConfig+0xb4>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	051b      	lsls	r3, r3, #20
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a19      	ldr	r2, [pc, #100]	; (8009e14 <TIM_OC6_SetConfig+0xb8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d00f      	beq.n	8009dd4 <TIM_OC6_SetConfig+0x78>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a18      	ldr	r2, [pc, #96]	; (8009e18 <TIM_OC6_SetConfig+0xbc>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d00b      	beq.n	8009dd4 <TIM_OC6_SetConfig+0x78>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a17      	ldr	r2, [pc, #92]	; (8009e1c <TIM_OC6_SetConfig+0xc0>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d007      	beq.n	8009dd4 <TIM_OC6_SetConfig+0x78>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a16      	ldr	r2, [pc, #88]	; (8009e20 <TIM_OC6_SetConfig+0xc4>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d003      	beq.n	8009dd4 <TIM_OC6_SetConfig+0x78>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a15      	ldr	r2, [pc, #84]	; (8009e24 <TIM_OC6_SetConfig+0xc8>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d109      	bne.n	8009de8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	029b      	lsls	r3, r3, #10
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	621a      	str	r2, [r3, #32]
}
 8009e02:	bf00      	nop
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	feff8fff 	.word	0xfeff8fff
 8009e14:	40010000 	.word	0x40010000
 8009e18:	40010400 	.word	0x40010400
 8009e1c:	40014000 	.word	0x40014000
 8009e20:	40014400 	.word	0x40014400
 8009e24:	40014800 	.word	0x40014800

08009e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	f023 0201 	bic.w	r2, r3, #1
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	699b      	ldr	r3, [r3, #24]
 8009e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f023 030a 	bic.w	r3, r3, #10
 8009e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	621a      	str	r2, [r3, #32]
}
 8009e7a:	bf00      	nop
 8009e7c:	371c      	adds	r7, #28
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b087      	sub	sp, #28
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	f023 0210 	bic.w	r2, r3, #16
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6a1b      	ldr	r3, [r3, #32]
 8009ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	031b      	lsls	r3, r3, #12
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	621a      	str	r2, [r3, #32]
}
 8009eda:	bf00      	nop
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
	...

08009ee8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <TIM_ITRx_SetConfig+0x38>)
 8009efc:	4013      	ands	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	f043 0307 	orr.w	r3, r3, #7
 8009f0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	609a      	str	r2, [r3, #8]
}
 8009f12:	bf00      	nop
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	ffcfff8f 	.word	0xffcfff8f

08009f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	021a      	lsls	r2, r3, #8
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	431a      	orrs	r2, r3
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	609a      	str	r2, [r3, #8]
}
 8009f58:	bf00      	nop
 8009f5a:	371c      	adds	r7, #28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b087      	sub	sp, #28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	f003 031f 	and.w	r3, r3, #31
 8009f76:	2201      	movs	r2, #1
 8009f78:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6a1a      	ldr	r2, [r3, #32]
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	43db      	mvns	r3, r3
 8009f86:	401a      	ands	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a1a      	ldr	r2, [r3, #32]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f003 031f 	and.w	r3, r3, #31
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	fa01 f303 	lsl.w	r3, r1, r3
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	621a      	str	r2, [r3, #32]
}
 8009fa2:	bf00      	nop
 8009fa4:	371c      	adds	r7, #28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
	...

08009fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d101      	bne.n	8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	e06d      	b.n	800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a30      	ldr	r2, [pc, #192]	; (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d004      	beq.n	8009ffc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a2f      	ldr	r2, [pc, #188]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d108      	bne.n	800a00e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a014:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a20      	ldr	r2, [pc, #128]	; (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d022      	beq.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03a:	d01d      	beq.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a1d      	ldr	r2, [pc, #116]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d018      	beq.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a1c      	ldr	r2, [pc, #112]	; (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d013      	beq.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a1a      	ldr	r2, [pc, #104]	; (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d00e      	beq.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a15      	ldr	r2, [pc, #84]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d009      	beq.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a16      	ldr	r2, [pc, #88]	; (800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d004      	beq.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a15      	ldr	r2, [pc, #84]	; (800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d10c      	bne.n	800a092 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a07e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	4313      	orrs	r3, r2
 800a088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	40010000 	.word	0x40010000
 800a0b4:	40010400 	.word	0x40010400
 800a0b8:	40000400 	.word	0x40000400
 800a0bc:	40000800 	.word	0x40000800
 800a0c0:	40000c00 	.word	0x40000c00
 800a0c4:	40001800 	.word	0x40001800
 800a0c8:	40014000 	.word	0x40014000

0800a0cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d101      	bne.n	800a0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	e087      	b.n	800a1f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	4313      	orrs	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4313      	orrs	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	4313      	orrs	r3, r2
 800a134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	695b      	ldr	r3, [r3, #20]
 800a140:	4313      	orrs	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	041b      	lsls	r3, r3, #16
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a27      	ldr	r2, [pc, #156]	; (800a204 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d004      	beq.n	800a176 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a25      	ldr	r2, [pc, #148]	; (800a208 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d106      	bne.n	800a184 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	69db      	ldr	r3, [r3, #28]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a1e      	ldr	r2, [pc, #120]	; (800a204 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d004      	beq.n	800a198 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a1d      	ldr	r2, [pc, #116]	; (800a208 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d126      	bne.n	800a1e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a2:	051b      	lsls	r3, r3, #20
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a0e      	ldr	r2, [pc, #56]	; (800a204 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d004      	beq.n	800a1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a0d      	ldr	r2, [pc, #52]	; (800a208 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d106      	bne.n	800a1e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	40010000 	.word	0x40010000
 800a208:	40010400 	.word	0x40010400

0800a20c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e042      	b.n	800a2e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7f7 fed3 	bl	8002018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2224      	movs	r2, #36	; 0x24
 800a276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f022 0201 	bic.w	r2, r2, #1
 800a288:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f82c 	bl	800a2e8 <UART_SetConfig>
 800a290:	4603      	mov	r3, r0
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e022      	b.n	800a2e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fe7e 	bl	800afa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f042 0201 	orr.w	r2, r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 ff05 	bl	800b0e8 <UART_CheckIdleState>
 800a2de:	4603      	mov	r3, r0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2e8:	b5b0      	push	{r4, r5, r7, lr}
 800a2ea:	b08e      	sub	sp, #56	; 0x38
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689a      	ldr	r2, [r3, #8]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	431a      	orrs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	431a      	orrs	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	4bbf      	ldr	r3, [pc, #764]	; (800a614 <UART_SetConfig+0x32c>)
 800a316:	4013      	ands	r3, r2
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	6812      	ldr	r2, [r2, #0]
 800a31c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a31e:	430b      	orrs	r3, r1
 800a320:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	430a      	orrs	r2, r1
 800a336:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4ab5      	ldr	r2, [pc, #724]	; (800a618 <UART_SetConfig+0x330>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d004      	beq.n	800a352 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a34e:	4313      	orrs	r3, r2
 800a350:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689a      	ldr	r2, [r3, #8]
 800a358:	4bb0      	ldr	r3, [pc, #704]	; (800a61c <UART_SetConfig+0x334>)
 800a35a:	4013      	ands	r3, r2
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	6812      	ldr	r2, [r2, #0]
 800a360:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a362:	430b      	orrs	r3, r1
 800a364:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36c:	f023 010f 	bic.w	r1, r3, #15
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4aa7      	ldr	r2, [pc, #668]	; (800a620 <UART_SetConfig+0x338>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d176      	bne.n	800a474 <UART_SetConfig+0x18c>
 800a386:	4ba7      	ldr	r3, [pc, #668]	; (800a624 <UART_SetConfig+0x33c>)
 800a388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a38a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a38e:	2b28      	cmp	r3, #40	; 0x28
 800a390:	d86c      	bhi.n	800a46c <UART_SetConfig+0x184>
 800a392:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <UART_SetConfig+0xb0>)
 800a394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a398:	0800a43d 	.word	0x0800a43d
 800a39c:	0800a46d 	.word	0x0800a46d
 800a3a0:	0800a46d 	.word	0x0800a46d
 800a3a4:	0800a46d 	.word	0x0800a46d
 800a3a8:	0800a46d 	.word	0x0800a46d
 800a3ac:	0800a46d 	.word	0x0800a46d
 800a3b0:	0800a46d 	.word	0x0800a46d
 800a3b4:	0800a46d 	.word	0x0800a46d
 800a3b8:	0800a445 	.word	0x0800a445
 800a3bc:	0800a46d 	.word	0x0800a46d
 800a3c0:	0800a46d 	.word	0x0800a46d
 800a3c4:	0800a46d 	.word	0x0800a46d
 800a3c8:	0800a46d 	.word	0x0800a46d
 800a3cc:	0800a46d 	.word	0x0800a46d
 800a3d0:	0800a46d 	.word	0x0800a46d
 800a3d4:	0800a46d 	.word	0x0800a46d
 800a3d8:	0800a44d 	.word	0x0800a44d
 800a3dc:	0800a46d 	.word	0x0800a46d
 800a3e0:	0800a46d 	.word	0x0800a46d
 800a3e4:	0800a46d 	.word	0x0800a46d
 800a3e8:	0800a46d 	.word	0x0800a46d
 800a3ec:	0800a46d 	.word	0x0800a46d
 800a3f0:	0800a46d 	.word	0x0800a46d
 800a3f4:	0800a46d 	.word	0x0800a46d
 800a3f8:	0800a455 	.word	0x0800a455
 800a3fc:	0800a46d 	.word	0x0800a46d
 800a400:	0800a46d 	.word	0x0800a46d
 800a404:	0800a46d 	.word	0x0800a46d
 800a408:	0800a46d 	.word	0x0800a46d
 800a40c:	0800a46d 	.word	0x0800a46d
 800a410:	0800a46d 	.word	0x0800a46d
 800a414:	0800a46d 	.word	0x0800a46d
 800a418:	0800a45d 	.word	0x0800a45d
 800a41c:	0800a46d 	.word	0x0800a46d
 800a420:	0800a46d 	.word	0x0800a46d
 800a424:	0800a46d 	.word	0x0800a46d
 800a428:	0800a46d 	.word	0x0800a46d
 800a42c:	0800a46d 	.word	0x0800a46d
 800a430:	0800a46d 	.word	0x0800a46d
 800a434:	0800a46d 	.word	0x0800a46d
 800a438:	0800a465 	.word	0x0800a465
 800a43c:	2301      	movs	r3, #1
 800a43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a442:	e326      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a444:	2304      	movs	r3, #4
 800a446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44a:	e322      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a44c:	2308      	movs	r3, #8
 800a44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a452:	e31e      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a454:	2310      	movs	r3, #16
 800a456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a45a:	e31a      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a45c:	2320      	movs	r3, #32
 800a45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a462:	e316      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a464:	2340      	movs	r3, #64	; 0x40
 800a466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46a:	e312      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a46c:	2380      	movs	r3, #128	; 0x80
 800a46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a472:	e30e      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a6b      	ldr	r2, [pc, #428]	; (800a628 <UART_SetConfig+0x340>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d130      	bne.n	800a4e0 <UART_SetConfig+0x1f8>
 800a47e:	4b69      	ldr	r3, [pc, #420]	; (800a624 <UART_SetConfig+0x33c>)
 800a480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	2b05      	cmp	r3, #5
 800a488:	d826      	bhi.n	800a4d8 <UART_SetConfig+0x1f0>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <UART_SetConfig+0x1a8>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4a9 	.word	0x0800a4a9
 800a494:	0800a4b1 	.word	0x0800a4b1
 800a498:	0800a4b9 	.word	0x0800a4b9
 800a49c:	0800a4c1 	.word	0x0800a4c1
 800a4a0:	0800a4c9 	.word	0x0800a4c9
 800a4a4:	0800a4d1 	.word	0x0800a4d1
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ae:	e2f0      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a4b0:	2304      	movs	r3, #4
 800a4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b6:	e2ec      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a4b8:	2308      	movs	r3, #8
 800a4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4be:	e2e8      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4c6:	e2e4      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a4c8:	2320      	movs	r3, #32
 800a4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ce:	e2e0      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a4d0:	2340      	movs	r3, #64	; 0x40
 800a4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d6:	e2dc      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a4d8:	2380      	movs	r3, #128	; 0x80
 800a4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4de:	e2d8      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a51      	ldr	r2, [pc, #324]	; (800a62c <UART_SetConfig+0x344>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d130      	bne.n	800a54c <UART_SetConfig+0x264>
 800a4ea:	4b4e      	ldr	r3, [pc, #312]	; (800a624 <UART_SetConfig+0x33c>)
 800a4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	2b05      	cmp	r3, #5
 800a4f4:	d826      	bhi.n	800a544 <UART_SetConfig+0x25c>
 800a4f6:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <UART_SetConfig+0x214>)
 800a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fc:	0800a515 	.word	0x0800a515
 800a500:	0800a51d 	.word	0x0800a51d
 800a504:	0800a525 	.word	0x0800a525
 800a508:	0800a52d 	.word	0x0800a52d
 800a50c:	0800a535 	.word	0x0800a535
 800a510:	0800a53d 	.word	0x0800a53d
 800a514:	2300      	movs	r3, #0
 800a516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51a:	e2ba      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a51c:	2304      	movs	r3, #4
 800a51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a522:	e2b6      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a524:	2308      	movs	r3, #8
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52a:	e2b2      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a52c:	2310      	movs	r3, #16
 800a52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a532:	e2ae      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a534:	2320      	movs	r3, #32
 800a536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53a:	e2aa      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a53c:	2340      	movs	r3, #64	; 0x40
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a542:	e2a6      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a544:	2380      	movs	r3, #128	; 0x80
 800a546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54a:	e2a2      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a37      	ldr	r2, [pc, #220]	; (800a630 <UART_SetConfig+0x348>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d130      	bne.n	800a5b8 <UART_SetConfig+0x2d0>
 800a556:	4b33      	ldr	r3, [pc, #204]	; (800a624 <UART_SetConfig+0x33c>)
 800a558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a55a:	f003 0307 	and.w	r3, r3, #7
 800a55e:	2b05      	cmp	r3, #5
 800a560:	d826      	bhi.n	800a5b0 <UART_SetConfig+0x2c8>
 800a562:	a201      	add	r2, pc, #4	; (adr r2, 800a568 <UART_SetConfig+0x280>)
 800a564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a568:	0800a581 	.word	0x0800a581
 800a56c:	0800a589 	.word	0x0800a589
 800a570:	0800a591 	.word	0x0800a591
 800a574:	0800a599 	.word	0x0800a599
 800a578:	0800a5a1 	.word	0x0800a5a1
 800a57c:	0800a5a9 	.word	0x0800a5a9
 800a580:	2300      	movs	r3, #0
 800a582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a586:	e284      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a588:	2304      	movs	r3, #4
 800a58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58e:	e280      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a590:	2308      	movs	r3, #8
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e27c      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a598:	2310      	movs	r3, #16
 800a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59e:	e278      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a5a0:	2320      	movs	r3, #32
 800a5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a6:	e274      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a5a8:	2340      	movs	r3, #64	; 0x40
 800a5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ae:	e270      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a5b0:	2380      	movs	r3, #128	; 0x80
 800a5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b6:	e26c      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a1d      	ldr	r2, [pc, #116]	; (800a634 <UART_SetConfig+0x34c>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d142      	bne.n	800a648 <UART_SetConfig+0x360>
 800a5c2:	4b18      	ldr	r3, [pc, #96]	; (800a624 <UART_SetConfig+0x33c>)
 800a5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c6:	f003 0307 	and.w	r3, r3, #7
 800a5ca:	2b05      	cmp	r3, #5
 800a5cc:	d838      	bhi.n	800a640 <UART_SetConfig+0x358>
 800a5ce:	a201      	add	r2, pc, #4	; (adr r2, 800a5d4 <UART_SetConfig+0x2ec>)
 800a5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d4:	0800a5ed 	.word	0x0800a5ed
 800a5d8:	0800a5f5 	.word	0x0800a5f5
 800a5dc:	0800a5fd 	.word	0x0800a5fd
 800a5e0:	0800a605 	.word	0x0800a605
 800a5e4:	0800a60d 	.word	0x0800a60d
 800a5e8:	0800a639 	.word	0x0800a639
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f2:	e24e      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a5f4:	2304      	movs	r3, #4
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e24a      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a5fc:	2308      	movs	r3, #8
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e246      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a604:	2310      	movs	r3, #16
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60a:	e242      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a60c:	2320      	movs	r3, #32
 800a60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a612:	e23e      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a614:	cfff69f3 	.word	0xcfff69f3
 800a618:	58000c00 	.word	0x58000c00
 800a61c:	11fff4ff 	.word	0x11fff4ff
 800a620:	40011000 	.word	0x40011000
 800a624:	58024400 	.word	0x58024400
 800a628:	40004400 	.word	0x40004400
 800a62c:	40004800 	.word	0x40004800
 800a630:	40004c00 	.word	0x40004c00
 800a634:	40005000 	.word	0x40005000
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63e:	e228      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a640:	2380      	movs	r3, #128	; 0x80
 800a642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a646:	e224      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4ab1      	ldr	r2, [pc, #708]	; (800a914 <UART_SetConfig+0x62c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d176      	bne.n	800a740 <UART_SetConfig+0x458>
 800a652:	4bb1      	ldr	r3, [pc, #708]	; (800a918 <UART_SetConfig+0x630>)
 800a654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a65a:	2b28      	cmp	r3, #40	; 0x28
 800a65c:	d86c      	bhi.n	800a738 <UART_SetConfig+0x450>
 800a65e:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <UART_SetConfig+0x37c>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a709 	.word	0x0800a709
 800a668:	0800a739 	.word	0x0800a739
 800a66c:	0800a739 	.word	0x0800a739
 800a670:	0800a739 	.word	0x0800a739
 800a674:	0800a739 	.word	0x0800a739
 800a678:	0800a739 	.word	0x0800a739
 800a67c:	0800a739 	.word	0x0800a739
 800a680:	0800a739 	.word	0x0800a739
 800a684:	0800a711 	.word	0x0800a711
 800a688:	0800a739 	.word	0x0800a739
 800a68c:	0800a739 	.word	0x0800a739
 800a690:	0800a739 	.word	0x0800a739
 800a694:	0800a739 	.word	0x0800a739
 800a698:	0800a739 	.word	0x0800a739
 800a69c:	0800a739 	.word	0x0800a739
 800a6a0:	0800a739 	.word	0x0800a739
 800a6a4:	0800a719 	.word	0x0800a719
 800a6a8:	0800a739 	.word	0x0800a739
 800a6ac:	0800a739 	.word	0x0800a739
 800a6b0:	0800a739 	.word	0x0800a739
 800a6b4:	0800a739 	.word	0x0800a739
 800a6b8:	0800a739 	.word	0x0800a739
 800a6bc:	0800a739 	.word	0x0800a739
 800a6c0:	0800a739 	.word	0x0800a739
 800a6c4:	0800a721 	.word	0x0800a721
 800a6c8:	0800a739 	.word	0x0800a739
 800a6cc:	0800a739 	.word	0x0800a739
 800a6d0:	0800a739 	.word	0x0800a739
 800a6d4:	0800a739 	.word	0x0800a739
 800a6d8:	0800a739 	.word	0x0800a739
 800a6dc:	0800a739 	.word	0x0800a739
 800a6e0:	0800a739 	.word	0x0800a739
 800a6e4:	0800a729 	.word	0x0800a729
 800a6e8:	0800a739 	.word	0x0800a739
 800a6ec:	0800a739 	.word	0x0800a739
 800a6f0:	0800a739 	.word	0x0800a739
 800a6f4:	0800a739 	.word	0x0800a739
 800a6f8:	0800a739 	.word	0x0800a739
 800a6fc:	0800a739 	.word	0x0800a739
 800a700:	0800a739 	.word	0x0800a739
 800a704:	0800a731 	.word	0x0800a731
 800a708:	2301      	movs	r3, #1
 800a70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a70e:	e1c0      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a710:	2304      	movs	r3, #4
 800a712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a716:	e1bc      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a718:	2308      	movs	r3, #8
 800a71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a71e:	e1b8      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a720:	2310      	movs	r3, #16
 800a722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a726:	e1b4      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a728:	2320      	movs	r3, #32
 800a72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a72e:	e1b0      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a730:	2340      	movs	r3, #64	; 0x40
 800a732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a736:	e1ac      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a738:	2380      	movs	r3, #128	; 0x80
 800a73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a73e:	e1a8      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a75      	ldr	r2, [pc, #468]	; (800a91c <UART_SetConfig+0x634>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d130      	bne.n	800a7ac <UART_SetConfig+0x4c4>
 800a74a:	4b73      	ldr	r3, [pc, #460]	; (800a918 <UART_SetConfig+0x630>)
 800a74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74e:	f003 0307 	and.w	r3, r3, #7
 800a752:	2b05      	cmp	r3, #5
 800a754:	d826      	bhi.n	800a7a4 <UART_SetConfig+0x4bc>
 800a756:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <UART_SetConfig+0x474>)
 800a758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75c:	0800a775 	.word	0x0800a775
 800a760:	0800a77d 	.word	0x0800a77d
 800a764:	0800a785 	.word	0x0800a785
 800a768:	0800a78d 	.word	0x0800a78d
 800a76c:	0800a795 	.word	0x0800a795
 800a770:	0800a79d 	.word	0x0800a79d
 800a774:	2300      	movs	r3, #0
 800a776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a77a:	e18a      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a77c:	2304      	movs	r3, #4
 800a77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a782:	e186      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a784:	2308      	movs	r3, #8
 800a786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a78a:	e182      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a78c:	2310      	movs	r3, #16
 800a78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a792:	e17e      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a794:	2320      	movs	r3, #32
 800a796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a79a:	e17a      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a79c:	2340      	movs	r3, #64	; 0x40
 800a79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a2:	e176      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a7a4:	2380      	movs	r3, #128	; 0x80
 800a7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7aa:	e172      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a5b      	ldr	r2, [pc, #364]	; (800a920 <UART_SetConfig+0x638>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d130      	bne.n	800a818 <UART_SetConfig+0x530>
 800a7b6:	4b58      	ldr	r3, [pc, #352]	; (800a918 <UART_SetConfig+0x630>)
 800a7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	2b05      	cmp	r3, #5
 800a7c0:	d826      	bhi.n	800a810 <UART_SetConfig+0x528>
 800a7c2:	a201      	add	r2, pc, #4	; (adr r2, 800a7c8 <UART_SetConfig+0x4e0>)
 800a7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c8:	0800a7e1 	.word	0x0800a7e1
 800a7cc:	0800a7e9 	.word	0x0800a7e9
 800a7d0:	0800a7f1 	.word	0x0800a7f1
 800a7d4:	0800a7f9 	.word	0x0800a7f9
 800a7d8:	0800a801 	.word	0x0800a801
 800a7dc:	0800a809 	.word	0x0800a809
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7e6:	e154      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a7e8:	2304      	movs	r3, #4
 800a7ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ee:	e150      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a7f0:	2308      	movs	r3, #8
 800a7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7f6:	e14c      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7fe:	e148      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a800:	2320      	movs	r3, #32
 800a802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a806:	e144      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a808:	2340      	movs	r3, #64	; 0x40
 800a80a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a80e:	e140      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a810:	2380      	movs	r3, #128	; 0x80
 800a812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a816:	e13c      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a41      	ldr	r2, [pc, #260]	; (800a924 <UART_SetConfig+0x63c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	f040 8082 	bne.w	800a928 <UART_SetConfig+0x640>
 800a824:	4b3c      	ldr	r3, [pc, #240]	; (800a918 <UART_SetConfig+0x630>)
 800a826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a82c:	2b28      	cmp	r3, #40	; 0x28
 800a82e:	d86d      	bhi.n	800a90c <UART_SetConfig+0x624>
 800a830:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <UART_SetConfig+0x550>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800a8dd 	.word	0x0800a8dd
 800a83c:	0800a90d 	.word	0x0800a90d
 800a840:	0800a90d 	.word	0x0800a90d
 800a844:	0800a90d 	.word	0x0800a90d
 800a848:	0800a90d 	.word	0x0800a90d
 800a84c:	0800a90d 	.word	0x0800a90d
 800a850:	0800a90d 	.word	0x0800a90d
 800a854:	0800a90d 	.word	0x0800a90d
 800a858:	0800a8e5 	.word	0x0800a8e5
 800a85c:	0800a90d 	.word	0x0800a90d
 800a860:	0800a90d 	.word	0x0800a90d
 800a864:	0800a90d 	.word	0x0800a90d
 800a868:	0800a90d 	.word	0x0800a90d
 800a86c:	0800a90d 	.word	0x0800a90d
 800a870:	0800a90d 	.word	0x0800a90d
 800a874:	0800a90d 	.word	0x0800a90d
 800a878:	0800a8ed 	.word	0x0800a8ed
 800a87c:	0800a90d 	.word	0x0800a90d
 800a880:	0800a90d 	.word	0x0800a90d
 800a884:	0800a90d 	.word	0x0800a90d
 800a888:	0800a90d 	.word	0x0800a90d
 800a88c:	0800a90d 	.word	0x0800a90d
 800a890:	0800a90d 	.word	0x0800a90d
 800a894:	0800a90d 	.word	0x0800a90d
 800a898:	0800a8f5 	.word	0x0800a8f5
 800a89c:	0800a90d 	.word	0x0800a90d
 800a8a0:	0800a90d 	.word	0x0800a90d
 800a8a4:	0800a90d 	.word	0x0800a90d
 800a8a8:	0800a90d 	.word	0x0800a90d
 800a8ac:	0800a90d 	.word	0x0800a90d
 800a8b0:	0800a90d 	.word	0x0800a90d
 800a8b4:	0800a90d 	.word	0x0800a90d
 800a8b8:	0800a8fd 	.word	0x0800a8fd
 800a8bc:	0800a90d 	.word	0x0800a90d
 800a8c0:	0800a90d 	.word	0x0800a90d
 800a8c4:	0800a90d 	.word	0x0800a90d
 800a8c8:	0800a90d 	.word	0x0800a90d
 800a8cc:	0800a90d 	.word	0x0800a90d
 800a8d0:	0800a90d 	.word	0x0800a90d
 800a8d4:	0800a90d 	.word	0x0800a90d
 800a8d8:	0800a905 	.word	0x0800a905
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8e2:	e0d6      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ea:	e0d2      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a8ec:	2308      	movs	r3, #8
 800a8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8f2:	e0ce      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a8f4:	2310      	movs	r3, #16
 800a8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8fa:	e0ca      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a8fc:	2320      	movs	r3, #32
 800a8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a902:	e0c6      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a904:	2340      	movs	r3, #64	; 0x40
 800a906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a90a:	e0c2      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a90c:	2380      	movs	r3, #128	; 0x80
 800a90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a912:	e0be      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a914:	40011400 	.word	0x40011400
 800a918:	58024400 	.word	0x58024400
 800a91c:	40007800 	.word	0x40007800
 800a920:	40007c00 	.word	0x40007c00
 800a924:	40011800 	.word	0x40011800
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4aad      	ldr	r2, [pc, #692]	; (800abe4 <UART_SetConfig+0x8fc>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d176      	bne.n	800aa20 <UART_SetConfig+0x738>
 800a932:	4bad      	ldr	r3, [pc, #692]	; (800abe8 <UART_SetConfig+0x900>)
 800a934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a93a:	2b28      	cmp	r3, #40	; 0x28
 800a93c:	d86c      	bhi.n	800aa18 <UART_SetConfig+0x730>
 800a93e:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <UART_SetConfig+0x65c>)
 800a940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a944:	0800a9e9 	.word	0x0800a9e9
 800a948:	0800aa19 	.word	0x0800aa19
 800a94c:	0800aa19 	.word	0x0800aa19
 800a950:	0800aa19 	.word	0x0800aa19
 800a954:	0800aa19 	.word	0x0800aa19
 800a958:	0800aa19 	.word	0x0800aa19
 800a95c:	0800aa19 	.word	0x0800aa19
 800a960:	0800aa19 	.word	0x0800aa19
 800a964:	0800a9f1 	.word	0x0800a9f1
 800a968:	0800aa19 	.word	0x0800aa19
 800a96c:	0800aa19 	.word	0x0800aa19
 800a970:	0800aa19 	.word	0x0800aa19
 800a974:	0800aa19 	.word	0x0800aa19
 800a978:	0800aa19 	.word	0x0800aa19
 800a97c:	0800aa19 	.word	0x0800aa19
 800a980:	0800aa19 	.word	0x0800aa19
 800a984:	0800a9f9 	.word	0x0800a9f9
 800a988:	0800aa19 	.word	0x0800aa19
 800a98c:	0800aa19 	.word	0x0800aa19
 800a990:	0800aa19 	.word	0x0800aa19
 800a994:	0800aa19 	.word	0x0800aa19
 800a998:	0800aa19 	.word	0x0800aa19
 800a99c:	0800aa19 	.word	0x0800aa19
 800a9a0:	0800aa19 	.word	0x0800aa19
 800a9a4:	0800aa01 	.word	0x0800aa01
 800a9a8:	0800aa19 	.word	0x0800aa19
 800a9ac:	0800aa19 	.word	0x0800aa19
 800a9b0:	0800aa19 	.word	0x0800aa19
 800a9b4:	0800aa19 	.word	0x0800aa19
 800a9b8:	0800aa19 	.word	0x0800aa19
 800a9bc:	0800aa19 	.word	0x0800aa19
 800a9c0:	0800aa19 	.word	0x0800aa19
 800a9c4:	0800aa09 	.word	0x0800aa09
 800a9c8:	0800aa19 	.word	0x0800aa19
 800a9cc:	0800aa19 	.word	0x0800aa19
 800a9d0:	0800aa19 	.word	0x0800aa19
 800a9d4:	0800aa19 	.word	0x0800aa19
 800a9d8:	0800aa19 	.word	0x0800aa19
 800a9dc:	0800aa19 	.word	0x0800aa19
 800a9e0:	0800aa19 	.word	0x0800aa19
 800a9e4:	0800aa11 	.word	0x0800aa11
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ee:	e050      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9f6:	e04c      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800a9f8:	2308      	movs	r3, #8
 800a9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9fe:	e048      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa00:	2310      	movs	r3, #16
 800aa02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa06:	e044      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa08:	2320      	movs	r3, #32
 800aa0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa0e:	e040      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa10:	2340      	movs	r3, #64	; 0x40
 800aa12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa16:	e03c      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa18:	2380      	movs	r3, #128	; 0x80
 800aa1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa1e:	e038      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a71      	ldr	r2, [pc, #452]	; (800abec <UART_SetConfig+0x904>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d130      	bne.n	800aa8c <UART_SetConfig+0x7a4>
 800aa2a:	4b6f      	ldr	r3, [pc, #444]	; (800abe8 <UART_SetConfig+0x900>)
 800aa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2e:	f003 0307 	and.w	r3, r3, #7
 800aa32:	2b05      	cmp	r3, #5
 800aa34:	d826      	bhi.n	800aa84 <UART_SetConfig+0x79c>
 800aa36:	a201      	add	r2, pc, #4	; (adr r2, 800aa3c <UART_SetConfig+0x754>)
 800aa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3c:	0800aa55 	.word	0x0800aa55
 800aa40:	0800aa5d 	.word	0x0800aa5d
 800aa44:	0800aa65 	.word	0x0800aa65
 800aa48:	0800aa6d 	.word	0x0800aa6d
 800aa4c:	0800aa75 	.word	0x0800aa75
 800aa50:	0800aa7d 	.word	0x0800aa7d
 800aa54:	2302      	movs	r3, #2
 800aa56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa5a:	e01a      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa5c:	2304      	movs	r3, #4
 800aa5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa62:	e016      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa64:	2308      	movs	r3, #8
 800aa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa6a:	e012      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa6c:	2310      	movs	r3, #16
 800aa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa72:	e00e      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa74:	2320      	movs	r3, #32
 800aa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa7a:	e00a      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa7c:	2340      	movs	r3, #64	; 0x40
 800aa7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa82:	e006      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa84:	2380      	movs	r3, #128	; 0x80
 800aa86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa8a:	e002      	b.n	800aa92 <UART_SetConfig+0x7aa>
 800aa8c:	2380      	movs	r3, #128	; 0x80
 800aa8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a55      	ldr	r2, [pc, #340]	; (800abec <UART_SetConfig+0x904>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	f040 80f0 	bne.w	800ac7e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aaa2:	2b20      	cmp	r3, #32
 800aaa4:	dc46      	bgt.n	800ab34 <UART_SetConfig+0x84c>
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	db75      	blt.n	800ab96 <UART_SetConfig+0x8ae>
 800aaaa:	3b02      	subs	r3, #2
 800aaac:	2b1e      	cmp	r3, #30
 800aaae:	d872      	bhi.n	800ab96 <UART_SetConfig+0x8ae>
 800aab0:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <UART_SetConfig+0x7d0>)
 800aab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab6:	bf00      	nop
 800aab8:	0800ab3b 	.word	0x0800ab3b
 800aabc:	0800ab97 	.word	0x0800ab97
 800aac0:	0800ab43 	.word	0x0800ab43
 800aac4:	0800ab97 	.word	0x0800ab97
 800aac8:	0800ab97 	.word	0x0800ab97
 800aacc:	0800ab97 	.word	0x0800ab97
 800aad0:	0800ab53 	.word	0x0800ab53
 800aad4:	0800ab97 	.word	0x0800ab97
 800aad8:	0800ab97 	.word	0x0800ab97
 800aadc:	0800ab97 	.word	0x0800ab97
 800aae0:	0800ab97 	.word	0x0800ab97
 800aae4:	0800ab97 	.word	0x0800ab97
 800aae8:	0800ab97 	.word	0x0800ab97
 800aaec:	0800ab97 	.word	0x0800ab97
 800aaf0:	0800ab63 	.word	0x0800ab63
 800aaf4:	0800ab97 	.word	0x0800ab97
 800aaf8:	0800ab97 	.word	0x0800ab97
 800aafc:	0800ab97 	.word	0x0800ab97
 800ab00:	0800ab97 	.word	0x0800ab97
 800ab04:	0800ab97 	.word	0x0800ab97
 800ab08:	0800ab97 	.word	0x0800ab97
 800ab0c:	0800ab97 	.word	0x0800ab97
 800ab10:	0800ab97 	.word	0x0800ab97
 800ab14:	0800ab97 	.word	0x0800ab97
 800ab18:	0800ab97 	.word	0x0800ab97
 800ab1c:	0800ab97 	.word	0x0800ab97
 800ab20:	0800ab97 	.word	0x0800ab97
 800ab24:	0800ab97 	.word	0x0800ab97
 800ab28:	0800ab97 	.word	0x0800ab97
 800ab2c:	0800ab97 	.word	0x0800ab97
 800ab30:	0800ab89 	.word	0x0800ab89
 800ab34:	2b40      	cmp	r3, #64	; 0x40
 800ab36:	d02a      	beq.n	800ab8e <UART_SetConfig+0x8a6>
 800ab38:	e02d      	b.n	800ab96 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab3a:	f7fc faad 	bl	8007098 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab40:	e02f      	b.n	800aba2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab42:	f107 0314 	add.w	r3, r7, #20
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fc fabc 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab50:	e027      	b.n	800aba2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab52:	f107 0308 	add.w	r3, r7, #8
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fc fc08 	bl	800736c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab60:	e01f      	b.n	800aba2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab62:	4b21      	ldr	r3, [pc, #132]	; (800abe8 <UART_SetConfig+0x900>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d009      	beq.n	800ab82 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	; (800abe8 <UART_SetConfig+0x900>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	08db      	lsrs	r3, r3, #3
 800ab74:	f003 0303 	and.w	r3, r3, #3
 800ab78:	4a1d      	ldr	r2, [pc, #116]	; (800abf0 <UART_SetConfig+0x908>)
 800ab7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab80:	e00f      	b.n	800aba2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800ab82:	4b1b      	ldr	r3, [pc, #108]	; (800abf0 <UART_SetConfig+0x908>)
 800ab84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab86:	e00c      	b.n	800aba2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab88:	4b1a      	ldr	r3, [pc, #104]	; (800abf4 <UART_SetConfig+0x90c>)
 800ab8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab8c:	e009      	b.n	800aba2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab94:	e005      	b.n	800aba2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aba0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 81e6 	beq.w	800af76 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abae:	4a12      	ldr	r2, [pc, #72]	; (800abf8 <UART_SetConfig+0x910>)
 800abb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abb4:	461a      	mov	r2, r3
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800abbc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	4613      	mov	r3, r2
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	4413      	add	r3, r2
 800abc8:	6a3a      	ldr	r2, [r7, #32]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d305      	bcc.n	800abda <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abd4:	6a3a      	ldr	r2, [r7, #32]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d910      	bls.n	800abfc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800abe0:	e1c9      	b.n	800af76 <UART_SetConfig+0xc8e>
 800abe2:	bf00      	nop
 800abe4:	40011c00 	.word	0x40011c00
 800abe8:	58024400 	.word	0x58024400
 800abec:	58000c00 	.word	0x58000c00
 800abf0:	03d09000 	.word	0x03d09000
 800abf4:	003d0900 	.word	0x003d0900
 800abf8:	0800b61c 	.word	0x0800b61c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	4618      	mov	r0, r3
 800ac00:	f04f 0100 	mov.w	r1, #0
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	4ac1      	ldr	r2, [pc, #772]	; (800af10 <UART_SetConfig+0xc28>)
 800ac0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	f04f 0300 	mov.w	r3, #0
 800ac14:	f7f5 fb6a 	bl	80002ec <__aeabi_uldivmod>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4619      	mov	r1, r3
 800ac20:	f04f 0200 	mov.w	r2, #0
 800ac24:	f04f 0300 	mov.w	r3, #0
 800ac28:	020b      	lsls	r3, r1, #8
 800ac2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac2e:	0202      	lsls	r2, r0, #8
 800ac30:	6879      	ldr	r1, [r7, #4]
 800ac32:	6849      	ldr	r1, [r1, #4]
 800ac34:	0849      	lsrs	r1, r1, #1
 800ac36:	4608      	mov	r0, r1
 800ac38:	f04f 0100 	mov.w	r1, #0
 800ac3c:	1814      	adds	r4, r2, r0
 800ac3e:	eb43 0501 	adc.w	r5, r3, r1
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	461a      	mov	r2, r3
 800ac48:	f04f 0300 	mov.w	r3, #0
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7f5 fb4c 	bl	80002ec <__aeabi_uldivmod>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4613      	mov	r3, r2
 800ac5a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac62:	d308      	bcc.n	800ac76 <UART_SetConfig+0x98e>
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac6a:	d204      	bcs.n	800ac76 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac72:	60da      	str	r2, [r3, #12]
 800ac74:	e17f      	b.n	800af76 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ac7c:	e17b      	b.n	800af76 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	69db      	ldr	r3, [r3, #28]
 800ac82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac86:	f040 80bd 	bne.w	800ae04 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800ac8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac8e:	2b20      	cmp	r3, #32
 800ac90:	dc48      	bgt.n	800ad24 <UART_SetConfig+0xa3c>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	db7b      	blt.n	800ad8e <UART_SetConfig+0xaa6>
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	d879      	bhi.n	800ad8e <UART_SetConfig+0xaa6>
 800ac9a:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <UART_SetConfig+0x9b8>)
 800ac9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca0:	0800ad2b 	.word	0x0800ad2b
 800aca4:	0800ad33 	.word	0x0800ad33
 800aca8:	0800ad8f 	.word	0x0800ad8f
 800acac:	0800ad8f 	.word	0x0800ad8f
 800acb0:	0800ad3b 	.word	0x0800ad3b
 800acb4:	0800ad8f 	.word	0x0800ad8f
 800acb8:	0800ad8f 	.word	0x0800ad8f
 800acbc:	0800ad8f 	.word	0x0800ad8f
 800acc0:	0800ad4b 	.word	0x0800ad4b
 800acc4:	0800ad8f 	.word	0x0800ad8f
 800acc8:	0800ad8f 	.word	0x0800ad8f
 800accc:	0800ad8f 	.word	0x0800ad8f
 800acd0:	0800ad8f 	.word	0x0800ad8f
 800acd4:	0800ad8f 	.word	0x0800ad8f
 800acd8:	0800ad8f 	.word	0x0800ad8f
 800acdc:	0800ad8f 	.word	0x0800ad8f
 800ace0:	0800ad5b 	.word	0x0800ad5b
 800ace4:	0800ad8f 	.word	0x0800ad8f
 800ace8:	0800ad8f 	.word	0x0800ad8f
 800acec:	0800ad8f 	.word	0x0800ad8f
 800acf0:	0800ad8f 	.word	0x0800ad8f
 800acf4:	0800ad8f 	.word	0x0800ad8f
 800acf8:	0800ad8f 	.word	0x0800ad8f
 800acfc:	0800ad8f 	.word	0x0800ad8f
 800ad00:	0800ad8f 	.word	0x0800ad8f
 800ad04:	0800ad8f 	.word	0x0800ad8f
 800ad08:	0800ad8f 	.word	0x0800ad8f
 800ad0c:	0800ad8f 	.word	0x0800ad8f
 800ad10:	0800ad8f 	.word	0x0800ad8f
 800ad14:	0800ad8f 	.word	0x0800ad8f
 800ad18:	0800ad8f 	.word	0x0800ad8f
 800ad1c:	0800ad8f 	.word	0x0800ad8f
 800ad20:	0800ad81 	.word	0x0800ad81
 800ad24:	2b40      	cmp	r3, #64	; 0x40
 800ad26:	d02e      	beq.n	800ad86 <UART_SetConfig+0xa9e>
 800ad28:	e031      	b.n	800ad8e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad2a:	f7fa fe53 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 800ad2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad30:	e033      	b.n	800ad9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad32:	f7fa fe65 	bl	8005a00 <HAL_RCC_GetPCLK2Freq>
 800ad36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad38:	e02f      	b.n	800ad9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad3a:	f107 0314 	add.w	r3, r7, #20
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fc f9c0 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad48:	e027      	b.n	800ad9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad4a:	f107 0308 	add.w	r3, r7, #8
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fc fb0c 	bl	800736c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad58:	e01f      	b.n	800ad9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad5a:	4b6e      	ldr	r3, [pc, #440]	; (800af14 <UART_SetConfig+0xc2c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0320 	and.w	r3, r3, #32
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d009      	beq.n	800ad7a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad66:	4b6b      	ldr	r3, [pc, #428]	; (800af14 <UART_SetConfig+0xc2c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	08db      	lsrs	r3, r3, #3
 800ad6c:	f003 0303 	and.w	r3, r3, #3
 800ad70:	4a69      	ldr	r2, [pc, #420]	; (800af18 <UART_SetConfig+0xc30>)
 800ad72:	fa22 f303 	lsr.w	r3, r2, r3
 800ad76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad78:	e00f      	b.n	800ad9a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800ad7a:	4b67      	ldr	r3, [pc, #412]	; (800af18 <UART_SetConfig+0xc30>)
 800ad7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad7e:	e00c      	b.n	800ad9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad80:	4b66      	ldr	r3, [pc, #408]	; (800af1c <UART_SetConfig+0xc34>)
 800ad82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad84:	e009      	b.n	800ad9a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad8c:	e005      	b.n	800ad9a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ad98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 80ea 	beq.w	800af76 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	4a5a      	ldr	r2, [pc, #360]	; (800af10 <UART_SetConfig+0xc28>)
 800ada8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adac:	461a      	mov	r2, r3
 800adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800adb4:	005a      	lsls	r2, r3, #1
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	085b      	lsrs	r3, r3, #1
 800adbc:	441a      	add	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	2b0f      	cmp	r3, #15
 800adcc:	d916      	bls.n	800adfc <UART_SetConfig+0xb14>
 800adce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800add4:	d212      	bcs.n	800adfc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add8:	b29b      	uxth	r3, r3
 800adda:	f023 030f 	bic.w	r3, r3, #15
 800adde:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	085b      	lsrs	r3, r3, #1
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	f003 0307 	and.w	r3, r3, #7
 800adea:	b29a      	uxth	r2, r3
 800adec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800adee:	4313      	orrs	r3, r2
 800adf0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800adf8:	60da      	str	r2, [r3, #12]
 800adfa:	e0bc      	b.n	800af76 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ae02:	e0b8      	b.n	800af76 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae08:	2b20      	cmp	r3, #32
 800ae0a:	dc4b      	bgt.n	800aea4 <UART_SetConfig+0xbbc>
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f2c0 8087 	blt.w	800af20 <UART_SetConfig+0xc38>
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	f200 8084 	bhi.w	800af20 <UART_SetConfig+0xc38>
 800ae18:	a201      	add	r2, pc, #4	; (adr r2, 800ae20 <UART_SetConfig+0xb38>)
 800ae1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1e:	bf00      	nop
 800ae20:	0800aeab 	.word	0x0800aeab
 800ae24:	0800aeb3 	.word	0x0800aeb3
 800ae28:	0800af21 	.word	0x0800af21
 800ae2c:	0800af21 	.word	0x0800af21
 800ae30:	0800aebb 	.word	0x0800aebb
 800ae34:	0800af21 	.word	0x0800af21
 800ae38:	0800af21 	.word	0x0800af21
 800ae3c:	0800af21 	.word	0x0800af21
 800ae40:	0800aecb 	.word	0x0800aecb
 800ae44:	0800af21 	.word	0x0800af21
 800ae48:	0800af21 	.word	0x0800af21
 800ae4c:	0800af21 	.word	0x0800af21
 800ae50:	0800af21 	.word	0x0800af21
 800ae54:	0800af21 	.word	0x0800af21
 800ae58:	0800af21 	.word	0x0800af21
 800ae5c:	0800af21 	.word	0x0800af21
 800ae60:	0800aedb 	.word	0x0800aedb
 800ae64:	0800af21 	.word	0x0800af21
 800ae68:	0800af21 	.word	0x0800af21
 800ae6c:	0800af21 	.word	0x0800af21
 800ae70:	0800af21 	.word	0x0800af21
 800ae74:	0800af21 	.word	0x0800af21
 800ae78:	0800af21 	.word	0x0800af21
 800ae7c:	0800af21 	.word	0x0800af21
 800ae80:	0800af21 	.word	0x0800af21
 800ae84:	0800af21 	.word	0x0800af21
 800ae88:	0800af21 	.word	0x0800af21
 800ae8c:	0800af21 	.word	0x0800af21
 800ae90:	0800af21 	.word	0x0800af21
 800ae94:	0800af21 	.word	0x0800af21
 800ae98:	0800af21 	.word	0x0800af21
 800ae9c:	0800af21 	.word	0x0800af21
 800aea0:	0800af01 	.word	0x0800af01
 800aea4:	2b40      	cmp	r3, #64	; 0x40
 800aea6:	d02e      	beq.n	800af06 <UART_SetConfig+0xc1e>
 800aea8:	e03a      	b.n	800af20 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeaa:	f7fa fd93 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 800aeae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aeb0:	e03c      	b.n	800af2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aeb2:	f7fa fda5 	bl	8005a00 <HAL_RCC_GetPCLK2Freq>
 800aeb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aeb8:	e038      	b.n	800af2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeba:	f107 0314 	add.w	r3, r7, #20
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fc f900 	bl	80070c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aec8:	e030      	b.n	800af2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fc fa4c 	bl	800736c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aed8:	e028      	b.n	800af2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeda:	4b0e      	ldr	r3, [pc, #56]	; (800af14 <UART_SetConfig+0xc2c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 0320 	and.w	r3, r3, #32
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d009      	beq.n	800aefa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aee6:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <UART_SetConfig+0xc2c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	08db      	lsrs	r3, r3, #3
 800aeec:	f003 0303 	and.w	r3, r3, #3
 800aef0:	4a09      	ldr	r2, [pc, #36]	; (800af18 <UART_SetConfig+0xc30>)
 800aef2:	fa22 f303 	lsr.w	r3, r2, r3
 800aef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aef8:	e018      	b.n	800af2c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800aefa:	4b07      	ldr	r3, [pc, #28]	; (800af18 <UART_SetConfig+0xc30>)
 800aefc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aefe:	e015      	b.n	800af2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af00:	4b06      	ldr	r3, [pc, #24]	; (800af1c <UART_SetConfig+0xc34>)
 800af02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af04:	e012      	b.n	800af2c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af0c:	e00e      	b.n	800af2c <UART_SetConfig+0xc44>
 800af0e:	bf00      	nop
 800af10:	0800b61c 	.word	0x0800b61c
 800af14:	58024400 	.word	0x58024400
 800af18:	03d09000 	.word	0x03d09000
 800af1c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800af2a:	bf00      	nop
    }

    if (pclk != 0U)
 800af2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d021      	beq.n	800af76 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	4a1a      	ldr	r2, [pc, #104]	; (800afa0 <UART_SetConfig+0xcb8>)
 800af38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af3c:	461a      	mov	r2, r3
 800af3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af40:	fbb3 f2f2 	udiv	r2, r3, r2
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	085b      	lsrs	r3, r3, #1
 800af4a:	441a      	add	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	fbb2 f3f3 	udiv	r3, r2, r3
 800af54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	2b0f      	cmp	r3, #15
 800af5a:	d909      	bls.n	800af70 <UART_SetConfig+0xc88>
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af62:	d205      	bcs.n	800af70 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	b29a      	uxth	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	60da      	str	r2, [r3, #12]
 800af6e:	e002      	b.n	800af76 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2201      	movs	r2, #1
 800af7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800af92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800af96:	4618      	mov	r0, r3
 800af98:	3738      	adds	r7, #56	; 0x38
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bdb0      	pop	{r4, r5, r7, pc}
 800af9e:	bf00      	nop
 800afa0:	0800b61c 	.word	0x0800b61c

0800afa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	f003 0302 	and.w	r3, r3, #2
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	430a      	orrs	r2, r1
 800afee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	430a      	orrs	r2, r1
 800b010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b016:	f003 0308 	and.w	r3, r3, #8
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b038:	f003 0310 	and.w	r3, r3, #16
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00a      	beq.n	800b056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	430a      	orrs	r2, r1
 800b054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05a:	f003 0320 	and.w	r3, r3, #32
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00a      	beq.n	800b078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	430a      	orrs	r2, r1
 800b076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	d01a      	beq.n	800b0ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b09e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0a2:	d10a      	bne.n	800b0ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	605a      	str	r2, [r3, #4]
  }
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af02      	add	r7, sp, #8
 800b0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0f8:	f7f7 f964 	bl	80023c4 <HAL_GetTick>
 800b0fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0308 	and.w	r3, r3, #8
 800b108:	2b08      	cmp	r3, #8
 800b10a:	d10e      	bne.n	800b12a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b10c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f82f 	bl	800b17e <UART_WaitOnFlagUntilTimeout>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e025      	b.n	800b176 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0304 	and.w	r3, r3, #4
 800b134:	2b04      	cmp	r3, #4
 800b136:	d10e      	bne.n	800b156 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f819 	bl	800b17e <UART_WaitOnFlagUntilTimeout>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e00f      	b.n	800b176 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2220      	movs	r2, #32
 800b15a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2220      	movs	r2, #32
 800b162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b09c      	sub	sp, #112	; 0x70
 800b182:	af00      	add	r7, sp, #0
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	603b      	str	r3, [r7, #0]
 800b18a:	4613      	mov	r3, r2
 800b18c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b18e:	e0a9      	b.n	800b2e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b196:	f000 80a5 	beq.w	800b2e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b19a:	f7f7 f913 	bl	80023c4 <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d302      	bcc.n	800b1b0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b1aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d140      	bne.n	800b232 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1b8:	e853 3f00 	ldrex	r3, [r3]
 800b1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1c4:	667b      	str	r3, [r7, #100]	; 0x64
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b1d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b1dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e6      	bne.n	800b1b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3308      	adds	r3, #8
 800b1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	f023 0301 	bic.w	r3, r3, #1
 800b1f8:	663b      	str	r3, [r7, #96]	; 0x60
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3308      	adds	r3, #8
 800b200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b202:	64ba      	str	r2, [r7, #72]	; 0x48
 800b204:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1e5      	bne.n	800b1e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2220      	movs	r2, #32
 800b21a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2220      	movs	r2, #32
 800b222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b22e:	2303      	movs	r3, #3
 800b230:	e069      	b.n	800b306 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d051      	beq.n	800b2e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	69db      	ldr	r3, [r3, #28]
 800b246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b24a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b24e:	d149      	bne.n	800b2e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b258:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b262:	e853 3f00 	ldrex	r3, [r3]
 800b266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b26e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b278:	637b      	str	r3, [r7, #52]	; 0x34
 800b27a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b27e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b280:	e841 2300 	strex	r3, r2, [r1]
 800b284:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1e6      	bne.n	800b25a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3308      	adds	r3, #8
 800b292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	e853 3f00 	ldrex	r3, [r3]
 800b29a:	613b      	str	r3, [r7, #16]
   return(result);
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f023 0301 	bic.w	r3, r3, #1
 800b2a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	3308      	adds	r3, #8
 800b2aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2ac:	623a      	str	r2, [r7, #32]
 800b2ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b0:	69f9      	ldr	r1, [r7, #28]
 800b2b2:	6a3a      	ldr	r2, [r7, #32]
 800b2b4:	e841 2300 	strex	r3, r2, [r1]
 800b2b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1e5      	bne.n	800b28c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2220      	movs	r2, #32
 800b2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e010      	b.n	800b306 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	69da      	ldr	r2, [r3, #28]
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	bf0c      	ite	eq
 800b2f4:	2301      	moveq	r3, #1
 800b2f6:	2300      	movne	r3, #0
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	f43f af46 	beq.w	800b190 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3770      	adds	r7, #112	; 0x70
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b30e:	b480      	push	{r7}
 800b310:	b085      	sub	sp, #20
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d101      	bne.n	800b324 <HAL_UARTEx_DisableFifoMode+0x16>
 800b320:	2302      	movs	r3, #2
 800b322:	e027      	b.n	800b374 <HAL_UARTEx_DisableFifoMode+0x66>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2224      	movs	r2, #36	; 0x24
 800b330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f022 0201 	bic.w	r2, r2, #1
 800b34a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b352:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2220      	movs	r2, #32
 800b366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b390:	2b01      	cmp	r3, #1
 800b392:	d101      	bne.n	800b398 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b394:	2302      	movs	r3, #2
 800b396:	e02d      	b.n	800b3f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2224      	movs	r2, #36	; 0x24
 800b3a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f022 0201 	bic.w	r2, r2, #1
 800b3be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f84f 	bl	800b478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2220      	movs	r2, #32
 800b3e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d101      	bne.n	800b414 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b410:	2302      	movs	r3, #2
 800b412:	e02d      	b.n	800b470 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2224      	movs	r2, #36	; 0x24
 800b420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f022 0201 	bic.w	r2, r2, #1
 800b43a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	430a      	orrs	r2, r1
 800b44e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f811 	bl	800b478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2220      	movs	r2, #32
 800b462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b484:	2b00      	cmp	r3, #0
 800b486:	d108      	bne.n	800b49a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b498:	e031      	b.n	800b4fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b49a:	2310      	movs	r3, #16
 800b49c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b49e:	2310      	movs	r3, #16
 800b4a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	0e5b      	lsrs	r3, r3, #25
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	f003 0307 	and.w	r3, r3, #7
 800b4b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	0f5b      	lsrs	r3, r3, #29
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	f003 0307 	and.w	r3, r3, #7
 800b4c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4c2:	7bbb      	ldrb	r3, [r7, #14]
 800b4c4:	7b3a      	ldrb	r2, [r7, #12]
 800b4c6:	4911      	ldr	r1, [pc, #68]	; (800b50c <UARTEx_SetNbDataToProcess+0x94>)
 800b4c8:	5c8a      	ldrb	r2, [r1, r2]
 800b4ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4ce:	7b3a      	ldrb	r2, [r7, #12]
 800b4d0:	490f      	ldr	r1, [pc, #60]	; (800b510 <UARTEx_SetNbDataToProcess+0x98>)
 800b4d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
 800b4e2:	7b7a      	ldrb	r2, [r7, #13]
 800b4e4:	4909      	ldr	r1, [pc, #36]	; (800b50c <UARTEx_SetNbDataToProcess+0x94>)
 800b4e6:	5c8a      	ldrb	r2, [r1, r2]
 800b4e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b4ec:	7b7a      	ldrb	r2, [r7, #13]
 800b4ee:	4908      	ldr	r1, [pc, #32]	; (800b510 <UARTEx_SetNbDataToProcess+0x98>)
 800b4f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b4fe:	bf00      	nop
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	0800b634 	.word	0x0800b634
 800b510:	0800b63c 	.word	0x0800b63c

0800b514 <__libc_init_array>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	4d0d      	ldr	r5, [pc, #52]	; (800b54c <__libc_init_array+0x38>)
 800b518:	4c0d      	ldr	r4, [pc, #52]	; (800b550 <__libc_init_array+0x3c>)
 800b51a:	1b64      	subs	r4, r4, r5
 800b51c:	10a4      	asrs	r4, r4, #2
 800b51e:	2600      	movs	r6, #0
 800b520:	42a6      	cmp	r6, r4
 800b522:	d109      	bne.n	800b538 <__libc_init_array+0x24>
 800b524:	4d0b      	ldr	r5, [pc, #44]	; (800b554 <__libc_init_array+0x40>)
 800b526:	4c0c      	ldr	r4, [pc, #48]	; (800b558 <__libc_init_array+0x44>)
 800b528:	f000 f82e 	bl	800b588 <_init>
 800b52c:	1b64      	subs	r4, r4, r5
 800b52e:	10a4      	asrs	r4, r4, #2
 800b530:	2600      	movs	r6, #0
 800b532:	42a6      	cmp	r6, r4
 800b534:	d105      	bne.n	800b542 <__libc_init_array+0x2e>
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	f855 3b04 	ldr.w	r3, [r5], #4
 800b53c:	4798      	blx	r3
 800b53e:	3601      	adds	r6, #1
 800b540:	e7ee      	b.n	800b520 <__libc_init_array+0xc>
 800b542:	f855 3b04 	ldr.w	r3, [r5], #4
 800b546:	4798      	blx	r3
 800b548:	3601      	adds	r6, #1
 800b54a:	e7f2      	b.n	800b532 <__libc_init_array+0x1e>
 800b54c:	0800b64c 	.word	0x0800b64c
 800b550:	0800b64c 	.word	0x0800b64c
 800b554:	0800b64c 	.word	0x0800b64c
 800b558:	0800b650 	.word	0x0800b650

0800b55c <memcpy>:
 800b55c:	440a      	add	r2, r1
 800b55e:	4291      	cmp	r1, r2
 800b560:	f100 33ff 	add.w	r3, r0, #4294967295
 800b564:	d100      	bne.n	800b568 <memcpy+0xc>
 800b566:	4770      	bx	lr
 800b568:	b510      	push	{r4, lr}
 800b56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b56e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b572:	4291      	cmp	r1, r2
 800b574:	d1f9      	bne.n	800b56a <memcpy+0xe>
 800b576:	bd10      	pop	{r4, pc}

0800b578 <memset>:
 800b578:	4402      	add	r2, r0
 800b57a:	4603      	mov	r3, r0
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d100      	bne.n	800b582 <memset+0xa>
 800b580:	4770      	bx	lr
 800b582:	f803 1b01 	strb.w	r1, [r3], #1
 800b586:	e7f9      	b.n	800b57c <memset+0x4>

0800b588 <_init>:
 800b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58a:	bf00      	nop
 800b58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b58e:	bc08      	pop	{r3}
 800b590:	469e      	mov	lr, r3
 800b592:	4770      	bx	lr

0800b594 <_fini>:
 800b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b596:	bf00      	nop
 800b598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b59a:	bc08      	pop	{r3}
 800b59c:	469e      	mov	lr, r3
 800b59e:	4770      	bx	lr
